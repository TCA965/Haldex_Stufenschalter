
C:\Users\Thaddaeus\AppData\Local\Temp\arduino\sketches\0C29A4A116893CE3714159F044EB4C67/Haldex.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
../../../../crt1/gcrt1.S:65
       0:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_3>
../../../../crt1/gcrt1.S:70
      10:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 d5 34 	jmp	0x69aa	; 0x69aa <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 fc 31 	jmp	0x63f8	; 0x63f8 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 e4 2c 	jmp	0x59c8	; 0x59c8 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 91 2f 	jmp	0x5f22	; 0x5f22 <__vector_40>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__trampolines_end>:
__trampolines_end():
     10e:	55 6e       	ori	r21, 0xE5	; 229
     110:	74 65       	ori	r23, 0x54	; 84
     112:	72 62       	ori	r23, 0x22	; 34
     114:	72 65       	ori	r23, 0x52	; 82
     116:	63 68       	ori	r22, 0x83	; 131
     118:	75 6e       	ori	r23, 0xE5	; 229
     11a:	67 20       	and	r6, r7
     11c:	53 74       	andi	r21, 0x43	; 67
     11e:	65 70       	andi	r22, 0x05	; 5
     120:	70 65       	ori	r23, 0x50	; 80
     122:	72 00       	.word	0x0072	; ????

00000124 <LeseTMCStatus(bool)::__c>:
     124:	46 65 68 6c 65 72 21 00                             Fehler!.

0000012c <LeseTMCStatus(bool)::__c>:
     12c:	4b 75 72 7a 73 63 68 6c 75 73 73 20 53 74 65 70     Kurzschluss Step
     13c:	70 65 72 00                                         per.

00000140 <LeseTMCStatus(bool)::__c>:
     140:	46 65 68 6c 65 72 21 00                             Fehler!.

00000148 <LeseTMCStatus(bool)::__c>:
     148:	4b 75 72 7a 73 63 68 6c 75 73 73 20 6e 61 63 68     Kurzschluss nach
     158:	20 4d 61 73 73 65 00                                 Masse.

0000015f <LeseTMCStatus(bool)::__c>:
     15f:	46 65 68 6c 65 72 21 00                             Fehler!.

00000167 <LeseTMCStatus(bool)::__c>:
     167:	4d 6f 74 6f 72 74 72 65 69 62 65 72 00              Motortreiber.

00000174 <LeseTMCStatus(bool)::__c>:
     174:	c3 9c 62 65 72 74 65 6d 70 65 72 61 74 75 72 00     ..bertemperatur.

00000184 <LeseTMCStatus(bool)::__c>:
     184:	46 65 68 6c 65 72 21 00                             Fehler!.

0000018c <SchreibeDisplay()::__c>:
     18c:	43 00                                               C.

0000018e <SchreibeDisplay()::__c>:
     18e:	20 00                                                .

00000190 <SchreibeDisplay()::__c>:
     190:	6c 74 65 6d 70 65 72 61 74 75 72 20 00              ltemperatur .

0000019d <SchreibeDisplay()::__c>:
     19d:	62 65 72 74 65 6d 70 65 72 61 74 75 72 00           bertemperatur.

000001ab <SchreibeDisplay()::__c>:
     1ab:	48 61 75 70 74 73 63 68 61 6c 74 65 72 20 61 75     Hauptschalter au
     1bb:	73 00                                               s.

000001bd <SchreibeDisplay()::__c>:
     1bd:	74 69 67 74 00                                      tigt.

000001c2 <SchreibeDisplay()::__c>:
     1c2:	42 72 65 6d 73 65 20 62 65 74 00                    Bremse bet.

000001cd <SchreibeDisplay()::__c>:
     1cd:	74 69 67 74 00                                      tigt.

000001d2 <SchreibeDisplay()::__c>:
     1d2:	48 61 6e 64 62 72 65 6d 73 65 20 62 65 74 00        Handbremse bet.

000001e1 <SchreibeDisplay()::__c>:
     1e1:	20 25 00                                             %.

000001e4 <SchreibeDisplay()::__c>:
     1e4:	48 41 4c 44 45 58 00                                HALDEX.

000001eb <loop::__c>:
     1eb:	56 6f 72 6c 61 64 65 70 75 6d 70 65 00              Vorladepumpe.

000001f8 <loop::__c>:
     1f8:	46 65 68 6c 65 72 21 00                             Fehler!.

00000200 <setup::__c>:
     200:	61 6c 6c 72 61 64 62 75 73 2e 63 6f 6d 00           allradbus.com.

0000020e <setup::__c>:
     20e:	54 43 41 39 36 35 00                                TCA965.

00000215 <setup::__c>:
     215:	48 61 6c 64 65 78 20 43 6f 6e 74 72 6f 6c 6c 65     Haldex Controlle
     225:	72 00                                               r.

00000227 <u8g2_font_helvR08_tf>:
     227:	bf 00 03 02 04 04 02 04 05 0b 0d ff fe 08 fe 08     ................
     237:	fe 01 53 02 bd 08 67 20 05 00 e6 04 21 06 81 e3     ..S...g ....!...
     247:	c4 25 22 07 23 3b 45 a2 04 23 10 76 a2 55 92 25     .%".#;E..#.v.U.%
     257:	d1 20 25 c9 20 25 59 12 01 24 10 a5 9e 55 b6 54     . %. %Y..$...U.T
     267:	94 6c 4b a2 44 a9 6c 11 00 25 10 88 62 8e d4 92     .lK.D.l..%..b...
     277:	29 79 9c 27 5a 12 95 14 00 26 0d 86 23 8e 16 b5     )y.'Z....&..#...
     287:	69 51 a2 25 91 29 27 06 21 ba 84 00 28 0b a3 1a     iQ.%.)'.!...(...
     297:	55 12 25 51 5b 94 05 29 0c a3 1b 45 16 65 51 4b     U.%Q[..)...E.eQK
     2a7:	94 44 00 2a 07 33 36 45 d2 01 2b 0a 55 a6 55 18     .D.*.36E..+.U.U.
     2b7:	0d 52 18 01 2c 07 32 da 4c a2 00 2d 06 13 2e c5     .R..,.2.L..-....
     2c7:	00 2e 06 11 e3 44 00 2f 0a 83 e2 54 25 6a 89 22     .....D./...T%j."
     2d7:	00 30 0a 85 a2 cd 92 f9 96 2c 00 31 07 82 a3 cd     .0.......,.1....
     2e7:	d2 07 32 0c 85 a2 cd 92 85 25 29 0b 07 01 33 0c     ..2......%)...3.
     2f7:	85 a2 cd 92 85 91 1a 6a c9 02 34 0e 85 a2 5d 26     .......j..4...]&
     307:	25 51 52 4a 06 2d 4c 00 35 0c 85 a2 cd 90 84 e1     %QRJ.-L.5.......
     317:	1a 6a c9 02 36 0c 85 a2 cd 92 89 43 92 d9 92 05     .j..6......C....
     327:	37 0b 85 a2 c5 20 66 c5 2c ac 01 38 0c 85 a2 cd     7.... f.,..8....
     337:	92 69 c9 92 d9 92 05 39 0c 85 a2 cd 92 d9 92 21     .i.....9.......!
     347:	d4 92 05 3a 06 61 e3 44 18 3b 09 82 da 4c 0e 25     ...:.a.D.;...L.%
     357:	0a 00 3c 07 53 a7 55 52 2b 3d 08 34 6a c5 10 0e     ..<.S.UR+=.4j...
     367:	01 3e 08 53 a7 45 56 29 01 3f 0b 84 a3 8d 12 65     .>.S.EV).?.....e
     377:	51 2d 8f 00 40 16 9a de de 20 a6 51 a4 24 52 49     Q-..@.... .Q.$RI
     387:	c9 22 25 aa 44 8a 96 63 83 06 41 0e 87 e2 5d 9c     ."%.D..c..A...].
     397:	26 61 92 95 06 25 55 03 42 0d 85 e3 c5 90 64 da     &a...%U.B.....d.
     3a7:	a0 64 b6 41 01 43 0c 86 23 ce 90 84 6a c7 64 48     .d.A.C..#...j.dH
     3b7:	00 44 0d 86 23 c6 10 65 49 e8 2d 19 22 00 45 0a     .D..#..eI.-.".E.
     3c7:	85 e3 c5 31 1c c6 e2 20 46 0a 85 a3 c5 31 1c 92     ...1... F....1..
     3d7:	b0 11 47 0c 86 23 ce 90 84 6a 6d 14 93 41 48 0a     ..G..#...jm..AH.
     3e7:	86 23 46 68 1c 06 d1 31 49 06 81 e3 c4 41 4a 09     .#Fh...1I....AJ.
     3f7:	84 62 5d 6f 52 a2 00 4b 0d 85 e3 45 26 25 a5 a9     .b]oR..K...E&%..
     407:	12 25 99 16 4c 08 84 a3 45 d6 b7 21 4d 10 87 63     .%..L...E..!M..c
     417:	46 ba 0d d9 52 51 2a 52 24 45 52 01 4e 0f 86 23     F...RQ*R$ER.N..#
     427:	86 b6 29 91 12 49 89 94 68 9b 00 4f 0b 86 23 ce     ..)..I..h..O..#.
     437:	90 84 3e 26 43 02 50 0c 85 e3 c5 90 64 da a0 84     ..>&C.P.....d...
     447:	8d 00 51 12 97 1f ce 10 85 49 98 84 49 98 44 49     ..Q......I..I.DI
     457:	4d 1a f4 00 52 0c 85 e3 c5 90 64 da a0 64 6e 01     M...R.....d..dn.
     467:	53 0c 85 e3 cd 92 a9 ab a6 25 0b 00 54 09 85 62     S........%..T..b
     477:	c5 20 85 7d 02 55 0a 86 23 46 e8 c7 64 48 00 56     . .}.U..#F..dH.V
     487:	0f 87 e2 45 aa 26 59 94 45 59 25 4c d2 0c 57 10     ...E.&Y.EY%L..W.
     497:	89 62 46 96 69 95 a8 2f 6d c5 2c cc 22 00 58 0d     .bF.i../m.,.".X.
     4a7:	85 e3 45 a6 25 b5 4a 94 d4 b4 00 59 0e 87 e2 45     ..E.%.J....Y...E
     4b7:	9a 64 51 56 09 93 34 ae 01 5a 0b 85 e3 c5 20 66     .dQV..4..Z.... f
     4c7:	c5 ac 38 08 5b 08 a2 db c4 d2 2f 02 5c 0a 83 e2     ..8.[...../.\...
     4d7:	44 94 45 6d 51 00 5d 08 a2 da 84 d2 2f 03 5e 0a     D.EmQ.]...../.^.
     4e7:	55 ae 55 98 25 51 52 0b 5f 06 16 9a c5 01 60 06     U.U.%QR._.....`.
     4f7:	22 fe 44 14 61 0c 65 62 c5 1a 2d 51 12 45 4a 00     ".D.a.eb..-Q.EJ.
     507:	62 0c 85 a2 45 58 31 69 da a4 28 00 63 0a 64 62     b...EX1i..(.c.db
     517:	8d 12 69 a5 44 01 64 0a 85 a2 65 c5 b4 99 14 25     ..i.D.d...e....%
     527:	65 0b 64 62 8d 12 0d 5b 94 28 00 66 0a 84 22 95     e.db...[.(.f..".
     537:	12 4d 59 27 00 67 0c 85 9a 8d 69 33 29 4a 98 2c     .MY'.g....i3)J.,
     547:	00 68 0a 85 a2 45 58 31 69 6e 01 69 07 81 a2 44     .h...EX1in.i...D
     557:	32 0c 6a 09 a2 99 4c 96 f4 a2 00 6b 0c 84 62 45     2.j...L....k..bE
     567:	56 52 12 29 29 49 01 6c 06 81 a2 c4 41 6d 0e 67     VR.))I.l....Am.g
     577:	22 c6 a2 44 91 14 49 91 14 49 05 6e 09 65 a2 45     "..D..I..I.n.e.E
     587:	62 d2 dc 02 6f 0a 65 a2 cd 92 b9 25 0b 00 70 0c     b...o.e....%..p.
     597:	85 9a 45 62 d2 b4 49 51 c2 10 71 0a 85 9a 8d 69     ..Eb..IQ..q....i
     5a7:	33 29 4a 58 72 09 63 22 45 b2 44 4d 00 73 0b 64     3)JXr.c"E.DM.s.d
     5b7:	62 8d 12 25 a2 94 28 00 74 0a 83 22 4d 94 2c 51     b..%..(.t.."M.,Q
     5c7:	93 00 75 08 64 62 45 e4 29 19 76 0c 65 a2 45 a6     ..u.dbE.).v.e.E.
     5d7:	25 a5 24 0b 23 00 77 0e 67 22 46 14 49 95 a6 a4     %.$.#.w.g"F.I...
     5e7:	96 84 49 04 78 0a 65 a2 45 96 d4 2a 35 2d 79 0e     ..I.x.e.E..*5-y.
     5f7:	85 59 4d 94 44 49 29 c9 b4 30 d2 00 7a 0a 64 62     .YM.DI)..0..z.db
     607:	c5 90 45 6d 43 00 7b 0a a3 da 54 12 55 b2 a8 2d     ..EmC.{...T.U..-
     617:	7c 07 a1 db c4 43 00 7d 0b a3 da 44 16 d5 92 a8     |....C.}...D....
     627:	25 02 7e 07 26 ee 8d 64 01 a0 05 00 e6 04 a1 07     %.~.&..d........
     637:	81 db 44 32 0c a2 0e 85 9f 5d b4 54 94 28 89 92     ..D2.....].T.(..
     647:	ca 94 01 a3 0c 85 a2 95 54 c9 b6 b0 a4 28 00 a4     ........T....(..
     657:	0c 64 66 45 94 28 91 94 28 51 00 a5 0d 85 a2 45     .dfE.(..(Q.....E
     667:	66 4b 2a 83 14 0d 52 04 a6 08 a1 db c4 10 0d 01     fK*...R.........
     677:	a7 0f a5 9a cd 92 8d 4b 34 44 c9 b8 25 0b 00 a8     .......K4D..%...
     687:	06 13 fe 44 12 a9 0e 77 63 d6 56 89 14 25 93 94     ...D...wc.V..%..
     697:	5a 36 01 aa 08 53 2e c5 a4 64 03 ab 0a 55 a2 55     Z6...S...d...U.U
     6a7:	d2 5b 92 25 01 ac 07 35 eb c5 20 16 ad 06 13 2e     .[.%...5.. .....
     6b7:	c5 00 ae 0d 77 63 d6 56 49 16 93 d2 2d 9b 00 af     ....wc.VI...-...
     6c7:	06 13 fe c4 00 b0 09 44 32 8d 12 49 89 02 b1 0b     .......D2..I....
     6d7:	75 a2 55 18 0d 52 98 0f 02 b2 07 43 f2 cc 52 19     u.U..R.....C..R.
     6e7:	b3 08 43 f2 c4 92 2d 00 b4 06 22 fe 8c 02 b5 0a     ..C...-...".....
     6f7:	84 5a 45 e4 69 d8 32 00 b6 15 a6 9a cd 30 28 c9     .ZE.i.2......0(.
     707:	92 2c 91 92 25 59 92 25 59 92 25 09 00 b7 06 12     .,..%Y.%Y.%.....
     717:	ee 84 00 b8 06 22 da cc 00 b9 06 42 f2 cc 52 ba     .....".....B..R.
     727:	09 53 2e c5 90 0c d9 00 bb 0b 55 a2 45 92 25 59     .S........U.E.%Y
     737:	d2 13 00 bc 12 89 62 4e 96 69 61 94 46 79 16 46     ......bN.ia.Fy.F
     747:	5a 34 44 61 02 bd 10 88 62 4e 16 69 a5 30 8a 23     Z4Da....bN.i.0.#
     757:	2d 29 65 a5 01 be 12 89 62 c6 9e a5 51 26 e5 48     -)e.....b...Q&.H
     767:	14 46 62 32 44 61 02 bf 0b 84 9b 55 9e 45 b5 28     .Fb2Da.....U.E.(
     777:	51 00 c0 10 b7 e2 55 9e c3 d5 24 4c b2 d2 a0 a4     Q.....U...$L....
     787:	6a 00 c1 10 b7 e2 65 9a c3 d5 24 4c b2 d2 a0 a4     j.....e...$L....
     797:	6a 00 c2 11 b7 e2 5d 9a e4 68 9c 26 61 92 95 06     j.....]..h.&a...
     7a7:	25 55 03 c3 12 b7 e2 5d 92 25 39 1a a7 49 98 64     %U.....].%9..I.d
     7b7:	a5 41 49 d5 00 c4 10 a7 e2 55 92 a3 71 9a 84 49     .AI......U..q..I
     7c7:	56 1a 94 54 0d c5 10 b7 e2 5d 9a a4 71 35 09 93     V..T.....]..q5..
     7d7:	ac 34 28 a9 1a c6 12 89 a2 de b0 c9 49 9c 0c 4a     .4(.........I..J
     7e7:	94 0e 61 16 66 83 00 c7 0d a6 1b ce 90 84 6a c7     ..a.f.........j.
     7f7:	64 08 43 09 c8 0c b5 e3 4d 9a 0f 63 38 8c c5 41     d.C.....M..c8..A
     807:	c9 0c b5 e3 5d 7d 18 c3 61 2c 0e 02 ca 0d b5 e3     ....]}..a,......
     817:	55 96 c4 c3 18 0e 63 71 10 cb 0c a5 e3 4d 79 18     U.....cq.....My.
     827:	c3 61 2c 0e 02 cc 09 b2 e2 44 94 25 fd 00 cd 09     .a,......D.%....
     837:	b2 e3 8c 96 f4 0b 00 ce 09 b3 e2 4c 63 d4 2f 00     ...........Lc./.
     847:	cf 09 a3 e2 44 12 46 fd 02 d0 11 87 22 ce 90 95     ....D.F....."...
     857:	c2 41 4a c2 24 4c b2 68 88 00 d1 12 b6 23 56 12     .AJ.$L.h.....#V.
     867:	25 39 a2 6d 4a a4 44 52 22 25 da 26 d2 0e b6 23     %9.mJ.DR"%.&...#
     877:	56 9c 43 43 12 fa 98 0c 09 00 d3 0d b6 23 66 1d     V.CC.........#f.
     887:	1a 92 d0 c7 64 48 00 d4 0e b6 23 56 98 e4 d0 90     ....dH....#V....
     897:	84 3e 26 43 02 d5 0f b6 23 56 12 25 39 34 24 a1     .>&C....#V.%94$.
     8a7:	8f c9 90 00 d6 0e a6 23 4e 94 23 43 12 fa 98 0c     .......#N.#C....
     8b7:	09 00 d7 0a 55 a6 45 96 d4 2a b5 00 d8 12 a6 1f     ....U.E..*......
     8c7:	6e 32 24 d9 94 48 89 12 29 d1 96 0c 49 0a d9 0c     n2$..H..)...I...
     8d7:	b6 23 56 9c 23 a1 1f 93 21 01 da 0c b6 23 66 1d     .#V.#...!....#f.
     8e7:	09 fd 98 0c 09 00 db 0d b6 23 56 98 e4 48 e8 c7     .........#V..H..
     8f7:	64 48 00 dc 0b a6 23 4e 94 87 7e 4c 86 04 dd 10     dH....#N..~L....
     907:	b7 e2 65 9a 63 69 92 45 59 25 4c d2 b8 06 de 0d     ..e.ci.EY%L.....
     917:	85 e3 45 18 0e 49 a6 0d 4a 18 02 df 0b 84 62 8d     ..E..I..J.....b.
     927:	12 59 4a 2e 09 00 e0 0d 95 62 4d 9a af d1 12 25     .YJ......bM....%
     937:	51 a4 04 e1 0e 95 62 55 96 23 6b b4 44 49 14 29     Q.....bU.#k.DI.)
     947:	01 e2 0e 95 62 55 96 c4 6b b4 44 49 14 29 01 e3     ....bU..k.DI.)..
     957:	0d 95 62 4d f7 35 5a a2 24 8a 94 00 e4 0c 85 62     ..bM.5Z.$......b
     967:	4d 79 8d 96 28 89 22 25 e5 0f 95 62 55 96 64 d1     My..(."%...bU.d.
     977:	1a 2d 51 12 45 4a 00 e6 0e 67 22 c6 22 46 c9 30     .-Q.EJ...g"."F.0
     987:	44 59 54 b1 00 e7 0c 84 5a 8d 12 69 a5 44 8b 14     DYT.....Z..i.D..
     997:	00 e8 0c 94 62 4d 18 2b d1 b0 45 89 02 e9 0c 94     ....bM.+..E.....
     9a7:	62 55 5d 89 86 2d 4a 14 00 ea 0d 94 62 4d 94 c4     bU]..-J.....bM..
     9b7:	4a 34 6c 51 a2 00 eb 0c 84 62 45 12 2b d1 b0 45     J4lQ.....bE.+..E
     9c7:	89 02 ec 08 92 a1 44 94 25 3d ed 08 92 a2 8c 96     ......D.%=......
     9d7:	f4 02 ee 09 93 a1 4c 63 d4 0b 00 ef 09 83 a1 44     ......Lc.......D
     9e7:	12 46 bd 00 f0 0d 95 a2 4d 38 48 d1 a0 b9 25 0b     .F......M8H...%.
     9f7:	00 f1 0a 94 62 4d a2 a4 4b e4 29 f2 0c 95 a2 4d     ....bM..K.)....M
     a07:	9a 23 4b e6 96 2c 00 f3 0b 95 a2 5d 1d 59 32 b7     .#K..,.....].Y2.
     a17:	64 01 f4 0c 95 a2 55 96 e4 4b e6 96 2c 00 f5 0b     d.....U..K..,...
     a27:	95 a2 55 d2 be 64 6e c9 02 f6 0a 85 a2 4d 7d c9     ..U..dn......M}.
     a37:	dc 92 05 f7 09 55 a6 55 3e e8 11 00 f8 0d 67 a1     .....U.U>.....g.
     a47:	d5 52 92 92 92 54 4b 92 09 f9 0a 94 62 4d 98 46     .R...TK.....bM.F
     a57:	9e 92 01 fa 0a 94 62 5d 94 46 9e 92 01 fb 0a 94     ......b].F......
     a67:	62 4d 94 a4 91 a7 64 fc 0a 84 62 45 92 46 9e 92     bM....d...bE.F..
     a77:	01 fd 0f b5 59 65 96 47 49 94 94 92 4c 0b 23 0d     ....Ye.GI...L.#.
     a87:	fe 0d a5 9a 45 58 31 69 da a4 28 61 08 ff 0f a5     ....EX1i..(a....
     a97:	59 4d 3d 4a a2 a4 94 64 5a 18 69 00 00 00 00 04     YM=J...dZ.i.....
     aa7:	ff ff 00 00                                         ....

00000aab <u8g2_font_helvB14_tr>:
     aab:	5f 00 03 03 05 05 03 05 06 12 12 ff fc 0e fc 0e     _...............
     abb:	fc 02 25 04 ad 06 84 20 06 00 30 96 00 21 0a c3     ..%.... ..0..!..
     acb:	15 96 f8 50 11 1e 04 22 0a a5 34 9f 90 70 19 45     ...P..."..4..p.E
     adb:	00 23 1d ab 11 ae 94 88 25 62 89 ec 30 39 cc 24     .#......%b..09.$
     aeb:	62 89 58 22 3b 4c 0e 33 89 58 22 96 08 01 24 1d     b.X";L.3.X"...$.
     afb:	0a d2 a9 0d db 0e 91 51 44 32 0a 8e a2 65 73 35     .......QD2...es5
     b0b:	64 09 59 42 93 43 cc 1c 07 45 01 25 1e ad 15 c2     d.YB.C...E.%....
     b1b:	21 8a 6c 22 6d 22 51 d0 22 a5 c8 81 71 a0 84 2a     !.l"m"Q."...q..*
     b2b:	31 86 d4 44 da 4c 42 0a 00 26 1d cd 15 ba a3 43     1..D.LB..&.....C
     b3b:	cc a3 a9 50 3a 92 d7 41 33 99 49 34 32 09 69 d2     ...P:..A3.I42.i.
     b4b:	d9 ac 76 99 d5 06 27 08 a2 34 93 38 48 00 28 0f     ..v...'..4.8H.(.
     b5b:	46 96 9d 1b cd 64 33 d9 fe 28 1c 0a 17 29 12 46     F....d3..(...).F
     b6b:	92 9d 18 0e 85 43 e1 6c bf c9 66 b2 d1 0c 00 2a     .....C.l..f....*
     b7b:	0f c7 14 a7 8b 49 22 92 da 4c 22 8a 45 00 2b 0d     .....I"..L".E.+.
     b8b:	08 35 ae 13 ab 1d 0e 32 b1 1a 00 2c 0a c3 b4 95     .5.....2...,....
     b9b:	38 48 28 21 00 2d 07 65 90 9a 78 08 2e 07 63 14     8H(!.-.e..x...c.
     bab:	96 38 08 2f 10 c5 11 96 d3 34 92 29 8d 64 a2 91     .8./.....4.).d..
     bbb:	4c 0d 00 30 0f a9 11 aa 1b 9e 26 6b fe 36 59 3a     L..0......&k.6Y:
     bcb:	ce 00 31 0b a6 15 aa 1b 1d 0e b2 fd 03 32 12 a9     ..1..........2..
     bdb:	11 aa aa 5d 66 b6 f1 74 58 ab 51 97 0f 07 02 33     ...]f..tX.Q....3
     beb:	13 a9 11 aa aa 5d 46 93 99 78 48 2d 93 6d 26 ca     .....]F..xH-.m&.
     bfb:	ad 04 34 15 a9 11 aa 9d 12 6b 36 c9 68 32 12 4d     ..4......k6.h2.M
     c0b:	46 93 c3 81 3a 5e 01 35 15 a9 11 aa 38 44 0e 91     F...:^.5....8D..
     c1b:	f1 f8 74 88 8c c8 63 9b e9 50 32 01 36 14 a9 11     ..t...c..P2.6...
     c2b:	aa 32 1d 22 b3 f2 64 74 88 90 8c 8d a6 c9 ad 04     .2."..dt........
     c3b:	37 10 a9 11 aa 78 20 4f 97 a7 e3 e9 78 3a 5e 05     7....x O....x:^.
     c4b:	38 12 a9 11 aa aa 5d 66 6e 93 5b 6d b2 e6 36 b9     8.....]fn.[m..6.
     c5b:	95 00 39 14 a9 11 aa aa 5d 46 c6 46 13 e5 10 9a     ..9.....]F.F....
     c6b:	8c 6b 93 43 c8 04 3a 0a 43 15 9a 38 c8 a1 07 01     .k.C..:.C..8....
     c7b:	3b 0c a3 b5 99 38 c8 a1 07 09 25 04 3c 0d 29 15     ;....8....%.<.).
     c8b:	ae 1e 96 6a c4 39 b9 79 00 3d 0b a9 74 ae 78 a0     ...j.9.y.=..t.x.
     c9b:	83 0e 07 02 3e 0d 29 15 ae 18 37 d3 87 b4 52 71     ....>.)...7...Rq
     cab:	0c 3f 11 c8 15 aa b1 1c 48 a6 e1 90 b8 ba 0e 9e     .?......H.......
     cbb:	ae 01 40 2a 30 b6 c9 bd 1f 88 54 d2 1c a4 36 91     ..@*0.....T...6.
     ccb:	98 4e 34 91 8c 24 93 91 14 49 6a 12 91 9a 64 72     .N4..$...Ij...dr
     cdb:	18 8d 28 c3 39 9c 0e 3e c8 41 47 00 41 19 cc 15     ..(.9..>.AG.A...
     ceb:	ba a4 43 e8 66 91 58 24 1d 0d 47 43 b5 e1 e8 30     ..C.f.X$..GC...0
     cfb:	3a 4c c6 ce 03 42 1a cb 19 ba 38 1e 44 33 ca 70     :L...B....8.D3.p
     d0b:	32 9c cc 46 07 d1 61 32 bc 3a 1e 2e 87 18 00 43     2..F..a2.:.....C
     d1b:	1b cc 15 ba ac 1e 44 b4 d1 f4 6a 07 cd 41 73 d0     ......D...j..As.
     d2b:	1c 44 9d 4c 27 b4 d9 41 5a 03 44 16 cc 15 ba 38     .D.L'..AZ.D....8
     d3b:	04 0f a3 21 65 3a 19 fb eb 64 48 39 8c 0e 41 00     ...!e:...dH9..A.
     d4b:	45 11 ca 19 b6 f8 20 df 7e 90 1c 24 f3 ed 87 83     E..... .~..$....
     d5b:	01 46 0f ca 15 b2 f8 20 df 7e 90 1c 24 f3 bd 03     .F..... .~..$...
     d6b:	47 1b cc 15 be ac 1e 44 b4 d1 f4 6a 07 cd 41 b3     G......D...j..A.
     d7b:	83 ec 30 9d 4c 27 34 d2 61 66 11 48 0d cc 15 ba     ..0.L'4.af.H....
     d8b:	18 fb f9 f0 41 ec e7 01 49 07 c3 15 96 f8 07 4a     ....A...I......J
     d9b:	0d c9 11 aa de 9f 6d b6 0b e5 56 02 4b 1b cd 15     ......m...V.K...
     dab:	ba 98 52 86 a4 19 6d 44 9c 50 cf f6 f3 84 3a 22     ..R...mD.P....:"
     dbb:	ce 68 43 d2 94 32 26 4c 0b c9 15 ae 18 ef 7f 3e     .hC..2&L.......>
     dcb:	1c 08 4d 21 ce 15 c2 98 43 ec 90 f3 21 7c 10 1e     ..M!....C...!|..
     ddb:	86 87 e1 21 22 92 58 44 12 8b 48 62 22 99 48 36     ...!".XD..Hb".H6
     deb:	99 4d 36 4e 1a cc 15 ba 18 5f 1f 82 07 99 45 66     .M6N....._....Ef
     dfb:	19 99 44 a6 89 4d 62 3c 04 0f d1 f3 00 4f 16 cd     ..D..Mb<.....O..
     e0b:	15 be 2c 1f 64 4c d3 09 f5 ee fd 4a 99 8e 68 b4     ..,.dL.....J..h.
     e1b:	83 b8 08 50 19 cb 15 b6 38 c4 0e 93 e1 d5 e3 e1     ...P....8.......
     e2b:	72 88 cd 21 73 c8 1c 32 87 cc 21 00 51 1a ed f5     r..!s..2..!.Q...
     e3b:	bd 2c 1f 64 4c d3 09 f5 ee fd 24 a1 8c 4c a4 da     .,.dL.....$..L..
     e4b:	41 7c 88 03 25 00 52 1e cc 15 ba 38 04 0f a3 21     A|..%.R....8...!
     e5b:	65 3a 99 4e 86 94 c3 e8 20 1b 8e a6 93 e9 64 3a     e:.N.... .....d:
     e6b:	99 4e a6 04 53 16 cb 15 b6 ba 1d 24 b4 eb 1d 62     .N..S......$...b
     e7b:	3e db 21 57 eb 8d 72 90 9d 00 54 1c cb 11 ae f8     >.!W..r...T.....
     e8b:	10 9c 43 e6 90 39 64 0e 99 43 e6 90 39 64 0e 99     ..C..9d..C..9d..
     e9b:	43 e6 90 39 64 08 55 0e cc 15 ba 18 fb 3f 4f 86     C..9d.U......?O.
     eab:	a3 c3 d0 06 56 1e cd 11 b6 98 db 27 d3 d1 74 26     ....V......'..t&
     ebb:	15 ce 86 b3 e9 64 3c 99 4b e4 90 3a a4 0e 9a c3     .....d<.K..:....
     ecb:	a6 00 57 1d cf 15 c6 98 cd 6c 33 db cc b6 32 da     ..W......l3...2.
     edb:	bf a8 cc 24 1a 25 1a 2b d5 d9 78 36 9e cd 00 58     ...$.%.+..x6...X
     eeb:	19 cc 11 b2 18 9b 27 c3 11 a3 48 6c a7 9b 45 d2     ......'...Hl..E.
     efb:	d1 6c 38 1a 4e c6 e6 01 59 1c cd 11 b6 98 db 27     .l8.N...Y......'
     f0b:	d3 d9 e2 6c 3a 19 4f e6 75 d0 1c 36 87 cd 61 73     ...l:.O.u..6..as
     f1b:	d8 1c 36 05 5a 10 ca 15 b2 78 b0 8f d7 c7 db c7     ..6.Z....x......
     f2b:	eb 87 83 01 5b 0b 45 96 99 38 98 f6 ff 74 18 5c     ....[.E..8...t.\
     f3b:	0d c5 11 96 90 a9 cd b4 cd d4 66 1a 5d 0b 45 92     ..........f.].E.
     f4b:	99 38 8c f6 ff 74 30 5e 0f ea d0 aa 94 93 a9 22     .8...t0^......."
     f5b:	d9 68 24 94 0c 07 5f 07 4a 90 a9 78 30 60 07 65     .h$..._.J..x0`.e
     f6b:	70 97 98 2d 61 13 4a 15 ae 2a de 64 63 da 89 b2     p..-a.J..*.dc...
     f7b:	36 19 51 2a 23 0a 01 62 14 ca 15 b2 98 ef 42 3a     6.Q*#..b......B:
     f8b:	48 48 93 a1 c7 d3 e4 20 99 90 00 63 10 49 15 ae     HH..... ...c.I..
     f9b:	a3 1d 22 23 f3 f6 d1 e4 10 23 01 64 13 ca 15 b2     .."#.....#.d....
     fab:	df 89 32 39 48 46 47 8f 93 11 e5 20 a2 0c 65 11     ..29HFG.... ..e.
     fbb:	49 15 ae a3 9d 46 c6 c3 83 7c 34 39 c4 48 00 66     I....F...|49.H.f
     fcb:	0e c7 11 9e 23 95 86 a3 c3 69 b8 9f 00 67 18 ca     ....#....i...g..
     fdb:	95 b1 a2 4c 0e 92 d1 d1 e3 64 44 39 88 28 f3 c9     ...L.....dD9.(..
     feb:	68 74 08 d2 00 68 0d c9 15 ae 18 ef 42 39 98 6c     ht...h......B9.l
     ffb:	fe 36 69 0a c3 15 96 38 c8 0e 1f 04 6a 0c 45 8e     .6i....8....j.E.
    100b:	95 da 3e da 7f 3a 54 00 6b 12 c9 15 aa 18 ef 34     ..>..:T.k......4
    101b:	59 b2 15 8b b6 c9 68 65 74 1b 6c 07 c3 15 96 f8     Y.....het.l.....
    102b:	07 6d 18 4f 15 c6 98 90 28 87 43 89 64 9b d9 66     .m.O....(.C.d..f
    103b:	b6 99 6d 66 9b d9 66 b6 05 6e 0c 49 15 ae 98 50     ..mf..f..n.I...P
    104b:	0e 26 9b bf 0d 6f 11 4a 15 b2 23 1e 42 2b 43 8f     .&...o.J..#.B+C.
    105b:	93 d1 e8 10 a4 01 70 15 ca 95 b1 98 90 0e 12 d2     ......p.........
    106b:	64 e8 f1 34 39 48 26 a4 f9 76 00 71 13 ca 95 b1     d..49H&..v.q....
    107b:	a2 4c 0e 92 d1 d1 e3 64 44 39 88 28 f3 1d 72 0b     .L.....dD9.(..r.
    108b:	46 15 9e 98 1c 0e b3 7d 03 73 10 49 15 ae 32 1d     F......}.s.I..2.
    109b:	68 e6 43 ec 6c 3b 90 4c 00 74 0d a6 11 9a 99 2d     h.C.l;.L.t.....-
    10ab:	1d 2a b3 bd 95 08 75 0b 49 15 ae 98 f9 a7 83 85     .*....u.I.......
    10bb:	32 76 11 49 11 a6 98 b9 4d 96 26 a3 c9 ac 58 1d     2v.I....M.&...X.
    10cb:	cf 00 77 19 4f 11 be 98 cd 6c 33 db ca 68 4b 65     ..w.O....l3..hKe
    10db:	34 51 99 55 8a 34 ea 6c 3c 9b 01 78 11 49 15 ae     4Q.U.4.l<..x.I..
    10eb:	98 d9 26 6b d5 69 6d 32 9a ac d9 06 79 14 c9 95     ..&k.im2....y...
    10fb:	ad 98 b9 4d 96 26 a3 c9 ac 58 1d 2f 4b a9 53 00     ...M.&...X./K.S.
    110b:	7a 0c 48 15 aa 78 90 0e f7 7a 38 08 7b 0d 47 96     z.H..x...z8.{.G.
    111b:	a1 9c 2d ee b6 ba b8 d7 05 7c 08 42 96 95 f8 43     ..-......|.B...C
    112b:	00 7d 0e 47 92 a1 98 2e ee ba b6 b8 b7 45 00 7e     .}.G.........E.~
    113b:	0a 69 94 ae 21 1d 4c 14 00 00 00 00 04 ff ff 00     .i..!.L.........
	...

0000114c <digital_pin_to_timer_PGM>:
    114c:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

00001167 <digital_pin_to_bit_mask_PGM>:
    1167:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    1177:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

00001182 <digital_pin_to_port_PGM>:
    1182:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1192:	03 03 03 03 02 02 03 05 05 05 05                    ...........

0000119d <port_to_input_PGM>:
    119d:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

000011a9 <port_to_output_PGM>:
    11a9:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

000011b5 <port_to_mode_PGM>:
    11b5:	00 00 00 00 24 00 27 00 2a 00 2d 00 00              ....$.'.*.-..

000011c2 <__ctors_start>:
__ctors_start():
    11c2:	a9 13       	cpse	r26, r25
    11c4:	61 2b       	or	r22, r17
    11c6:	0e 2e       	mov	r0, r30
    11c8:	5e 32       	cpi	r21, 0x2E	; 46

000011ca <__ctors_end>:
__ctors_end():
    11ca:	b6 2b       	or	r27, r22
    11cc:	63 2e       	mov	r6, r19

000011ce <__dtors_end>:
__init():
../../../../crt1/gcrt1.S:230
    11ce:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
    11d0:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
    11d2:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
    11d4:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
    11d6:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
    11d8:	cd bf       	out	0x3d, r28	; 61

000011da <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
    11da:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
    11de:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
    11e0:	e0 e1       	ldi	r30, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
    11e2:	f8 e7       	ldi	r31, 0x78	; 120
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
    11e6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
    11e8:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
    11ea:	ac 3e       	cpi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
    11ec:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
    11ee:	d9 f7       	brne	.-10     	; 0x11e6 <__do_copy_data+0xc>

000011f0 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    11f0:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    11f2:	ac ee       	ldi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    11f4:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <.do_clear_bss_start>

000011f8 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    11f8:	1d 92       	st	X+, r1

000011fa <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    11fa:	a0 30       	cpi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    11fc:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <.do_clear_bss_loop>

00001200 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    1200:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    1202:	c5 ee       	ldi	r28, 0xE5	; 229
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    1204:	d8 e0       	ldi	r29, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    1208:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    120a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    120c:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    1210:	c1 3e       	cpi	r28, 0xE1	; 225
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    1212:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    1214:	c9 f7       	brne	.-14     	; 0x1208 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
    1216:	0e 94 c2 34 	call	0x6984	; 0x6984 <main>
../../../../crt1/gcrt1.S:315
    121a:	0c 94 fb 3b 	jmp	0x77f6	; 0x77f6 <__do_global_dtors>

0000121e <__bad_interrupt>:
__vector_30():
../../../../crt1/gcrt1.S:209
    121e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001222 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	08 95       	ret

00001228 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1228:	08 95       	ret

0000122a <U8G2::write(unsigned char const*, unsigned int)>:
_ZN4U8G25writeEPKhj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:356
	
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	6c 01       	movw	r12, r24
    123c:	eb 01       	movw	r28, r22
    123e:	7b 01       	movw	r14, r22
    1240:	e4 0e       	add	r14, r20
    1242:	f5 1e       	adc	r15, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:357
      size_t cnt = 0;
    1244:	10 e0       	ldi	r17, 0x00	; 0
    1246:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:358
      while( size > 0 ) {
    1248:	ce 15       	cp	r28, r14
    124a:	df 05       	cpc	r29, r15
    124c:	61 f0       	breq	.+24     	; 0x1266 <U8G2::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:359
	cnt += write(*buffer++); 
    124e:	69 91       	ld	r22, Y+
    1250:	d6 01       	movw	r26, r12
    1252:	ed 91       	ld	r30, X+
    1254:	fc 91       	ld	r31, X
    1256:	01 90       	ld	r0, Z+
    1258:	f0 81       	ld	r31, Z
    125a:	e0 2d       	mov	r30, r0
    125c:	c6 01       	movw	r24, r12
    125e:	09 95       	icall
    1260:	08 0f       	add	r16, r24
    1262:	19 1f       	adc	r17, r25
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:358
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
    1264:	f1 cf       	rjmp	.-30     	; 0x1248 <U8G2::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:363
	cnt += write(*buffer++); 
	size--;
      }
      return cnt;
    }
    1266:	c8 01       	movw	r24, r16
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	df 90       	pop	r13
    1276:	cf 90       	pop	r12
    1278:	08 95       	ret

0000127a <U8G2::write(unsigned char)>:
_ZN4U8G25writeEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:318
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);
#endif

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:319
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
    128c:	6c 01       	movw	r12, r24
    128e:	24 e0       	ldi	r18, 0x04	; 4
    1290:	c2 0e       	add	r12, r18
    1292:	d1 1c       	adc	r13, r1
    1294:	fc 01       	movw	r30, r24
    1296:	e0 57       	subi	r30, 0x70	; 112
    1298:	ff 4f       	sbci	r31, 0xFF	; 255
    129a:	01 90       	ld	r0, Z+
    129c:	f0 81       	ld	r31, Z
    129e:	e0 2d       	mov	r30, r0
    12a0:	c6 01       	movw	r24, r12
    12a2:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:321
      
      if ( e < 0x0fffe )
    12a4:	8e 3f       	cpi	r24, 0xFE	; 254
    12a6:	ef ef       	ldi	r30, 0xFF	; 255
    12a8:	9e 07       	cpc	r25, r30
    12aa:	d8 f4       	brcc	.+54     	; 0x12e2 <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:323
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
    12ac:	8e 01       	movw	r16, r28
    12ae:	0c 56       	subi	r16, 0x6C	; 108
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	f8 01       	movw	r30, r16
    12b4:	40 81       	ld	r20, Z
    12b6:	51 81       	ldd	r21, Z+1	; 0x01
    12b8:	7e 01       	movw	r14, r28
    12ba:	f2 e9       	ldi	r31, 0x92	; 146
    12bc:	ef 0e       	add	r14, r31
    12be:	f1 1c       	adc	r15, r1
    12c0:	f7 01       	movw	r30, r14
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	9c 01       	movw	r18, r24
    12c8:	c6 01       	movw	r24, r12
    12ca:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <u8g2_DrawGlyph>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:326
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
    12ce:	c0 59       	subi	r28, 0x90	; 144
    12d0:	df 4f       	sbci	r29, 0xFF	; 255
    12d2:	28 81       	ld	r18, Y
    12d4:	21 30       	cpi	r18, 0x01	; 1
    12d6:	c1 f0       	breq	.+48     	; 0x1308 <U8G2::write(unsigned char)+0x8e>
    12d8:	78 f0       	brcs	.+30     	; 0x12f8 <U8G2::write(unsigned char)+0x7e>
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	b9 f0       	breq	.+46     	; 0x130c <U8G2::write(unsigned char)+0x92>
    12de:	23 30       	cpi	r18, 0x03	; 3
    12e0:	e9 f0       	breq	.+58     	; 0x131c <U8G2::write(unsigned char)+0xa2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:354
	
	
	
      }
      return 1;
     }
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:329
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
    12f8:	f7 01       	movw	r30, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:332
	    break;
	  case 1:
	    ty += delta;
    12fa:	20 81       	ld	r18, Z
    12fc:	31 81       	ldd	r19, Z+1	; 0x01
    12fe:	82 0f       	add	r24, r18
    1300:	93 1f       	adc	r25, r19
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:333
	    break;
    1306:	ed cf       	rjmp	.-38     	; 0x12e2 <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:332
	{
	  case 0:
	    tx += delta;
	    break;
	  case 1:
	    ty += delta;
    1308:	f8 01       	movw	r30, r16
    130a:	f7 cf       	rjmp	.-18     	; 0x12fa <U8G2::write(unsigned char)+0x80>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:335
	    break;
	  case 2:
	    tx -= delta;
    130c:	f7 01       	movw	r30, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 3:
	    ty -= delta;
    130e:	20 81       	ld	r18, Z
    1310:	31 81       	ldd	r19, Z+1	; 0x01
    1312:	28 1b       	sub	r18, r24
    1314:	39 0b       	sbc	r19, r25
    1316:	31 83       	std	Z+1, r19	; 0x01
    1318:	20 83       	st	Z, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:339
	    break;
    131a:	e3 cf       	rjmp	.-58     	; 0x12e2 <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
    131c:	f8 01       	movw	r30, r16
    131e:	f7 cf       	rjmp	.-18     	; 0x130e <U8G2::write(unsigned char)+0x94>

00001320 <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1320:	ff 92       	push	r15
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	ec 01       	movw	r28, r24
    132c:	f6 2e       	mov	r15, r22
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    132e:	08 81       	ld	r16, Y
    1330:	19 81       	ldd	r17, Y+1	; 0x01
    1332:	c8 01       	movw	r24, r16
    1334:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <eeprom_read_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1338:	f8 16       	cp	r15, r24
    133a:	21 f0       	breq	.+8      	; 0x1344 <EERef::update(unsigned char)+0x24>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    133c:	6f 2d       	mov	r22, r15
    133e:	c8 01       	movw	r24, r16
    1340:	0e 94 ed 3b 	call	0x77da	; 0x77da <eeprom_write_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59 (discriminator 4)
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1344:	ce 01       	movw	r24, r28
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	08 95       	ret

00001352 <__vector_3>:
__vector_3():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:71
bool TMCFehler = false;
bool PumpeFehler = false;

// Interrupt-Routine
// Interrupt Vector für Port B (PCINT0_vect)
ISR(PCINT0_vect) {
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	4f 93       	push	r20
    1362:	5f 93       	push	r21
    1364:	6f 93       	push	r22
    1366:	7f 93       	push	r23
    1368:	8f 93       	push	r24
    136a:	9f 93       	push	r25
    136c:	af 93       	push	r26
    136e:	bf 93       	push	r27
    1370:	ef 93       	push	r30
    1372:	ff 93       	push	r31
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:73
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    1374:	8c e0       	ldi	r24, 0x0C	; 12
    1376:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    137a:	89 2b       	or	r24, r25
    137c:	b1 f1       	breq	.+108    	; 0x13ea <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:73 (discriminator 1)
    137e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1382:	81 11       	cpse	r24, r1
    1384:	32 c0       	rjmp	.+100    	; 0x13ea <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:74
    ZustandBremse = true;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:78
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    ZustandBremse = false;
    ZustandBearbeitet = false;
    138c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:82
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    1390:	8b e0       	ldi	r24, 0x0B	; 11
    1392:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    1396:	89 2b       	or	r24, r25
    1398:	21 f4       	brne	.+8      	; 0x13a2 <__vector_3+0x50>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:82 (discriminator 1)
    139a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    139e:	88 23       	and	r24, r24
    13a0:	81 f1       	breq	.+96     	; 0x1402 <__vector_3+0xb0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:85
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    13a2:	8b e0       	ldi	r24, 0x0B	; 11
    13a4:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    13a8:	89 2b       	or	r24, r25
    13aa:	89 f5       	brne	.+98     	; 0x140e <__vector_3+0xbc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:91
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    13ac:	8a e0       	ldi	r24, 0x0A	; 10
    13ae:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    13b2:	89 2b       	or	r24, r25
    13b4:	21 f4       	brne	.+8      	; 0x13be <__vector_3+0x6c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:91 (discriminator 1)
    13b6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    13ba:	88 23       	and	r24, r24
    13bc:	79 f1       	breq	.+94     	; 0x141c <__vector_3+0xca>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:94
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    13be:	8a e0       	ldi	r24, 0x0A	; 10
    13c0:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    13c4:	89 2b       	or	r24, r25
    13c6:	81 f5       	brne	.+96     	; 0x1428 <__vector_3+0xd6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:98
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:76
ISR(PCINT0_vect) {
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    ZustandBremse = true;
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    13ea:	8c e0       	ldi	r24, 0x0C	; 12
    13ec:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    13f0:	89 2b       	or	r24, r25
    13f2:	71 f6       	brne	.-100    	; 0x1390 <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:76 (discriminator 1)
    13f4:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    13f8:	88 23       	and	r24, r24
    13fa:	51 f2       	breq	.-108    	; 0x1390 <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:77
    ZustandBremse = false;
    13fc:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <ZustandBremse>
    1400:	c5 cf       	rjmp	.-118    	; 0x138c <__vector_3+0x3a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:83
    ZustandBearbeitet = false;
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    ZustandHandbremse = true;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:87
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
    1408:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
    140c:	cf cf       	rjmp	.-98     	; 0x13ac <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:85 (discriminator 1)

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    140e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    1412:	88 23       	and	r24, r24
    1414:	59 f2       	breq	.-106    	; 0x13ac <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:86
    ZustandHandbremse = false;
    1416:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <ZustandHandbremse>
    141a:	f6 cf       	rjmp	.-20     	; 0x1408 <__vector_3+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:92
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    ZustandHauptschalter = true;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:96
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
    1422:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:98
  }
}
    1426:	d0 cf       	rjmp	.-96     	; 0x13c8 <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:94 (discriminator 1)

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    1428:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    142c:	88 23       	and	r24, r24
    142e:	61 f2       	breq	.-104    	; 0x13c8 <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:95
    ZustandHauptschalter = false;
    1430:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <ZustandHauptschalter>
    1434:	f6 cf       	rjmp	.-20     	; 0x1422 <__vector_3+0xd0>

00001436 <SchreibeDisplay()>:
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:330
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}

void SchreibeDisplay() {
    1436:	2f 92       	push	r2
    1438:	3f 92       	push	r3
    143a:	4f 92       	push	r4
    143c:	5f 92       	push	r5
    143e:	6f 92       	push	r6
    1440:	7f 92       	push	r7
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:331
  if (!PumpeFehler && !TMCFehler) {
    145a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
    145e:	81 11       	cpse	r24, r1
    1460:	86 c1       	rjmp	.+780    	; 0x176e <SchreibeDisplay()+0x338>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:331 (discriminator 1)
    1462:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    1466:	81 11       	cpse	r24, r1
    1468:	82 c1       	rjmp	.+772    	; 0x176e <SchreibeDisplay()+0x338>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:332
    int BreiteBox = map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 118);
    146a:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    146e:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1472:	0f 2c       	mov	r0, r15
    1474:	00 0c       	add	r0, r0
    1476:	00 0b       	sbc	r16, r16
    1478:	11 0b       	sbc	r17, r17
    147a:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    147e:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1482:	03 2e       	mov	r0, r19
    1484:	00 0c       	add	r0, r0
    1486:	44 0b       	sbc	r20, r20
    1488:	55 0b       	sbc	r21, r21
    148a:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    148e:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    1492:	07 2e       	mov	r0, r23
    1494:	00 0c       	add	r0, r0
    1496:	88 0b       	sbc	r24, r24
    1498:	99 0b       	sbc	r25, r25
    149a:	1f 92       	push	r1
    149c:	1f 92       	push	r1
    149e:	1f 92       	push	r1
    14a0:	e6 e7       	ldi	r30, 0x76	; 118
    14a2:	ef 93       	push	r30
    14a4:	a1 2c       	mov	r10, r1
    14a6:	b1 2c       	mov	r11, r1
    14a8:	65 01       	movw	r12, r10
    14aa:	0e 94 7f 34 	call	0x68fe	; 0x68fe <map(long, long, long, long, long)>
    14ae:	2b 01       	movw	r4, r22
    14b0:	4b 01       	movw	r8, r22
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    14b2:	84 e1       	ldi	r24, 0x14	; 20
    14b4:	92 e0       	ldi	r25, 0x02	; 2
    14b6:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    14c2:	c5 e0       	ldi	r28, 0x05	; 5
    14c4:	d0 e0       	ldi	r29, 0x00	; 0
    14c6:	8f e2       	ldi	r24, 0x2F	; 47
    14c8:	28 2e       	mov	r2, r24
    14ca:	31 2c       	mov	r3, r1
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    14cc:	20 e8       	ldi	r18, 0x80	; 128
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	84 e1       	ldi	r24, 0x14	; 20
    14da:	92 e0       	ldi	r25, 0x02	; 2
    14dc:	0e 94 59 24 	call	0x48b2	; 0x48b2 <u8g2_DrawHLine>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    14e0:	67 e2       	ldi	r22, 0x27	; 39
    14e2:	72 e0       	ldi	r23, 0x02	; 2
    14e4:	84 e1       	ldi	r24, 0x14	; 20
    14e6:	92 e0       	ldi	r25, 0x02	; 2
    14e8:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    14ec:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    14f0:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    14f4:	8b e0       	ldi	r24, 0x0B	; 11
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <u8g2+0x95>
    14fc:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:338
    u8g2.firstPage();
    do {
      u8g2.drawHLine(0, 0, 128);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(5, 11);
      u8g2.print(F("HALDEX"));
    1500:	64 ee       	ldi	r22, 0xE4	; 228
    1502:	71 e0       	ldi	r23, 0x01	; 1
    1504:	80 e1       	ldi	r24, 0x10	; 16
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawFrameEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:227
    void drawVLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t h) { u8g2_DrawVLine(&u8g2, x, y, h); }
    void drawHVLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir) {
      u8g2_DrawHVLine(&u8g2, x, y, len, dir); }
    
    /* u8g2_box.c */
    void drawFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawFrame(&u8g2, x, y, w, h); }
    150c:	0f e0       	ldi	r16, 0x0F	; 15
    150e:	10 e0       	ldi	r17, 0x00	; 0
    1510:	26 e7       	ldi	r18, 0x76	; 118
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4f e0       	ldi	r20, 0x0F	; 15
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	65 e0       	ldi	r22, 0x05	; 5
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	84 e1       	ldi	r24, 0x14	; 20
    151e:	92 e0       	ldi	r25, 0x02	; 2
    1520:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <u8g2_DrawFrame>
_ZN4U8G28drawLineEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:244
    void drawEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawEllipse(&u8g2, x0, y0, rx, ry, opt); }
    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }    

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2) 
      { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
    1524:	00 e1       	ldi	r16, 0x10	; 16
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	2b e4       	ldi	r18, 0x4B	; 75
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4f e0       	ldi	r20, 0x0F	; 15
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	6b e4       	ldi	r22, 0x4B	; 75
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	84 e1       	ldi	r24, 0x14	; 20
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
    153c:	04 e1       	ldi	r16, 0x14	; 20
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	2b e4       	ldi	r18, 0x4B	; 75
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	43 e1       	ldi	r20, 0x13	; 19
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	6b e4       	ldi	r22, 0x4B	; 75
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	84 e1       	ldi	r24, 0x14	; 20
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
    1554:	08 e1       	ldi	r16, 0x18	; 24
    1556:	10 e0       	ldi	r17, 0x00	; 0
    1558:	2b e4       	ldi	r18, 0x4B	; 75
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	47 e1       	ldi	r20, 0x17	; 23
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	6b e4       	ldi	r22, 0x4B	; 75
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	84 e1       	ldi	r24, 0x14	; 20
    1566:	92 e0       	ldi	r25, 0x02	; 2
    1568:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
    156c:	0c e1       	ldi	r16, 0x1C	; 28
    156e:	10 e0       	ldi	r17, 0x00	; 0
    1570:	2b e4       	ldi	r18, 0x4B	; 75
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4b e1       	ldi	r20, 0x1B	; 27
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	6b e4       	ldi	r22, 0x4B	; 75
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	84 e1       	ldi	r24, 0x14	; 20
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1584:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    1588:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    158c:	30 92 a5 02 	sts	0x02A5, r3	; 0x8002a5 <u8g2+0x95>
    1590:	20 92 a4 02 	sts	0x02A4, r2	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:348
      u8g2.drawLine(75, 23, 75, 24);
      u8g2.drawLine(75, 27, 75, 28);

      u8g2.setCursor(5, 47);

      if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur) {
    1594:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1598:	81 11       	cpse	r24, r1
    159a:	fc c0       	rjmp	.+504    	; 0x1794 <SchreibeDisplay()+0x35e>
    159c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    15a0:	81 11       	cpse	r24, r1
    15a2:	f8 c0       	rjmp	.+496    	; 0x1794 <SchreibeDisplay()+0x35e>
    15a4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    15a8:	81 11       	cpse	r24, r1
    15aa:	f4 c0       	rjmp	.+488    	; 0x1794 <SchreibeDisplay()+0x35e>
    15ac:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    15b0:	81 11       	cpse	r24, r1
    15b2:	f0 c0       	rjmp	.+480    	; 0x1794 <SchreibeDisplay()+0x35e>
_ZN4U8G27drawBoxEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:229
      u8g2_DrawHVLine(&u8g2, x, y, len, dir); }
    
    /* u8g2_box.c */
    void drawFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawFrame(&u8g2, x, y, w, h); }
    void drawRFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r) { u8g2_DrawRFrame(&u8g2, x, y, w, h,r); }
    void drawBox(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawBox(&u8g2, x, y, w, h); }
    15b4:	0f e0       	ldi	r16, 0x0F	; 15
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	92 01       	movw	r18, r4
    15ba:	4f e0       	ldi	r20, 0x0F	; 15
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	65 e0       	ldi	r22, 0x05	; 5
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	84 e1       	ldi	r24, 0x14	; 20
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <u8g2_DrawBox>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:351

        u8g2.drawBox(5, 15, BreiteBox, 15);
        if (BreiteBox >= 71) {
    15ca:	97 e4       	ldi	r25, 0x47	; 71
    15cc:	89 16       	cp	r8, r25
    15ce:	91 04       	cpc	r9, r1
    15d0:	d4 f1       	brlt	.+116    	; 0x1646 <SchreibeDisplay()+0x210>
_ZN4U8G212setDrawColorEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	84 e1       	ldi	r24, 0x14	; 20
    15d6:	92 e0       	ldi	r25, 0x02	; 2
    15d8:	0e 94 81 24 	call	0x4902	; 0x4902 <u8g2_SetDrawColor>
_ZN4U8G28drawLineEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:244
    void drawEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawEllipse(&u8g2, x0, y0, rx, ry, opt); }
    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }    

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2) 
      { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
    15dc:	00 e1       	ldi	r16, 0x10	; 16
    15de:	10 e0       	ldi	r17, 0x00	; 0
    15e0:	2b e4       	ldi	r18, 0x4B	; 75
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	4f e0       	ldi	r20, 0x0F	; 15
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	6b e4       	ldi	r22, 0x4B	; 75
    15ea:	70 e0       	ldi	r23, 0x00	; 0
    15ec:	84 e1       	ldi	r24, 0x14	; 20
    15ee:	92 e0       	ldi	r25, 0x02	; 2
    15f0:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
    15f4:	04 e1       	ldi	r16, 0x14	; 20
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	2b e4       	ldi	r18, 0x4B	; 75
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	43 e1       	ldi	r20, 0x13	; 19
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	6b e4       	ldi	r22, 0x4B	; 75
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	84 e1       	ldi	r24, 0x14	; 20
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
    160c:	08 e1       	ldi	r16, 0x18	; 24
    160e:	10 e0       	ldi	r17, 0x00	; 0
    1610:	2b e4       	ldi	r18, 0x4B	; 75
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	47 e1       	ldi	r20, 0x17	; 23
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	6b e4       	ldi	r22, 0x4B	; 75
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	84 e1       	ldi	r24, 0x14	; 20
    161e:	92 e0       	ldi	r25, 0x02	; 2
    1620:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
    1624:	0c e1       	ldi	r16, 0x1C	; 28
    1626:	10 e0       	ldi	r17, 0x00	; 0
    1628:	2b e4       	ldi	r18, 0x4B	; 75
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4b e1       	ldi	r20, 0x1B	; 27
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	6b e4       	ldi	r22, 0x4B	; 75
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	84 e1       	ldi	r24, 0x14	; 20
    1636:	92 e0       	ldi	r25, 0x02	; 2
    1638:	0e 94 d4 24 	call	0x49a8	; 0x49a8 <u8g2_DrawLine>
_ZN4U8G212setDrawColorEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	84 e1       	ldi	r24, 0x14	; 20
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	0e 94 81 24 	call	0x4902	; 0x4902 <u8g2_SetDrawColor>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1646:	6b ea       	ldi	r22, 0xAB	; 171
    1648:	7a e0       	ldi	r23, 0x0A	; 10
    164a:	84 e1       	ldi	r24, 0x14	; 20
    164c:	92 e0       	ldi	r25, 0x02	; 2
    164e:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:361
          u8g2.drawLine(75, 27, 75, 28);
          u8g2.setDrawColor(1);
        }

        u8g2.setFont(u8g2_font_helvB14_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
    1652:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1656:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    165a:	0f 2c       	mov	r0, r15
    165c:	00 0c       	add	r0, r0
    165e:	00 0b       	sbc	r16, r16
    1660:	11 0b       	sbc	r17, r17
    1662:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1666:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    166a:	03 2e       	mov	r0, r19
    166c:	00 0c       	add	r0, r0
    166e:	44 0b       	sbc	r20, r20
    1670:	55 0b       	sbc	r21, r21
    1672:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    1676:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    167a:	07 2e       	mov	r0, r23
    167c:	00 0c       	add	r0, r0
    167e:	88 0b       	sbc	r24, r24
    1680:	99 0b       	sbc	r25, r25
    1682:	1f 92       	push	r1
    1684:	1f 92       	push	r1
    1686:	1f 92       	push	r1
    1688:	e4 e6       	ldi	r30, 0x64	; 100
    168a:	ef 93       	push	r30
    168c:	a1 2c       	mov	r10, r1
    168e:	b1 2c       	mov	r11, r1
    1690:	65 01       	movw	r12, r10
    1692:	0e 94 7f 34 	call	0x68fe	; 0x68fe <map(long, long, long, long, long)>
    1696:	ab 01       	movw	r20, r22
    1698:	bc 01       	movw	r22, r24
    169a:	2a e0       	ldi	r18, 0x0A	; 10
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	80 e1       	ldi	r24, 0x10	; 16
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 3e 33 	call	0x667c	; 0x667c <Print::print(long, int)>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    16a6:	67 e2       	ldi	r22, 0x27	; 39
    16a8:	72 e0       	ldi	r23, 0x02	; 2
    16aa:	84 e1       	ldi	r24, 0x14	; 20
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:363
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
    16b2:	61 ee       	ldi	r22, 0xE1	; 225
    16b4:	71 e0       	ldi	r23, 0x01	; 1
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	92 e0       	ldi	r25, 0x02	; 2
    16ba:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    16c6:	20 e8       	ldi	r18, 0x80	; 128
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	41 e3       	ldi	r20, 0x31	; 49
    16cc:	50 e0       	ldi	r21, 0x00	; 0
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	84 e1       	ldi	r24, 0x14	; 20
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	0e 94 59 24 	call	0x48b2	; 0x48b2 <u8g2_DrawHLine>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    16da:	67 e2       	ldi	r22, 0x27	; 39
    16dc:	72 e0       	ldi	r23, 0x02	; 2
    16de:	84 e1       	ldi	r24, 0x14	; 20
    16e0:	92 e0       	ldi	r25, 0x02	; 2
    16e2:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    16e6:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    16ea:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    16ee:	8d e3       	ldi	r24, 0x3D	; 61
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <u8g2+0x95>
    16f6:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:387
      }

      u8g2.drawHLine(0, 49, 128);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(5, 61);
      u8g2.write(0xD6);
    16fa:	66 ed       	ldi	r22, 0xD6	; 214
    16fc:	80 e1       	ldi	r24, 0x10	; 16
    16fe:	92 e0       	ldi	r25, 0x02	; 2
    1700:	0e 94 3d 09 	call	0x127a	; 0x127a <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:388
      u8g2.print(F("ltemperatur "));
    1704:	60 e9       	ldi	r22, 0x90	; 144
    1706:	71 e0       	ldi	r23, 0x01	; 1
    1708:	80 e1       	ldi	r24, 0x10	; 16
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:389
      u8g2.print(Temperatur, 0);
    1710:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <Temperatur>
    1714:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <Temperatur+0x1>
    1718:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Temperatur+0x2>
    171c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <Temperatur+0x3>
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	80 e1       	ldi	r24, 0x10	; 16
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 7d 34 	call	0x68fa	; 0x68fa <Print::print(double, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:390
      u8g2.print(F(" "));
    172c:	6e e8       	ldi	r22, 0x8E	; 142
    172e:	71 e0       	ldi	r23, 0x01	; 1
    1730:	80 e1       	ldi	r24, 0x10	; 16
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:391
      u8g2.write(0xB0);
    1738:	60 eb       	ldi	r22, 0xB0	; 176
    173a:	80 e1       	ldi	r24, 0x10	; 16
    173c:	92 e0       	ldi	r25, 0x02	; 2
    173e:	0e 94 3d 09 	call	0x127a	; 0x127a <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:392
      u8g2.print(F("C"));
    1742:	6c e8       	ldi	r22, 0x8C	; 140
    1744:	71 e0       	ldi	r23, 0x01	; 1
    1746:	80 e1       	ldi	r24, 0x10	; 16
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    174e:	20 e8       	ldi	r18, 0x80	; 128
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4f e3       	ldi	r20, 0x3F	; 63
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	84 e1       	ldi	r24, 0x14	; 20
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	0e 94 59 24 	call	0x48b2	; 0x48b2 <u8g2_DrawHLine>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1762:	84 e1       	ldi	r24, 0x14	; 20
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:395
      u8g2.drawHLine(0, 63, 128);

    } while (u8g2.nextPage());
    176a:	81 11       	cpse	r24, r1
    176c:	af ce       	rjmp	.-674    	; 0x14cc <SchreibeDisplay()+0x96>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:397
  }
}
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	df 90       	pop	r13
    177c:	cf 90       	pop	r12
    177e:	bf 90       	pop	r11
    1780:	af 90       	pop	r10
    1782:	9f 90       	pop	r9
    1784:	8f 90       	pop	r8
    1786:	7f 90       	pop	r7
    1788:	6f 90       	pop	r6
    178a:	5f 90       	pop	r5
    178c:	4f 90       	pop	r4
    178e:	3f 90       	pop	r3
    1790:	2f 90       	pop	r2
    1792:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:365
        u8g2.setFont(u8g2_font_helvB14_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
      } else {
        if (ZustandHandbremse) {
    1794:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    1798:	88 23       	and	r24, r24
    179a:	89 f0       	breq	.+34     	; 0x17be <SchreibeDisplay()+0x388>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:366
          u8g2.print(F("Handbremse bet"));
    179c:	62 ed       	ldi	r22, 0xD2	; 210
    179e:	71 e0       	ldi	r23, 0x01	; 1
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:367
          u8g2.write(0xE4);
    17a8:	64 ee       	ldi	r22, 0xE4	; 228
    17aa:	80 e1       	ldi	r24, 0x10	; 16
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	0e 94 3d 09 	call	0x127a	; 0x127a <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:368
          u8g2.print(F("tigt"));
    17b2:	6d ec       	ldi	r22, 0xCD	; 205
    17b4:	71 e0       	ldi	r23, 0x01	; 1
    17b6:	80 e1       	ldi	r24, 0x10	; 16
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:370
        }
        if (ZustandBremse) {
    17be:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    17c2:	88 23       	and	r24, r24
    17c4:	89 f0       	breq	.+34     	; 0x17e8 <SchreibeDisplay()+0x3b2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:371
          u8g2.print(F("Bremse bet"));
    17c6:	62 ec       	ldi	r22, 0xC2	; 194
    17c8:	71 e0       	ldi	r23, 0x01	; 1
    17ca:	80 e1       	ldi	r24, 0x10	; 16
    17cc:	92 e0       	ldi	r25, 0x02	; 2
    17ce:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:372
          u8g2.write(0xE4);
    17d2:	64 ee       	ldi	r22, 0xE4	; 228
    17d4:	80 e1       	ldi	r24, 0x10	; 16
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	0e 94 3d 09 	call	0x127a	; 0x127a <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:373
          u8g2.print(F("tigt"));
    17dc:	6d eb       	ldi	r22, 0xBD	; 189
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	80 e1       	ldi	r24, 0x10	; 16
    17e2:	92 e0       	ldi	r25, 0x02	; 2
    17e4:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:375
        }
        if (ZustandHauptschalter) {
    17e8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    17ec:	88 23       	and	r24, r24
    17ee:	31 f0       	breq	.+12     	; 0x17fc <SchreibeDisplay()+0x3c6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:376
          u8g2.print(F("Hauptschalter aus"));
    17f0:	6b ea       	ldi	r22, 0xAB	; 171
    17f2:	71 e0       	ldi	r23, 0x01	; 1
    17f4:	80 e1       	ldi	r24, 0x10	; 16
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:378
        }
        if (ZustandTemperatur) {
    17fc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1800:	88 23       	and	r24, r24
    1802:	09 f4       	brne	.+2      	; 0x1806 <SchreibeDisplay()+0x3d0>
    1804:	60 cf       	rjmp	.-320    	; 0x16c6 <SchreibeDisplay()+0x290>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:379
          u8g2.write(0xDC);
    1806:	6c ed       	ldi	r22, 0xDC	; 220
    1808:	80 e1       	ldi	r24, 0x10	; 16
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	0e 94 3d 09 	call	0x127a	; 0x127a <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:380
          u8g2.print(F("bertemperatur"));
    1810:	6d e9       	ldi	r22, 0x9D	; 157
    1812:	71 e0       	ldi	r23, 0x01	; 1
    1814:	80 e1       	ldi	r24, 0x10	; 16
    1816:	92 e0       	ldi	r25, 0x02	; 2
    1818:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
    181c:	54 cf       	rjmp	.-344    	; 0x16c6 <SchreibeDisplay()+0x290>

0000181e <LeseTMCStatus(bool)>:
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:435
  }

  LeseTMCStatus(false);
}

void LeseTMCStatus(bool PruefeOpenLoad) {
    181e:	cf 92       	push	r12
    1820:	df 92       	push	r13
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	c8 2f       	mov	r28, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:436
  TMCStatus = stepper_driver.getStatus();
    1830:	8a ef       	ldi	r24, 0xFA	; 250
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <TMC2209::getStatus()>
    1838:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <TMCStatus>
    183c:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <TMCStatus+0x1>
    1840:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <TMCStatus+0x2>
    1844:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <TMCStatus+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:438

  if (TMCStatus.over_temperature_shutdown == 1) {
    1848:	61 ff       	sbrs	r22, 1
    184a:	4b c0       	rjmp	.+150    	; 0x18e2 <LeseTMCStatus(bool)+0xc4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:439
    TMCFehler = true;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1852:	84 e1       	ldi	r24, 0x14	; 20
    1854:	92 e0       	ldi	r25, 0x02	; 2
    1856:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    185a:	2f e0       	ldi	r18, 0x0F	; 15
    185c:	c2 2e       	mov	r12, r18
    185e:	d1 2c       	mov	r13, r1
    1860:	38 e2       	ldi	r19, 0x28	; 40
    1862:	e3 2e       	mov	r14, r19
    1864:	f1 2c       	mov	r15, r1
    1866:	02 e3       	ldi	r16, 0x32	; 50
    1868:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    186a:	6b ea       	ldi	r22, 0xAB	; 171
    186c:	7a e0       	ldi	r23, 0x0A	; 10
    186e:	84 e1       	ldi	r24, 0x14	; 20
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1876:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    187a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    187e:	d0 92 a5 02 	sts	0x02A5, r13	; 0x8002a5 <u8g2+0x95>
    1882:	c0 92 a4 02 	sts	0x02A4, r12	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:444
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1886:	64 e8       	ldi	r22, 0x84	; 132
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	80 e1       	ldi	r24, 0x10	; 16
    188c:	92 e0       	ldi	r25, 0x02	; 2
    188e:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1892:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1896:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    189a:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    189e:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    18a2:	67 e2       	ldi	r22, 0x27	; 39
    18a4:	72 e0       	ldi	r23, 0x02	; 2
    18a6:	84 e1       	ldi	r24, 0x14	; 20
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:447
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Übertemperatur"));
    18ae:	64 e7       	ldi	r22, 0x74	; 116
    18b0:	71 e0       	ldi	r23, 0x01	; 1
    18b2:	80 e1       	ldi	r24, 0x10	; 16
    18b4:	92 e0       	ldi	r25, 0x02	; 2
    18b6:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    18ba:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    18be:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    18c2:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    18c6:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:449
      u8g2.setCursor(0, 50);
      u8g2.print(F("Motortreiber"));
    18ca:	67 e6       	ldi	r22, 0x67	; 103
    18cc:	71 e0       	ldi	r23, 0x01	; 1
    18ce:	80 e1       	ldi	r24, 0x10	; 16
    18d0:	92 e0       	ldi	r25, 0x02	; 2
    18d2:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    18d6:	84 e1       	ldi	r24, 0x14	; 20
    18d8:	92 e0       	ldi	r25, 0x02	; 2
    18da:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:450
    } while (u8g2.nextPage());
    18de:	81 11       	cpse	r24, r1
    18e0:	c4 cf       	rjmp	.-120    	; 0x186a <LeseTMCStatus(bool)+0x4c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:453
  }

  if (TMCStatus.short_to_ground_a == 1 || TMCStatus.short_to_ground_b == 1) {
    18e2:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    18e6:	8c 70       	andi	r24, 0x0C	; 12
    18e8:	d1 f1       	breq	.+116    	; 0x195e <LeseTMCStatus(bool)+0x140>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:454
    TMCFehler = true;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    18f0:	84 e1       	ldi	r24, 0x14	; 20
    18f2:	92 e0       	ldi	r25, 0x02	; 2
    18f4:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    18f8:	9f e0       	ldi	r25, 0x0F	; 15
    18fa:	e9 2e       	mov	r14, r25
    18fc:	f1 2c       	mov	r15, r1
    18fe:	08 e2       	ldi	r16, 0x28	; 40
    1900:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1902:	6b ea       	ldi	r22, 0xAB	; 171
    1904:	7a e0       	ldi	r23, 0x0A	; 10
    1906:	84 e1       	ldi	r24, 0x14	; 20
    1908:	92 e0       	ldi	r25, 0x02	; 2
    190a:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    190e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1912:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1916:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    191a:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:459
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    191e:	6f e5       	ldi	r22, 0x5F	; 95
    1920:	71 e0       	ldi	r23, 0x01	; 1
    1922:	80 e1       	ldi	r24, 0x10	; 16
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    192a:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    192e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1932:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1936:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    193a:	67 e2       	ldi	r22, 0x27	; 39
    193c:	72 e0       	ldi	r23, 0x02	; 2
    193e:	84 e1       	ldi	r24, 0x14	; 20
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:462
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Kurzschluss nach Masse"));
    1946:	68 e4       	ldi	r22, 0x48	; 72
    1948:	71 e0       	ldi	r23, 0x01	; 1
    194a:	80 e1       	ldi	r24, 0x10	; 16
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1952:	84 e1       	ldi	r24, 0x14	; 20
    1954:	92 e0       	ldi	r25, 0x02	; 2
    1956:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:463
    } while (u8g2.nextPage());
    195a:	81 11       	cpse	r24, r1
    195c:	d2 cf       	rjmp	.-92     	; 0x1902 <LeseTMCStatus(bool)+0xe4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:466
  }

  if (TMCStatus.low_side_short_a == 1 || TMCStatus.low_side_short_b == 1) {
    195e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    1962:	80 73       	andi	r24, 0x30	; 48
    1964:	d1 f1       	breq	.+116    	; 0x19da <LeseTMCStatus(bool)+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:467
    TMCFehler = true;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    196c:	84 e1       	ldi	r24, 0x14	; 20
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1974:	8f e0       	ldi	r24, 0x0F	; 15
    1976:	e8 2e       	mov	r14, r24
    1978:	f1 2c       	mov	r15, r1
    197a:	08 e2       	ldi	r16, 0x28	; 40
    197c:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    197e:	6b ea       	ldi	r22, 0xAB	; 171
    1980:	7a e0       	ldi	r23, 0x0A	; 10
    1982:	84 e1       	ldi	r24, 0x14	; 20
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    198a:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    198e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1992:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    1996:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:472
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    199a:	60 e4       	ldi	r22, 0x40	; 64
    199c:	71 e0       	ldi	r23, 0x01	; 1
    199e:	80 e1       	ldi	r24, 0x10	; 16
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    19a6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    19aa:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    19ae:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    19b2:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    19b6:	67 e2       	ldi	r22, 0x27	; 39
    19b8:	72 e0       	ldi	r23, 0x02	; 2
    19ba:	84 e1       	ldi	r24, 0x14	; 20
    19bc:	92 e0       	ldi	r25, 0x02	; 2
    19be:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:475
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Kurzschluss Stepper"));
    19c2:	6c e2       	ldi	r22, 0x2C	; 44
    19c4:	71 e0       	ldi	r23, 0x01	; 1
    19c6:	80 e1       	ldi	r24, 0x10	; 16
    19c8:	92 e0       	ldi	r25, 0x02	; 2
    19ca:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    19ce:	84 e1       	ldi	r24, 0x14	; 20
    19d0:	92 e0       	ldi	r25, 0x02	; 2
    19d2:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:476
    } while (u8g2.nextPage());
    19d6:	81 11       	cpse	r24, r1
    19d8:	d2 cf       	rjmp	.-92     	; 0x197e <LeseTMCStatus(bool)+0x160>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:478
  }
  if ((TMCStatus.open_load_a == 1 || TMCStatus.open_load_b == 1) && PruefeOpenLoad) {
    19da:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    19de:	80 7c       	andi	r24, 0xC0	; 192
    19e0:	d9 f1       	breq	.+118    	; 0x1a58 <LeseTMCStatus(bool)+0x23a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:478 (discriminator 1)
    19e2:	cc 23       	and	r28, r28
    19e4:	c9 f1       	breq	.+114    	; 0x1a58 <LeseTMCStatus(bool)+0x23a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:479
    TMCFehler = true;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    19ec:	84 e1       	ldi	r24, 0x14	; 20
    19ee:	92 e0       	ldi	r25, 0x02	; 2
    19f0:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19f4:	0f e0       	ldi	r16, 0x0F	; 15
    19f6:	10 e0       	ldi	r17, 0x00	; 0
    19f8:	c8 e2       	ldi	r28, 0x28	; 40
    19fa:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    19fc:	6b ea       	ldi	r22, 0xAB	; 171
    19fe:	7a e0       	ldi	r23, 0x0A	; 10
    1a00:	84 e1       	ldi	r24, 0x14	; 20
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a08:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1a0c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1a10:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1a14:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:484
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1a18:	64 e2       	ldi	r22, 0x24	; 36
    1a1a:	71 e0       	ldi	r23, 0x01	; 1
    1a1c:	80 e1       	ldi	r24, 0x10	; 16
    1a1e:	92 e0       	ldi	r25, 0x02	; 2
    1a20:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1a24:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1a28:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1a2c:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    1a30:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1a34:	67 e2       	ldi	r22, 0x27	; 39
    1a36:	72 e0       	ldi	r23, 0x02	; 2
    1a38:	84 e1       	ldi	r24, 0x14	; 20
    1a3a:	92 e0       	ldi	r25, 0x02	; 2
    1a3c:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:487
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Unterbrechung Stepper"));
    1a40:	6e e0       	ldi	r22, 0x0E	; 14
    1a42:	71 e0       	ldi	r23, 0x01	; 1
    1a44:	80 e1       	ldi	r24, 0x10	; 16
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a4c:	84 e1       	ldi	r24, 0x14	; 20
    1a4e:	92 e0       	ldi	r25, 0x02	; 2
    1a50:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:488
    } while (u8g2.nextPage());
    1a54:	81 11       	cpse	r24, r1
    1a56:	d2 cf       	rjmp	.-92     	; 0x19fc <LeseTMCStatus(bool)+0x1de>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:490
  }
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	ff 90       	pop	r15
    1a62:	ef 90       	pop	r14
    1a64:	df 90       	pop	r13
    1a66:	cf 90       	pop	r12
    1a68:	08 95       	ret

00001a6a <BerechneTemperatur(int)>:
_Z18BerechneTemperaturi():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:492

void BerechneTemperatur(int temp) {
    1a6a:	8f 92       	push	r8
    1a6c:	9f 92       	push	r9
    1a6e:	af 92       	push	r10
    1a70:	bf 92       	push	r11
    1a72:	cf 92       	push	r12
    1a74:	df 92       	push	r13
    1a76:	ef 92       	push	r14
    1a78:	ff 92       	push	r15
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:493
  int Vo = map(temp, 0, 1023, 1023, 0);
    1a7e:	bc 01       	movw	r22, r24
    1a80:	99 0f       	add	r25, r25
    1a82:	88 0b       	sbc	r24, r24
    1a84:	99 0b       	sbc	r25, r25
    1a86:	1f 92       	push	r1
    1a88:	1f 92       	push	r1
    1a8a:	1f 92       	push	r1
    1a8c:	1f 92       	push	r1
    1a8e:	aa 24       	eor	r10, r10
    1a90:	aa 94       	dec	r10
    1a92:	23 e0       	ldi	r18, 0x03	; 3
    1a94:	b2 2e       	mov	r11, r18
    1a96:	c1 2c       	mov	r12, r1
    1a98:	d1 2c       	mov	r13, r1
    1a9a:	ee 24       	eor	r14, r14
    1a9c:	ea 94       	dec	r14
    1a9e:	13 e0       	ldi	r17, 0x03	; 3
    1aa0:	f1 2e       	mov	r15, r17
    1aa2:	00 e0       	ldi	r16, 0x00	; 0
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	a9 01       	movw	r20, r18
    1aac:	0e 94 7f 34 	call	0x68fe	; 0x68fe <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:494
  R2 = R1 * (1023.0 / (float)Vo - 1.0);
    1ab0:	07 2e       	mov	r0, r23
    1ab2:	00 0c       	add	r0, r0
    1ab4:	88 0b       	sbc	r24, r24
    1ab6:	99 0b       	sbc	r25, r25
    1ab8:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 ec       	ldi	r23, 0xC0	; 192
    1ac4:	8f e7       	ldi	r24, 0x7F	; 127
    1ac6:	94 e4       	ldi	r25, 0x44	; 68
    1ac8:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    1ad8:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <R1>
    1adc:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <R1+0x1>
    1ae0:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <R1+0x2>
    1ae4:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <R1+0x3>
    1ae8:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1aec:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <R2>
    1af0:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <R2+0x1>
    1af4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <R2+0x2>
    1af8:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <R2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:495
  logR2 = log(R2);
    1afc:	0e 94 a7 38 	call	0x714e	; 0x714e <log>
    1b00:	6b 01       	movw	r12, r22
    1b02:	7c 01       	movw	r14, r24
    1b04:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <logR2>
    1b08:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <logR2+0x1>
    1b0c:	e0 92 0e 02 	sts	0x020E, r14	; 0x80020e <logR2+0x2>
    1b10:	f0 92 0f 02 	sts	0x020F, r15	; 0x80020f <logR2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:496
  Temperatur = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
    1b14:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <c2>
    1b18:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <c2+0x1>
    1b1c:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <c2+0x2>
    1b20:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <c2+0x3>
    1b24:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1b28:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <c1>
    1b2c:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <c1+0x1>
    1b30:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <c1+0x2>
    1b34:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <c1+0x3>
    1b38:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    1b3c:	4b 01       	movw	r8, r22
    1b3e:	5c 01       	movw	r10, r24
    1b40:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <c3>
    1b44:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <c3+0x1>
    1b48:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <c3+0x2>
    1b4c:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <c3+0x3>
    1b50:	c7 01       	movw	r24, r14
    1b52:	b6 01       	movw	r22, r12
    1b54:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1b58:	a7 01       	movw	r20, r14
    1b5a:	96 01       	movw	r18, r12
    1b5c:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1b60:	a7 01       	movw	r20, r14
    1b62:	96 01       	movw	r18, r12
    1b64:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1b68:	9b 01       	movw	r18, r22
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	b4 01       	movw	r22, r8
    1b70:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	60 e0       	ldi	r22, 0x00	; 0
    1b7a:	70 e0       	ldi	r23, 0x00	; 0
    1b7c:	80 e8       	ldi	r24, 0x80	; 128
    1b7e:	9f e3       	ldi	r25, 0x3F	; 63
    1b80:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:497
  Temperatur = Temperatur - 273.15;
    1b84:	23 e3       	ldi	r18, 0x33	; 51
    1b86:	33 e9       	ldi	r19, 0x93	; 147
    1b88:	48 e8       	ldi	r20, 0x88	; 136
    1b8a:	53 e4       	ldi	r21, 0x43	; 67
    1b8c:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    1b90:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <Temperatur>
    1b94:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <Temperatur+0x1>
    1b98:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Temperatur+0x2>
    1b9c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Temperatur+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:498
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	df 90       	pop	r13
    1bb2:	cf 90       	pop	r12
    1bb4:	bf 90       	pop	r11
    1bb6:	af 90       	pop	r10
    1bb8:	9f 90       	pop	r9
    1bba:	8f 90       	pop	r8
    1bbc:	08 95       	ret

00001bbe <BerechneSperrgrad(int)>:
_Z17BerechneSperrgradi():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:502



int BerechneSperrgrad(int Eingabe) {
    1bbe:	4f 92       	push	r4
    1bc0:	5f 92       	push	r5
    1bc2:	6f 92       	push	r6
    1bc4:	7f 92       	push	r7
    1bc6:	8f 92       	push	r8
    1bc8:	9f 92       	push	r9
    1bca:	af 92       	push	r10
    1bcc:	bf 92       	push	r11
    1bce:	cf 92       	push	r12
    1bd0:	df 92       	push	r13
    1bd2:	ef 92       	push	r14
    1bd4:	ff 92       	push	r15
    1bd6:	0f 93       	push	r16
    1bd8:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:503
  float SperrgradRAW = Eingabe / 100;
    1bda:	64 e6       	ldi	r22, 0x64	; 100
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	0e 94 07 3a 	call	0x740e	; 0x740e <__divmodhi4>
    1be2:	07 2e       	mov	r0, r23
    1be4:	00 0c       	add	r0, r0
    1be6:	88 0b       	sbc	r24, r24
    1be8:	99 0b       	sbc	r25, r25
    1bea:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    1bee:	6b 01       	movw	r12, r22
    1bf0:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:504
  float SperrgradRAWKorrigiert = 0.9 * (SperrgradRAW * SperrgradRAW * SperrgradRAW) - 1.3 * (SperrgradRAW * SperrgradRAW) + 1.35 * SperrgradRAW + 0.03;
    1bf2:	ac 01       	movw	r20, r24
    1bf4:	9b 01       	movw	r18, r22
    1bf6:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1bfa:	4b 01       	movw	r8, r22
    1bfc:	5c 01       	movw	r10, r24
    1bfe:	a7 01       	movw	r20, r14
    1c00:	96 01       	movw	r18, r12
    1c02:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1c06:	26 e6       	ldi	r18, 0x66	; 102
    1c08:	36 e6       	ldi	r19, 0x66	; 102
    1c0a:	46 e6       	ldi	r20, 0x66	; 102
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1c12:	2b 01       	movw	r4, r22
    1c14:	3c 01       	movw	r6, r24
    1c16:	26 e6       	ldi	r18, 0x66	; 102
    1c18:	36 e6       	ldi	r19, 0x66	; 102
    1c1a:	46 ea       	ldi	r20, 0xA6	; 166
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	c5 01       	movw	r24, r10
    1c20:	b4 01       	movw	r22, r8
    1c22:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1c26:	9b 01       	movw	r18, r22
    1c28:	ac 01       	movw	r20, r24
    1c2a:	c3 01       	movw	r24, r6
    1c2c:	b2 01       	movw	r22, r4
    1c2e:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    1c32:	4b 01       	movw	r8, r22
    1c34:	5c 01       	movw	r10, r24
    1c36:	2d ec       	ldi	r18, 0xCD	; 205
    1c38:	3c ec       	ldi	r19, 0xCC	; 204
    1c3a:	4c ea       	ldi	r20, 0xAC	; 172
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	c7 01       	movw	r24, r14
    1c40:	b6 01       	movw	r22, r12
    1c42:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	c5 01       	movw	r24, r10
    1c4c:	b4 01       	movw	r22, r8
    1c4e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    1c52:	2f e8       	ldi	r18, 0x8F	; 143
    1c54:	32 ec       	ldi	r19, 0xC2	; 194
    1c56:	45 ef       	ldi	r20, 0xF5	; 245
    1c58:	5c e3       	ldi	r21, 0x3C	; 60
    1c5a:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:505
  SperrgradRAWKorrigiert = SperrgradRAWKorrigiert * 100;
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	48 ec       	ldi	r20, 0xC8	; 200
    1c64:	52 e4       	ldi	r21, 0x42	; 66
    1c66:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:506
  int temp = (int)SperrgradRAWKorrigiert;
    1c6a:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <__fixsfsi>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:509
  if (temp < 0)
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
    1c6e:	a0 90 a6 02 	lds	r10, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1c72:	b0 90 a7 02 	lds	r11, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1c76:	0b 2c       	mov	r0, r11
    1c78:	00 0c       	add	r0, r0
    1c7a:	cc 08       	sbc	r12, r12
    1c7c:	dd 08       	sbc	r13, r13
    1c7e:	77 ff       	sbrs	r23, 7
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <BerechneSperrgrad(int)+0xc8>
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	60 e0       	ldi	r22, 0x00	; 0
    1c86:	07 2e       	mov	r0, r23
    1c88:	00 0c       	add	r0, r0
    1c8a:	88 0b       	sbc	r24, r24
    1c8c:	99 0b       	sbc	r25, r25
    1c8e:	00 91 ae 02 	lds	r16, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1c92:	10 91 af 02 	lds	r17, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1c96:	01 2e       	mov	r0, r17
    1c98:	00 0c       	add	r0, r0
    1c9a:	22 0b       	sbc	r18, r18
    1c9c:	33 0b       	sbc	r19, r19
    1c9e:	3f 93       	push	r19
    1ca0:	2f 93       	push	r18
    1ca2:	1f 93       	push	r17
    1ca4:	0f 93       	push	r16
    1ca6:	12 e6       	ldi	r17, 0x62	; 98
    1ca8:	e1 2e       	mov	r14, r17
    1caa:	f1 2c       	mov	r15, r1
    1cac:	00 e0       	ldi	r16, 0x00	; 0
    1cae:	10 e0       	ldi	r17, 0x00	; 0
    1cb0:	23 e0       	ldi	r18, 0x03	; 3
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	0e 94 7f 34 	call	0x68fe	; 0x68fe <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:510
  return temp;
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:511
}
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	bf 90       	pop	r11
    1cd4:	af 90       	pop	r10
    1cd6:	9f 90       	pop	r9
    1cd8:	8f 90       	pop	r8
    1cda:	7f 90       	pop	r7
    1cdc:	6f 90       	pop	r6
    1cde:	5f 90       	pop	r5
    1ce0:	4f 90       	pop	r4
    1ce2:	08 95       	ret

00001ce4 <LeseEingaenge()>:
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:399

    } while (u8g2.nextPage());
  }
}

void LeseEingaenge() {
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:401
  // Lese Eingaenge
  BerechneTemperatur(analogRead(IO_Temperatur));
    1cec:	8e e0       	ldi	r24, 0x0E	; 14
    1cee:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <analogRead>
    1cf2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <BerechneTemperatur(int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:403
  
   if(!digitalRead(IO_Eingabe_25)) 
    1cf6:	8f e0       	ldi	r24, 0x0F	; 15
    1cf8:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    1cfc:	89 2b       	or	r24, r25
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <LeseEingaenge()+0x1e>
    1d00:	3e c0       	rjmp	.+124    	; 0x1d7e <LeseEingaenge()+0x9a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:405
  {
    Sperrgrad = BerechneSperrgrad(25);
    1d02:	89 e1       	ldi	r24, 0x19	; 25
    1d04:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:417
  {
    Sperrgrad = BerechneSperrgrad(75);
  }
  else if (!digitalRead(IO_Eingabe_100))
  {
    Sperrgrad = BerechneSperrgrad(100);
    1d06:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <BerechneSperrgrad(int)>
    1d0a:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <Sperrgrad+0x1>
    1d0e:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sperrgrad>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:422
  }

  // Anpassung des Sperrgrades über die Öltemperatur:
  // Bei wärmer werdendem Öl, wird das Ventil weiter geschlossen
  TempOffset = (Temperatur - 20) / 4;
    1d12:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <Temperatur>
    1d16:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <Temperatur+0x1>
    1d1a:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <Temperatur+0x2>
    1d1e:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <Temperatur+0x3>
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 ea       	ldi	r20, 0xA0	; 160
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	c7 01       	movw	r24, r14
    1d2c:	b6 01       	movw	r22, r12
    1d2e:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e8       	ldi	r20, 0x80	; 128
    1d38:	5e e3       	ldi	r21, 0x3E	; 62
    1d3a:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    1d3e:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <__fixsfsi>
    1d42:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <TempOffset+0x1>
    1d46:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <TempOffset>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:425

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	48 ec       	ldi	r20, 0xC8	; 200
    1d50:	52 e4       	ldi	r21, 0x42	; 66
    1d52:	c7 01       	movw	r24, r14
    1d54:	b6 01       	movw	r22, r12
    1d56:	0e 94 9a 38 	call	0x7134	; 0x7134 <__gesf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <LeseEingaenge()+0xcc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:425 (discriminator 1)
    1d5e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1d62:	81 11       	cpse	r24, r1
    1d64:	25 c0       	rjmp	.+74     	; 0x1db0 <LeseEingaenge()+0xcc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:426
    ZustandTemperatur = true;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ZustandTemperatur>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:427
    ZustandBearbeitet = false;
    1d6c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:432
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    ZustandTemperatur = false;
  }

  LeseTMCStatus(false);
    1d70:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:433
}
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	df 90       	pop	r13
    1d78:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:432
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    ZustandTemperatur = false;
  }

  LeseTMCStatus(false);
    1d7a:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:407
  
   if(!digitalRead(IO_Eingabe_25)) 
  {
    Sperrgrad = BerechneSperrgrad(25);
  }
  else if (!digitalRead(IO_Eingabe_50))
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    1d84:	89 2b       	or	r24, r25
    1d86:	19 f4       	brne	.+6      	; 0x1d8e <LeseEingaenge()+0xaa>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:409
  {
    Sperrgrad = BerechneSperrgrad(50);
    1d88:	82 e3       	ldi	r24, 0x32	; 50
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	bc cf       	rjmp	.-136    	; 0x1d06 <LeseEingaenge()+0x22>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:411
  }
  else if (!digitalRead(IO_Eingabe_75))
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    1d94:	89 2b       	or	r24, r25
    1d96:	19 f4       	brne	.+6      	; 0x1d9e <LeseEingaenge()+0xba>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:413
  {
    Sperrgrad = BerechneSperrgrad(75);
    1d98:	8b e4       	ldi	r24, 0x4B	; 75
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	b4 cf       	rjmp	.-152    	; 0x1d06 <LeseEingaenge()+0x22>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:415
  }
  else if (!digitalRead(IO_Eingabe_100))
    1d9e:	81 e1       	ldi	r24, 0x11	; 17
    1da0:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    1da4:	89 2b       	or	r24, r25
    1da6:	09 f0       	breq	.+2      	; 0x1daa <LeseEingaenge()+0xc6>
    1da8:	b4 cf       	rjmp	.-152    	; 0x1d12 <LeseEingaenge()+0x2e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:417
  {
    Sperrgrad = BerechneSperrgrad(100);
    1daa:	84 e6       	ldi	r24, 0x64	; 100
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	ab cf       	rjmp	.-170    	; 0x1d06 <LeseEingaenge()+0x22>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:428

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    ZustandTemperatur = true;
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4e eb       	ldi	r20, 0xBE	; 190
    1db6:	52 e4       	ldi	r21, 0x42	; 66
    1db8:	c7 01       	movw	r24, r14
    1dba:	b6 01       	movw	r22, r12
    1dbc:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	b4 f2       	brlt	.-84     	; 0x1d70 <LeseEingaenge()+0x8c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:428 (discriminator 1)
    1dc4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1dc8:	88 23       	and	r24, r24
    1dca:	91 f2       	breq	.-92     	; 0x1d70 <LeseEingaenge()+0x8c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:429
    ZustandTemperatur = false;
    1dcc:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <ZustandTemperatur>
    1dd0:	cf cf       	rjmp	.-98     	; 0x1d70 <LeseEingaenge()+0x8c>

00001dd2 <loop>:
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:216
  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
}

void loop() {
    1dd2:	af 92       	push	r10
    1dd4:	bf 92       	push	r11
    1dd6:	cf 92       	push	r12
    1dd8:	df 92       	push	r13
    1dda:	ef 92       	push	r14
    1ddc:	ff 92       	push	r15
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:218
  // Lese Eingänge alle 100 ms
  if (millis() - MillisLeseEingaenge >= IntervalLeseEingaenge) {
    1de6:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <millis>
    1dea:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <MillisLeseEingaenge>
    1dee:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <MillisLeseEingaenge+0x1>
    1df2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <MillisLeseEingaenge+0x2>
    1df6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <MillisLeseEingaenge+0x3>
    1dfa:	60 1b       	sub	r22, r16
    1dfc:	71 0b       	sbc	r23, r17
    1dfe:	82 0b       	sbc	r24, r18
    1e00:	93 0b       	sbc	r25, r19
    1e02:	62 33       	cpi	r22, 0x32	; 50
    1e04:	71 05       	cpc	r23, r1
    1e06:	81 05       	cpc	r24, r1
    1e08:	91 05       	cpc	r25, r1
    1e0a:	60 f0       	brcs	.+24     	; 0x1e24 <loop+0x52>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:219
    MillisLeseEingaenge = millis();
    1e0c:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <millis>
    1e10:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <MillisLeseEingaenge>
    1e14:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <MillisLeseEingaenge+0x1>
    1e18:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <MillisLeseEingaenge+0x2>
    1e1c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <MillisLeseEingaenge+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:220
    LeseEingaenge();
    1e20:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <LeseEingaenge()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:224
  }

  // Lese Eingänge alle 250 ms
  if (millis() - MillisSchreibe >= IntervalSchreibe) {
    1e24:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <millis>
    1e28:	00 91 fc 01 	lds	r16, 0x01FC	; 0x8001fc <MillisSchreibe>
    1e2c:	10 91 fd 01 	lds	r17, 0x01FD	; 0x8001fd <MillisSchreibe+0x1>
    1e30:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <MillisSchreibe+0x2>
    1e34:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <MillisSchreibe+0x3>
    1e38:	60 1b       	sub	r22, r16
    1e3a:	71 0b       	sbc	r23, r17
    1e3c:	82 0b       	sbc	r24, r18
    1e3e:	93 0b       	sbc	r25, r19
    1e40:	64 36       	cpi	r22, 0x64	; 100
    1e42:	71 05       	cpc	r23, r1
    1e44:	81 05       	cpc	r24, r1
    1e46:	91 05       	cpc	r25, r1
    1e48:	f8 f0       	brcs	.+62     	; 0x1e88 <loop+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:225
    MillisSchreibe = millis();
    1e4a:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <millis>
    1e4e:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <MillisSchreibe>
    1e52:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <MillisSchreibe+0x1>
    1e56:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <MillisSchreibe+0x2>
    1e5a:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <MillisSchreibe+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:226
    if ((stepper.distanceToGo() * stepper.distanceToGo()) < 4) {
    1e5e:	82 eb       	ldi	r24, 0xB2	; 178
    1e60:	92 e0       	ldi	r25, 0x02	; 2
    1e62:	0e 94 3e 1c 	call	0x387c	; 0x387c <AccelStepper::distanceToGo()>
    1e66:	6b 01       	movw	r12, r22
    1e68:	7c 01       	movw	r14, r24
    1e6a:	82 eb       	ldi	r24, 0xB2	; 178
    1e6c:	92 e0       	ldi	r25, 0x02	; 2
    1e6e:	0e 94 3e 1c 	call	0x387c	; 0x387c <AccelStepper::distanceToGo()>
    1e72:	a7 01       	movw	r20, r14
    1e74:	96 01       	movw	r18, r12
    1e76:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <__mulsi3>
    1e7a:	64 30       	cpi	r22, 0x04	; 4
    1e7c:	71 05       	cpc	r23, r1
    1e7e:	81 05       	cpc	r24, r1
    1e80:	91 05       	cpc	r25, r1
    1e82:	14 f4       	brge	.+4      	; 0x1e88 <loop+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:227
      SchreibeDisplay();
    1e84:	0e 94 1b 0a 	call	0x1436	; 0x1436 <SchreibeDisplay()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:232
    }
  }

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    1e88:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <millis>
    1e8c:	00 91 f8 01 	lds	r16, 0x01F8	; 0x8001f8 <MillisLED>
    1e90:	10 91 f9 01 	lds	r17, 0x01F9	; 0x8001f9 <MillisLED+0x1>
    1e94:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <MillisLED+0x2>
    1e98:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <MillisLED+0x3>
    1e9c:	60 1b       	sub	r22, r16
    1e9e:	71 0b       	sbc	r23, r17
    1ea0:	82 0b       	sbc	r24, r18
    1ea2:	93 0b       	sbc	r25, r19
    1ea4:	64 3f       	cpi	r22, 0xF4	; 244
    1ea6:	71 40       	sbci	r23, 0x01	; 1
    1ea8:	81 05       	cpc	r24, r1
    1eaa:	91 05       	cpc	r25, r1
    1eac:	08 f4       	brcc	.+2      	; 0x1eb0 <loop+0xde>
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <loop+0x15c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:233
    MillisLED = millis();
    1eb0:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <millis>
    1eb4:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <MillisLED>
    1eb8:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <MillisLED+0x1>
    1ebc:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <MillisLED+0x2>
    1ec0:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <MillisLED+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:234
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) >= 60) {
    1ec4:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1ec8:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1ecc:	0f 2c       	mov	r0, r15
    1ece:	00 0c       	add	r0, r0
    1ed0:	00 0b       	sbc	r16, r16
    1ed2:	11 0b       	sbc	r17, r17
    1ed4:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1ed8:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1edc:	03 2e       	mov	r0, r19
    1ede:	00 0c       	add	r0, r0
    1ee0:	44 0b       	sbc	r20, r20
    1ee2:	55 0b       	sbc	r21, r21
    1ee4:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    1ee8:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    1eec:	07 2e       	mov	r0, r23
    1eee:	00 0c       	add	r0, r0
    1ef0:	88 0b       	sbc	r24, r24
    1ef2:	99 0b       	sbc	r25, r25
    1ef4:	1f 92       	push	r1
    1ef6:	1f 92       	push	r1
    1ef8:	1f 92       	push	r1
    1efa:	e4 e6       	ldi	r30, 0x64	; 100
    1efc:	ef 93       	push	r30
    1efe:	a1 2c       	mov	r10, r1
    1f00:	b1 2c       	mov	r11, r1
    1f02:	65 01       	movw	r12, r10
    1f04:	0e 94 7f 34 	call	0x68fe	; 0x68fe <map(long, long, long, long, long)>
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	6c 33       	cpi	r22, 0x3C	; 60
    1f12:	71 05       	cpc	r23, r1
    1f14:	81 05       	cpc	r24, r1
    1f16:	91 05       	cpc	r25, r1
    1f18:	34 f0       	brlt	.+12     	; 0x1f26 <loop+0x154>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:235
      if (digitalRead(IO_LED_Sperrgrad))
    1f1a:	8d e0       	ldi	r24, 0x0D	; 13
    1f1c:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:238
        digitalWrite(IO_LED_Sperrgrad, LOW);
      else
        digitalWrite(IO_LED_Sperrgrad, HIGH);
    1f20:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:235

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    MillisLED = millis();
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) >= 60) {
      if (digitalRead(IO_LED_Sperrgrad))
    1f22:	89 2b       	or	r24, r25
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <loop+0x156>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:236
        digitalWrite(IO_LED_Sperrgrad, LOW);
    1f26:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:238
      else
        digitalWrite(IO_LED_Sperrgrad, HIGH);
    1f28:	8d e0       	ldi	r24, 0x0D	; 13
    1f2a:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:245
      digitalWrite(IO_LED_Sperrgrad, LOW);
    }
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    1f2e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1f32:	81 11       	cpse	r24, r1
    1f34:	2c c0       	rjmp	.+88     	; 0x1f8e <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:245 (discriminator 2)
    1f36:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	28 c0       	rjmp	.+80     	; 0x1f8e <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:245 (discriminator 4)
    1f3e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1f42:	81 11       	cpse	r24, r1
    1f44:	24 c0       	rjmp	.+72     	; 0x1f8e <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:253
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
      ZustandBearbeitet = true;
      stepper.setCurrentPosition(0);
    }
  } else if (ZustandHauptschalter) {
    1f46:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <loop+0x17e>
    1f4e:	6f c0       	rjmp	.+222    	; 0x202e <loop+0x25c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:255
    // Wenn der Hauptschalter aus ist, Stepper und Pumpe stromlos machen
    digitalWrite(IO_Enable, HIGH);
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	84 e0       	ldi	r24, 0x04	; 4
    1f54:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:256
    digitalWrite(IO_Pumpe, LOW);
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	87 e1       	ldi	r24, 0x17	; 23
    1f5c:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:258
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    1f60:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    1f64:	81 11       	cpse	r24, r1
    1f66:	25 c0       	rjmp	.+74     	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:259
      ZustandBearbeitet = true;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:260
      stepper.setCurrentPosition(0);
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	ba 01       	movw	r22, r20
    1f74:	82 eb       	ldi	r24, 0xB2	; 178
    1f76:	92 e0       	ldi	r25, 0x02	; 2
    1f78:	0e 94 56 1c 	call	0x38ac	; 0x38ac <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:261
      stepper.setSpeed(1000);
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	6a e7       	ldi	r22, 0x7A	; 122
    1f82:	74 e4       	ldi	r23, 0x44	; 68
    1f84:	82 eb       	ldi	r24, 0xB2	; 178
    1f86:	92 e0       	ldi	r25, 0x02	; 2
    1f88:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <AccelStepper::setSpeed(float)>
    1f8c:	12 c0       	rjmp	.+36     	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:247
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    // Wenn Bremse, Handbremse oder Übertemperatur vorhanden sind, Stepper stromlos machen
    digitalWrite(IO_Enable, HIGH);
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	84 e0       	ldi	r24, 0x04	; 4
    1f92:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:249
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    1f96:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	0a c0       	rjmp	.+20     	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:250
      ZustandBearbeitet = true;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:251
      stepper.setCurrentPosition(0);
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	50 e0       	ldi	r21, 0x00	; 0
    1fa8:	ba 01       	movw	r22, r20
    1faa:	82 eb       	ldi	r24, 0xB2	; 178
    1fac:	92 e0       	ldi	r25, 0x02	; 2
    1fae:	0e 94 56 1c 	call	0x38ac	; 0x38ac <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:287
      }
    }
  }

  // Fehler im Treiber des Schrittmotors
  if (TMCFehler) {
    1fb2:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    1fb6:	88 23       	and	r24, r24
    1fb8:	41 f0       	breq	.+16     	; 0x1fca <loop+0x1f8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:289
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	84 e0       	ldi	r24, 0x04	; 4
    1fbe:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:290
    digitalWrite(IO_Pumpe, LOW);
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	87 e1       	ldi	r24, 0x17	; 23
    1fc6:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:295
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    1fca:	89 e0       	ldi	r24, 0x09	; 9
    1fcc:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    1fd0:	89 2b       	or	r24, r25
    1fd2:	09 f4       	brne	.+2      	; 0x1fd6 <loop+0x204>
    1fd4:	a1 c0       	rjmp	.+322    	; 0x2118 <loop+0x346>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:312
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Vorladepumpe"));

    } while (u8g2.nextPage());
  } else {
    PumpeFehler = false;
    1fd6:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
    1fda:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <Sperrgrad>
    1fde:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    1fe2:	40 91 f2 01 	lds	r20, 0x01F2	; 0x8001f2 <TempOffset>
    1fe6:	50 91 f3 01 	lds	r21, 0x01F3	; 0x8001f3 <TempOffset+0x1>
    1fea:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    1fee:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:319



  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    1ff2:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1ff6:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1ffa:	77 ff       	sbrs	r23, 7
    1ffc:	db c0       	rjmp	.+438    	; 0x21b4 <loop+0x3e2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:320
    SperrgradKompensiert = Sperrgrad - TempOffset;
    1ffe:	24 1b       	sub	r18, r20
    2000:	35 0b       	sbc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:321
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
    2002:	ac 01       	movw	r20, r24
    2004:	4c 5f       	subi	r20, 0xFC	; 252
    2006:	5f 4f       	sbci	r21, 0xFF	; 255
    2008:	42 17       	cp	r20, r18
    200a:	53 07       	cpc	r21, r19
    200c:	0c f0       	brlt	.+2      	; 0x2010 <loop+0x23e>
    200e:	cc c0       	rjmp	.+408    	; 0x21a8 <loop+0x3d6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:324
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    2010:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <SperrgradKompensiert+0x1>
    2014:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:328
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	1f 91       	pop	r17
    201e:	0f 91       	pop	r16
    2020:	ff 90       	pop	r15
    2022:	ef 90       	pop	r14
    2024:	df 90       	pop	r13
    2026:	cf 90       	pop	r12
    2028:	bf 90       	pop	r11
    202a:	af 90       	pop	r10
    202c:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:266
      stepper.setSpeed(1000);
    }
  }
  // Kein Abschaltgrund liegt vor
  // Stepper aktivieren, Vorladepumpe einschalten
  else if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur && !TMCFehler) {
    202e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    2032:	81 11       	cpse	r24, r1
    2034:	be cf       	rjmp	.-132    	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:266 (discriminator 1)
    2036:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    203a:	81 11       	cpse	r24, r1
    203c:	ba cf       	rjmp	.-140    	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:266 (discriminator 3)
    203e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    2042:	81 11       	cpse	r24, r1
    2044:	b6 cf       	rjmp	.-148    	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:266 (discriminator 5)
    2046:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    204a:	81 11       	cpse	r24, r1
    204c:	b2 cf       	rjmp	.-156    	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:266 (discriminator 7)
    204e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    2052:	81 11       	cpse	r24, r1
    2054:	b2 cf       	rjmp	.-156    	; 0x1fba <loop+0x1e8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:267
    digitalWrite(IO_Enable, LOW);
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	84 e0       	ldi	r24, 0x04	; 4
    205a:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:268
    digitalWrite(IO_Pumpe, HIGH);
    205e:	61 e0       	ldi	r22, 0x01	; 1
    2060:	87 e1       	ldi	r24, 0x17	; 23
    2062:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:269
    stepper.moveTo(SperrgradKompensiert);
    2066:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    206a:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    206e:	05 2e       	mov	r0, r21
    2070:	00 0c       	add	r0, r0
    2072:	66 0b       	sbc	r22, r22
    2074:	77 0b       	sbc	r23, r23
    2076:	82 eb       	ldi	r24, 0xB2	; 178
    2078:	92 e0       	ldi	r25, 0x02	; 2
    207a:	0e 94 cd 1b 	call	0x379a	; 0x379a <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:270
    stepper.setSpeed(1000);
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	6a e7       	ldi	r22, 0x7A	; 122
    2084:	74 e4       	ldi	r23, 0x44	; 68
    2086:	82 eb       	ldi	r24, 0xB2	; 178
    2088:	92 e0       	ldi	r25, 0x02	; 2
    208a:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:271
    stepper.runSpeedToPosition();
    208e:	82 eb       	ldi	r24, 0xB2	; 178
    2090:	92 e0       	ldi	r25, 0x02	; 2
    2092:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:274

    // Sofern der Zustand gewechselt hat, Stepper aktivieren und zur alten Position fahren
    if (!ZustandBearbeitet) {
    2096:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    209a:	81 11       	cpse	r24, r1
    209c:	8a cf       	rjmp	.-236    	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:275
      stepper.setCurrentPosition(0);
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	ba 01       	movw	r22, r20
    20a4:	82 eb       	ldi	r24, 0xB2	; 178
    20a6:	92 e0       	ldi	r25, 0x02	; 2
    20a8:	0e 94 56 1c 	call	0x38ac	; 0x38ac <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:276
      stepper.setSpeed(1000);
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	6a e7       	ldi	r22, 0x7A	; 122
    20b2:	74 e4       	ldi	r23, 0x44	; 68
    20b4:	82 eb       	ldi	r24, 0xB2	; 178
    20b6:	92 e0       	ldi	r25, 0x02	; 2
    20b8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:277
      ZustandBearbeitet = true;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:278
      stepper.moveTo(SperrgradKompensiert);
    20c2:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    20c6:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    20ca:	05 2e       	mov	r0, r21
    20cc:	00 0c       	add	r0, r0
    20ce:	66 0b       	sbc	r22, r22
    20d0:	77 0b       	sbc	r23, r23
    20d2:	82 eb       	ldi	r24, 0xB2	; 178
    20d4:	92 e0       	ldi	r25, 0x02	; 2
    20d6:	0e 94 cd 1b 	call	0x379a	; 0x379a <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:279
      stepper.setSpeed(1000);
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	6a e7       	ldi	r22, 0x7A	; 122
    20e0:	74 e4       	ldi	r23, 0x44	; 68
    20e2:	82 eb       	ldi	r24, 0xB2	; 178
    20e4:	92 e0       	ldi	r25, 0x02	; 2
    20e6:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:280
      while (stepper.currentPosition() != SperrgradKompensiert) {
    20ea:	82 eb       	ldi	r24, 0xB2	; 178
    20ec:	92 e0       	ldi	r25, 0x02	; 2
    20ee:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <AccelStepper::currentPosition()>
    20f2:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    20f6:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    20fa:	89 01       	movw	r16, r18
    20fc:	33 0f       	add	r19, r19
    20fe:	22 0b       	sbc	r18, r18
    2100:	33 0b       	sbc	r19, r19
    2102:	60 17       	cp	r22, r16
    2104:	71 07       	cpc	r23, r17
    2106:	82 07       	cpc	r24, r18
    2108:	93 07       	cpc	r25, r19
    210a:	09 f4       	brne	.+2      	; 0x210e <loop+0x33c>
    210c:	52 cf       	rjmp	.-348    	; 0x1fb2 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:281
        stepper.runSpeedToPosition();
    210e:	82 eb       	ldi	r24, 0xB2	; 178
    2110:	92 e0       	ldi	r25, 0x02	; 2
    2112:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:280
      stepper.setCurrentPosition(0);
      stepper.setSpeed(1000);
      ZustandBearbeitet = true;
      stepper.moveTo(SperrgradKompensiert);
      stepper.setSpeed(1000);
      while (stepper.currentPosition() != SperrgradKompensiert) {
    2116:	e9 cf       	rjmp	.-46     	; 0x20ea <loop+0x318>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:295 (discriminator 1)
    digitalWrite(IO_Pumpe, LOW);
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    2118:	87 e1       	ldi	r24, 0x17	; 23
    211a:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    211e:	89 2b       	or	r24, r25
    2120:	09 f4       	brne	.+2      	; 0x2124 <loop+0x352>
    2122:	59 cf       	rjmp	.-334    	; 0x1fd6 <loop+0x204>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:296
    PumpeFehler = true;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:298
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:299
    digitalWrite(IO_Pumpe, LOW);
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	87 e1       	ldi	r24, 0x17	; 23
    2136:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    213a:	84 e1       	ldi	r24, 0x14	; 20
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2142:	cf e0       	ldi	r28, 0x0F	; 15
    2144:	d0 e0       	ldi	r29, 0x00	; 0
    2146:	09 e1       	ldi	r16, 0x19	; 25
    2148:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    214a:	6b ea       	ldi	r22, 0xAB	; 171
    214c:	7a e0       	ldi	r23, 0x0A	; 10
    214e:	84 e1       	ldi	r24, 0x14	; 20
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2156:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    215a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    215e:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    2162:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:305
    u8g2.firstPage();
    do {

      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    2166:	68 ef       	ldi	r22, 0xF8	; 248
    2168:	71 e0       	ldi	r23, 0x01	; 1
    216a:	80 e1       	ldi	r24, 0x10	; 16
    216c:	92 e0       	ldi	r25, 0x02	; 2
    216e:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    2172:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2176:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    217a:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    217e:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    2182:	67 e2       	ldi	r22, 0x27	; 39
    2184:	72 e0       	ldi	r23, 0x02	; 2
    2186:	84 e1       	ldi	r24, 0x14	; 20
    2188:	92 e0       	ldi	r25, 0x02	; 2
    218a:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:308
      u8g2.setCursor(0, 25);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Vorladepumpe"));
    218e:	6b ee       	ldi	r22, 0xEB	; 235
    2190:	71 e0       	ldi	r23, 0x01	; 1
    2192:	80 e1       	ldi	r24, 0x10	; 16
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    219a:	84 e1       	ldi	r24, 0x14	; 20
    219c:	92 e0       	ldi	r25, 0x02	; 2
    219e:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:310

    } while (u8g2.nextPage());
    21a2:	81 11       	cpse	r24, r1
    21a4:	d2 cf       	rjmp	.-92     	; 0x214a <loop+0x378>
    21a6:	19 cf       	rjmp	.-462    	; 0x1fda <loop+0x208>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:322
  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
    21a8:	05 96       	adiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:326
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    21aa:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <SperrgradKompensiert+0x1>
    21ae:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:328
  }
}
    21b2:	32 cf       	rjmp	.-412    	; 0x2018 <loop+0x246>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:324
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    21b4:	24 0f       	add	r18, r20
    21b6:	35 1f       	adc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:325
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    21b8:	ac 01       	movw	r20, r24
    21ba:	44 50       	subi	r20, 0x04	; 4
    21bc:	51 09       	sbc	r21, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:326
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    21be:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:325
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    21c0:	24 17       	cp	r18, r20
    21c2:	35 07       	cpc	r19, r21
    21c4:	94 f7       	brge	.-28     	; 0x21aa <loop+0x3d8>
    21c6:	24 cf       	rjmp	.-440    	; 0x2010 <loop+0x23e>

000021c8 <autoHome(int)>:
_Z8autoHomei():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:513
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
  return temp;
}

int autoHome(int pos) {
    21c8:	8f 92       	push	r8
    21ca:	9f 92       	push	r9
    21cc:	af 92       	push	r10
    21ce:	bf 92       	push	r11
    21d0:	cf 92       	push	r12
    21d2:	df 92       	push	r13
    21d4:	ef 92       	push	r14
    21d6:	ff 92       	push	r15
    21d8:	6c 01       	movw	r12, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:514
  digitalWrite(IO_Enable, LOW);
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	84 e0       	ldi	r24, 0x04	; 4
    21de:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:516
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
    21e2:	0d 2c       	mov	r0, r13
    21e4:	00 0c       	add	r0, r0
    21e6:	ee 08       	sbc	r14, r14
    21e8:	ff 08       	sbc	r15, r15
    21ea:	b7 01       	movw	r22, r14
    21ec:	a6 01       	movw	r20, r12
    21ee:	82 eb       	ldi	r24, 0xB2	; 178
    21f0:	92 e0       	ldi	r25, 0x02	; 2
    21f2:	0e 94 cd 1b 	call	0x379a	; 0x379a <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:518
  // Fahre langsam
  stepper.setSpeed(400);
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	68 ec       	ldi	r22, 0xC8	; 200
    21fc:	73 e4       	ldi	r23, 0x43	; 67
    21fe:	82 eb       	ldi	r24, 0xB2	; 178
    2200:	92 e0       	ldi	r25, 0x02	; 2
    2202:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:520
  // Die ersten Schritte ohne StallGuard
  while (stepper.currentPosition() != (pos * 0.1)) {
    2206:	82 eb       	ldi	r24, 0xB2	; 178
    2208:	92 e0       	ldi	r25, 0x02	; 2
    220a:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <AccelStepper::currentPosition()>
    220e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    2212:	4b 01       	movw	r8, r22
    2214:	5c 01       	movw	r10, r24
    2216:	c7 01       	movw	r24, r14
    2218:	b6 01       	movw	r22, r12
    221a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    221e:	2d ec       	ldi	r18, 0xCD	; 205
    2220:	3c ec       	ldi	r19, 0xCC	; 204
    2222:	4c ec       	ldi	r20, 0xCC	; 204
    2224:	5d e3       	ldi	r21, 0x3D	; 61
    2226:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    222a:	9b 01       	movw	r18, r22
    222c:	ac 01       	movw	r20, r24
    222e:	c5 01       	movw	r24, r10
    2230:	b4 01       	movw	r22, r8
    2232:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    2236:	88 23       	and	r24, r24
    2238:	29 f0       	breq	.+10     	; 0x2244 <autoHome(int)+0x7c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:521
    stepper.runSpeedToPosition();
    223a:	82 eb       	ldi	r24, 0xB2	; 178
    223c:	92 e0       	ldi	r25, 0x02	; 2
    223e:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:520
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
  // Fahre langsam
  stepper.setSpeed(400);
  // Die ersten Schritte ohne StallGuard
  while (stepper.currentPosition() != (pos * 0.1)) {
    2242:	e1 cf       	rjmp	.-62     	; 0x2206 <autoHome(int)+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:524
    stepper.runSpeedToPosition();
  }
  // Wenn der Stepper in Bewegung ist, StallGuard laufend auslesen
  while (stepper.currentPosition() != pos) {
    2244:	82 eb       	ldi	r24, 0xB2	; 178
    2246:	92 e0       	ldi	r25, 0x02	; 2
    2248:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <AccelStepper::currentPosition()>
    224c:	c6 16       	cp	r12, r22
    224e:	d7 06       	cpc	r13, r23
    2250:	e8 06       	cpc	r14, r24
    2252:	f9 06       	cpc	r15, r25
    2254:	c1 f0       	breq	.+48     	; 0x2286 <autoHome(int)+0xbe>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:525
    stepper.runSpeedToPosition();
    2256:	82 eb       	ldi	r24, 0xB2	; 178
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:526
    int stall_guard_result = stepper_driver.getStallGuardResult();
    225e:	8a ef       	ldi	r24, 0xFA	; 250
    2260:	92 e0       	ldi	r25, 0x02	; 2
    2262:	0e 94 6f 16 	call	0x2cde	; 0x2cde <TMC2209::getStallGuardResult()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:528
    // Wenn der Rückgabewert des Stallguards höher als die Schwelle ist, blockiert der Motor
    if ((stall_guard_result < (STALL_GUARD_THRESHOLD * 2))) {
    2266:	0a 97       	sbiw	r24, 0x0a	; 10
    2268:	6c f7       	brge	.-38     	; 0x2244 <autoHome(int)+0x7c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:530
      // Ermittelten Wert nach oben geben
      return stepper.currentPosition();
    226a:	82 eb       	ldi	r24, 0xB2	; 178
    226c:	92 e0       	ldi	r25, 0x02	; 2
    226e:	0e 94 50 1c 	call	0x38a0	; 0x38a0 <AccelStepper::currentPosition()>
    2272:	cb 01       	movw	r24, r22
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:533
    }
  }
}
    2274:	ff 90       	pop	r15
    2276:	ef 90       	pop	r14
    2278:	df 90       	pop	r13
    227a:	cf 90       	pop	r12
    227c:	bf 90       	pop	r11
    227e:	af 90       	pop	r10
    2280:	9f 90       	pop	r9
    2282:	8f 90       	pop	r8
    2284:	08 95       	ret
    2286:	f6 cf       	rjmp	.-20     	; 0x2274 <autoHome(int)+0xac>

00002288 <eepromWriteInt(int, int)>:
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:535

void eepromWriteInt(int adr, int wert) {
    2288:	ff 92       	push	r15
    228a:	0f 93       	push	r16
    228c:	1f 93       	push	r17
    228e:	cf 93       	push	r28
    2290:	df 93       	push	r29
    2292:	00 d0       	rcall	.+0      	; 0x2294 <eepromWriteInt(int, int)+0xc>
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	8c 01       	movw	r16, r24
    229a:	f7 2e       	mov	r15, r23
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    22a0:	ce 01       	movw	r24, r28
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	0e 94 90 09 	call	0x1320	; 0x1320 <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:540
  byte low, high;
  low = wert & 0xFF;
  high = (wert >> 8) & 0xFF;
  EEPROM.update(adr, low);
  EEPROM.update(adr + 1, high);
    22a8:	0f 5f       	subi	r16, 0xFF	; 255
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    22ac:	1a 83       	std	Y+2, r17	; 0x02
    22ae:	09 83       	std	Y+1, r16	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    22b0:	6f 2d       	mov	r22, r15
    22b2:	ce 01       	movw	r24, r28
    22b4:	01 96       	adiw	r24, 0x01	; 1
    22b6:	0e 94 90 09 	call	0x1320	; 0x1320 <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:542
  return;
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	ff 90       	pop	r15
    22c8:	08 95       	ret

000022ca <eepromReadInt(int)>:
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:544

int eepromReadInt(int adr) {
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	ec 01       	movw	r28, r24
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    22d2:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <eeprom_read_byte>
    22d6:	18 2f       	mov	r17, r24
    22d8:	ce 01       	movw	r24, r28
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <eeprom_read_byte>
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:548
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	98 2f       	mov	r25, r24
    22e4:	88 27       	eor	r24, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:549
    22e6:	81 0f       	add	r24, r17
    22e8:	91 1d       	adc	r25, r1
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	08 95       	ret

000022f2 <setup>:
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:100
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}

void setup() {
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
_ZN4U8G211initDisplayEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:119
    /* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
    /* U8X8_MSG_GPIO_MENU_HOME */
    uint8_t getMenuEvent(void) { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

    void initDisplay(void) {
      u8g2_InitDisplay(&u8g2); }
    22fe:	84 e1       	ldi	r24, 0x14	; 20
    2300:	92 e0       	ldi	r25, 0x02	; 2
    2302:	0e 94 51 29 	call	0x52a2	; 0x52a2 <u8x8_InitDisplay>
_ZN4U8G212clearDisplayEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:127
    /* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */       
    void initInterface(void) {          
      u8g2_InitInterface(&u8g2); }
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    2306:	84 e1       	ldi	r24, 0x14	; 20
    2308:	92 e0       	ldi	r25, 0x02	; 2
    230a:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <u8g2_ClearDisplay>
_ZN4U8G212setPowerSaveEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:130
      
    void setPowerSave(uint8_t is_enable) {
      u8g2_SetPowerSave(&u8g2, is_enable); }
    230e:	60 e0       	ldi	r22, 0x00	; 0
    2310:	84 e1       	ldi	r24, 0x14	; 20
    2312:	92 e0       	ldi	r25, 0x02	; 2
    2314:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <u8x8_SetPowerSave>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    2318:	67 e2       	ldi	r22, 0x27	; 39
    231a:	72 e0       	ldi	r23, 0x02	; 2
    231c:	84 e1       	ldi	r24, 0x14	; 20
    231e:	92 e0       	ldi	r25, 0x02	; 2
    2320:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    2324:	84 e1       	ldi	r24, 0x14	; 20
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    232c:	bc e0       	ldi	r27, 0x0C	; 12
    232e:	eb 2e       	mov	r14, r27
    2330:	f1 2c       	mov	r15, r1
    2332:	08 e2       	ldi	r16, 0x28	; 40
    2334:	10 e0       	ldi	r17, 0x00	; 0
    2336:	cc e3       	ldi	r28, 0x3C	; 60
    2338:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    233a:	67 e2       	ldi	r22, 0x27	; 39
    233c:	72 e0       	ldi	r23, 0x02	; 2
    233e:	84 e1       	ldi	r24, 0x14	; 20
    2340:	92 e0       	ldi	r25, 0x02	; 2
    2342:	0e 94 85 23 	call	0x470a	; 0x470a <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2346:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    234a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    234e:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    2352:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:108
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.setCursor(0, 12);
    u8g2.print(F("Haldex Controller"));
    2356:	65 e1       	ldi	r22, 0x15	; 21
    2358:	72 e0       	ldi	r23, 0x02	; 2
    235a:	80 e1       	ldi	r24, 0x10	; 16
    235c:	92 e0       	ldi	r25, 0x02	; 2
    235e:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    2362:	20 e8       	ldi	r18, 0x80	; 128
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	4c e0       	ldi	r20, 0x0C	; 12
    2368:	50 e0       	ldi	r21, 0x00	; 0
    236a:	70 e0       	ldi	r23, 0x00	; 0
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	84 e1       	ldi	r24, 0x14	; 20
    2370:	92 e0       	ldi	r25, 0x02	; 2
    2372:	0e 94 59 24 	call	0x48b2	; 0x48b2 <u8g2_DrawHLine>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2376:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    237a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    237e:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    2382:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:111
    u8g2.drawHLine(0, 12, 128);
    u8g2.setCursor(0, 40);
    u8g2.print(F("TCA965"));
    2386:	6e e0       	ldi	r22, 0x0E	; 14
    2388:	72 e0       	ldi	r23, 0x02	; 2
    238a:	80 e1       	ldi	r24, 0x10	; 16
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    2392:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2396:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    239a:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    239e:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:113
    u8g2.setCursor(0, 60);
    u8g2.print(F("allradbus.com"));
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	72 e0       	ldi	r23, 0x02	; 2
    23a6:	80 e1       	ldi	r24, 0x10	; 16
    23a8:	92 e0       	ldi	r25, 0x02	; 2
    23aa:	0e 94 c7 32 	call	0x658e	; 0x658e <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    23ae:	84 e1       	ldi	r24, 0x14	; 20
    23b0:	92 e0       	ldi	r25, 0x02	; 2
    23b2:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:115

  } while (u8g2.nextPage());
    23b6:	81 11       	cpse	r24, r1
    23b8:	c0 cf       	rjmp	.-128    	; 0x233a <setup+0x48>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:118

  // Konfiguriere Stepper
  stepper_driver.setup(serial_stream);
    23ba:	10 e0       	ldi	r17, 0x00	; 0
    23bc:	00 e0       	ldi	r16, 0x00	; 0
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	32 ec       	ldi	r19, 0xC2	; 194
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	66 e5       	ldi	r22, 0x56	; 86
    23c8:	75 e0       	ldi	r23, 0x05	; 5
    23ca:	8a ef       	ldi	r24, 0xFA	; 250
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:119
  stepper_driver.setRunCurrent(40);
    23d2:	68 e2       	ldi	r22, 0x28	; 40
    23d4:	8a ef       	ldi	r24, 0xFA	; 250
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:120
  stepper_driver.setHoldCurrent(40);
    23dc:	68 e2       	ldi	r22, 0x28	; 40
    23de:	8a ef       	ldi	r24, 0xFA	; 250
    23e0:	92 e0       	ldi	r25, 0x02	; 2
    23e2:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:121
  stepper_driver.enableAutomaticCurrentScaling();
    23e6:	8a ef       	ldi	r24, 0xFA	; 250
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <TMC2209::enableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:122
  stepper_driver.enableAutomaticGradientAdaptation();
    23ee:	8a ef       	ldi	r24, 0xFA	; 250
    23f0:	92 e0       	ldi	r25, 0x02	; 2
    23f2:	0e 94 91 17 	call	0x2f22	; 0x2f22 <TMC2209::enableAutomaticGradientAdaptation()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:123
  stepper_driver.setStallGuardThreshold(STALL_GUARD_THRESHOLD);
    23f6:	65 e0       	ldi	r22, 0x05	; 5
    23f8:	8a ef       	ldi	r24, 0xFA	; 250
    23fa:	92 e0       	ldi	r25, 0x02	; 2
    23fc:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <TMC2209::setStallGuardThreshold(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:124
  stepper_driver.setMicrostepsPerStep(4);
    2400:	64 e0       	ldi	r22, 0x04	; 4
    2402:	70 e0       	ldi	r23, 0x00	; 0
    2404:	8a ef       	ldi	r24, 0xFA	; 250
    2406:	92 e0       	ldi	r25, 0x02	; 2
    2408:	0e 94 62 17 	call	0x2ec4	; 0x2ec4 <TMC2209::setMicrostepsPerStep(unsigned int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:125
  stepper_driver.setStandstillMode(TMC2209::BRAKING);
    240c:	63 e0       	ldi	r22, 0x03	; 3
    240e:	70 e0       	ldi	r23, 0x00	; 0
    2410:	8a ef       	ldi	r24, 0xFA	; 250
    2412:	92 e0       	ldi	r25, 0x02	; 2
    2414:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <TMC2209::setStandstillMode(TMC2209::StandstillMode)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:126
  stepper_driver.setCoolStepDurationThreshold(COOL_STEP_DURATION_THRESHOLD);
    2418:	40 ed       	ldi	r20, 0xD0	; 208
    241a:	57 e0       	ldi	r21, 0x07	; 7
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	8a ef       	ldi	r24, 0xFA	; 250
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	0e 94 cd 14 	call	0x299a	; 0x299a <TMC2209::setCoolStepDurationThreshold(unsigned long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:127
  stepper.setMaxSpeed(4000);
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	6a e7       	ldi	r22, 0x7A	; 122
    242e:	75 e4       	ldi	r23, 0x45	; 69
    2430:	82 eb       	ldi	r24, 0xB2	; 178
    2432:	92 e0       	ldi	r25, 0x02	; 2
    2434:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <AccelStepper::setMaxSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:128
  stepper.setAcceleration(4000);
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	50 e0       	ldi	r21, 0x00	; 0
    243c:	6a e7       	ldi	r22, 0x7A	; 122
    243e:	75 e4       	ldi	r23, 0x45	; 69
    2440:	82 eb       	ldi	r24, 0xB2	; 178
    2442:	92 e0       	ldi	r25, 0x02	; 2
    2444:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <AccelStepper::setAcceleration(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:131

  // Konfiguriere I/O
  pinMode(IO_Enable, OUTPUT);
    2448:	61 e0       	ldi	r22, 0x01	; 1
    244a:	84 e0       	ldi	r24, 0x04	; 4
    244c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:132
  pinMode(IO_Step, OUTPUT);
    2450:	61 e0       	ldi	r22, 0x01	; 1
    2452:	86 e0       	ldi	r24, 0x06	; 6
    2454:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:133
  pinMode(IO_Direction, OUTPUT);
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	85 e0       	ldi	r24, 0x05	; 5
    245c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:134
  pinMode(IO_Eingabe_25, INPUT_PULLUP);
    2460:	62 e0       	ldi	r22, 0x02	; 2
    2462:	8f e0       	ldi	r24, 0x0F	; 15
    2464:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:135
  pinMode(IO_Eingabe_50, INPUT_PULLUP);
    2468:	62 e0       	ldi	r22, 0x02	; 2
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:136
  pinMode(IO_Eingabe_75, INPUT_PULLUP);
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:137
  pinMode(IO_Eingabe_100, INPUT_PULLUP);
    2478:	62 e0       	ldi	r22, 0x02	; 2
    247a:	81 e1       	ldi	r24, 0x11	; 17
    247c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:138
  pinMode(IO_Temperatur, INPUT);
    2480:	60 e0       	ldi	r22, 0x00	; 0
    2482:	8e e0       	ldi	r24, 0x0E	; 14
    2484:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:139
  pinMode(IO_Bremse, INPUT);
    2488:	60 e0       	ldi	r22, 0x00	; 0
    248a:	8c e0       	ldi	r24, 0x0C	; 12
    248c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:140
  pinMode(IO_Handbremse, INPUT_PULLUP);
    2490:	62 e0       	ldi	r22, 0x02	; 2
    2492:	8b e0       	ldi	r24, 0x0B	; 11
    2494:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:141
  pinMode(IO_Hauptschalter, INPUT);
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	8a e0       	ldi	r24, 0x0A	; 10
    249c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:142
  pinMode(IO_Diagnose_Pumpe, INPUT);
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	89 e0       	ldi	r24, 0x09	; 9
    24a4:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:143
  pinMode(IO_Pumpe, OUTPUT);
    24a8:	61 e0       	ldi	r22, 0x01	; 1
    24aa:	87 e1       	ldi	r24, 0x17	; 23
    24ac:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:144
  pinMode(IO_LED_Sperrgrad, OUTPUT);
    24b0:	61 e0       	ldi	r22, 0x01	; 1
    24b2:	8d e0       	ldi	r24, 0x0D	; 13
    24b4:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:146

  if (digitalRead(IO_Bremse))
    24b8:	8c e0       	ldi	r24, 0x0C	; 12
    24ba:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    24be:	89 2b       	or	r24, r25
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <setup+0x1d6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:147
    ZustandBremse = true;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:148
  if (!digitalRead(IO_Handbremse))
    24c8:	8b e0       	ldi	r24, 0x0B	; 11
    24ca:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    24ce:	89 2b       	or	r24, r25
    24d0:	19 f4       	brne	.+6      	; 0x24d8 <setup+0x1e6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:149
    ZustandHandbremse = true;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:150
  if (!digitalRead(IO_Hauptschalter))
    24d8:	8a e0       	ldi	r24, 0x0A	; 10
    24da:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    24de:	89 2b       	or	r24, r25
    24e0:	19 f4       	brne	.+6      	; 0x24e8 <setup+0x1f6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:151
    ZustandHauptschalter = true;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:154

  // PinChange Interrupt konfigurieren
  PCICR = (1 << PCIE0);                                    // enable PCINT[23:16] interrupts
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:155
  PCMSK0 = (1 << PCINT4) | (1 << PCINT3) | (1 << PCINT2);  // PB4 = PCINT4 | PB2 = PCINT2
    24ee:	8c e1       	ldi	r24, 0x1C	; 28
    24f0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:158

  // Aktiviere Endstufen in TMC2209
  digitalWrite(IO_Enable, LOW);
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	84 e0       	ldi	r24, 0x04	; 4
    24f8:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:160
  // Aktiviere TMC2209
  stepper_driver.enable();
    24fc:	8a ef       	ldi	r24, 0xFA	; 250
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <TMC2209::enable()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:162

  delay(250);
    2504:	6a ef       	ldi	r22, 0xFA	; 250
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:163
  LeseTMCStatus(true);
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	0e 94 0f 0c 	call	0x181e	; 0x181e <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:164
  delay(250);
    2516:	6a ef       	ldi	r22, 0xFA	; 250
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <delay>
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <eeprom_read_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:167

  // Prüfe, ob AutoTune durchgeführt werden soll
  if (EEPROM.read(0) != 123) {
    252a:	8b 37       	cpi	r24, 0x7B	; 123
    252c:	09 f4       	brne	.+2      	; 0x2530 <setup+0x23e>
    252e:	e0 c0       	rjmp	.+448    	; 0x26f0 <setup+0x3fe>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:169
    // Lasse Stepper 400 Steps in Positive Richtung laufen und erwarte Rückgabewert
    SchrittzahlMaximum = autoHome(400);
    2530:	80 e9       	ldi	r24, 0x90	; 144
    2532:	91 e0       	ldi	r25, 0x01	; 1
    2534:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <autoHome(int)>
    2538:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    253c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:172

    // Wenn der Rückgabewert kleiner als 50 Steps ist, scheint die Drehrichtung falsch zu sein
    if (SchrittzahlMaximum < 50) {
    2540:	c2 97       	sbiw	r24, 0x32	; 50
    2542:	44 f4       	brge	.+16     	; 0x2554 <setup+0x262>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:174
      // Lasse den Stepper nun also 400 Steps in negative Richtung laufen
      SchrittzahlMaximum = autoHome(-400);
    2544:	80 e7       	ldi	r24, 0x70	; 112
    2546:	9e ef       	ldi	r25, 0xFE	; 254
    2548:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <autoHome(int)>
    254c:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    2550:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:176
    }
    if (SchrittzahlMaximum < -50) {
    2554:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    2558:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    255c:	8e 3c       	cpi	r24, 0xCE	; 206
    255e:	2f ef       	ldi	r18, 0xFF	; 255
    2560:	92 07       	cpc	r25, r18
    2562:	0c f0       	brlt	.+2      	; 0x2566 <setup+0x274>
    2564:	8e c0       	rjmp	.+284    	; 0x2682 <setup+0x390>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:177
      Schrittzahl0Prozent = -100;
    2566:	2c e9       	ldi	r18, 0x9C	; 156
    2568:	3f ef       	ldi	r19, 0xFF	; 255
    256a:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    256e:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:178
      Schrittzahl100Prozent = SchrittzahlMaximum + 40;
    2572:	9c 01       	movw	r18, r24
    2574:	28 5d       	subi	r18, 0xD8	; 216
    2576:	3f 4f       	sbci	r19, 0xFF	; 255
    2578:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <Schrittzahl100Prozent+0x1>
    257c:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:179
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2580:	84 57       	subi	r24, 0x74	; 116
    2582:	9f 4f       	sbci	r25, 0xFF	; 255
    2584:	ac 01       	movw	r20, r24
    2586:	97 ff       	sbrs	r25, 7
    2588:	02 c0       	rjmp	.+4      	; 0x258e <setup+0x29c>
    258a:	4f 5f       	subi	r20, 0xFF	; 255
    258c:	5f 4f       	sbci	r21, 0xFF	; 255
    258e:	55 95       	asr	r21
    2590:	47 95       	ror	r20
    2592:	44 56       	subi	r20, 0x64	; 100
    2594:	51 09       	sbc	r21, r1
    2596:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <Schrittzahl50Prozent+0x1>
    259a:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:180
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    259e:	24 1b       	sub	r18, r20
    25a0:	35 0b       	sbc	r19, r21
    25a2:	37 ff       	sbrs	r19, 7
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <setup+0x2b8>
    25a6:	2f 5f       	subi	r18, 0xFF	; 255
    25a8:	3f 4f       	sbci	r19, 0xFF	; 255
    25aa:	35 95       	asr	r19
    25ac:	27 95       	ror	r18
    25ae:	24 0f       	add	r18, r20
    25b0:	35 1f       	adc	r19, r21
    25b2:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <Schrittzahl75Prozent+0x1>
    25b6:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:181
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    25ba:	97 fd       	sbrc	r25, 7
    25bc:	03 96       	adiw	r24, 0x03	; 3
    25be:	95 95       	asr	r25
    25c0:	87 95       	ror	r24
    25c2:	95 95       	asr	r25
    25c4:	87 95       	ror	r24
    25c6:	84 56       	subi	r24, 0x64	; 100
    25c8:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:188
    } else if (SchrittzahlMaximum > 50) {
      Schrittzahl0Prozent = 100;
      Schrittzahl100Prozent = SchrittzahlMaximum - 40;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    25ca:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    25ce:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <Schrittzahl25Prozent>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    25d2:	6b e7       	ldi	r22, 0x7B	; 123
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	0e 94 ed 3b 	call	0x77da	; 0x77da <eeprom_write_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:191
      EEPROM.write(0, 123);
    }
    eepromWriteInt(2, Schrittzahl0Prozent);
    25dc:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    25e0:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    25e4:	82 e0       	ldi	r24, 0x02	; 2
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	0e 94 44 11 	call	0x2288	; 0x2288 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:192
    eepromWriteInt(4, Schrittzahl25Prozent);
    25ec:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <Schrittzahl25Prozent>
    25f0:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    25f4:	84 e0       	ldi	r24, 0x04	; 4
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 44 11 	call	0x2288	; 0x2288 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:193
    eepromWriteInt(6, Schrittzahl50Prozent);
    25fc:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <Schrittzahl50Prozent>
    2600:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <Schrittzahl50Prozent+0x1>
    2604:	86 e0       	ldi	r24, 0x06	; 6
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	0e 94 44 11 	call	0x2288	; 0x2288 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:194
    eepromWriteInt(8, Schrittzahl75Prozent);
    260c:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <Schrittzahl75Prozent>
    2610:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <Schrittzahl75Prozent+0x1>
    2614:	88 e0       	ldi	r24, 0x08	; 8
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 44 11 	call	0x2288	; 0x2288 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:195
    eepromWriteInt(10, Schrittzahl100Prozent);
    261c:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    2620:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    2624:	8a e0       	ldi	r24, 0x0A	; 10
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	0e 94 44 11 	call	0x2288	; 0x2288 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:196
    eepromWriteInt(12, SchrittzahlMaximum);
    262c:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    2630:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    2634:	8c e0       	ldi	r24, 0x0C	; 12
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 44 11 	call	0x2288	; 0x2288 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:207
    Schrittzahl75Prozent = eepromReadInt(8);
    Schrittzahl100Prozent = eepromReadInt(10);
    SchrittzahlMaximum = eepromReadInt(12);
  }

  digitalWrite(IO_Enable, HIGH);
    263c:	61 e0       	ldi	r22, 0x01	; 1
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:208
  stepper.setCurrentPosition(0);
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	ba 01       	movw	r22, r20
    264a:	82 eb       	ldi	r24, 0xB2	; 178
    264c:	92 e0       	ldi	r25, 0x02	; 2
    264e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:209
  stepper.setSpeed(1000);
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	6a e7       	ldi	r22, 0x7A	; 122
    2658:	74 e4       	ldi	r23, 0x44	; 68
    265a:	82 eb       	ldi	r24, 0xB2	; 178
    265c:	92 e0       	ldi	r25, 0x02	; 2
    265e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:212

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
    2662:	6c e3       	ldi	r22, 0x3C	; 60
    2664:	8a ef       	ldi	r24, 0xFA	; 250
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:213
  stepper_driver.setHoldCurrent(40);
    266c:	68 e2       	ldi	r22, 0x28	; 40
    266e:	8a ef       	ldi	r24, 0xFA	; 250
    2670:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:214
}
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	1f 91       	pop	r17
    2678:	0f 91       	pop	r16
    267a:	ff 90       	pop	r15
    267c:	ef 90       	pop	r14
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:213
  stepper.setCurrentPosition(0);
  stepper.setSpeed(1000);

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
    267e:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:183
      Schrittzahl100Prozent = SchrittzahlMaximum + 40;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      EEPROM.write(0, 123);
    } else if (SchrittzahlMaximum > 50) {
    2682:	83 33       	cpi	r24, 0x33	; 51
    2684:	91 05       	cpc	r25, r1
    2686:	0c f4       	brge	.+2      	; 0x268a <setup+0x398>
    2688:	a9 cf       	rjmp	.-174    	; 0x25dc <setup+0x2ea>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:184
      Schrittzahl0Prozent = 100;
    268a:	24 e6       	ldi	r18, 0x64	; 100
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2692:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:185
      Schrittzahl100Prozent = SchrittzahlMaximum - 40;
    2696:	9c 01       	movw	r18, r24
    2698:	28 52       	subi	r18, 0x28	; 40
    269a:	31 09       	sbc	r19, r1
    269c:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <Schrittzahl100Prozent+0x1>
    26a0:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:186
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    26a4:	8c 58       	subi	r24, 0x8C	; 140
    26a6:	91 09       	sbc	r25, r1
    26a8:	ac 01       	movw	r20, r24
    26aa:	97 ff       	sbrs	r25, 7
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <setup+0x3c0>
    26ae:	4f 5f       	subi	r20, 0xFF	; 255
    26b0:	5f 4f       	sbci	r21, 0xFF	; 255
    26b2:	55 95       	asr	r21
    26b4:	47 95       	ror	r20
    26b6:	4c 59       	subi	r20, 0x9C	; 156
    26b8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ba:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <Schrittzahl50Prozent+0x1>
    26be:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:187
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    26c2:	24 1b       	sub	r18, r20
    26c4:	35 0b       	sbc	r19, r21
    26c6:	37 ff       	sbrs	r19, 7
    26c8:	02 c0       	rjmp	.+4      	; 0x26ce <setup+0x3dc>
    26ca:	2f 5f       	subi	r18, 0xFF	; 255
    26cc:	3f 4f       	sbci	r19, 0xFF	; 255
    26ce:	35 95       	asr	r19
    26d0:	27 95       	ror	r18
    26d2:	24 0f       	add	r18, r20
    26d4:	35 1f       	adc	r19, r21
    26d6:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <Schrittzahl75Prozent+0x1>
    26da:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:188
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    26de:	97 fd       	sbrc	r25, 7
    26e0:	03 96       	adiw	r24, 0x03	; 3
    26e2:	95 95       	asr	r25
    26e4:	87 95       	ror	r24
    26e6:	95 95       	asr	r25
    26e8:	87 95       	ror	r24
    26ea:	8c 59       	subi	r24, 0x9C	; 156
    26ec:	9f 4f       	sbci	r25, 0xFF	; 255
    26ee:	6d cf       	rjmp	.-294    	; 0x25ca <setup+0x2d8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:199
    eepromWriteInt(8, Schrittzahl75Prozent);
    eepromWriteInt(10, Schrittzahl100Prozent);
    eepromWriteInt(12, SchrittzahlMaximum);
  } else {
    // Wenn nicht, nehme Werte aus dem EEPROM
    Schrittzahl0Prozent = eepromReadInt(2);
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	0e 94 65 11 	call	0x22ca	; 0x22ca <eepromReadInt(int)>
    26f8:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    26fc:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:200
    Schrittzahl25Prozent = eepromReadInt(4);
    2700:	84 e0       	ldi	r24, 0x04	; 4
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	0e 94 65 11 	call	0x22ca	; 0x22ca <eepromReadInt(int)>
    2708:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    270c:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <Schrittzahl25Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:201
    Schrittzahl50Prozent = eepromReadInt(6);
    2710:	86 e0       	ldi	r24, 0x06	; 6
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 65 11 	call	0x22ca	; 0x22ca <eepromReadInt(int)>
    2718:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <Schrittzahl50Prozent+0x1>
    271c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:202
    Schrittzahl75Prozent = eepromReadInt(8);
    2720:	88 e0       	ldi	r24, 0x08	; 8
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 65 11 	call	0x22ca	; 0x22ca <eepromReadInt(int)>
    2728:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <Schrittzahl75Prozent+0x1>
    272c:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:203
    Schrittzahl100Prozent = eepromReadInt(10);
    2730:	8a e0       	ldi	r24, 0x0A	; 10
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	0e 94 65 11 	call	0x22ca	; 0x22ca <eepromReadInt(int)>
    2738:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <Schrittzahl100Prozent+0x1>
    273c:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:204
    SchrittzahlMaximum = eepromReadInt(12);
    2740:	8c e0       	ldi	r24, 0x0C	; 12
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	0e 94 65 11 	call	0x22ca	; 0x22ca <eepromReadInt(int)>
    2748:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    274c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
    2750:	75 cf       	rjmp	.-278    	; 0x263c <setup+0x34a>

00002752 <_GLOBAL__sub_I_serial_stream>:
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:549
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2752:	cf 92       	push	r12
    2754:	ef 92       	push	r14
    2756:	0f 93       	push	r16
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:28
#define IO_LED_Sperrgrad 13
#define IO_Pumpe 23

// TMC2209
HardwareSerial &serial_stream = Serial;
TMC2209 stepper_driver;
    275c:	8a ef       	ldi	r24, 0xFA	; 250
    275e:	92 e0       	ldi	r25, 0x02	; 2
    2760:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <TMC2209::TMC2209()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:31
TMC2209::Status TMCStatus;

AccelStepper stepper(1, IO_Step, IO_Direction);
    2764:	cc 24       	eor	r12, r12
    2766:	c3 94       	inc	r12
    2768:	85 e0       	ldi	r24, 0x05	; 5
    276a:	e8 2e       	mov	r14, r24
    276c:	04 e0       	ldi	r16, 0x04	; 4
    276e:	25 e0       	ldi	r18, 0x05	; 5
    2770:	46 e0       	ldi	r20, 0x06	; 6
    2772:	61 e0       	ldi	r22, 0x01	; 1
    2774:	82 eb       	ldi	r24, 0xB2	; 178
    2776:	92 e0       	ldi	r25, 0x02	; 2
    2778:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    277c:	c0 e1       	ldi	r28, 0x10	; 16
    277e:	d2 e0       	ldi	r29, 0x02	; 2
    2780:	1b 82       	std	Y+3, r1	; 0x03
    2782:	1a 82       	std	Y+2, r1	; 0x02
_ZN4U8G2C4Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:68
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    2784:	8c e1       	ldi	r24, 0x1C	; 28
    2786:	91 e0       	ldi	r25, 0x01	; 1
    2788:	99 83       	std	Y+1, r25	; 0x01
    278a:	88 83       	st	Y, r24
    278c:	8d e1       	ldi	r24, 0x1D	; 29
    278e:	97 e2       	ldi	r25, 0x27	; 39
    2790:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <u8g2+0x91>
    2794:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <u8g2+0x90>
_ZN4U8G24homeEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:382
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    2798:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    279c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    27a0:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <u8g2+0x95>
    27a4:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <u8g2+0x94>
    27a8:	84 e1       	ldi	r24, 0x14	; 20
    27aa:	92 e0       	ldi	r25, 0x02	; 2
    27ac:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <u8x8_utf8_init>
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2893
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_sw_i2c, u8x8_gpio_and_delay_arduino);
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SH1106_128X64_NONAME_2_HW_I2C : public U8G2 {
  public: U8G2_SH1106_128X64_NONAME_2_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    27b0:	88 e2       	ldi	r24, 0x28	; 40
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	99 83       	std	Y+1, r25	; 0x01
    27b6:	88 83       	st	Y, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2894
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_hw_i2c, u8x8_gpio_and_delay_arduino);
    27b8:	26 e0       	ldi	r18, 0x06	; 6
    27ba:	3e e1       	ldi	r19, 0x1E	; 30
    27bc:	47 e7       	ldi	r20, 0x77	; 119
    27be:	5e e1       	ldi	r21, 0x1E	; 30
    27c0:	60 e5       	ldi	r22, 0x50	; 80
    27c2:	71 e0       	ldi	r23, 0x01	; 1
    27c4:	84 e1       	ldi	r24, 0x14	; 20
    27c6:	92 e0       	ldi	r25, 0x02	; 2
    27c8:	0e 94 02 20 	call	0x4004	; 0x4004 <u8g2_Setup_sh1106_i2c_128x64_noname_2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    u8x8_SetPin_HW_I2C(getU8x8(), reset, clock, data);
    27cc:	2f ef       	ldi	r18, 0xFF	; 255
    27ce:	4f ef       	ldi	r20, 0xFF	; 255
    27d0:	6f ef       	ldi	r22, 0xFF	; 255
    27d2:	84 e1       	ldi	r24, 0x14	; 20
    27d4:	92 e0       	ldi	r25, 0x02	; 2
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:549
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	0f 91       	pop	r16
    27dc:	ef 90       	pop	r14
    27de:	cf 90       	pop	r12
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    27e0:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>

000027e4 <TMC2209::TMC2209()>:
_ZN7TMC2209C2Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:956
  write(ADDRESS_CHOPCONF, chopper_config_.bytes);
}

uint32_t TMC2209::readChopperConfigBytes()
{
  return read(ADDRESS_CHOPCONF);
    27e4:	fc 01       	movw	r30, r24
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	82 8f       	std	Z+26, r24	; 0x1a
    27ea:	11 82       	std	Z+1, r1	; 0x01
    27ec:	10 82       	st	Z, r1
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	92 ec       	ldi	r25, 0xC2	; 194
    27f2:	a1 e0       	ldi	r26, 0x01	; 1
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	82 83       	std	Z+2, r24	; 0x02
    27f8:	93 83       	std	Z+3, r25	; 0x03
    27fa:	a4 83       	std	Z+4, r26	; 0x04
    27fc:	b5 83       	std	Z+5, r27	; 0x05
    27fe:	16 82       	std	Z+6, r1	; 0x06
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	9f ef       	ldi	r25, 0xFF	; 255
    2804:	90 87       	std	Z+8, r25	; 0x08
    2806:	87 83       	std	Z+7, r24	; 0x07
    2808:	15 8a       	std	Z+21, r1	; 0x15
    280a:	08 95       	ret

0000280c <TMC2209::serialAvailable()>:
_ZN7TMC220915serialAvailableEv():
    280c:	dc 01       	movw	r26, r24
    280e:	8d 91       	ld	r24, X+
    2810:	9c 91       	ld	r25, X
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	39 f0       	breq	.+14     	; 0x2824 <TMC2209::serialAvailable()+0x18>
    2816:	dc 01       	movw	r26, r24
    2818:	ed 91       	ld	r30, X+
    281a:	fc 91       	ld	r31, X
    281c:	00 84       	ldd	r0, Z+8	; 0x08
    281e:	f1 85       	ldd	r31, Z+9	; 0x09
    2820:	e0 2d       	mov	r30, r0
    2822:	09 94       	ijmp
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	80 e0       	ldi	r24, 0x00	; 0
    2828:	08 95       	ret

0000282a <TMC2209::serialWrite(unsigned char)>:
_ZN7TMC220911serialWriteEh():
    282a:	dc 01       	movw	r26, r24
    282c:	8d 91       	ld	r24, X+
    282e:	9c 91       	ld	r25, X
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	39 f0       	breq	.+14     	; 0x2842 <TMC2209::serialWrite(unsigned char)+0x18>
    2834:	dc 01       	movw	r26, r24
    2836:	ed 91       	ld	r30, X+
    2838:	fc 91       	ld	r31, X
    283a:	01 90       	ld	r0, Z+
    283c:	f0 81       	ld	r31, Z
    283e:	e0 2d       	mov	r30, r0
    2840:	09 94       	ijmp
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	08 95       	ret

00002848 <TMC2209::serialRead()>:
_ZN7TMC220910serialReadEv():
    2848:	dc 01       	movw	r26, r24
    284a:	8d 91       	ld	r24, X+
    284c:	9c 91       	ld	r25, X
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	39 f0       	breq	.+14     	; 0x2860 <TMC2209::serialRead()+0x18>
    2852:	dc 01       	movw	r26, r24
    2854:	ed 91       	ld	r30, X+
    2856:	fc 91       	ld	r31, X
    2858:	02 84       	ldd	r0, Z+10	; 0x0a
    285a:	f3 85       	ldd	r31, Z+11	; 0x0b
    285c:	e0 2d       	mov	r30, r0
    285e:	09 94       	ijmp
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	08 95       	ret

00002866 <TMC2209::serialFlush()>:
_ZN7TMC220911serialFlushEv():
    2866:	dc 01       	movw	r26, r24
    2868:	8d 91       	ld	r24, X+
    286a:	9c 91       	ld	r25, X
    286c:	00 97       	sbiw	r24, 0x00	; 0
    286e:	39 f0       	breq	.+14     	; 0x287e <TMC2209::serialFlush()+0x18>
    2870:	dc 01       	movw	r26, r24
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	06 80       	ldd	r0, Z+6	; 0x06
    2878:	f7 81       	ldd	r31, Z+7	; 0x07
    287a:	e0 2d       	mov	r30, r0
    287c:	09 94       	ijmp
    287e:	08 95       	ret

00002880 <TMC2209::reverseData(unsigned long)>:
_ZN7TMC220911reverseDataEm():
    2880:	cb 01       	movw	r24, r22
    2882:	ba 01       	movw	r22, r20
    2884:	0e 94 62 3a 	call	0x74c4	; 0x74c4 <__bswapsi2>
    2888:	08 95       	ret

0000288a <TMC2209::write(unsigned char, unsigned long)>:
_ZN7TMC22095writeEhm():
    288a:	7f 92       	push	r7
    288c:	8f 92       	push	r8
    288e:	9f 92       	push	r9
    2890:	af 92       	push	r10
    2892:	bf 92       	push	r11
    2894:	cf 92       	push	r12
    2896:	df 92       	push	r13
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	28 97       	sbiw	r28, 0x08	; 8
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	7c 01       	movw	r14, r24
    28b6:	16 2f       	mov	r17, r22
    28b8:	ba 01       	movw	r22, r20
    28ba:	a9 01       	movw	r20, r18
    28bc:	85 e0       	ldi	r24, 0x05	; 5
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	f7 01       	movw	r30, r14
    28c2:	b6 80       	ldd	r11, Z+6	; 0x06
    28c4:	ba 82       	std	Y+2, r11	; 0x02
    28c6:	1f 77       	andi	r17, 0x7F	; 127
    28c8:	10 68       	ori	r17, 0x80	; 128
    28ca:	1b 83       	std	Y+3, r17	; 0x03
    28cc:	c7 01       	movw	r24, r14
    28ce:	0e 94 40 14 	call	0x2880	; 0x2880 <TMC2209::reverseData(unsigned long)>
    28d2:	6c 83       	std	Y+4, r22	; 0x04
    28d4:	7d 83       	std	Y+5, r23	; 0x05
    28d6:	8e 83       	std	Y+6, r24	; 0x06
    28d8:	9f 83       	std	Y+7, r25	; 0x07
_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h():
    28da:	f6 2f       	mov	r31, r22
    28dc:	a7 2e       	mov	r10, r23
    28de:	98 2e       	mov	r9, r24
    28e0:	89 2e       	mov	r8, r25
    28e2:	e0 e0       	ldi	r30, 0x00	; 0
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	a0 e0       	ldi	r26, 0x00	; 0
    28e8:	87 e0       	ldi	r24, 0x07	; 7
    28ea:	78 2e       	mov	r7, r24
    28ec:	25 e0       	ldi	r18, 0x05	; 5
    28ee:	3b 2d       	mov	r19, r11
    28f0:	41 2f       	mov	r20, r17
    28f2:	5f 2f       	mov	r21, r31
    28f4:	6a 2d       	mov	r22, r10
    28f6:	79 2d       	mov	r23, r9
    28f8:	88 2d       	mov	r24, r8
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	0a 2f       	mov	r16, r26
    28fe:	0e 94 9e 3a 	call	0x753c	; 0x753c <__lshrdi3>
    2902:	38 e0       	ldi	r19, 0x08	; 8
    2904:	8e 2f       	mov	r24, r30
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	42 2f       	mov	r20, r18
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	bc 01       	movw	r22, r24
    290e:	66 0f       	add	r22, r22
    2910:	67 2f       	mov	r22, r23
    2912:	66 1f       	adc	r22, r22
    2914:	77 0b       	sbc	r23, r23
    2916:	20 fb       	bst	r18, 0
    2918:	cc 24       	eor	r12, r12
    291a:	c0 f8       	bld	r12, 0
    291c:	d1 2c       	mov	r13, r1
    291e:	ee 0f       	add	r30, r30
    2920:	6c 15       	cp	r22, r12
    2922:	7d 05       	cpc	r23, r13
    2924:	21 f0       	breq	.+8      	; 0x292e <TMC2209::write(unsigned char, unsigned long)+0xa4>
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	e8 2f       	mov	r30, r24
    292c:	e7 25       	eor	r30, r7
    292e:	55 95       	asr	r21
    2930:	47 95       	ror	r20
    2932:	24 2f       	mov	r18, r20
    2934:	31 50       	subi	r19, 0x01	; 1
    2936:	31 f7       	brne	.-52     	; 0x2904 <TMC2209::write(unsigned char, unsigned long)+0x7a>
    2938:	18 96       	adiw	r26, 0x08	; 8
    293a:	a8 33       	cpi	r26, 0x38	; 56
    293c:	b1 05       	cpc	r27, r1
    293e:	b1 f6       	brne	.-84     	; 0x28ec <TMC2209::write(unsigned char, unsigned long)+0x62>
_ZN7TMC22095writeEhm():
    2940:	e8 87       	std	Y+8, r30	; 0x08
    2942:	d1 2c       	mov	r13, r1
    2944:	c1 2c       	mov	r12, r1
_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h():
    2946:	29 81       	ldd	r18, Y+1	; 0x01
    2948:	3a 81       	ldd	r19, Y+2	; 0x02
    294a:	4b 81       	ldd	r20, Y+3	; 0x03
    294c:	5c 81       	ldd	r21, Y+4	; 0x04
    294e:	6d 81       	ldd	r22, Y+5	; 0x05
    2950:	7e 81       	ldd	r23, Y+6	; 0x06
    2952:	8f 81       	ldd	r24, Y+7	; 0x07
    2954:	98 85       	ldd	r25, Y+8	; 0x08
    2956:	0c 2d       	mov	r16, r12
    2958:	0e 94 9e 3a 	call	0x753c	; 0x753c <__lshrdi3>
    295c:	62 2f       	mov	r22, r18
    295e:	c7 01       	movw	r24, r14
    2960:	0e 94 15 14 	call	0x282a	; 0x282a <TMC2209::serialWrite(unsigned char)>
    2964:	f8 e0       	ldi	r31, 0x08	; 8
    2966:	cf 0e       	add	r12, r31
    2968:	d1 1c       	adc	r13, r1
    296a:	80 e4       	ldi	r24, 0x40	; 64
    296c:	c8 16       	cp	r12, r24
    296e:	d1 04       	cpc	r13, r1
    2970:	51 f7       	brne	.-44     	; 0x2946 <TMC2209::write(unsigned char, unsigned long)+0xbc>
_ZN7TMC22095writeEhm():
    2972:	28 96       	adiw	r28, 0x08	; 8
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	df 90       	pop	r13
    298c:	cf 90       	pop	r12
    298e:	bf 90       	pop	r11
    2990:	af 90       	pop	r10
    2992:	9f 90       	pop	r9
    2994:	8f 90       	pop	r8
    2996:	7f 90       	pop	r7
    2998:	08 95       	ret

0000299a <TMC2209::setCoolStepDurationThreshold(unsigned long)>:
_ZN7TMC220928setCoolStepDurationThresholdEm():
    299a:	9a 01       	movw	r18, r20
    299c:	ab 01       	movw	r20, r22
    299e:	64 e1       	ldi	r22, 0x14	; 20
    29a0:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>

000029a4 <TMC2209::setStallGuardThreshold(unsigned char)>:
_ZN7TMC220922setStallGuardThresholdEh():
    29a4:	26 2f       	mov	r18, r22
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	40 e0       	ldi	r20, 0x00	; 0
    29ac:	60 e4       	ldi	r22, 0x40	; 64
    29ae:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>

000029b2 <TMC2209::setRegistersToDefaults()>:
_ZN7TMC220922setRegistersToDefaultsEv():
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	ec 01       	movw	r28, r24
    29b8:	1d 86       	std	Y+13, r1	; 0x0d
    29ba:	1e 86       	std	Y+14, r1	; 0x0e
    29bc:	1f 86       	std	Y+15, r1	; 0x0f
    29be:	18 8a       	std	Y+16, r1	; 0x10
    29c0:	80 e1       	ldi	r24, 0x10	; 16
    29c2:	8d 87       	std	Y+13, r24	; 0x0d
    29c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    29c6:	8f 61       	ori	r24, 0x1F	; 31
    29c8:	8e 87       	std	Y+14, r24	; 0x0e
    29ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    29cc:	80 7f       	andi	r24, 0xF0	; 240
    29ce:	81 60       	ori	r24, 0x01	; 1
    29d0:	8f 87       	std	Y+15, r24	; 0x0f
    29d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    29d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    29d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    29d8:	58 89       	ldd	r21, Y+16	; 0x10
    29da:	60 e1       	ldi	r22, 0x10	; 16
    29dc:	ce 01       	movw	r24, r28
    29de:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    29e2:	83 e5       	ldi	r24, 0x53	; 83
    29e4:	8e 8b       	std	Y+22, r24	; 0x16
    29e6:	1f 8a       	std	Y+23, r1	; 0x17
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	88 8f       	std	Y+24, r24	; 0x18
    29ec:	80 e1       	ldi	r24, 0x10	; 16
    29ee:	89 8f       	std	Y+25, r24	; 0x19
    29f0:	2e 89       	ldd	r18, Y+22	; 0x16
    29f2:	3f 89       	ldd	r19, Y+23	; 0x17
    29f4:	48 8d       	ldd	r20, Y+24	; 0x18
    29f6:	59 8d       	ldd	r21, Y+25	; 0x19
    29f8:	6c e6       	ldi	r22, 0x6C	; 108
    29fa:	ce 01       	movw	r24, r28
    29fc:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a00:	84 e2       	ldi	r24, 0x24	; 36
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	ad e0       	ldi	r26, 0x0D	; 13
    2a06:	b1 ec       	ldi	r27, 0xC1	; 193
    2a08:	8b 8f       	std	Y+27, r24	; 0x1b
    2a0a:	9c 8f       	std	Y+28, r25	; 0x1c
    2a0c:	ad 8f       	std	Y+29, r26	; 0x1d
    2a0e:	be 8f       	std	Y+30, r27	; 0x1e
    2a10:	24 e2       	ldi	r18, 0x24	; 36
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	4d e0       	ldi	r20, 0x0D	; 13
    2a16:	51 ec       	ldi	r21, 0xC1	; 193
    2a18:	60 e7       	ldi	r22, 0x70	; 112
    2a1a:	ce 01       	movw	r24, r28
    2a1c:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a20:	19 8a       	std	Y+17, r1	; 0x11
    2a22:	1a 8a       	std	Y+18, r1	; 0x12
    2a24:	1b 8a       	std	Y+19, r1	; 0x13
    2a26:	1c 8a       	std	Y+20, r1	; 0x14
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	a9 01       	movw	r20, r18
    2a2e:	62 e4       	ldi	r22, 0x42	; 66
    2a30:	ce 01       	movw	r24, r28
    2a32:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a36:	24 e1       	ldi	r18, 0x14	; 20
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	50 e0       	ldi	r21, 0x00	; 0
    2a3e:	61 e1       	ldi	r22, 0x11	; 17
    2a40:	ce 01       	movw	r24, r28
    2a42:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	a9 01       	movw	r20, r18
    2a4c:	63 e1       	ldi	r22, 0x13	; 19
    2a4e:	ce 01       	movw	r24, r28
    2a50:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	a9 01       	movw	r20, r18
    2a5a:	62 e2       	ldi	r22, 0x22	; 34
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	a9 01       	movw	r20, r18
    2a68:	64 e1       	ldi	r22, 0x14	; 20
    2a6a:	ce 01       	movw	r24, r28
    2a6c:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	a9 01       	movw	r20, r18
    2a76:	60 e4       	ldi	r22, 0x40	; 64
    2a78:	ce 01       	movw	r24, r28
    2a7a:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	a9 01       	movw	r20, r18
    2a84:	62 e4       	ldi	r22, 0x42	; 66
    2a86:	ce 01       	movw	r24, r28
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>

00002a90 <TMC2209::read(unsigned char)>:
_ZN7TMC22094readEh():
    2a90:	8f 92       	push	r8
    2a92:	9f 92       	push	r9
    2a94:	af 92       	push	r10
    2a96:	bf 92       	push	r11
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	28 97       	sbiw	r28, 0x08	; 8
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	7c 01       	movw	r14, r24
    2ab8:	45 e0       	ldi	r20, 0x05	; 5
    2aba:	84 2e       	mov	r8, r20
    2abc:	91 2c       	mov	r9, r1
    2abe:	a1 2c       	mov	r10, r1
    2ac0:	b1 2c       	mov	r11, r1
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	96 80       	ldd	r9, Z+6	; 0x06
    2ac6:	6f 77       	andi	r22, 0x7F	; 127
    2ac8:	8a 2d       	mov	r24, r10
    2aca:	80 78       	andi	r24, 0x80	; 128
    2acc:	a8 2e       	mov	r10, r24
    2ace:	a6 2a       	or	r10, r22
    2ad0:	e8 94       	clt
    2ad2:	a7 f8       	bld	r10, 7
_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h():
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	e0 e0       	ldi	r30, 0x00	; 0
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	57 e0       	ldi	r21, 0x07	; 7
    2adc:	d5 2e       	mov	r13, r21
    2ade:	b5 01       	movw	r22, r10
    2ae0:	a4 01       	movw	r20, r8
    2ae2:	0e 2e       	mov	r0, r30
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <TMC2209::read(unsigned char)+0x5e>
    2ae6:	76 95       	lsr	r23
    2ae8:	67 95       	ror	r22
    2aea:	57 95       	ror	r21
    2aec:	47 95       	ror	r20
    2aee:	0a 94       	dec	r0
    2af0:	d2 f7       	brpl	.-12     	; 0x2ae6 <TMC2209::read(unsigned char)+0x56>
    2af2:	58 e0       	ldi	r21, 0x08	; 8
    2af4:	68 2f       	mov	r22, r24
    2af6:	70 e0       	ldi	r23, 0x00	; 0
    2af8:	a4 2f       	mov	r26, r20
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	8b 01       	movw	r16, r22
    2afe:	00 0f       	add	r16, r16
    2b00:	01 2f       	mov	r16, r17
    2b02:	00 1f       	adc	r16, r16
    2b04:	11 0b       	sbc	r17, r17
    2b06:	24 2f       	mov	r18, r20
    2b08:	21 70       	andi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	88 0f       	add	r24, r24
    2b0e:	02 17       	cp	r16, r18
    2b10:	13 07       	cpc	r17, r19
    2b12:	21 f0       	breq	.+8      	; 0x2b1c <TMC2209::read(unsigned char)+0x8c>
    2b14:	cb 01       	movw	r24, r22
    2b16:	88 0f       	add	r24, r24
    2b18:	99 1f       	adc	r25, r25
    2b1a:	8d 25       	eor	r24, r13
    2b1c:	b5 95       	asr	r27
    2b1e:	a7 95       	ror	r26
    2b20:	4a 2f       	mov	r20, r26
    2b22:	51 50       	subi	r21, 0x01	; 1
    2b24:	39 f7       	brne	.-50     	; 0x2af4 <TMC2209::read(unsigned char)+0x64>
    2b26:	38 96       	adiw	r30, 0x08	; 8
    2b28:	e8 31       	cpi	r30, 0x18	; 24
    2b2a:	f1 05       	cpc	r31, r1
    2b2c:	c1 f6       	brne	.-80     	; 0x2ade <TMC2209::read(unsigned char)+0x4e>
_ZN7TMC22094readEh():
    2b2e:	b8 2e       	mov	r11, r24
_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h():
    2b30:	c7 01       	movw	r24, r14
    2b32:	0e 94 33 14 	call	0x2866	; 0x2866 <TMC2209::serialFlush()>
    2b36:	c7 01       	movw	r24, r14
    2b38:	0e 94 06 14 	call	0x280c	; 0x280c <TMC2209::serialAvailable()>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	19 06       	cpc	r1, r25
    2b40:	24 f4       	brge	.+8      	; 0x2b4a <TMC2209::read(unsigned char)+0xba>
    2b42:	c7 01       	movw	r24, r14
    2b44:	0e 94 24 14 	call	0x2848	; 0x2848 <TMC2209::serialRead()>
    2b48:	f6 cf       	rjmp	.-20     	; 0x2b36 <TMC2209::read(unsigned char)+0xa6>
    2b4a:	10 e0       	ldi	r17, 0x00	; 0
    2b4c:	00 e0       	ldi	r16, 0x00	; 0
    2b4e:	c5 01       	movw	r24, r10
    2b50:	b4 01       	movw	r22, r8
    2b52:	00 2e       	mov	r0, r16
    2b54:	04 c0       	rjmp	.+8      	; 0x2b5e <TMC2209::read(unsigned char)+0xce>
    2b56:	96 95       	lsr	r25
    2b58:	87 95       	ror	r24
    2b5a:	77 95       	ror	r23
    2b5c:	67 95       	ror	r22
    2b5e:	0a 94       	dec	r0
    2b60:	d2 f7       	brpl	.-12     	; 0x2b56 <TMC2209::read(unsigned char)+0xc6>
    2b62:	c7 01       	movw	r24, r14
    2b64:	0e 94 15 14 	call	0x282a	; 0x282a <TMC2209::serialWrite(unsigned char)>
    2b68:	08 5f       	subi	r16, 0xF8	; 248
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	00 32       	cpi	r16, 0x20	; 32
    2b6e:	11 05       	cpc	r17, r1
    2b70:	71 f7       	brne	.-36     	; 0x2b4e <TMC2209::read(unsigned char)+0xbe>
    2b72:	c7 01       	movw	r24, r14
    2b74:	0e 94 33 14 	call	0x2866	; 0x2866 <TMC2209::serialFlush()>
    2b78:	81 2c       	mov	r8, r1
    2b7a:	91 2c       	mov	r9, r1
    2b7c:	54 01       	movw	r10, r8
    2b7e:	c7 01       	movw	r24, r14
    2b80:	0e 94 06 14 	call	0x280c	; 0x280c <TMC2209::serialAvailable()>
    2b84:	04 97       	sbiw	r24, 0x04	; 4
    2b86:	8c f4       	brge	.+34     	; 0x2baa <TMC2209::read(unsigned char)+0x11a>
    2b88:	f0 ea       	ldi	r31, 0xA0	; 160
    2b8a:	8f 16       	cp	r8, r31
    2b8c:	ff e0       	ldi	r31, 0x0F	; 15
    2b8e:	9f 06       	cpc	r9, r31
    2b90:	a1 04       	cpc	r10, r1
    2b92:	b1 04       	cpc	r11, r1
    2b94:	e9 f0       	breq	.+58     	; 0x2bd0 <TMC2209::read(unsigned char)+0x140>
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	0e 94 89 35 	call	0x6b12	; 0x6b12 <delayMicroseconds>
    2b9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ba0:	88 1a       	sub	r8, r24
    2ba2:	98 0a       	sbc	r9, r24
    2ba4:	a8 0a       	sbc	r10, r24
    2ba6:	b8 0a       	sbc	r11, r24
    2ba8:	ea cf       	rjmp	.-44     	; 0x2b7e <TMC2209::read(unsigned char)+0xee>
    2baa:	e0 ea       	ldi	r30, 0xA0	; 160
    2bac:	8e 16       	cp	r8, r30
    2bae:	ef e0       	ldi	r30, 0x0F	; 15
    2bb0:	9e 06       	cpc	r9, r30
    2bb2:	a1 04       	cpc	r10, r1
    2bb4:	b1 04       	cpc	r11, r1
    2bb6:	61 f0       	breq	.+24     	; 0x2bd0 <TMC2209::read(unsigned char)+0x140>
    2bb8:	c7 01       	movw	r24, r14
    2bba:	0e 94 24 14 	call	0x2848	; 0x2848 <TMC2209::serialRead()>
    2bbe:	c7 01       	movw	r24, r14
    2bc0:	0e 94 24 14 	call	0x2848	; 0x2848 <TMC2209::serialRead()>
    2bc4:	c7 01       	movw	r24, r14
    2bc6:	0e 94 24 14 	call	0x2848	; 0x2848 <TMC2209::serialRead()>
    2bca:	c7 01       	movw	r24, r14
    2bcc:	0e 94 24 14 	call	0x2848	; 0x2848 <TMC2209::serialRead()>
    2bd0:	81 2c       	mov	r8, r1
    2bd2:	91 2c       	mov	r9, r1
    2bd4:	54 01       	movw	r10, r8
_ZN7TMC22094readEh():
    2bd6:	c7 01       	movw	r24, r14
    2bd8:	0e 94 06 14 	call	0x280c	; 0x280c <TMC2209::serialAvailable()>
    2bdc:	08 97       	sbiw	r24, 0x08	; 8
    2bde:	94 f4       	brge	.+36     	; 0x2c04 <TMC2209::read(unsigned char)+0x174>
    2be0:	f0 e1       	ldi	r31, 0x10	; 16
    2be2:	8f 16       	cp	r8, r31
    2be4:	f7 e2       	ldi	r31, 0x27	; 39
    2be6:	9f 06       	cpc	r9, r31
    2be8:	a1 04       	cpc	r10, r1
    2bea:	b1 04       	cpc	r11, r1
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <TMC2209::read(unsigned char)+0x160>
    2bee:	5e c0       	rjmp	.+188    	; 0x2cac <TMC2209::read(unsigned char)+0x21c>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	0e 94 89 35 	call	0x6b12	; 0x6b12 <delayMicroseconds>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	88 1a       	sub	r8, r24
    2bfc:	98 0a       	sbc	r9, r24
    2bfe:	a8 0a       	sbc	r10, r24
    2c00:	b8 0a       	sbc	r11, r24
    2c02:	e9 cf       	rjmp	.-46     	; 0x2bd6 <TMC2209::read(unsigned char)+0x146>
    2c04:	e0 e1       	ldi	r30, 0x10	; 16
    2c06:	8e 16       	cp	r8, r30
    2c08:	e7 e2       	ldi	r30, 0x27	; 39
    2c0a:	9e 06       	cpc	r9, r30
    2c0c:	a1 04       	cpc	r10, r1
    2c0e:	b1 04       	cpc	r11, r1
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <TMC2209::read(unsigned char)+0x184>
    2c12:	4c c0       	rjmp	.+152    	; 0x2cac <TMC2209::read(unsigned char)+0x21c>
    2c14:	19 82       	std	Y+1, r1	; 0x01
    2c16:	1a 82       	std	Y+2, r1	; 0x02
    2c18:	1b 82       	std	Y+3, r1	; 0x03
    2c1a:	1c 82       	std	Y+4, r1	; 0x04
    2c1c:	1d 82       	std	Y+5, r1	; 0x05
    2c1e:	1e 82       	std	Y+6, r1	; 0x06
    2c20:	1f 82       	std	Y+7, r1	; 0x07
    2c22:	18 86       	std	Y+8, r1	; 0x08
    2c24:	b1 2c       	mov	r11, r1
    2c26:	a1 2c       	mov	r10, r1
    2c28:	c7 01       	movw	r24, r14
    2c2a:	0e 94 24 14 	call	0x2848	; 0x2848 <TMC2209::serialRead()>
    2c2e:	9c 01       	movw	r18, r24
    2c30:	93 2f       	mov	r25, r19
    2c32:	99 0f       	add	r25, r25
    2c34:	99 0b       	sbc	r25, r25
    2c36:	49 2f       	mov	r20, r25
    2c38:	59 2f       	mov	r21, r25
    2c3a:	69 2f       	mov	r22, r25
    2c3c:	79 2f       	mov	r23, r25
    2c3e:	89 2f       	mov	r24, r25
    2c40:	0a 2d       	mov	r16, r10
    2c42:	0e 94 83 3a 	call	0x7506	; 0x7506 <__ashldi3>
    2c46:	f9 81       	ldd	r31, Y+1	; 0x01
    2c48:	2f 2b       	or	r18, r31
    2c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4c:	3f 2b       	or	r19, r31
    2c4e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c50:	e4 2b       	or	r30, r20
    2c52:	4c 81       	ldd	r20, Y+4	; 0x04
    2c54:	45 2b       	or	r20, r21
    2c56:	5d 81       	ldd	r21, Y+5	; 0x05
    2c58:	56 2b       	or	r21, r22
    2c5a:	6e 81       	ldd	r22, Y+6	; 0x06
    2c5c:	67 2b       	or	r22, r23
    2c5e:	7f 81       	ldd	r23, Y+7	; 0x07
    2c60:	78 2b       	or	r23, r24
    2c62:	88 85       	ldd	r24, Y+8	; 0x08
    2c64:	98 2b       	or	r25, r24
    2c66:	29 83       	std	Y+1, r18	; 0x01
    2c68:	3a 83       	std	Y+2, r19	; 0x02
    2c6a:	eb 83       	std	Y+3, r30	; 0x03
    2c6c:	4c 83       	std	Y+4, r20	; 0x04
    2c6e:	5d 83       	std	Y+5, r21	; 0x05
    2c70:	6e 83       	std	Y+6, r22	; 0x06
    2c72:	7f 83       	std	Y+7, r23	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	f8 e0       	ldi	r31, 0x08	; 8
    2c78:	af 0e       	add	r10, r31
    2c7a:	b1 1c       	adc	r11, r1
    2c7c:	80 e4       	ldi	r24, 0x40	; 64
    2c7e:	a8 16       	cp	r10, r24
    2c80:	b1 04       	cpc	r11, r1
    2c82:	91 f6       	brne	.-92     	; 0x2c28 <TMC2209::read(unsigned char)+0x198>
    2c84:	c7 01       	movw	r24, r14
    2c86:	28 96       	adiw	r28, 0x08	; 8
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	bf 90       	pop	r11
    2ca2:	af 90       	pop	r10
    2ca4:	9f 90       	pop	r9
    2ca6:	8f 90       	pop	r8
    2ca8:	0c 94 40 14 	jmp	0x2880	; 0x2880 <TMC2209::reverseData(unsigned long)>
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	28 96       	adiw	r28, 0x08	; 8
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	1f 91       	pop	r17
    2cc4:	0f 91       	pop	r16
    2cc6:	ff 90       	pop	r15
    2cc8:	ef 90       	pop	r14
    2cca:	df 90       	pop	r13
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	08 95       	ret

00002cd6 <TMC2209::getStatus()>:
_ZN7TMC22099getStatusEv():
    2cd6:	6f e6       	ldi	r22, 0x6F	; 111
    2cd8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <TMC2209::read(unsigned char)>
    2cdc:	08 95       	ret

00002cde <TMC2209::getStallGuardResult()>:
_ZN7TMC220919getStallGuardResultEv():
    2cde:	61 e4       	ldi	r22, 0x41	; 65
    2ce0:	0e 94 48 15 	call	0x2a90	; 0x2a90 <TMC2209::read(unsigned char)>
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	08 95       	ret

00002ce8 <TMC2209::percentToCurrentSetting(unsigned char)>:
_ZN7TMC220923percentToCurrentSettingEh():
    2ce8:	af 92       	push	r10
    2cea:	bf 92       	push	r11
    2cec:	cf 92       	push	r12
    2cee:	df 92       	push	r13
    2cf0:	ef 92       	push	r14
    2cf2:	ff 92       	push	r15
    2cf4:	0f 93       	push	r16
    2cf6:	1f 93       	push	r17
    2cf8:	70 e0       	ldi	r23, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	80 e0       	ldi	r24, 0x00	; 0
    2cfe:	65 36       	cpi	r22, 0x65	; 101
    2d00:	71 05       	cpc	r23, r1
    2d02:	81 05       	cpc	r24, r1
    2d04:	91 05       	cpc	r25, r1
    2d06:	20 f0       	brcs	.+8      	; 0x2d10 <TMC2209::percentToCurrentSetting(unsigned char)+0x28>
    2d08:	64 e6       	ldi	r22, 0x64	; 100
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	1f 92       	push	r1
    2d12:	1f 92       	push	r1
    2d14:	1f 92       	push	r1
    2d16:	2f e1       	ldi	r18, 0x1F	; 31
    2d18:	2f 93       	push	r18
    2d1a:	a1 2c       	mov	r10, r1
    2d1c:	b1 2c       	mov	r11, r1
    2d1e:	65 01       	movw	r12, r10
    2d20:	14 e6       	ldi	r17, 0x64	; 100
    2d22:	e1 2e       	mov	r14, r17
    2d24:	f1 2c       	mov	r15, r1
    2d26:	00 e0       	ldi	r16, 0x00	; 0
    2d28:	10 e0       	ldi	r17, 0x00	; 0
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	a9 01       	movw	r20, r18
    2d30:	0e 94 7f 34 	call	0x68fe	; 0x68fe <map(long, long, long, long, long)>
    2d34:	86 2f       	mov	r24, r22
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	1f 91       	pop	r17
    2d40:	0f 91       	pop	r16
    2d42:	ff 90       	pop	r15
    2d44:	ef 90       	pop	r14
    2d46:	df 90       	pop	r13
    2d48:	cf 90       	pop	r12
    2d4a:	bf 90       	pop	r11
    2d4c:	af 90       	pop	r10
    2d4e:	08 95       	ret

00002d50 <TMC2209::writeStoredGlobalConfig()>:
_ZN7TMC220923writeStoredGlobalConfigEv():
    2d50:	fc 01       	movw	r30, r24
    2d52:	21 85       	ldd	r18, Z+9	; 0x09
    2d54:	32 85       	ldd	r19, Z+10	; 0x0a
    2d56:	43 85       	ldd	r20, Z+11	; 0x0b
    2d58:	54 85       	ldd	r21, Z+12	; 0x0c
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>

00002d60 <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>:
_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE():
    2d60:	fc 01       	movw	r30, r24
    2d62:	66 83       	std	Z+6, r22	; 0x06
    2d64:	80 ec       	ldi	r24, 0xC0	; 192
    2d66:	81 87       	std	Z+9, r24	; 0x09
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	82 87       	std	Z+10, r24	; 0x0a
    2d6c:	13 86       	std	Z+11, r1	; 0x0b
    2d6e:	14 86       	std	Z+12, r1	; 0x0c
    2d70:	cf 01       	movw	r24, r30
    2d72:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <TMC2209::writeStoredGlobalConfig()>

00002d76 <TMC2209::writeStoredDriverCurrent()>:
_ZN7TMC220924writeStoredDriverCurrentEv():
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	ec 01       	movw	r28, r24
    2d7c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d7e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d80:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d82:	58 89       	ldd	r21, Y+16	; 0x10
    2d84:	60 e1       	ldi	r22, 0x10	; 16
    2d86:	0e 94 45 14 	call	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8c:	9f 71       	andi	r25, 0x1F	; 31
    2d8e:	8a 89       	ldd	r24, Y+18	; 0x12
    2d90:	94 31       	cpi	r25, 0x14	; 20
    2d92:	78 f0       	brcs	.+30     	; 0x2db2 <TMC2209::writeStoredDriverCurrent()+0x3c>
    2d94:	80 68       	ori	r24, 0x80	; 128
    2d96:	8a 8b       	std	Y+18, r24	; 0x12
    2d98:	8d 89       	ldd	r24, Y+21	; 0x15
    2d9a:	88 23       	and	r24, r24
    2d9c:	61 f0       	breq	.+24     	; 0x2db6 <TMC2209::writeStoredDriverCurrent()+0x40>
    2d9e:	29 89       	ldd	r18, Y+17	; 0x11
    2da0:	3a 89       	ldd	r19, Y+18	; 0x12
    2da2:	4b 89       	ldd	r20, Y+19	; 0x13
    2da4:	5c 89       	ldd	r21, Y+20	; 0x14
    2da6:	62 e4       	ldi	r22, 0x42	; 66
    2da8:	ce 01       	movw	r24, r28
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>
    2db2:	8f 77       	andi	r24, 0x7F	; 127
    2db4:	f0 cf       	rjmp	.-32     	; 0x2d96 <TMC2209::writeStoredDriverCurrent()+0x20>
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	08 95       	ret

00002dbc <TMC2209::setRunCurrent(unsigned char)>:
_ZN7TMC220913setRunCurrentEh():
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	ec 01       	movw	r28, r24
    2dc2:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <TMC2209::percentToCurrentSetting(unsigned char)>
    2dc6:	98 2f       	mov	r25, r24
    2dc8:	9f 71       	andi	r25, 0x1F	; 31
    2dca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dcc:	80 7e       	andi	r24, 0xE0	; 224
    2dce:	89 2b       	or	r24, r25
    2dd0:	8e 87       	std	Y+14, r24	; 0x0e
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <TMC2209::writeStoredDriverCurrent()>

00002ddc <TMC2209::setHoldCurrent(unsigned char)>:
_ZN7TMC220914setHoldCurrentEh():
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	ec 01       	movw	r28, r24
    2de2:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <TMC2209::percentToCurrentSetting(unsigned char)>
    2de6:	98 2f       	mov	r25, r24
    2de8:	9f 71       	andi	r25, 0x1F	; 31
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	80 7e       	andi	r24, 0xE0	; 224
    2dee:	89 2b       	or	r24, r25
    2df0:	8d 87       	std	Y+13, r24	; 0x0d
    2df2:	ce 01       	movw	r24, r28
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <TMC2209::writeStoredDriverCurrent()>

00002dfc <TMC2209::minimizeMotorCurrent()>:
_ZN7TMC220920minimizeMotorCurrentEv():
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	26 85       	ldd	r18, Z+14	; 0x0e
    2e00:	20 7e       	andi	r18, 0xE0	; 224
    2e02:	26 87       	std	Z+14, r18	; 0x0e
    2e04:	25 85       	ldd	r18, Z+13	; 0x0d
    2e06:	20 7e       	andi	r18, 0xE0	; 224
    2e08:	25 87       	std	Z+13, r18	; 0x0d
    2e0a:	0c 94 bb 16 	jmp	0x2d76	; 0x2d76 <TMC2209::writeStoredDriverCurrent()>

00002e0e <TMC2209::writeStoredChopperConfig()>:
_ZN7TMC220924writeStoredChopperConfigEv():
    2e0e:	fc 01       	movw	r30, r24
    2e10:	26 89       	ldd	r18, Z+22	; 0x16
    2e12:	37 89       	ldd	r19, Z+23	; 0x17
    2e14:	40 8d       	ldd	r20, Z+24	; 0x18
    2e16:	51 8d       	ldd	r21, Z+25	; 0x19
    2e18:	6c e6       	ldi	r22, 0x6C	; 108
    2e1a:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>

00002e1e <TMC2209::enable()>:
_ZN7TMC22096enableEv():
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    2e22:	ec 01       	movw	r28, r24
    2e24:	8f 81       	ldd	r24, Y+7	; 0x07
    2e26:	98 85       	ldd	r25, Y+8	; 0x08
    2e28:	97 fd       	sbrc	r25, 7
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <TMC2209::enable()+0x14>
    2e2c:	60 e0       	ldi	r22, 0x00	; 0
    2e2e:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
    2e32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2e34:	9f 70       	andi	r25, 0x0F	; 15
    2e36:	8e 89       	ldd	r24, Y+22	; 0x16
    2e38:	80 7f       	andi	r24, 0xF0	; 240
    2e3a:	89 2b       	or	r24, r25
    2e3c:	8e 8b       	std	Y+22, r24	; 0x16
    2e3e:	ce 01       	movw	r24, r28
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <TMC2209::writeStoredChopperConfig()>

00002e48 <TMC2209::disable()>:
_ZN7TMC22097disableEv():
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e50:	98 85       	ldd	r25, Y+8	; 0x08
    2e52:	97 fd       	sbrc	r25, 7
    2e54:	03 c0       	rjmp	.+6      	; 0x2e5c <TMC2209::disable()+0x14>
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
    2e5c:	8e 89       	ldd	r24, Y+22	; 0x16
    2e5e:	80 7f       	andi	r24, 0xF0	; 240
    2e60:	8e 8b       	std	Y+22, r24	; 0x16
    2e62:	ce 01       	movw	r24, r28
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <TMC2209::writeStoredChopperConfig()>

00002e6c <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>:
_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh():
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	59 96       	adiw	r26, 0x19	; 25
    2e70:	9c 91       	ld	r25, X
    2e72:	59 97       	sbiw	r26, 0x19	; 25
    2e74:	68 30       	cpi	r22, 0x08	; 8
    2e76:	20 f5       	brcc	.+72     	; 0x2ec0 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x54>
    2e78:	e6 2f       	mov	r30, r22
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	ed 5b       	subi	r30, 0xBD	; 189
    2e7e:	f8 4e       	sbci	r31, 0xE8	; 232
    2e80:	90 7f       	andi	r25, 0xF0	; 240
    2e82:	0c 94 5c 3a 	jmp	0x74b8	; 0x74b8 <__tablejump2__>
    2e86:	4b 17       	cp	r20, r27
    2e88:	52 17       	cp	r21, r18
    2e8a:	54 17       	cp	r21, r20
    2e8c:	56 17       	cp	r21, r22
    2e8e:	58 17       	cp	r21, r24
    2e90:	5a 17       	cp	r21, r26
    2e92:	5c 17       	cp	r21, r28
    2e94:	5e 17       	cp	r21, r30
    2e96:	98 60       	ori	r25, 0x08	; 8
    2e98:	59 96       	adiw	r26, 0x19	; 25
    2e9a:	9c 93       	st	X, r25
    2e9c:	59 97       	sbiw	r26, 0x19	; 25
    2e9e:	cd 01       	movw	r24, r26
    2ea0:	0c 94 07 17 	jmp	0x2e0e	; 0x2e0e <TMC2209::writeStoredChopperConfig()>
    2ea4:	97 60       	ori	r25, 0x07	; 7
    2ea6:	f8 cf       	rjmp	.-16     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2ea8:	96 60       	ori	r25, 0x06	; 6
    2eaa:	f6 cf       	rjmp	.-20     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2eac:	95 60       	ori	r25, 0x05	; 5
    2eae:	f4 cf       	rjmp	.-24     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2eb0:	94 60       	ori	r25, 0x04	; 4
    2eb2:	f2 cf       	rjmp	.-28     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2eb4:	93 60       	ori	r25, 0x03	; 3
    2eb6:	f0 cf       	rjmp	.-32     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2eb8:	92 60       	ori	r25, 0x02	; 2
    2eba:	ee cf       	rjmp	.-36     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2ebc:	91 60       	ori	r25, 0x01	; 1
    2ebe:	ec cf       	rjmp	.-40     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2ec0:	90 7f       	andi	r25, 0xF0	; 240
    2ec2:	ea cf       	rjmp	.-44     	; 0x2e98 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>

00002ec4 <TMC2209::setMicrostepsPerStep(unsigned int)>:
_ZN7TMC220920setMicrostepsPerStepEj():
    2ec4:	9b 01       	movw	r18, r22
    2ec6:	36 95       	lsr	r19
    2ec8:	27 95       	ror	r18
    2eca:	70 e0       	ldi	r23, 0x00	; 0
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	21 15       	cp	r18, r1
    2ed0:	31 05       	cpc	r19, r1
    2ed2:	29 f0       	breq	.+10     	; 0x2ede <TMC2209::setMicrostepsPerStep(unsigned int)+0x1a>
    2ed4:	36 95       	lsr	r19
    2ed6:	27 95       	ror	r18
    2ed8:	6f 5f       	subi	r22, 0xFF	; 255
    2eda:	7f 4f       	sbci	r23, 0xFF	; 255
    2edc:	f8 cf       	rjmp	.-16     	; 0x2ece <TMC2209::setMicrostepsPerStep(unsigned int)+0xa>
    2ede:	0c 94 36 17 	jmp	0x2e6c	; 0x2e6c <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>

00002ee2 <TMC2209::writeStoredPwmConfig()>:
_ZN7TMC220920writeStoredPwmConfigEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:961
}

void TMC2209::writeStoredPwmConfig()
{
  write(ADDRESS_PWMCONF, pwm_config_.bytes);
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	23 8d       	ldd	r18, Z+27	; 0x1b
    2ee6:	34 8d       	ldd	r19, Z+28	; 0x1c
    2ee8:	45 8d       	ldd	r20, Z+29	; 0x1d
    2eea:	56 8d       	ldd	r21, Z+30	; 0x1e
    2eec:	60 e7       	ldi	r22, 0x70	; 112
    2eee:	0c 94 45 14 	jmp	0x288a	; 0x288a <TMC2209::write(unsigned char, unsigned long)>

00002ef2 <TMC2209::setStandstillMode(TMC2209::StandstillMode)>:
_ZN7TMC220917setStandstillModeENS_14StandstillModeE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:240
  global_config_.shaft = 0;
  writeStoredGlobalConfig();
}

void TMC2209::setStandstillMode(TMC2209::StandstillMode mode)
{
    2ef2:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:241
  pwm_config_.freewheel = mode;
    2ef4:	63 70       	andi	r22, 0x03	; 3
    2ef6:	96 2f       	mov	r25, r22
    2ef8:	92 95       	swap	r25
    2efa:	90 7f       	andi	r25, 0xF0	; 240
    2efc:	65 8d       	ldd	r22, Z+29	; 0x1d
    2efe:	6f 7c       	andi	r22, 0xCF	; 207
    2f00:	69 2b       	or	r22, r25
    2f02:	65 8f       	std	Z+29, r22	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:242
  writeStoredPwmConfig();
    2f04:	cf 01       	movw	r24, r30
    2f06:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <TMC2209::writeStoredPwmConfig()>

00002f0a <TMC2209::enableAutomaticCurrentScaling()>:
_ZN7TMC220929enableAutomaticCurrentScalingEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:247
}

void TMC2209::enableAutomaticCurrentScaling()
{
  pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	25 8d       	ldd	r18, Z+29	; 0x1d
    2f0e:	24 60       	ori	r18, 0x04	; 4
    2f10:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:248
  writeStoredPwmConfig();
    2f12:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <TMC2209::writeStoredPwmConfig()>

00002f16 <TMC2209::disableAutomaticCurrentScaling()>:
_ZN7TMC220930disableAutomaticCurrentScalingEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:253
}

void TMC2209::disableAutomaticCurrentScaling()
{
  pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
    2f16:	fc 01       	movw	r30, r24
    2f18:	25 8d       	ldd	r18, Z+29	; 0x1d
    2f1a:	2b 7f       	andi	r18, 0xFB	; 251
    2f1c:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:254
  writeStoredPwmConfig();
    2f1e:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <TMC2209::writeStoredPwmConfig()>

00002f22 <TMC2209::enableAutomaticGradientAdaptation()>:
_ZN7TMC220933enableAutomaticGradientAdaptationEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:259
}

void TMC2209::enableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
    2f22:	fc 01       	movw	r30, r24
    2f24:	25 8d       	ldd	r18, Z+29	; 0x1d
    2f26:	28 60       	ori	r18, 0x08	; 8
    2f28:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:260
  writeStoredPwmConfig();
    2f2a:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <TMC2209::writeStoredPwmConfig()>

00002f2e <TMC2209::disableAutomaticGradientAdaptation()>:
_ZN7TMC220934disableAutomaticGradientAdaptationEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:265
}

void TMC2209::disableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
    2f2e:	fc 01       	movw	r30, r24
    2f30:	25 8d       	ldd	r18, Z+29	; 0x1d
    2f32:	27 7f       	andi	r18, 0xF7	; 247
    2f34:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:266
  writeStoredPwmConfig();
    2f36:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <TMC2209::writeStoredPwmConfig()>

00002f3a <TMC2209::initialize(long, TMC2209::SerialAddress)>:
_ZN7TMC220910initializeElNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:595
}

// private
void TMC2209::initialize(long serial_baud_rate,
  SerialAddress serial_address)
{
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:596
  serial_baud_rate_ = serial_baud_rate;
    2f40:	4a 83       	std	Y+2, r20	; 0x02
    2f42:	5b 83       	std	Y+3, r21	; 0x03
    2f44:	6c 83       	std	Y+4, r22	; 0x04
    2f46:	7d 83       	std	Y+5, r23	; 0x05
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:598

  setOperationModeToSerial(serial_address);
    2f48:	b9 01       	movw	r22, r18
    2f4a:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:599
  setRegistersToDefaults();
    2f4e:	ce 01       	movw	r24, r28
    2f50:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <TMC2209::setRegistersToDefaults()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:601

  minimizeMotorCurrent();
    2f54:	ce 01       	movw	r24, r28
    2f56:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <TMC2209::minimizeMotorCurrent()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:602
  disable();
    2f5a:	ce 01       	movw	r24, r28
    2f5c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <TMC2209::disable()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:603
  disableAutomaticCurrentScaling();
    2f60:	ce 01       	movw	r24, r28
    2f62:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <TMC2209::disableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:604
  disableAutomaticGradientAdaptation();
    2f66:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:605
}
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:604
  setRegistersToDefaults();

  minimizeMotorCurrent();
  disable();
  disableAutomaticCurrentScaling();
  disableAutomaticGradientAdaptation();
    2f6c:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <TMC2209::disableAutomaticGradientAdaptation()>

00002f70 <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>:
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:70
}
#else
void TMC2209::setup(HardwareSerial & serial,
  long serial_baud_rate,
  SerialAddress serial_address)
{
    2f70:	cf 92       	push	r12
    2f72:	df 92       	push	r13
    2f74:	ef 92       	push	r14
    2f76:	ff 92       	push	r15
    2f78:	0f 93       	push	r16
    2f7a:	1f 93       	push	r17
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	ec 01       	movw	r28, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	69 01       	movw	r12, r18
    2f86:	7a 01       	movw	r14, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:71
  hardware_serial_ptr_ = &serial;
    2f88:	79 83       	std	Y+1, r23	; 0x01
    2f8a:	68 83       	st	Y, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:72
  hardware_serial_ptr_->end();
    2f8c:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <HardwareSerial::end()>
_ZN14HardwareSerial5beginEm():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2f90:	26 e0       	ldi	r18, 0x06	; 6
    2f92:	b7 01       	movw	r22, r14
    2f94:	a6 01       	movw	r20, r12
    2f96:	88 81       	ld	r24, Y
    2f98:	99 81       	ldd	r25, Y+1	; 0x01
    2f9a:	0e 94 91 31 	call	0x6322	; 0x6322 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:75
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    2f9e:	98 01       	movw	r18, r16
    2fa0:	b7 01       	movw	r22, r14
    2fa2:	a6 01       	movw	r20, r12
    2fa4:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:76
}
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	0f 91       	pop	r16
    2fae:	ff 90       	pop	r15
    2fb0:	ef 90       	pop	r14
    2fb2:	df 90       	pop	r13
    2fb4:	cf 90       	pop	r12
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:75
{
  hardware_serial_ptr_ = &serial;
  hardware_serial_ptr_->end();
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    2fb6:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <TMC2209::initialize(long, TMC2209::SerialAddress)>

00002fba <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD2Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:644
// Blocks until the target position is reached and stopped
void AccelStepper::runToPosition()
{
    while (run())
	YIELD; // Let system housekeeping occur
}
    2fba:	08 95       	ret

00002fbc <AccelStepper::computeNewSpeed()>:
_ZN12AccelStepper15computeNewSpeedEv():
    2fbc:	4f 92       	push	r4
    2fbe:	5f 92       	push	r5
    2fc0:	6f 92       	push	r6
    2fc2:	7f 92       	push	r7
    2fc4:	8f 92       	push	r8
    2fc6:	9f 92       	push	r9
    2fc8:	af 92       	push	r10
    2fca:	bf 92       	push	r11
    2fcc:	cf 92       	push	r12
    2fce:	df 92       	push	r13
    2fd0:	ef 92       	push	r14
    2fd2:	ff 92       	push	r15
    2fd4:	0f 93       	push	r16
    2fd6:	1f 93       	push	r17
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	ec 01       	movw	r28, r24
_ZN12AccelStepper12distanceToGoEv():
    2fde:	cc 88       	ldd	r12, Y+20	; 0x14
    2fe0:	dd 88       	ldd	r13, Y+21	; 0x15
    2fe2:	ee 88       	ldd	r14, Y+22	; 0x16
    2fe4:	ff 88       	ldd	r15, Y+23	; 0x17
    2fe6:	88 89       	ldd	r24, Y+16	; 0x10
    2fe8:	99 89       	ldd	r25, Y+17	; 0x11
    2fea:	aa 89       	ldd	r26, Y+18	; 0x12
    2fec:	bb 89       	ldd	r27, Y+19	; 0x13
    2fee:	c8 1a       	sub	r12, r24
    2ff0:	d9 0a       	sbc	r13, r25
    2ff2:	ea 0a       	sbc	r14, r26
    2ff4:	fb 0a       	sbc	r15, r27
_ZN12AccelStepper15computeNewSpeedEv():
    2ff6:	68 8d       	ldd	r22, Y+24	; 0x18
    2ff8:	79 8d       	ldd	r23, Y+25	; 0x19
    2ffa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ffc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ffe:	9b 01       	movw	r18, r22
    3000:	ac 01       	movw	r20, r24
    3002:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    3006:	4b 01       	movw	r8, r22
    3008:	5c 01       	movw	r10, r24
    300a:	68 a1       	ldd	r22, Y+32	; 0x20
    300c:	79 a1       	ldd	r23, Y+33	; 0x21
    300e:	8a a1       	ldd	r24, Y+34	; 0x22
    3010:	9b a1       	ldd	r25, Y+35	; 0x23
    3012:	9b 01       	movw	r18, r22
    3014:	ac 01       	movw	r20, r24
    3016:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    301a:	9b 01       	movw	r18, r22
    301c:	ac 01       	movw	r20, r24
    301e:	c5 01       	movw	r24, r10
    3020:	b4 01       	movw	r22, r8
    3022:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    3026:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <__fixsfsi>
    302a:	c1 14       	cp	r12, r1
    302c:	d1 04       	cpc	r13, r1
    302e:	e1 04       	cpc	r14, r1
    3030:	f1 04       	cpc	r15, r1
    3032:	09 f0       	breq	.+2      	; 0x3036 <AccelStepper::computeNewSpeed()+0x7a>
    3034:	b6 c0       	rjmp	.+364    	; 0x31a2 <AccelStepper::computeNewSpeed()+0x1e6>
    3036:	62 30       	cpi	r22, 0x02	; 2
    3038:	71 05       	cpc	r23, r1
    303a:	81 05       	cpc	r24, r1
    303c:	91 05       	cpc	r25, r1
    303e:	0c f0       	brlt	.+2      	; 0x3042 <AccelStepper::computeNewSpeed()+0x86>
    3040:	d0 c0       	rjmp	.+416    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    3042:	1b 82       	std	Y+3, r1	; 0x03
    3044:	1c 82       	std	Y+4, r1	; 0x04
    3046:	1d 82       	std	Y+5, r1	; 0x05
    3048:	1e 82       	std	Y+6, r1	; 0x06
    304a:	18 8e       	std	Y+24, r1	; 0x18
    304c:	19 8e       	std	Y+25, r1	; 0x19
    304e:	1a 8e       	std	Y+26, r1	; 0x1a
    3050:	1b 8e       	std	Y+27, r1	; 0x1b
    3052:	1c aa       	std	Y+52, r1	; 0x34
    3054:	1d aa       	std	Y+53, r1	; 0x35
    3056:	1e aa       	std	Y+54, r1	; 0x36
    3058:	1f aa       	std	Y+55, r1	; 0x37
    305a:	c1 2c       	mov	r12, r1
    305c:	d1 2c       	mov	r13, r1
    305e:	76 01       	movw	r14, r12
    3060:	c7 01       	movw	r24, r14
    3062:	b6 01       	movw	r22, r12
    3064:	df 91       	pop	r29
    3066:	cf 91       	pop	r28
    3068:	1f 91       	pop	r17
    306a:	0f 91       	pop	r16
    306c:	ff 90       	pop	r15
    306e:	ef 90       	pop	r14
    3070:	df 90       	pop	r13
    3072:	cf 90       	pop	r12
    3074:	bf 90       	pop	r11
    3076:	af 90       	pop	r10
    3078:	9f 90       	pop	r9
    307a:	8f 90       	pop	r8
    307c:	7f 90       	pop	r7
    307e:	6f 90       	pop	r6
    3080:	5f 90       	pop	r5
    3082:	4f 90       	pop	r4
    3084:	08 95       	ret
    3086:	10 16       	cp	r1, r16
    3088:	11 06       	cpc	r1, r17
    308a:	12 06       	cpc	r1, r18
    308c:	13 06       	cpc	r1, r19
    308e:	b4 f4       	brge	.+44     	; 0x30bc <AccelStepper::computeNewSpeed()+0x100>
    3090:	6c 15       	cp	r22, r12
    3092:	7d 05       	cpc	r23, r13
    3094:	8e 05       	cpc	r24, r14
    3096:	9f 05       	cpc	r25, r15
    3098:	1c f4       	brge	.+6      	; 0x30a0 <AccelStepper::computeNewSpeed()+0xe4>
    309a:	2a 81       	ldd	r18, Y+2	; 0x02
    309c:	21 11       	cpse	r18, r1
    309e:	a1 c0       	rjmp	.+322    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    30a0:	9b 01       	movw	r18, r22
    30a2:	ac 01       	movw	r20, r24
    30a4:	88 27       	eor	r24, r24
    30a6:	99 27       	eor	r25, r25
    30a8:	dc 01       	movw	r26, r24
    30aa:	82 1b       	sub	r24, r18
    30ac:	93 0b       	sbc	r25, r19
    30ae:	a4 0b       	sbc	r26, r20
    30b0:	b5 0b       	sbc	r27, r21
    30b2:	8c ab       	std	Y+52, r24	; 0x34
    30b4:	9d ab       	std	Y+53, r25	; 0x35
    30b6:	ae ab       	std	Y+54, r26	; 0x36
    30b8:	bf ab       	std	Y+55, r27	; 0x37
    30ba:	93 c0       	rjmp	.+294    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    30bc:	01 15       	cp	r16, r1
    30be:	11 05       	cpc	r17, r1
    30c0:	21 05       	cpc	r18, r1
    30c2:	31 05       	cpc	r19, r1
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <AccelStepper::computeNewSpeed()+0x10c>
    30c6:	8d c0       	rjmp	.+282    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    30c8:	6c 15       	cp	r22, r12
    30ca:	7d 05       	cpc	r23, r13
    30cc:	8e 05       	cpc	r24, r14
    30ce:	9f 05       	cpc	r25, r15
    30d0:	0c f0       	brlt	.+2      	; 0x30d4 <AccelStepper::computeNewSpeed()+0x118>
    30d2:	87 c0       	rjmp	.+270    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	88 23       	and	r24, r24
    30d8:	09 f4       	brne	.+2      	; 0x30dc <AccelStepper::computeNewSpeed()+0x120>
    30da:	83 c0       	rjmp	.+262    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    30dc:	30 95       	com	r19
    30de:	20 95       	com	r18
    30e0:	10 95       	com	r17
    30e2:	01 95       	neg	r16
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	2f 4f       	sbci	r18, 0xFF	; 255
    30e8:	3f 4f       	sbci	r19, 0xFF	; 255
    30ea:	0c ab       	std	Y+52, r16	; 0x34
    30ec:	1d ab       	std	Y+53, r17	; 0x35
    30ee:	2e ab       	std	Y+54, r18	; 0x36
    30f0:	3f ab       	std	Y+55, r19	; 0x37
    30f2:	77 c0       	rjmp	.+238    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    30f4:	01 15       	cp	r16, r1
    30f6:	11 05       	cpc	r17, r1
    30f8:	21 05       	cpc	r18, r1
    30fa:	31 05       	cpc	r19, r1
    30fc:	09 f4       	brne	.+2      	; 0x3100 <AccelStepper::computeNewSpeed()+0x144>
    30fe:	71 c0       	rjmp	.+226    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    3100:	88 24       	eor	r8, r8
    3102:	99 24       	eor	r9, r9
    3104:	54 01       	movw	r10, r8
    3106:	8c 18       	sub	r8, r12
    3108:	9d 08       	sbc	r9, r13
    310a:	ae 08       	sbc	r10, r14
    310c:	bf 08       	sbc	r11, r15
    310e:	68 15       	cp	r22, r8
    3110:	79 05       	cpc	r23, r9
    3112:	8a 05       	cpc	r24, r10
    3114:	9b 05       	cpc	r25, r11
    3116:	0c f0       	brlt	.+2      	; 0x311a <AccelStepper::computeNewSpeed()+0x15e>
    3118:	64 c0       	rjmp	.+200    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	81 11       	cpse	r24, r1
    311e:	61 c0       	rjmp	.+194    	; 0x31e2 <AccelStepper::computeNewSpeed()+0x226>
    3120:	dd cf       	rjmp	.-70     	; 0x30dc <AccelStepper::computeNewSpeed()+0x120>
    3122:	cc ac       	ldd	r12, Y+60	; 0x3c
    3124:	dd ac       	ldd	r13, Y+61	; 0x3d
    3126:	ee ac       	ldd	r14, Y+62	; 0x3e
    3128:	ff ac       	ldd	r15, Y+63	; 0x3f
    312a:	a7 01       	movw	r20, r14
    312c:	96 01       	movw	r18, r12
    312e:	c7 01       	movw	r24, r14
    3130:	b6 01       	movw	r22, r12
    3132:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    3136:	2b 01       	movw	r4, r22
    3138:	3c 01       	movw	r6, r24
    313a:	c5 01       	movw	r24, r10
    313c:	b4 01       	movw	r22, r8
    313e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	50 e4       	ldi	r21, 0x40	; 64
    314a:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e8       	ldi	r20, 0x80	; 128
    3154:	5f e3       	ldi	r21, 0x3F	; 63
    3156:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    315a:	9b 01       	movw	r18, r22
    315c:	ac 01       	movw	r20, r24
    315e:	c3 01       	movw	r24, r6
    3160:	b2 01       	movw	r22, r4
    3162:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    3166:	9b 01       	movw	r18, r22
    3168:	ac 01       	movw	r20, r24
    316a:	c7 01       	movw	r24, r14
    316c:	b6 01       	movw	r22, r12
    316e:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    3172:	3b 01       	movw	r6, r22
    3174:	6c 01       	movw	r12, r24
    3176:	fe 01       	movw	r30, r28
    3178:	e0 5c       	subi	r30, 0xC0	; 192
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	e0 80       	ld	r14, Z
    317e:	f1 80       	ldd	r15, Z+1	; 0x01
    3180:	02 81       	ldd	r16, Z+2	; 0x02
    3182:	13 81       	ldd	r17, Z+3	; 0x03
    3184:	97 01       	movw	r18, r14
    3186:	a8 01       	movw	r20, r16
    3188:	0e 94 9a 38 	call	0x7134	; 0x7134 <__gesf2>
    318c:	18 16       	cp	r1, r24
    318e:	14 f4       	brge	.+4      	; 0x3194 <AccelStepper::computeNewSpeed()+0x1d8>
    3190:	73 01       	movw	r14, r6
    3192:	86 01       	movw	r16, r12
    3194:	c7 01       	movw	r24, r14
    3196:	d8 01       	movw	r26, r16
    3198:	8c af       	std	Y+60, r24	; 0x3c
    319a:	9d af       	std	Y+61, r25	; 0x3d
    319c:	ae af       	std	Y+62, r26	; 0x3e
    319e:	bf af       	std	Y+63, r27	; 0x3f
    31a0:	3a c0       	rjmp	.+116    	; 0x3216 <AccelStepper::computeNewSpeed()+0x25a>
    31a2:	0c a9       	ldd	r16, Y+52	; 0x34
    31a4:	1d a9       	ldd	r17, Y+53	; 0x35
    31a6:	2e a9       	ldd	r18, Y+54	; 0x36
    31a8:	3f a9       	ldd	r19, Y+55	; 0x37
    31aa:	1c 14       	cp	r1, r12
    31ac:	1d 04       	cpc	r1, r13
    31ae:	1e 04       	cpc	r1, r14
    31b0:	1f 04       	cpc	r1, r15
    31b2:	0c f4       	brge	.+2      	; 0x31b6 <AccelStepper::computeNewSpeed()+0x1fa>
    31b4:	68 cf       	rjmp	.-304    	; 0x3086 <AccelStepper::computeNewSpeed()+0xca>
    31b6:	10 16       	cp	r1, r16
    31b8:	11 06       	cpc	r1, r17
    31ba:	12 06       	cpc	r1, r18
    31bc:	13 06       	cpc	r1, r19
    31be:	0c f0       	brlt	.+2      	; 0x31c2 <AccelStepper::computeNewSpeed()+0x206>
    31c0:	99 cf       	rjmp	.-206    	; 0x30f4 <AccelStepper::computeNewSpeed()+0x138>
    31c2:	00 27       	eor	r16, r16
    31c4:	11 27       	eor	r17, r17
    31c6:	98 01       	movw	r18, r16
    31c8:	0c 19       	sub	r16, r12
    31ca:	1d 09       	sbc	r17, r13
    31cc:	2e 09       	sbc	r18, r14
    31ce:	3f 09       	sbc	r19, r15
    31d0:	60 17       	cp	r22, r16
    31d2:	71 07       	cpc	r23, r17
    31d4:	82 07       	cpc	r24, r18
    31d6:	93 07       	cpc	r25, r19
    31d8:	0c f0       	brlt	.+2      	; 0x31dc <AccelStepper::computeNewSpeed()+0x220>
    31da:	62 cf       	rjmp	.-316    	; 0x30a0 <AccelStepper::computeNewSpeed()+0xe4>
    31dc:	2a 81       	ldd	r18, Y+2	; 0x02
    31de:	21 11       	cpse	r18, r1
    31e0:	5f cf       	rjmp	.-322    	; 0x30a0 <AccelStepper::computeNewSpeed()+0xe4>
    31e2:	8c a8       	ldd	r8, Y+52	; 0x34
    31e4:	9d a8       	ldd	r9, Y+53	; 0x35
    31e6:	ae a8       	ldd	r10, Y+54	; 0x36
    31e8:	bf a8       	ldd	r11, Y+55	; 0x37
    31ea:	81 14       	cp	r8, r1
    31ec:	91 04       	cpc	r9, r1
    31ee:	a1 04       	cpc	r10, r1
    31f0:	b1 04       	cpc	r11, r1
    31f2:	09 f0       	breq	.+2      	; 0x31f6 <AccelStepper::computeNewSpeed()+0x23a>
    31f4:	96 cf       	rjmp	.-212    	; 0x3122 <AccelStepper::computeNewSpeed()+0x166>
    31f6:	88 ad       	ldd	r24, Y+56	; 0x38
    31f8:	99 ad       	ldd	r25, Y+57	; 0x39
    31fa:	aa ad       	ldd	r26, Y+58	; 0x3a
    31fc:	bb ad       	ldd	r27, Y+59	; 0x3b
    31fe:	8c af       	std	Y+60, r24	; 0x3c
    3200:	9d af       	std	Y+61, r25	; 0x3d
    3202:	ae af       	std	Y+62, r26	; 0x3e
    3204:	bf af       	std	Y+63, r27	; 0x3f
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	1c 14       	cp	r1, r12
    320a:	1d 04       	cpc	r1, r13
    320c:	1e 04       	cpc	r1, r14
    320e:	1f 04       	cpc	r1, r15
    3210:	0c f0       	brlt	.+2      	; 0x3214 <AccelStepper::computeNewSpeed()+0x258>
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	8a 83       	std	Y+2, r24	; 0x02
    3216:	3f ef       	ldi	r19, 0xFF	; 255
    3218:	83 1a       	sub	r8, r19
    321a:	93 0a       	sbc	r9, r19
    321c:	a3 0a       	sbc	r10, r19
    321e:	b3 0a       	sbc	r11, r19
    3220:	8c aa       	std	Y+52, r8	; 0x34
    3222:	9d aa       	std	Y+53, r9	; 0x35
    3224:	ae aa       	std	Y+54, r10	; 0x36
    3226:	bf aa       	std	Y+55, r11	; 0x37
    3228:	8c ac       	ldd	r8, Y+60	; 0x3c
    322a:	9d ac       	ldd	r9, Y+61	; 0x3d
    322c:	ae ac       	ldd	r10, Y+62	; 0x3e
    322e:	bf ac       	ldd	r11, Y+63	; 0x3f
    3230:	c5 01       	movw	r24, r10
    3232:	b4 01       	movw	r22, r8
    3234:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <__fixunssfsi>
    3238:	6b 01       	movw	r12, r22
    323a:	7c 01       	movw	r14, r24
    323c:	cb 82       	std	Y+3, r12	; 0x03
    323e:	dc 82       	std	Y+4, r13	; 0x04
    3240:	ed 82       	std	Y+5, r14	; 0x05
    3242:	fe 82       	std	Y+6, r15	; 0x06
    3244:	a5 01       	movw	r20, r10
    3246:	94 01       	movw	r18, r8
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	74 e2       	ldi	r23, 0x24	; 36
    324c:	84 e7       	ldi	r24, 0x74	; 116
    324e:	99 e4       	ldi	r25, 0x49	; 73
    3250:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    3254:	68 8f       	std	Y+24, r22	; 0x18
    3256:	79 8f       	std	Y+25, r23	; 0x19
    3258:	8a 8f       	std	Y+26, r24	; 0x1a
    325a:	9b 8f       	std	Y+27, r25	; 0x1b
    325c:	2a 81       	ldd	r18, Y+2	; 0x02
    325e:	21 11       	cpse	r18, r1
    3260:	ff ce       	rjmp	.-514    	; 0x3060 <AccelStepper::computeNewSpeed()+0xa4>
    3262:	90 58       	subi	r25, 0x80	; 128
    3264:	68 8f       	std	Y+24, r22	; 0x18
    3266:	79 8f       	std	Y+25, r23	; 0x19
    3268:	8a 8f       	std	Y+26, r24	; 0x1a
    326a:	9b 8f       	std	Y+27, r25	; 0x1b
    326c:	f9 ce       	rjmp	.-526    	; 0x3060 <AccelStepper::computeNewSpeed()+0xa4>

0000326e <AccelStepper::step(long)>:
_ZN12AccelStepper4stepEl():
    326e:	dc 01       	movw	r26, r24
    3270:	17 96       	adiw	r26, 0x07	; 7
    3272:	ec 91       	ld	r30, X
    3274:	17 97       	sbiw	r26, 0x07	; 7
    3276:	e9 30       	cpi	r30, 0x09	; 9
    3278:	08 f0       	brcs	.+2      	; 0x327c <AccelStepper::step(long)+0xe>
    327a:	38 c0       	rjmp	.+112    	; 0x32ec <AccelStepper::step(long)+0x7e>
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	ed 5b       	subi	r30, 0xBD	; 189
    3280:	f6 4e       	sbci	r31, 0xE6	; 230
    3282:	0c 94 5c 3a 	jmp	0x74b8	; 0x74b8 <__tablejump2__>
    3286:	4c 19       	sub	r20, r12
    3288:	52 19       	sub	r21, r2
    328a:	58 19       	sub	r21, r8
    328c:	5e 19       	sub	r21, r14
    328e:	64 19       	sub	r22, r4
    3290:	76 19       	sub	r23, r6
    3292:	6a 19       	sub	r22, r10
    3294:	76 19       	sub	r23, r6
    3296:	70 19       	sub	r23, r0
    3298:	ed 91       	ld	r30, X+
    329a:	fc 91       	ld	r31, X
    329c:	06 84       	ldd	r0, Z+14	; 0x0e
    329e:	f7 85       	ldd	r31, Z+15	; 0x0f
    32a0:	e0 2d       	mov	r30, r0
    32a2:	09 94       	ijmp
    32a4:	ed 91       	ld	r30, X+
    32a6:	fc 91       	ld	r31, X
    32a8:	00 88       	ldd	r0, Z+16	; 0x10
    32aa:	f1 89       	ldd	r31, Z+17	; 0x11
    32ac:	e0 2d       	mov	r30, r0
    32ae:	f9 cf       	rjmp	.-14     	; 0x32a2 <AccelStepper::step(long)+0x34>
    32b0:	ed 91       	ld	r30, X+
    32b2:	fc 91       	ld	r31, X
    32b4:	02 88       	ldd	r0, Z+18	; 0x12
    32b6:	f3 89       	ldd	r31, Z+19	; 0x13
    32b8:	e0 2d       	mov	r30, r0
    32ba:	f3 cf       	rjmp	.-26     	; 0x32a2 <AccelStepper::step(long)+0x34>
    32bc:	ed 91       	ld	r30, X+
    32be:	fc 91       	ld	r31, X
    32c0:	04 88       	ldd	r0, Z+20	; 0x14
    32c2:	f5 89       	ldd	r31, Z+21	; 0x15
    32c4:	e0 2d       	mov	r30, r0
    32c6:	ed cf       	rjmp	.-38     	; 0x32a2 <AccelStepper::step(long)+0x34>
    32c8:	ed 91       	ld	r30, X+
    32ca:	fc 91       	ld	r31, X
    32cc:	06 88       	ldd	r0, Z+22	; 0x16
    32ce:	f7 89       	ldd	r31, Z+23	; 0x17
    32d0:	e0 2d       	mov	r30, r0
    32d2:	e7 cf       	rjmp	.-50     	; 0x32a2 <AccelStepper::step(long)+0x34>
    32d4:	ed 91       	ld	r30, X+
    32d6:	fc 91       	ld	r31, X
    32d8:	00 8c       	ldd	r0, Z+24	; 0x18
    32da:	f1 8d       	ldd	r31, Z+25	; 0x19
    32dc:	e0 2d       	mov	r30, r0
    32de:	e1 cf       	rjmp	.-62     	; 0x32a2 <AccelStepper::step(long)+0x34>
    32e0:	ed 91       	ld	r30, X+
    32e2:	fc 91       	ld	r31, X
    32e4:	02 8c       	ldd	r0, Z+26	; 0x1a
    32e6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    32e8:	e0 2d       	mov	r30, r0
    32ea:	db cf       	rjmp	.-74     	; 0x32a2 <AccelStepper::step(long)+0x34>
    32ec:	08 95       	ret

000032ee <AccelStepper::step6(long)>:
_ZN12AccelStepper5step6El():
    32ee:	cf 93       	push	r28
    32f0:	df 93       	push	r29
    32f2:	ec 01       	movw	r28, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	ba 01       	movw	r22, r20
    32f8:	26 e0       	ldi	r18, 0x06	; 6
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e0       	ldi	r20, 0x00	; 0
    32fe:	50 e0       	ldi	r21, 0x00	; 0
    3300:	0e 94 3d 3a 	call	0x747a	; 0x747a <__divmodsi4>
    3304:	62 30       	cpi	r22, 0x02	; 2
    3306:	71 05       	cpc	r23, r1
    3308:	81 05       	cpc	r24, r1
    330a:	91 05       	cpc	r25, r1
    330c:	89 f1       	breq	.+98     	; 0x3370 <AccelStepper::step6(long)+0x82>
    330e:	6c f4       	brge	.+26     	; 0x332a <AccelStepper::step6(long)+0x3c>
    3310:	61 15       	cp	r22, r1
    3312:	71 05       	cpc	r23, r1
    3314:	81 05       	cpc	r24, r1
    3316:	91 05       	cpc	r25, r1
    3318:	d1 f0       	breq	.+52     	; 0x334e <AccelStepper::step6(long)+0x60>
    331a:	61 30       	cpi	r22, 0x01	; 1
    331c:	71 05       	cpc	r23, r1
    331e:	81 05       	cpc	r24, r1
    3320:	91 05       	cpc	r25, r1
    3322:	f9 f0       	breq	.+62     	; 0x3362 <AccelStepper::step6(long)+0x74>
    3324:	df 91       	pop	r29
    3326:	cf 91       	pop	r28
    3328:	08 95       	ret
    332a:	64 30       	cpi	r22, 0x04	; 4
    332c:	71 05       	cpc	r23, r1
    332e:	81 05       	cpc	r24, r1
    3330:	91 05       	cpc	r25, r1
    3332:	61 f1       	breq	.+88     	; 0x338c <AccelStepper::step6(long)+0x9e>
    3334:	24 f1       	brlt	.+72     	; 0x337e <AccelStepper::step6(long)+0x90>
    3336:	65 30       	cpi	r22, 0x05	; 5
    3338:	71 05       	cpc	r23, r1
    333a:	81 05       	cpc	r24, r1
    333c:	91 05       	cpc	r25, r1
    333e:	91 f7       	brne	.-28     	; 0x3324 <AccelStepper::step6(long)+0x36>
    3340:	e8 81       	ld	r30, Y
    3342:	f9 81       	ldd	r31, Y+1	; 0x01
    3344:	02 84       	ldd	r0, Z+10	; 0x0a
    3346:	f3 85       	ldd	r31, Z+11	; 0x0b
    3348:	e0 2d       	mov	r30, r0
    334a:	66 e0       	ldi	r22, 0x06	; 6
    334c:	06 c0       	rjmp	.+12     	; 0x335a <AccelStepper::step6(long)+0x6c>
    334e:	e8 81       	ld	r30, Y
    3350:	f9 81       	ldd	r31, Y+1	; 0x01
    3352:	02 84       	ldd	r0, Z+10	; 0x0a
    3354:	f3 85       	ldd	r31, Z+11	; 0x0b
    3356:	e0 2d       	mov	r30, r0
    3358:	64 e0       	ldi	r22, 0x04	; 4
    335a:	ce 01       	movw	r24, r28
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	09 94       	ijmp
    3362:	e8 81       	ld	r30, Y
    3364:	f9 81       	ldd	r31, Y+1	; 0x01
    3366:	02 84       	ldd	r0, Z+10	; 0x0a
    3368:	f3 85       	ldd	r31, Z+11	; 0x0b
    336a:	e0 2d       	mov	r30, r0
    336c:	65 e0       	ldi	r22, 0x05	; 5
    336e:	f5 cf       	rjmp	.-22     	; 0x335a <AccelStepper::step6(long)+0x6c>
    3370:	e8 81       	ld	r30, Y
    3372:	f9 81       	ldd	r31, Y+1	; 0x01
    3374:	02 84       	ldd	r0, Z+10	; 0x0a
    3376:	f3 85       	ldd	r31, Z+11	; 0x0b
    3378:	e0 2d       	mov	r30, r0
    337a:	61 e0       	ldi	r22, 0x01	; 1
    337c:	ee cf       	rjmp	.-36     	; 0x335a <AccelStepper::step6(long)+0x6c>
    337e:	e8 81       	ld	r30, Y
    3380:	f9 81       	ldd	r31, Y+1	; 0x01
    3382:	02 84       	ldd	r0, Z+10	; 0x0a
    3384:	f3 85       	ldd	r31, Z+11	; 0x0b
    3386:	e0 2d       	mov	r30, r0
    3388:	63 e0       	ldi	r22, 0x03	; 3
    338a:	e7 cf       	rjmp	.-50     	; 0x335a <AccelStepper::step6(long)+0x6c>
    338c:	e8 81       	ld	r30, Y
    338e:	f9 81       	ldd	r31, Y+1	; 0x01
    3390:	02 84       	ldd	r0, Z+10	; 0x0a
    3392:	f3 85       	ldd	r31, Z+11	; 0x0b
    3394:	e0 2d       	mov	r30, r0
    3396:	62 e0       	ldi	r22, 0x02	; 2
    3398:	e0 cf       	rjmp	.-64     	; 0x335a <AccelStepper::step6(long)+0x6c>

0000339a <AccelStepper::step8(long)>:
_ZN12AccelStepper5step8El():
    339a:	dc 01       	movw	r26, r24
    339c:	ed 91       	ld	r30, X+
    339e:	fc 91       	ld	r31, X
    33a0:	22 85       	ldd	r18, Z+10	; 0x0a
    33a2:	33 85       	ldd	r19, Z+11	; 0x0b
    33a4:	47 70       	andi	r20, 0x07	; 7
    33a6:	55 27       	eor	r21, r21
    33a8:	66 27       	eor	r22, r22
    33aa:	77 27       	eor	r23, r23
    33ac:	41 50       	subi	r20, 0x01	; 1
    33ae:	51 09       	sbc	r21, r1
    33b0:	61 09       	sbc	r22, r1
    33b2:	71 09       	sbc	r23, r1
    33b4:	47 30       	cpi	r20, 0x07	; 7
    33b6:	51 05       	cpc	r21, r1
    33b8:	61 05       	cpc	r22, r1
    33ba:	71 05       	cpc	r23, r1
    33bc:	60 f4       	brcc	.+24     	; 0x33d6 <AccelStepper::step8(long)+0x3c>
    33be:	fa 01       	movw	r30, r20
    33c0:	ec 51       	subi	r30, 0x1C	; 28
    33c2:	f6 4e       	sbci	r31, 0xE6	; 230
    33c4:	0c 94 5c 3a 	jmp	0x74b8	; 0x74b8 <__tablejump2__>
    33c8:	ee 19       	sub	r30, r14
    33ca:	f0 19       	sub	r31, r0
    33cc:	f2 19       	sub	r31, r2
    33ce:	f4 19       	sub	r31, r4
    33d0:	f6 19       	sub	r31, r6
    33d2:	f8 19       	sub	r31, r8
    33d4:	fa 19       	sub	r31, r10
    33d6:	61 e0       	ldi	r22, 0x01	; 1
    33d8:	f9 01       	movw	r30, r18
    33da:	09 94       	ijmp
    33dc:	65 e0       	ldi	r22, 0x05	; 5
    33de:	fc cf       	rjmp	.-8      	; 0x33d8 <AccelStepper::step8(long)+0x3e>
    33e0:	64 e0       	ldi	r22, 0x04	; 4
    33e2:	fa cf       	rjmp	.-12     	; 0x33d8 <AccelStepper::step8(long)+0x3e>
    33e4:	66 e0       	ldi	r22, 0x06	; 6
    33e6:	f8 cf       	rjmp	.-16     	; 0x33d8 <AccelStepper::step8(long)+0x3e>
    33e8:	62 e0       	ldi	r22, 0x02	; 2
    33ea:	f6 cf       	rjmp	.-20     	; 0x33d8 <AccelStepper::step8(long)+0x3e>
    33ec:	6a e0       	ldi	r22, 0x0A	; 10
    33ee:	f4 cf       	rjmp	.-24     	; 0x33d8 <AccelStepper::step8(long)+0x3e>
    33f0:	68 e0       	ldi	r22, 0x08	; 8
    33f2:	f2 cf       	rjmp	.-28     	; 0x33d8 <AccelStepper::step8(long)+0x3e>
    33f4:	69 e0       	ldi	r22, 0x09	; 9
    33f6:	f0 cf       	rjmp	.-32     	; 0x33d8 <AccelStepper::step8(long)+0x3e>

000033f8 <AccelStepper::setOutputPins(unsigned char)>:
_ZN12AccelStepper13setOutputPinsEh():
    33f8:	cf 92       	push	r12
    33fa:	df 92       	push	r13
    33fc:	ef 92       	push	r14
    33fe:	ff 92       	push	r15
    3400:	0f 93       	push	r16
    3402:	1f 93       	push	r17
    3404:	cf 93       	push	r28
    3406:	df 93       	push	r29
    3408:	dc 01       	movw	r26, r24
    340a:	17 96       	adiw	r26, 0x07	; 7
    340c:	cc 91       	ld	r28, X
    340e:	c4 30       	cpi	r28, 0x04	; 4
    3410:	39 f0       	breq	.+14     	; 0x3420 <AccelStepper::setOutputPins(unsigned char)+0x28>
    3412:	c8 30       	cpi	r28, 0x08	; 8
    3414:	59 f1       	breq	.+86     	; 0x346c <AccelStepper::setOutputPins(unsigned char)+0x74>
    3416:	c3 30       	cpi	r28, 0x03	; 3
    3418:	19 f0       	breq	.+6      	; 0x3420 <AccelStepper::setOutputPins(unsigned char)+0x28>
    341a:	c6 30       	cpi	r28, 0x06	; 6
    341c:	49 f1       	breq	.+82     	; 0x3470 <AccelStepper::setOutputPins(unsigned char)+0x78>
    341e:	c2 e0       	ldi	r28, 0x02	; 2
    3420:	8c 01       	movw	r16, r24
    3422:	08 5f       	subi	r16, 0xF8	; 248
    3424:	1f 4f       	sbci	r17, 0xFF	; 255
    3426:	f1 2c       	mov	r15, r1
    3428:	e1 2c       	mov	r14, r1
    342a:	c6 2e       	mov	r12, r22
    342c:	d1 2c       	mov	r13, r1
    342e:	d1 e0       	ldi	r29, 0x01	; 1
    3430:	f8 01       	movw	r30, r16
    3432:	64 81       	ldd	r22, Z+4	; 0x04
    3434:	c6 01       	movw	r24, r12
    3436:	0e 2c       	mov	r0, r14
    3438:	02 c0       	rjmp	.+4      	; 0x343e <AccelStepper::setOutputPins(unsigned char)+0x46>
    343a:	95 95       	asr	r25
    343c:	87 95       	ror	r24
    343e:	0a 94       	dec	r0
    3440:	e2 f7       	brpl	.-8      	; 0x343a <AccelStepper::setOutputPins(unsigned char)+0x42>
    3442:	80 fd       	sbrc	r24, 0
    3444:	6d 27       	eor	r22, r29
    3446:	0f 5f       	subi	r16, 0xFF	; 255
    3448:	1f 4f       	sbci	r17, 0xFF	; 255
    344a:	80 81       	ld	r24, Z
    344c:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
    3450:	bf ef       	ldi	r27, 0xFF	; 255
    3452:	eb 1a       	sub	r14, r27
    3454:	fb 0a       	sbc	r15, r27
    3456:	ec 16       	cp	r14, r28
    3458:	58 f3       	brcs	.-42     	; 0x3430 <AccelStepper::setOutputPins(unsigned char)+0x38>
    345a:	df 91       	pop	r29
    345c:	cf 91       	pop	r28
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	ff 90       	pop	r15
    3464:	ef 90       	pop	r14
    3466:	df 90       	pop	r13
    3468:	cf 90       	pop	r12
    346a:	08 95       	ret
    346c:	c4 e0       	ldi	r28, 0x04	; 4
    346e:	d8 cf       	rjmp	.-80     	; 0x3420 <AccelStepper::setOutputPins(unsigned char)+0x28>
    3470:	c3 e0       	ldi	r28, 0x03	; 3
    3472:	d6 cf       	rjmp	.-84     	; 0x3420 <AccelStepper::setOutputPins(unsigned char)+0x28>

00003474 <AccelStepper::step1(long)>:
_ZN12AccelStepper5step1El():
    3474:	cf 93       	push	r28
    3476:	df 93       	push	r29
    3478:	ec 01       	movw	r28, r24
    347a:	e8 81       	ld	r30, Y
    347c:	f9 81       	ldd	r31, Y+1	; 0x01
    347e:	02 84       	ldd	r0, Z+10	; 0x0a
    3480:	f3 85       	ldd	r31, Z+11	; 0x0b
    3482:	e0 2d       	mov	r30, r0
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	81 11       	cpse	r24, r1
    348a:	62 e0       	ldi	r22, 0x02	; 2
    348c:	ce 01       	movw	r24, r28
    348e:	09 95       	icall
    3490:	e8 81       	ld	r30, Y
    3492:	f9 81       	ldd	r31, Y+1	; 0x01
    3494:	02 84       	ldd	r0, Z+10	; 0x0a
    3496:	f3 85       	ldd	r31, Z+11	; 0x0b
    3498:	e0 2d       	mov	r30, r0
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	61 e0       	ldi	r22, 0x01	; 1
    349e:	81 11       	cpse	r24, r1
    34a0:	63 e0       	ldi	r22, 0x03	; 3
    34a2:	ce 01       	movw	r24, r28
    34a4:	09 95       	icall
    34a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    34a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    34aa:	0e 94 89 35 	call	0x6b12	; 0x6b12 <delayMicroseconds>
    34ae:	e8 81       	ld	r30, Y
    34b0:	f9 81       	ldd	r31, Y+1	; 0x01
    34b2:	02 84       	ldd	r0, Z+10	; 0x0a
    34b4:	f3 85       	ldd	r31, Z+11	; 0x0b
    34b6:	e0 2d       	mov	r30, r0
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	60 e0       	ldi	r22, 0x00	; 0
    34bc:	81 11       	cpse	r24, r1
    34be:	62 e0       	ldi	r22, 0x02	; 2
    34c0:	ce 01       	movw	r24, r28
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	09 94       	ijmp

000034c8 <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD0Ev():
    34c8:	64 e4       	ldi	r22, 0x44	; 68
    34ca:	70 e0       	ldi	r23, 0x00	; 0
    34cc:	0c 94 d3 34 	jmp	0x69a6	; 0x69a6 <operator delete(void*, unsigned int)>

000034d0 <AccelStepper::step0(long)>:
_ZN12AccelStepper5step0El():
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	ec 01       	movw	r28, r24
    34d6:	20 e0       	ldi	r18, 0x00	; 0
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	a9 01       	movw	r20, r18
    34dc:	68 8d       	ldd	r22, Y+24	; 0x18
    34de:	79 8d       	ldd	r23, Y+25	; 0x19
    34e0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34e4:	0e 94 9a 38 	call	0x7134	; 0x7134 <__gesf2>
    34e8:	18 16       	cp	r1, r24
    34ea:	2c f4       	brge	.+10     	; 0x34f6 <AccelStepper::step0(long)+0x26>
    34ec:	e8 a9       	ldd	r30, Y+48	; 0x30
    34ee:	f9 a9       	ldd	r31, Y+49	; 0x31
    34f0:	df 91       	pop	r29
    34f2:	cf 91       	pop	r28
    34f4:	09 94       	ijmp
    34f6:	ea a9       	ldd	r30, Y+50	; 0x32
    34f8:	fb a9       	ldd	r31, Y+51	; 0x33
    34fa:	fa cf       	rjmp	.-12     	; 0x34f0 <AccelStepper::step0(long)+0x20>

000034fc <AccelStepper::step2(long)>:
_ZN12AccelStepper5step2El():
    34fc:	dc 01       	movw	r26, r24
    34fe:	ed 91       	ld	r30, X+
    3500:	fc 91       	ld	r31, X
    3502:	02 84       	ldd	r0, Z+10	; 0x0a
    3504:	f3 85       	ldd	r31, Z+11	; 0x0b
    3506:	e0 2d       	mov	r30, r0
    3508:	43 70       	andi	r20, 0x03	; 3
    350a:	55 27       	eor	r21, r21
    350c:	66 27       	eor	r22, r22
    350e:	77 27       	eor	r23, r23
    3510:	42 30       	cpi	r20, 0x02	; 2
    3512:	51 05       	cpc	r21, r1
    3514:	61 05       	cpc	r22, r1
    3516:	71 05       	cpc	r23, r1
    3518:	71 f0       	breq	.+28     	; 0x3536 <AccelStepper::step2(long)+0x3a>
    351a:	43 30       	cpi	r20, 0x03	; 3
    351c:	51 05       	cpc	r21, r1
    351e:	61 05       	cpc	r22, r1
    3520:	71 05       	cpc	r23, r1
    3522:	59 f0       	breq	.+22     	; 0x353a <AccelStepper::step2(long)+0x3e>
    3524:	41 30       	cpi	r20, 0x01	; 1
    3526:	51 05       	cpc	r21, r1
    3528:	61 05       	cpc	r22, r1
    352a:	71 05       	cpc	r23, r1
    352c:	11 f0       	breq	.+4      	; 0x3532 <AccelStepper::step2(long)+0x36>
    352e:	62 e0       	ldi	r22, 0x02	; 2
    3530:	09 94       	ijmp
    3532:	63 e0       	ldi	r22, 0x03	; 3
    3534:	fd cf       	rjmp	.-6      	; 0x3530 <AccelStepper::step2(long)+0x34>
    3536:	61 e0       	ldi	r22, 0x01	; 1
    3538:	fb cf       	rjmp	.-10     	; 0x3530 <AccelStepper::step2(long)+0x34>
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	f9 cf       	rjmp	.-14     	; 0x3530 <AccelStepper::step2(long)+0x34>

0000353e <AccelStepper::step3(long)>:
_ZN12AccelStepper5step3El():
    353e:	cf 93       	push	r28
    3540:	df 93       	push	r29
    3542:	ec 01       	movw	r28, r24
    3544:	cb 01       	movw	r24, r22
    3546:	ba 01       	movw	r22, r20
    3548:	23 e0       	ldi	r18, 0x03	; 3
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e0       	ldi	r20, 0x00	; 0
    354e:	50 e0       	ldi	r21, 0x00	; 0
    3550:	0e 94 3d 3a 	call	0x747a	; 0x747a <__divmodsi4>
    3554:	61 30       	cpi	r22, 0x01	; 1
    3556:	71 05       	cpc	r23, r1
    3558:	81 05       	cpc	r24, r1
    355a:	91 05       	cpc	r25, r1
    355c:	99 f0       	breq	.+38     	; 0x3584 <AccelStepper::step3(long)+0x46>
    355e:	62 30       	cpi	r22, 0x02	; 2
    3560:	71 05       	cpc	r23, r1
    3562:	81 05       	cpc	r24, r1
    3564:	91 05       	cpc	r25, r1
    3566:	a9 f0       	breq	.+42     	; 0x3592 <AccelStepper::step3(long)+0x54>
    3568:	67 2b       	or	r22, r23
    356a:	68 2b       	or	r22, r24
    356c:	69 2b       	or	r22, r25
    356e:	c1 f4       	brne	.+48     	; 0x35a0 <AccelStepper::step3(long)+0x62>
    3570:	e8 81       	ld	r30, Y
    3572:	f9 81       	ldd	r31, Y+1	; 0x01
    3574:	02 84       	ldd	r0, Z+10	; 0x0a
    3576:	f3 85       	ldd	r31, Z+11	; 0x0b
    3578:	e0 2d       	mov	r30, r0
    357a:	64 e0       	ldi	r22, 0x04	; 4
    357c:	ce 01       	movw	r24, r28
    357e:	df 91       	pop	r29
    3580:	cf 91       	pop	r28
    3582:	09 94       	ijmp
    3584:	e8 81       	ld	r30, Y
    3586:	f9 81       	ldd	r31, Y+1	; 0x01
    3588:	02 84       	ldd	r0, Z+10	; 0x0a
    358a:	f3 85       	ldd	r31, Z+11	; 0x0b
    358c:	e0 2d       	mov	r30, r0
    358e:	61 e0       	ldi	r22, 0x01	; 1
    3590:	f5 cf       	rjmp	.-22     	; 0x357c <AccelStepper::step3(long)+0x3e>
    3592:	e8 81       	ld	r30, Y
    3594:	f9 81       	ldd	r31, Y+1	; 0x01
    3596:	02 84       	ldd	r0, Z+10	; 0x0a
    3598:	f3 85       	ldd	r31, Z+11	; 0x0b
    359a:	e0 2d       	mov	r30, r0
    359c:	62 e0       	ldi	r22, 0x02	; 2
    359e:	ee cf       	rjmp	.-36     	; 0x357c <AccelStepper::step3(long)+0x3e>
    35a0:	df 91       	pop	r29
    35a2:	cf 91       	pop	r28
    35a4:	08 95       	ret

000035a6 <AccelStepper::step4(long)>:
_ZN12AccelStepper5step4El():
    35a6:	dc 01       	movw	r26, r24
    35a8:	ed 91       	ld	r30, X+
    35aa:	fc 91       	ld	r31, X
    35ac:	02 84       	ldd	r0, Z+10	; 0x0a
    35ae:	f3 85       	ldd	r31, Z+11	; 0x0b
    35b0:	e0 2d       	mov	r30, r0
    35b2:	43 70       	andi	r20, 0x03	; 3
    35b4:	55 27       	eor	r21, r21
    35b6:	66 27       	eor	r22, r22
    35b8:	77 27       	eor	r23, r23
    35ba:	42 30       	cpi	r20, 0x02	; 2
    35bc:	51 05       	cpc	r21, r1
    35be:	61 05       	cpc	r22, r1
    35c0:	71 05       	cpc	r23, r1
    35c2:	71 f0       	breq	.+28     	; 0x35e0 <AccelStepper::step4(long)+0x3a>
    35c4:	43 30       	cpi	r20, 0x03	; 3
    35c6:	51 05       	cpc	r21, r1
    35c8:	61 05       	cpc	r22, r1
    35ca:	71 05       	cpc	r23, r1
    35cc:	59 f0       	breq	.+22     	; 0x35e4 <AccelStepper::step4(long)+0x3e>
    35ce:	41 30       	cpi	r20, 0x01	; 1
    35d0:	51 05       	cpc	r21, r1
    35d2:	61 05       	cpc	r22, r1
    35d4:	71 05       	cpc	r23, r1
    35d6:	11 f0       	breq	.+4      	; 0x35dc <AccelStepper::step4(long)+0x36>
    35d8:	65 e0       	ldi	r22, 0x05	; 5
    35da:	09 94       	ijmp
    35dc:	66 e0       	ldi	r22, 0x06	; 6
    35de:	fd cf       	rjmp	.-6      	; 0x35da <AccelStepper::step4(long)+0x34>
    35e0:	6a e0       	ldi	r22, 0x0A	; 10
    35e2:	fb cf       	rjmp	.-10     	; 0x35da <AccelStepper::step4(long)+0x34>
    35e4:	69 e0       	ldi	r22, 0x09	; 9
    35e6:	f9 cf       	rjmp	.-14     	; 0x35da <AccelStepper::step4(long)+0x34>

000035e8 <AccelStepper::disableOutputs()>:
_ZN12AccelStepper14disableOutputsEv():
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	fc 01       	movw	r30, r24
    35ee:	27 81       	ldd	r18, Z+7	; 0x07
    35f0:	22 23       	and	r18, r18
    35f2:	a9 f0       	breq	.+42     	; 0x361e <AccelStepper::disableOutputs()+0x36>
    35f4:	ec 01       	movw	r28, r24
    35f6:	01 90       	ld	r0, Z+
    35f8:	f0 81       	ld	r31, Z
    35fa:	e0 2d       	mov	r30, r0
    35fc:	02 84       	ldd	r0, Z+10	; 0x0a
    35fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    3600:	e0 2d       	mov	r30, r0
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	09 95       	icall
    3606:	8f a5       	ldd	r24, Y+47	; 0x2f
    3608:	8f 3f       	cpi	r24, 0xFF	; 255
    360a:	49 f0       	breq	.+18     	; 0x361e <AccelStepper::disableOutputs()+0x36>
    360c:	61 e0       	ldi	r22, 0x01	; 1
    360e:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3612:	6e a5       	ldd	r22, Y+46	; 0x2e
    3614:	8f a5       	ldd	r24, Y+47	; 0x2f
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <digitalWrite>
    361e:	df 91       	pop	r29
    3620:	cf 91       	pop	r28
    3622:	08 95       	ret

00003624 <AccelStepper::enableOutputs()>:
_ZN12AccelStepper13enableOutputsEv():
    3624:	cf 93       	push	r28
    3626:	df 93       	push	r29
    3628:	fc 01       	movw	r30, r24
    362a:	27 81       	ldd	r18, Z+7	; 0x07
    362c:	22 23       	and	r18, r18
    362e:	59 f1       	breq	.+86     	; 0x3686 <AccelStepper::enableOutputs()+0x62>
    3630:	ec 01       	movw	r28, r24
    3632:	61 e0       	ldi	r22, 0x01	; 1
    3634:	80 85       	ldd	r24, Z+8	; 0x08
    3636:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3642:	8f 81       	ldd	r24, Y+7	; 0x07
    3644:	84 30       	cpi	r24, 0x04	; 4
    3646:	11 f0       	breq	.+4      	; 0x364c <AccelStepper::enableOutputs()+0x28>
    3648:	88 30       	cpi	r24, 0x08	; 8
    364a:	b1 f4       	brne	.+44     	; 0x3678 <AccelStepper::enableOutputs()+0x54>
    364c:	61 e0       	ldi	r22, 0x01	; 1
    364e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3650:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3654:	61 e0       	ldi	r22, 0x01	; 1
    3656:	8b 85       	ldd	r24, Y+11	; 0x0b
    3658:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    365c:	8f a5       	ldd	r24, Y+47	; 0x2f
    365e:	8f 3f       	cpi	r24, 0xFF	; 255
    3660:	91 f0       	breq	.+36     	; 0x3686 <AccelStepper::enableOutputs()+0x62>
    3662:	61 e0       	ldi	r22, 0x01	; 1
    3664:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3668:	6e a5       	ldd	r22, Y+46	; 0x2e
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	68 27       	eor	r22, r24
    366e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <digitalWrite>
    3678:	83 30       	cpi	r24, 0x03	; 3
    367a:	11 f0       	breq	.+4      	; 0x3680 <AccelStepper::enableOutputs()+0x5c>
    367c:	86 30       	cpi	r24, 0x06	; 6
    367e:	71 f7       	brne	.-36     	; 0x365c <AccelStepper::enableOutputs()+0x38>
    3680:	61 e0       	ldi	r22, 0x01	; 1
    3682:	8a 85       	ldd	r24, Y+10	; 0x0a
    3684:	e9 cf       	rjmp	.-46     	; 0x3658 <AccelStepper::enableOutputs()+0x34>
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	08 95       	ret

0000368c <AccelStepper::setAcceleration(float) [clone .part.10]>:
_ZN12AccelStepper15setAccelerationEf():
    368c:	4f 92       	push	r4
    368e:	5f 92       	push	r5
    3690:	6f 92       	push	r6
    3692:	7f 92       	push	r7
    3694:	8f 92       	push	r8
    3696:	9f 92       	push	r9
    3698:	af 92       	push	r10
    369a:	bf 92       	push	r11
    369c:	cf 92       	push	r12
    369e:	df 92       	push	r13
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	cf 93       	push	r28
    36a6:	df 93       	push	r29
    36a8:	ec 01       	movw	r28, r24
    36aa:	6a 01       	movw	r12, r20
    36ac:	7b 01       	movw	r14, r22
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e0       	ldi	r19, 0x00	; 0
    36b2:	a9 01       	movw	r20, r18
    36b4:	cb 01       	movw	r24, r22
    36b6:	b6 01       	movw	r22, r12
    36b8:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    36bc:	87 ff       	sbrs	r24, 7
    36be:	04 c0       	rjmp	.+8      	; 0x36c8 <AccelStepper::setAcceleration(float) [clone .part.10]+0x3c>
    36c0:	f7 fa       	bst	r15, 7
    36c2:	f0 94       	com	r15
    36c4:	f7 f8       	bld	r15, 7
    36c6:	f0 94       	com	r15
    36c8:	88 a0       	ldd	r8, Y+32	; 0x20
    36ca:	99 a0       	ldd	r9, Y+33	; 0x21
    36cc:	aa a0       	ldd	r10, Y+34	; 0x22
    36ce:	bb a0       	ldd	r11, Y+35	; 0x23
    36d0:	a7 01       	movw	r20, r14
    36d2:	96 01       	movw	r18, r12
    36d4:	c5 01       	movw	r24, r10
    36d6:	b4 01       	movw	r22, r8
    36d8:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    36dc:	88 23       	and	r24, r24
    36de:	09 f4       	brne	.+2      	; 0x36e2 <AccelStepper::setAcceleration(float) [clone .part.10]+0x56>
    36e0:	4d c0       	rjmp	.+154    	; 0x377c <AccelStepper::setAcceleration(float) [clone .part.10]+0xf0>
    36e2:	6c a9       	ldd	r22, Y+52	; 0x34
    36e4:	7d a9       	ldd	r23, Y+53	; 0x35
    36e6:	8e a9       	ldd	r24, Y+54	; 0x36
    36e8:	9f a9       	ldd	r25, Y+55	; 0x37
    36ea:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    36ee:	2b 01       	movw	r4, r22
    36f0:	3c 01       	movw	r6, r24
    36f2:	a7 01       	movw	r20, r14
    36f4:	96 01       	movw	r18, r12
    36f6:	c5 01       	movw	r24, r10
    36f8:	b4 01       	movw	r22, r8
    36fa:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    36fe:	9b 01       	movw	r18, r22
    3700:	ac 01       	movw	r20, r24
    3702:	c3 01       	movw	r24, r6
    3704:	b2 01       	movw	r22, r4
    3706:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    370a:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <__fixsfsi>
    370e:	6c ab       	std	Y+52, r22	; 0x34
    3710:	7d ab       	std	Y+53, r23	; 0x35
    3712:	8e ab       	std	Y+54, r24	; 0x36
    3714:	9f ab       	std	Y+55, r25	; 0x37
    3716:	a7 01       	movw	r20, r14
    3718:	96 01       	movw	r18, r12
    371a:	60 e0       	ldi	r22, 0x00	; 0
    371c:	70 e0       	ldi	r23, 0x00	; 0
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	90 e4       	ldi	r25, 0x40	; 64
    3722:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    3726:	0e 94 62 39 	call	0x72c4	; 0x72c4 <sqrt>
    372a:	26 e5       	ldi	r18, 0x56	; 86
    372c:	3e e0       	ldi	r19, 0x0E	; 14
    372e:	4d e2       	ldi	r20, 0x2D	; 45
    3730:	5f e3       	ldi	r21, 0x3F	; 63
    3732:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    3736:	20 e0       	ldi	r18, 0x00	; 0
    3738:	34 e2       	ldi	r19, 0x24	; 36
    373a:	44 e7       	ldi	r20, 0x74	; 116
    373c:	59 e4       	ldi	r21, 0x49	; 73
    373e:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    3742:	68 af       	std	Y+56, r22	; 0x38
    3744:	79 af       	std	Y+57, r23	; 0x39
    3746:	8a af       	std	Y+58, r24	; 0x3a
    3748:	9b af       	std	Y+59, r25	; 0x3b
    374a:	c8 a2       	std	Y+32, r12	; 0x20
    374c:	d9 a2       	std	Y+33, r13	; 0x21
    374e:	ea a2       	std	Y+34, r14	; 0x22
    3750:	fb a2       	std	Y+35, r15	; 0x23
    3752:	e8 81       	ld	r30, Y
    3754:	f9 81       	ldd	r31, Y+1	; 0x01
    3756:	00 84       	ldd	r0, Z+8	; 0x08
    3758:	f1 85       	ldd	r31, Z+9	; 0x09
    375a:	e0 2d       	mov	r30, r0
    375c:	ce 01       	movw	r24, r28
    375e:	df 91       	pop	r29
    3760:	cf 91       	pop	r28
    3762:	ff 90       	pop	r15
    3764:	ef 90       	pop	r14
    3766:	df 90       	pop	r13
    3768:	cf 90       	pop	r12
    376a:	bf 90       	pop	r11
    376c:	af 90       	pop	r10
    376e:	9f 90       	pop	r9
    3770:	8f 90       	pop	r8
    3772:	7f 90       	pop	r7
    3774:	6f 90       	pop	r6
    3776:	5f 90       	pop	r5
    3778:	4f 90       	pop	r4
    377a:	09 94       	ijmp
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	ff 90       	pop	r15
    3782:	ef 90       	pop	r14
    3784:	df 90       	pop	r13
    3786:	cf 90       	pop	r12
    3788:	bf 90       	pop	r11
    378a:	af 90       	pop	r10
    378c:	9f 90       	pop	r9
    378e:	8f 90       	pop	r8
    3790:	7f 90       	pop	r7
    3792:	6f 90       	pop	r6
    3794:	5f 90       	pop	r5
    3796:	4f 90       	pop	r4
    3798:	08 95       	ret

0000379a <AccelStepper::moveTo(long)>:
_ZN12AccelStepper6moveToEl():
    379a:	0f 93       	push	r16
    379c:	1f 93       	push	r17
    379e:	dc 01       	movw	r26, r24
    37a0:	54 96       	adiw	r26, 0x14	; 20
    37a2:	0d 91       	ld	r16, X+
    37a4:	1d 91       	ld	r17, X+
    37a6:	2d 91       	ld	r18, X+
    37a8:	3c 91       	ld	r19, X
    37aa:	57 97       	sbiw	r26, 0x17	; 23
    37ac:	04 17       	cp	r16, r20
    37ae:	15 07       	cpc	r17, r21
    37b0:	26 07       	cpc	r18, r22
    37b2:	37 07       	cpc	r19, r23
    37b4:	71 f0       	breq	.+28     	; 0x37d2 <AccelStepper::moveTo(long)+0x38>
    37b6:	fc 01       	movw	r30, r24
    37b8:	44 8b       	std	Z+20, r20	; 0x14
    37ba:	55 8b       	std	Z+21, r21	; 0x15
    37bc:	66 8b       	std	Z+22, r22	; 0x16
    37be:	77 8b       	std	Z+23, r23	; 0x17
    37c0:	01 90       	ld	r0, Z+
    37c2:	f0 81       	ld	r31, Z
    37c4:	e0 2d       	mov	r30, r0
    37c6:	00 84       	ldd	r0, Z+8	; 0x08
    37c8:	f1 85       	ldd	r31, Z+9	; 0x09
    37ca:	e0 2d       	mov	r30, r0
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	09 94       	ijmp
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <AccelStepper::runSpeed()>:
_ZN12AccelStepper8runSpeedEv():
    37d8:	cf 92       	push	r12
    37da:	df 92       	push	r13
    37dc:	ef 92       	push	r14
    37de:	ff 92       	push	r15
    37e0:	cf 93       	push	r28
    37e2:	df 93       	push	r29
    37e4:	fc 01       	movw	r30, r24
    37e6:	43 81       	ldd	r20, Z+3	; 0x03
    37e8:	54 81       	ldd	r21, Z+4	; 0x04
    37ea:	65 81       	ldd	r22, Z+5	; 0x05
    37ec:	76 81       	ldd	r23, Z+6	; 0x06
    37ee:	45 2b       	or	r20, r21
    37f0:	46 2b       	or	r20, r22
    37f2:	47 2b       	or	r20, r23
    37f4:	41 f4       	brne	.+16     	; 0x3806 <AccelStepper::runSpeed()+0x2e>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	ff 90       	pop	r15
    37fe:	ef 90       	pop	r14
    3800:	df 90       	pop	r13
    3802:	cf 90       	pop	r12
    3804:	08 95       	ret
    3806:	ec 01       	movw	r28, r24
    3808:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <micros>
    380c:	6b 01       	movw	r12, r22
    380e:	7c 01       	movw	r14, r24
    3810:	88 a5       	ldd	r24, Y+40	; 0x28
    3812:	99 a5       	ldd	r25, Y+41	; 0x29
    3814:	aa a5       	ldd	r26, Y+42	; 0x2a
    3816:	bb a5       	ldd	r27, Y+43	; 0x2b
    3818:	b7 01       	movw	r22, r14
    381a:	a6 01       	movw	r20, r12
    381c:	48 1b       	sub	r20, r24
    381e:	59 0b       	sbc	r21, r25
    3820:	6a 0b       	sbc	r22, r26
    3822:	7b 0b       	sbc	r23, r27
    3824:	8b 81       	ldd	r24, Y+3	; 0x03
    3826:	9c 81       	ldd	r25, Y+4	; 0x04
    3828:	ad 81       	ldd	r26, Y+5	; 0x05
    382a:	be 81       	ldd	r27, Y+6	; 0x06
    382c:	48 17       	cp	r20, r24
    382e:	59 07       	cpc	r21, r25
    3830:	6a 07       	cpc	r22, r26
    3832:	7b 07       	cpc	r23, r27
    3834:	00 f3       	brcs	.-64     	; 0x37f6 <AccelStepper::runSpeed()+0x1e>
    3836:	88 89       	ldd	r24, Y+16	; 0x10
    3838:	99 89       	ldd	r25, Y+17	; 0x11
    383a:	aa 89       	ldd	r26, Y+18	; 0x12
    383c:	bb 89       	ldd	r27, Y+19	; 0x13
    383e:	2a 81       	ldd	r18, Y+2	; 0x02
    3840:	22 23       	and	r18, r18
    3842:	c1 f0       	breq	.+48     	; 0x3874 <AccelStepper::runSpeed()+0x9c>
    3844:	01 96       	adiw	r24, 0x01	; 1
    3846:	a1 1d       	adc	r26, r1
    3848:	b1 1d       	adc	r27, r1
    384a:	88 8b       	std	Y+16, r24	; 0x10
    384c:	99 8b       	std	Y+17, r25	; 0x11
    384e:	aa 8b       	std	Y+18, r26	; 0x12
    3850:	bb 8b       	std	Y+19, r27	; 0x13
    3852:	48 89       	ldd	r20, Y+16	; 0x10
    3854:	59 89       	ldd	r21, Y+17	; 0x11
    3856:	6a 89       	ldd	r22, Y+18	; 0x12
    3858:	7b 89       	ldd	r23, Y+19	; 0x13
    385a:	e8 81       	ld	r30, Y
    385c:	f9 81       	ldd	r31, Y+1	; 0x01
    385e:	04 84       	ldd	r0, Z+12	; 0x0c
    3860:	f5 85       	ldd	r31, Z+13	; 0x0d
    3862:	e0 2d       	mov	r30, r0
    3864:	ce 01       	movw	r24, r28
    3866:	09 95       	icall
    3868:	c8 a6       	std	Y+40, r12	; 0x28
    386a:	d9 a6       	std	Y+41, r13	; 0x29
    386c:	ea a6       	std	Y+42, r14	; 0x2a
    386e:	fb a6       	std	Y+43, r15	; 0x2b
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	c2 cf       	rjmp	.-124    	; 0x37f8 <AccelStepper::runSpeed()+0x20>
    3874:	01 97       	sbiw	r24, 0x01	; 1
    3876:	a1 09       	sbc	r26, r1
    3878:	b1 09       	sbc	r27, r1
    387a:	e7 cf       	rjmp	.-50     	; 0x384a <AccelStepper::runSpeed()+0x72>

0000387c <AccelStepper::distanceToGo()>:
_ZN12AccelStepper12distanceToGoEv():
    387c:	0f 93       	push	r16
    387e:	1f 93       	push	r17
    3880:	fc 01       	movw	r30, r24
    3882:	64 89       	ldd	r22, Z+20	; 0x14
    3884:	75 89       	ldd	r23, Z+21	; 0x15
    3886:	86 89       	ldd	r24, Z+22	; 0x16
    3888:	97 89       	ldd	r25, Z+23	; 0x17
    388a:	00 89       	ldd	r16, Z+16	; 0x10
    388c:	11 89       	ldd	r17, Z+17	; 0x11
    388e:	22 89       	ldd	r18, Z+18	; 0x12
    3890:	33 89       	ldd	r19, Z+19	; 0x13
    3892:	60 1b       	sub	r22, r16
    3894:	71 0b       	sbc	r23, r17
    3896:	82 0b       	sbc	r24, r18
    3898:	93 0b       	sbc	r25, r19
    389a:	1f 91       	pop	r17
    389c:	0f 91       	pop	r16
    389e:	08 95       	ret

000038a0 <AccelStepper::currentPosition()>:
_ZN12AccelStepper15currentPositionEv():
    38a0:	fc 01       	movw	r30, r24
    38a2:	60 89       	ldd	r22, Z+16	; 0x10
    38a4:	71 89       	ldd	r23, Z+17	; 0x11
    38a6:	82 89       	ldd	r24, Z+18	; 0x12
    38a8:	93 89       	ldd	r25, Z+19	; 0x13
    38aa:	08 95       	ret

000038ac <AccelStepper::setCurrentPosition(long)>:
_ZN12AccelStepper18setCurrentPositionEl():
    38ac:	fc 01       	movw	r30, r24
    38ae:	40 8b       	std	Z+16, r20	; 0x10
    38b0:	51 8b       	std	Z+17, r21	; 0x11
    38b2:	62 8b       	std	Z+18, r22	; 0x12
    38b4:	73 8b       	std	Z+19, r23	; 0x13
    38b6:	44 8b       	std	Z+20, r20	; 0x14
    38b8:	55 8b       	std	Z+21, r21	; 0x15
    38ba:	66 8b       	std	Z+22, r22	; 0x16
    38bc:	77 8b       	std	Z+23, r23	; 0x17
    38be:	14 aa       	std	Z+52, r1	; 0x34
    38c0:	15 aa       	std	Z+53, r1	; 0x35
    38c2:	16 aa       	std	Z+54, r1	; 0x36
    38c4:	17 aa       	std	Z+55, r1	; 0x37
    38c6:	13 82       	std	Z+3, r1	; 0x03
    38c8:	14 82       	std	Z+4, r1	; 0x04
    38ca:	15 82       	std	Z+5, r1	; 0x05
    38cc:	16 82       	std	Z+6, r1	; 0x06
    38ce:	10 8e       	std	Z+24, r1	; 0x18
    38d0:	11 8e       	std	Z+25, r1	; 0x19
    38d2:	12 8e       	std	Z+26, r1	; 0x1a
    38d4:	13 8e       	std	Z+27, r1	; 0x1b
    38d6:	08 95       	ret

000038d8 <AccelStepper::setMaxSpeed(float)>:
_ZN12AccelStepper11setMaxSpeedEf():
    38d8:	cf 92       	push	r12
    38da:	df 92       	push	r13
    38dc:	ef 92       	push	r14
    38de:	ff 92       	push	r15
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	ec 01       	movw	r28, r24
    38ea:	6a 01       	movw	r12, r20
    38ec:	7b 01       	movw	r14, r22
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	a9 01       	movw	r20, r18
    38f4:	cb 01       	movw	r24, r22
    38f6:	b6 01       	movw	r22, r12
    38f8:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    38fc:	87 ff       	sbrs	r24, 7
    38fe:	04 c0       	rjmp	.+8      	; 0x3908 <AccelStepper::setMaxSpeed(float)+0x30>
    3900:	f7 fa       	bst	r15, 7
    3902:	f0 94       	com	r15
    3904:	f7 f8       	bld	r15, 7
    3906:	f0 94       	com	r15
    3908:	a7 01       	movw	r20, r14
    390a:	96 01       	movw	r18, r12
    390c:	6c 8d       	ldd	r22, Y+28	; 0x1c
    390e:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3910:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3912:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3914:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    3918:	88 23       	and	r24, r24
    391a:	09 f4       	brne	.+2      	; 0x391e <AccelStepper::setMaxSpeed(float)+0x46>
    391c:	4a c0       	rjmp	.+148    	; 0x39b2 <AccelStepper::setMaxSpeed(float)+0xda>
    391e:	cc 8e       	std	Y+28, r12	; 0x1c
    3920:	dd 8e       	std	Y+29, r13	; 0x1d
    3922:	ee 8e       	std	Y+30, r14	; 0x1e
    3924:	ff 8e       	std	Y+31, r15	; 0x1f
    3926:	8e 01       	movw	r16, r28
    3928:	00 5c       	subi	r16, 0xC0	; 192
    392a:	1f 4f       	sbci	r17, 0xFF	; 255
    392c:	a7 01       	movw	r20, r14
    392e:	96 01       	movw	r18, r12
    3930:	60 e0       	ldi	r22, 0x00	; 0
    3932:	74 e2       	ldi	r23, 0x24	; 36
    3934:	84 e7       	ldi	r24, 0x74	; 116
    3936:	99 e4       	ldi	r25, 0x49	; 73
    3938:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    393c:	f8 01       	movw	r30, r16
    393e:	60 83       	st	Z, r22
    3940:	71 83       	std	Z+1, r23	; 0x01
    3942:	82 83       	std	Z+2, r24	; 0x02
    3944:	93 83       	std	Z+3, r25	; 0x03
    3946:	8c a9       	ldd	r24, Y+52	; 0x34
    3948:	9d a9       	ldd	r25, Y+53	; 0x35
    394a:	ae a9       	ldd	r26, Y+54	; 0x36
    394c:	bf a9       	ldd	r27, Y+55	; 0x37
    394e:	18 16       	cp	r1, r24
    3950:	19 06       	cpc	r1, r25
    3952:	1a 06       	cpc	r1, r26
    3954:	1b 06       	cpc	r1, r27
    3956:	6c f5       	brge	.+90     	; 0x39b2 <AccelStepper::setMaxSpeed(float)+0xda>
    3958:	68 8d       	ldd	r22, Y+24	; 0x18
    395a:	79 8d       	ldd	r23, Y+25	; 0x19
    395c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    395e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    3968:	6b 01       	movw	r12, r22
    396a:	7c 01       	movw	r14, r24
    396c:	68 a1       	ldd	r22, Y+32	; 0x20
    396e:	79 a1       	ldd	r23, Y+33	; 0x21
    3970:	8a a1       	ldd	r24, Y+34	; 0x22
    3972:	9b a1       	ldd	r25, Y+35	; 0x23
    3974:	9b 01       	movw	r18, r22
    3976:	ac 01       	movw	r20, r24
    3978:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    397c:	9b 01       	movw	r18, r22
    397e:	ac 01       	movw	r20, r24
    3980:	c7 01       	movw	r24, r14
    3982:	b6 01       	movw	r22, r12
    3984:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    3988:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <__fixsfsi>
    398c:	6c ab       	std	Y+52, r22	; 0x34
    398e:	7d ab       	std	Y+53, r23	; 0x35
    3990:	8e ab       	std	Y+54, r24	; 0x36
    3992:	9f ab       	std	Y+55, r25	; 0x37
    3994:	e8 81       	ld	r30, Y
    3996:	f9 81       	ldd	r31, Y+1	; 0x01
    3998:	00 84       	ldd	r0, Z+8	; 0x08
    399a:	f1 85       	ldd	r31, Z+9	; 0x09
    399c:	e0 2d       	mov	r30, r0
    399e:	ce 01       	movw	r24, r28
    39a0:	df 91       	pop	r29
    39a2:	cf 91       	pop	r28
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	df 90       	pop	r13
    39ae:	cf 90       	pop	r12
    39b0:	09 94       	ijmp
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	ff 90       	pop	r15
    39bc:	ef 90       	pop	r14
    39be:	df 90       	pop	r13
    39c0:	cf 90       	pop	r12
    39c2:	08 95       	ret

000039c4 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
_ZN12AccelStepperC2Ehhhhhb():
    39c4:	cf 92       	push	r12
    39c6:	ef 92       	push	r14
    39c8:	0f 93       	push	r16
    39ca:	cf 93       	push	r28
    39cc:	df 93       	push	r29
    39ce:	ec 01       	movw	r28, r24
    39d0:	84 e3       	ldi	r24, 0x34	; 52
    39d2:	91 e0       	ldi	r25, 0x01	; 1
    39d4:	99 83       	std	Y+1, r25	; 0x01
    39d6:	88 83       	st	Y, r24
    39d8:	6f 83       	std	Y+7, r22	; 0x07
    39da:	18 8a       	std	Y+16, r1	; 0x10
    39dc:	19 8a       	std	Y+17, r1	; 0x11
    39de:	1a 8a       	std	Y+18, r1	; 0x12
    39e0:	1b 8a       	std	Y+19, r1	; 0x13
    39e2:	1c 8a       	std	Y+20, r1	; 0x14
    39e4:	1d 8a       	std	Y+21, r1	; 0x15
    39e6:	1e 8a       	std	Y+22, r1	; 0x16
    39e8:	1f 8a       	std	Y+23, r1	; 0x17
    39ea:	18 8e       	std	Y+24, r1	; 0x18
    39ec:	19 8e       	std	Y+25, r1	; 0x19
    39ee:	1a 8e       	std	Y+26, r1	; 0x1a
    39f0:	1b 8e       	std	Y+27, r1	; 0x1b
    39f2:	1c 8e       	std	Y+28, r1	; 0x1c
    39f4:	1d 8e       	std	Y+29, r1	; 0x1d
    39f6:	1e 8e       	std	Y+30, r1	; 0x1e
    39f8:	1f 8e       	std	Y+31, r1	; 0x1f
    39fa:	18 a2       	std	Y+32, r1	; 0x20
    39fc:	19 a2       	std	Y+33, r1	; 0x21
    39fe:	1a a2       	std	Y+34, r1	; 0x22
    3a00:	1b a2       	std	Y+35, r1	; 0x23
    3a02:	80 e0       	ldi	r24, 0x00	; 0
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	a0 e8       	ldi	r26, 0x80	; 128
    3a08:	bf e3       	ldi	r27, 0x3F	; 63
    3a0a:	8c a3       	std	Y+36, r24	; 0x24
    3a0c:	9d a3       	std	Y+37, r25	; 0x25
    3a0e:	ae a3       	std	Y+38, r26	; 0x26
    3a10:	bf a3       	std	Y+39, r27	; 0x27
    3a12:	1b 82       	std	Y+3, r1	; 0x03
    3a14:	1c 82       	std	Y+4, r1	; 0x04
    3a16:	1d 82       	std	Y+5, r1	; 0x05
    3a18:	1e 82       	std	Y+6, r1	; 0x06
    3a1a:	61 e0       	ldi	r22, 0x01	; 1
    3a1c:	70 e0       	ldi	r23, 0x00	; 0
    3a1e:	7d a7       	std	Y+45, r23	; 0x2d
    3a20:	6c a7       	std	Y+44, r22	; 0x2c
    3a22:	3f ef       	ldi	r19, 0xFF	; 255
    3a24:	3f a7       	std	Y+47, r19	; 0x2f
    3a26:	18 a6       	std	Y+40, r1	; 0x28
    3a28:	19 a6       	std	Y+41, r1	; 0x29
    3a2a:	1a a6       	std	Y+42, r1	; 0x2a
    3a2c:	1b a6       	std	Y+43, r1	; 0x2b
    3a2e:	48 87       	std	Y+8, r20	; 0x08
    3a30:	29 87       	std	Y+9, r18	; 0x09
    3a32:	0a 87       	std	Y+10, r16	; 0x0a
    3a34:	eb 86       	std	Y+11, r14	; 0x0b
    3a36:	1e a6       	std	Y+46, r1	; 0x2e
    3a38:	1c aa       	std	Y+52, r1	; 0x34
    3a3a:	1d aa       	std	Y+53, r1	; 0x35
    3a3c:	1e aa       	std	Y+54, r1	; 0x36
    3a3e:	1f aa       	std	Y+55, r1	; 0x37
    3a40:	18 ae       	std	Y+56, r1	; 0x38
    3a42:	19 ae       	std	Y+57, r1	; 0x39
    3a44:	1a ae       	std	Y+58, r1	; 0x3a
    3a46:	1b ae       	std	Y+59, r1	; 0x3b
    3a48:	1c ae       	std	Y+60, r1	; 0x3c
    3a4a:	1d ae       	std	Y+61, r1	; 0x3d
    3a4c:	1e ae       	std	Y+62, r1	; 0x3e
    3a4e:	1f ae       	std	Y+63, r1	; 0x3f
    3a50:	fe 01       	movw	r30, r28
    3a52:	e0 5c       	subi	r30, 0xC0	; 192
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 83       	st	Z, r24
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	a2 83       	std	Z+2, r26	; 0x02
    3a5c:	b3 83       	std	Z+3, r27	; 0x03
    3a5e:	1a 82       	std	Y+2, r1	; 0x02
    3a60:	1c 86       	std	Y+12, r1	; 0x0c
    3a62:	1d 86       	std	Y+13, r1	; 0x0d
    3a64:	1e 86       	std	Y+14, r1	; 0x0e
    3a66:	1f 86       	std	Y+15, r1	; 0x0f
    3a68:	cc 20       	and	r12, r12
    3a6a:	19 f0       	breq	.+6      	; 0x3a72 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xae>
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	0e 94 12 1b 	call	0x3624	; 0x3624 <AccelStepper::enableOutputs()>
_ZN12AccelStepper15setAccelerationEf():
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	60 e8       	ldi	r22, 0x80	; 128
    3a78:	7f e3       	ldi	r23, 0x3F	; 63
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	0e 94 46 1b 	call	0x368c	; 0x368c <AccelStepper::setAcceleration(float) [clone .part.10]>
_ZN12AccelStepperC2Ehhhhhb():
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	50 e0       	ldi	r21, 0x00	; 0
    3a84:	60 e8       	ldi	r22, 0x80	; 128
    3a86:	7f e3       	ldi	r23, 0x3F	; 63
    3a88:	ce 01       	movw	r24, r28
    3a8a:	df 91       	pop	r29
    3a8c:	cf 91       	pop	r28
    3a8e:	0f 91       	pop	r16
    3a90:	ef 90       	pop	r14
    3a92:	cf 90       	pop	r12
    3a94:	0c 94 6c 1c 	jmp	0x38d8	; 0x38d8 <AccelStepper::setMaxSpeed(float)>

00003a98 <AccelStepper::setAcceleration(float)>:
_ZN12AccelStepper15setAccelerationEf():
    3a98:	cf 92       	push	r12
    3a9a:	df 92       	push	r13
    3a9c:	ef 92       	push	r14
    3a9e:	ff 92       	push	r15
    3aa0:	cf 93       	push	r28
    3aa2:	df 93       	push	r29
    3aa4:	ec 01       	movw	r28, r24
    3aa6:	6a 01       	movw	r12, r20
    3aa8:	7b 01       	movw	r14, r22
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	a9 01       	movw	r20, r18
    3ab0:	cb 01       	movw	r24, r22
    3ab2:	b6 01       	movw	r22, r12
    3ab4:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    3ab8:	88 23       	and	r24, r24
    3aba:	59 f0       	breq	.+22     	; 0x3ad2 <AccelStepper::setAcceleration(float)+0x3a>
    3abc:	b7 01       	movw	r22, r14
    3abe:	a6 01       	movw	r20, r12
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	df 90       	pop	r13
    3acc:	cf 90       	pop	r12
    3ace:	0c 94 46 1b 	jmp	0x368c	; 0x368c <AccelStepper::setAcceleration(float) [clone .part.10]>
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	ff 90       	pop	r15
    3ad8:	ef 90       	pop	r14
    3ada:	df 90       	pop	r13
    3adc:	cf 90       	pop	r12
    3ade:	08 95       	ret

00003ae0 <AccelStepper::setSpeed(float)>:
_ZN12AccelStepper8setSpeedEf():
    3ae0:	4f 92       	push	r4
    3ae2:	5f 92       	push	r5
    3ae4:	6f 92       	push	r6
    3ae6:	7f 92       	push	r7
    3ae8:	af 92       	push	r10
    3aea:	bf 92       	push	r11
    3aec:	cf 92       	push	r12
    3aee:	df 92       	push	r13
    3af0:	ef 92       	push	r14
    3af2:	ff 92       	push	r15
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	cf 93       	push	r28
    3afa:	df 93       	push	r29
    3afc:	ec 01       	movw	r28, r24
    3afe:	5a 01       	movw	r10, r20
    3b00:	8b 01       	movw	r16, r22
    3b02:	9a 01       	movw	r18, r20
    3b04:	ab 01       	movw	r20, r22
    3b06:	68 8d       	ldd	r22, Y+24	; 0x18
    3b08:	79 8d       	ldd	r23, Y+25	; 0x19
    3b0a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b0e:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    3b12:	88 23       	and	r24, r24
    3b14:	79 f1       	breq	.+94     	; 0x3b74 <AccelStepper::setSpeed(float)+0x94>
    3b16:	4c 8c       	ldd	r4, Y+28	; 0x1c
    3b18:	5d 8c       	ldd	r5, Y+29	; 0x1d
    3b1a:	6e 8c       	ldd	r6, Y+30	; 0x1e
    3b1c:	7f 8c       	ldd	r7, Y+31	; 0x1f
    3b1e:	73 01       	movw	r14, r6
    3b20:	62 01       	movw	r12, r4
    3b22:	f7 fa       	bst	r15, 7
    3b24:	f0 94       	com	r15
    3b26:	f7 f8       	bld	r15, 7
    3b28:	f0 94       	com	r15
    3b2a:	95 01       	movw	r18, r10
    3b2c:	a8 01       	movw	r20, r16
    3b2e:	c7 01       	movw	r24, r14
    3b30:	b6 01       	movw	r22, r12
    3b32:	0e 94 9a 38 	call	0x7134	; 0x7134 <__gesf2>
    3b36:	18 16       	cp	r1, r24
    3b38:	64 f0       	brlt	.+24     	; 0x3b52 <AccelStepper::setSpeed(float)+0x72>
    3b3a:	95 01       	movw	r18, r10
    3b3c:	a8 01       	movw	r20, r16
    3b3e:	c3 01       	movw	r24, r6
    3b40:	b2 01       	movw	r22, r4
    3b42:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    3b46:	65 01       	movw	r12, r10
    3b48:	78 01       	movw	r14, r16
    3b4a:	87 ff       	sbrs	r24, 7
    3b4c:	02 c0       	rjmp	.+4      	; 0x3b52 <AccelStepper::setSpeed(float)+0x72>
    3b4e:	73 01       	movw	r14, r6
    3b50:	62 01       	movw	r12, r4
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	a9 01       	movw	r20, r18
    3b58:	c7 01       	movw	r24, r14
    3b5a:	b6 01       	movw	r22, r12
    3b5c:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    3b60:	81 11       	cpse	r24, r1
    3b62:	17 c0       	rjmp	.+46     	; 0x3b92 <AccelStepper::setSpeed(float)+0xb2>
    3b64:	1b 82       	std	Y+3, r1	; 0x03
    3b66:	1c 82       	std	Y+4, r1	; 0x04
    3b68:	1d 82       	std	Y+5, r1	; 0x05
    3b6a:	1e 82       	std	Y+6, r1	; 0x06
    3b6c:	c8 8e       	std	Y+24, r12	; 0x18
    3b6e:	d9 8e       	std	Y+25, r13	; 0x19
    3b70:	ea 8e       	std	Y+26, r14	; 0x1a
    3b72:	fb 8e       	std	Y+27, r15	; 0x1b
    3b74:	df 91       	pop	r29
    3b76:	cf 91       	pop	r28
    3b78:	1f 91       	pop	r17
    3b7a:	0f 91       	pop	r16
    3b7c:	ff 90       	pop	r15
    3b7e:	ef 90       	pop	r14
    3b80:	df 90       	pop	r13
    3b82:	cf 90       	pop	r12
    3b84:	bf 90       	pop	r11
    3b86:	af 90       	pop	r10
    3b88:	7f 90       	pop	r7
    3b8a:	6f 90       	pop	r6
    3b8c:	5f 90       	pop	r5
    3b8e:	4f 90       	pop	r4
    3b90:	08 95       	ret
    3b92:	a7 01       	movw	r20, r14
    3b94:	96 01       	movw	r18, r12
    3b96:	60 e0       	ldi	r22, 0x00	; 0
    3b98:	74 e2       	ldi	r23, 0x24	; 36
    3b9a:	84 e7       	ldi	r24, 0x74	; 116
    3b9c:	99 e4       	ldi	r25, 0x49	; 73
    3b9e:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
    3ba2:	9f 77       	andi	r25, 0x7F	; 127
    3ba4:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <__fixunssfsi>
    3ba8:	6b 83       	std	Y+3, r22	; 0x03
    3baa:	7c 83       	std	Y+4, r23	; 0x04
    3bac:	8d 83       	std	Y+5, r24	; 0x05
    3bae:	9e 83       	std	Y+6, r25	; 0x06
    3bb0:	11 e0       	ldi	r17, 0x01	; 1
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	a9 01       	movw	r20, r18
    3bb8:	c7 01       	movw	r24, r14
    3bba:	b6 01       	movw	r22, r12
    3bbc:	0e 94 9a 38 	call	0x7134	; 0x7134 <__gesf2>
    3bc0:	18 16       	cp	r1, r24
    3bc2:	0c f0       	brlt	.+2      	; 0x3bc6 <AccelStepper::setSpeed(float)+0xe6>
    3bc4:	10 e0       	ldi	r17, 0x00	; 0
    3bc6:	1a 83       	std	Y+2, r17	; 0x02
    3bc8:	d1 cf       	rjmp	.-94     	; 0x3b6c <AccelStepper::setSpeed(float)+0x8c>

00003bca <AccelStepper::runSpeedToPosition()>:
_ZN12AccelStepper18runSpeedToPositionEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:647

boolean AccelStepper::runSpeedToPosition()
{
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:648
    if (_targetPos == _currentPos)
    3bce:	fc 01       	movw	r30, r24
    3bd0:	04 89       	ldd	r16, Z+20	; 0x14
    3bd2:	15 89       	ldd	r17, Z+21	; 0x15
    3bd4:	26 89       	ldd	r18, Z+22	; 0x16
    3bd6:	37 89       	ldd	r19, Z+23	; 0x17
    3bd8:	40 89       	ldd	r20, Z+16	; 0x10
    3bda:	51 89       	ldd	r21, Z+17	; 0x11
    3bdc:	62 89       	ldd	r22, Z+18	; 0x12
    3bde:	73 89       	ldd	r23, Z+19	; 0x13
    3be0:	04 17       	cp	r16, r20
    3be2:	15 07       	cpc	r17, r21
    3be4:	26 07       	cpc	r18, r22
    3be6:	37 07       	cpc	r19, r23
    3be8:	69 f0       	breq	.+26     	; 0x3c04 <AccelStepper::runSpeedToPosition()+0x3a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:650
	return false;
    if (_targetPos >_currentPos)
    3bea:	40 17       	cp	r20, r16
    3bec:	51 07       	cpc	r21, r17
    3bee:	62 07       	cpc	r22, r18
    3bf0:	73 07       	cpc	r23, r19
    3bf2:	34 f4       	brge	.+12     	; 0x3c00 <AccelStepper::runSpeedToPosition()+0x36>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:651
	_direction = DIRECTION_CW;
    3bf4:	21 e0       	ldi	r18, 0x01	; 1
    3bf6:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
}
    3bf8:	1f 91       	pop	r17
    3bfa:	0f 91       	pop	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:654
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
    3bfc:	0c 94 ec 1b 	jmp	0x37d8	; 0x37d8 <AccelStepper::runSpeed()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:653
    if (_targetPos == _currentPos)
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    3c00:	12 82       	std	Z+2, r1	; 0x02
    3c02:	fa cf       	rjmp	.-12     	; 0x3bf8 <AccelStepper::runSpeedToPosition()+0x2e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    return runSpeed();
}
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	08 95       	ret

00003c0c <u8x8_gpio_and_delay_arduino>:
u8x8_gpio_and_delay_arduino():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1909
  u8x8_SetPin(u8x8, U8X8_PIN_D7, d7);
  u8x8_SetPin(u8x8, U8X8_PIN_E, e1);
  u8x8_SetPin(u8x8, U8X8_PIN_CS, e2);
  u8x8_SetPin(u8x8, U8X8_PIN_DC, dc);
  u8x8_SetPin(u8x8, U8X8_PIN_RESET, reset);
}
    3c0c:	0f 93       	push	r16
    3c0e:	1f 93       	push	r17
    3c10:	cf 93       	push	r28
    3c12:	df 93       	push	r29
    3c14:	8c 01       	movw	r16, r24
    3c16:	c6 2f       	mov	r28, r22
    3c18:	64 2f       	mov	r22, r20
    3c1a:	cc 32       	cpi	r28, 0x2C	; 44
    3c1c:	a8 f4       	brcc	.+42     	; 0x3c48 <u8x8_gpio_and_delay_arduino+0x3c>
    3c1e:	ca 32       	cpi	r28, 0x2A	; 42
    3c20:	d0 f5       	brcc	.+116    	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>
    3c22:	c8 32       	cpi	r28, 0x28	; 40
    3c24:	39 f1       	breq	.+78     	; 0x3c74 <u8x8_gpio_and_delay_arduino+0x68>
    3c26:	c9 32       	cpi	r28, 0x29	; 41
    3c28:	e1 f1       	breq	.+120    	; 0x3ca2 <u8x8_gpio_and_delay_arduino+0x96>
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	c0 34       	cpi	r28, 0x40	; 64
    3c2e:	a0 f1       	brcs	.+104    	; 0x3c98 <u8x8_gpio_and_delay_arduino+0x8c>
    3c30:	cf 73       	andi	r28, 0x3F	; 63
    3c32:	f8 01       	movw	r30, r16
    3c34:	ec 0f       	add	r30, r28
    3c36:	f1 1d       	adc	r31, r1
    3c38:	d6 8d       	ldd	r29, Z+30	; 0x1e
    3c3a:	df 3f       	cpi	r29, 0xFF	; 255
    3c3c:	61 f1       	breq	.+88     	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>
    3c3e:	c0 31       	cpi	r28, 0x10	; 16
    3c40:	08 f0       	brcs	.+2      	; 0x3c44 <u8x8_gpio_and_delay_arduino+0x38>
    3c42:	42 c0       	rjmp	.+132    	; 0x3cc8 <u8x8_gpio_and_delay_arduino+0xbc>
    3c44:	8d 2f       	mov	r24, r29
    3c46:	13 c0       	rjmp	.+38     	; 0x3c6e <u8x8_gpio_and_delay_arduino+0x62>
    3c48:	cd 32       	cpi	r28, 0x2D	; 45
    3c4a:	89 f1       	breq	.+98     	; 0x3cae <u8x8_gpio_and_delay_arduino+0xa2>
    3c4c:	70 f3       	brcs	.-36     	; 0x3c2a <u8x8_gpio_and_delay_arduino+0x1e>
    3c4e:	84 eb       	ldi	r24, 0xB4	; 180
    3c50:	8c 0f       	add	r24, r28
    3c52:	82 30       	cpi	r24, 0x02	; 2
    3c54:	50 f7       	brcc	.-44     	; 0x3c2a <u8x8_gpio_and_delay_arduino+0x1e>
    3c56:	cf 73       	andi	r28, 0x3F	; 63
    3c58:	c0 0f       	add	r28, r16
    3c5a:	d1 2f       	mov	r29, r17
    3c5c:	d1 1d       	adc	r29, r1
    3c5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c60:	41 11       	cpse	r20, r1
    3c62:	2e c0       	rjmp	.+92     	; 0x3cc0 <u8x8_gpio_and_delay_arduino+0xb4>
    3c64:	61 e0       	ldi	r22, 0x01	; 1
    3c66:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c6e:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
    3c72:	11 c0       	rjmp	.+34     	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>
    3c74:	02 5e       	subi	r16, 0xE2	; 226
    3c76:	1f 4f       	sbci	r17, 0xFF	; 255
    3c78:	d0 e0       	ldi	r29, 0x00	; 0
    3c7a:	f8 01       	movw	r30, r16
    3c7c:	81 91       	ld	r24, Z+
    3c7e:	8f 01       	movw	r16, r30
    3c80:	8f 3f       	cpi	r24, 0xFF	; 255
    3c82:	31 f0       	breq	.+12     	; 0x3c90 <u8x8_gpio_and_delay_arduino+0x84>
    3c84:	61 e0       	ldi	r22, 0x01	; 1
    3c86:	d0 31       	cpi	r29, 0x10	; 16
    3c88:	08 f0       	brcs	.+2      	; 0x3c8c <u8x8_gpio_and_delay_arduino+0x80>
    3c8a:	62 e0       	ldi	r22, 0x02	; 2
    3c8c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3c90:	df 5f       	subi	r29, 0xFF	; 255
    3c92:	d6 31       	cpi	r29, 0x16	; 22
    3c94:	91 f7       	brne	.-28     	; 0x3c7a <u8x8_gpio_and_delay_arduino+0x6e>
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	08 95       	ret
    3ca2:	70 e0       	ldi	r23, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	80 e0       	ldi	r24, 0x00	; 0
    3ca8:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <delay>
    3cac:	f4 cf       	rjmp	.-24     	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>
    3cae:	85 e0       	ldi	r24, 0x05	; 5
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	43 30       	cpi	r20, 0x03	; 3
    3cb4:	10 f0       	brcs	.+4      	; 0x3cba <u8x8_gpio_and_delay_arduino+0xae>
    3cb6:	82 e0       	ldi	r24, 0x02	; 2
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	0e 94 89 35 	call	0x6b12	; 0x6b12 <delayMicroseconds>
    3cbe:	eb cf       	rjmp	.-42     	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>
    3cc0:	62 e0       	ldi	r22, 0x02	; 2
    3cc2:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <pinMode>
    3cc6:	e7 cf       	rjmp	.-50     	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>
    3cc8:	c0 31       	cpi	r28, 0x10	; 16
    3cca:	11 f4       	brne	.+4      	; 0x3cd0 <u8x8_gpio_and_delay_arduino+0xc4>
    3ccc:	0e 94 c0 34 	call	0x6980	; 0x6980 <yield>
    3cd0:	8d 2f       	mov	r24, r29
    3cd2:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <digitalRead>
    3cd6:	21 e0       	ldi	r18, 0x01	; 1
    3cd8:	89 2b       	or	r24, r25
    3cda:	09 f4       	brne	.+2      	; 0x3cde <u8x8_gpio_and_delay_arduino+0xd2>
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	f8 01       	movw	r30, r16
    3ce0:	21 8f       	std	Z+25, r18	; 0x19
    3ce2:	d9 cf       	rjmp	.-78     	; 0x3c96 <u8x8_gpio_and_delay_arduino+0x8a>

00003ce4 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>:
_Z18u8x8_SetPin_HW_I2CP11u8x8_structhhh():
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	61 a7       	std	Z+41, r22	; 0x29
    3ce8:	42 a7       	std	Z+42, r20	; 0x2a
    3cea:	23 a7       	std	Z+43, r18	; 0x2b
    3cec:	08 95       	ret

00003cee <u8x8_byte_arduino_hw_i2c>:
u8x8_byte_arduino_hw_i2c():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1333

/*=============================================*/
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3cf4:	68 31       	cpi	r22, 0x18	; 24
    3cf6:	89 f1       	breq	.+98     	; 0x3d5a <u8x8_byte_arduino_hw_i2c+0x6c>
    3cf8:	30 f4       	brcc	.+12     	; 0x3d06 <u8x8_byte_arduino_hw_i2c+0x18>
    3cfa:	64 31       	cpi	r22, 0x14	; 20
    3cfc:	99 f0       	breq	.+38     	; 0x3d24 <u8x8_byte_arduino_hw_i2c+0x36>
    3cfe:	67 31       	cpi	r22, 0x17	; 23
    3d00:	51 f0       	breq	.+20     	; 0x3d16 <u8x8_byte_arduino_hw_i2c+0x28>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1375
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
      break;
    default:
      return 0;
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	05 c0       	rjmp	.+10     	; 0x3d10 <u8x8_byte_arduino_hw_i2c+0x22>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3d06:	69 31       	cpi	r22, 0x19	; 25
    3d08:	c9 f1       	breq	.+114    	; 0x3d7c <u8x8_byte_arduino_hw_i2c+0x8e>
    3d0a:	60 32       	cpi	r22, 0x20	; 32
    3d0c:	d1 f7       	brne	.-12     	; 0x3d02 <u8x8_byte_arduino_hw_i2c+0x14>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1378
      break;
    default:
      return 0;
  }
#endif
  return 1;
    3d0e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1379
}
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1338
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
    3d16:	50 e0       	ldi	r21, 0x00	; 0
    3d18:	b9 01       	movw	r22, r18
    3d1a:	8a e1       	ldi	r24, 0x1A	; 26
    3d1c:	94 e0       	ldi	r25, 0x04	; 4
    3d1e:	0e 94 16 2a 	call	0x542c	; 0x542c <TwoWire::write(unsigned char const*, unsigned int)>
    3d22:	f5 cf       	rjmp	.-22     	; 0x3d0e <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1341
      break;
    case U8X8_MSG_BYTE_INIT:
      if ( u8x8->bus_clock == 0 ) 	/* issue 769 */
    3d24:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d26:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d28:	ae 85       	ldd	r26, Y+14	; 0x0e
    3d2a:	bf 85       	ldd	r27, Y+15	; 0x0f
    3d2c:	89 2b       	or	r24, r25
    3d2e:	8a 2b       	or	r24, r26
    3d30:	8b 2b       	or	r24, r27
    3d32:	71 f4       	brne	.+28     	; 0x3d50 <u8x8_byte_arduino_hw_i2c+0x62>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1342
	u8x8->bus_clock = u8x8->display_info->i2c_bus_clock_100kHz * 100000UL;
    3d34:	e8 81       	ld	r30, Y
    3d36:	f9 81       	ldd	r31, Y+1	; 0x01
    3d38:	a5 85       	ldd	r26, Z+13	; 0x0d
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	20 ea       	ldi	r18, 0xA0	; 160
    3d3e:	36 e8       	ldi	r19, 0x86	; 134
    3d40:	41 e0       	ldi	r20, 0x01	; 1
    3d42:	50 e0       	ldi	r21, 0x00	; 0
    3d44:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <__muluhisi3>
    3d48:	6c 87       	std	Y+12, r22	; 0x0c
    3d4a:	7d 87       	std	Y+13, r23	; 0x0d
    3d4c:	8e 87       	std	Y+14, r24	; 0x0e
    3d4e:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1355
      else
      {
	Wire.begin();
      }
#else
      Wire.begin();
    3d50:	8a e1       	ldi	r24, 0x1A	; 26
    3d52:	94 e0       	ldi	r25, 0x04	; 4
    3d54:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <TwoWire::begin()>
    3d58:	da cf       	rjmp	.-76     	; 0x3d0e <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1366
#if ARDUINO >= 10600
      /* not sure when the setClock function was introduced, but it is there since 1.6.0 */
      /* if there is any error with Wire.setClock() just remove this function call by */
      /* defining U8X8_DO_NOT_SET_WIRE_CLOCK */
#ifndef U8X8_DO_NOT_SET_WIRE_CLOCK
      Wire.setClock(u8x8->bus_clock);
    3d5a:	4c 85       	ldd	r20, Y+12	; 0x0c
    3d5c:	5d 85       	ldd	r21, Y+13	; 0x0d
    3d5e:	6e 85       	ldd	r22, Y+14	; 0x0e
    3d60:	7f 85       	ldd	r23, Y+15	; 0x0f
    3d62:	8a e1       	ldi	r24, 0x1A	; 26
    3d64:	94 e0       	ldi	r25, 0x04	; 4
    3d66:	0e 94 01 2b 	call	0x5602	; 0x5602 <TwoWire::setClock(unsigned long)>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1369
#endif 
#endif
      Wire.beginTransmission(u8x8_GetI2CAddress(u8x8)>>1);
    3d6a:	6e 89       	ldd	r22, Y+22	; 0x16
    3d6c:	70 e0       	ldi	r23, 0x00	; 0
    3d6e:	75 95       	asr	r23
    3d70:	67 95       	ror	r22
    3d72:	8a e1       	ldi	r24, 0x1A	; 26
    3d74:	94 e0       	ldi	r25, 0x04	; 4
    3d76:	0e 94 08 2b 	call	0x5610	; 0x5610 <TwoWire::beginTransmission(int)>
    3d7a:	c9 cf       	rjmp	.-110    	; 0x3d0e <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1372
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
    3d7c:	8a e1       	ldi	r24, 0x1A	; 26
    3d7e:	94 e0       	ldi	r25, 0x04	; 4
    3d80:	0e 94 24 2b 	call	0x5648	; 0x5648 <TwoWire::endTransmission()>
    3d84:	c4 cf       	rjmp	.-120    	; 0x3d0e <u8x8_byte_arduino_hw_i2c+0x20>

00003d86 <u8g2_DrawBox>:
u8g2_DrawBox():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:43
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    3d86:	8f 92       	push	r8
    3d88:	9f 92       	push	r9
    3d8a:	af 92       	push	r10
    3d8c:	bf 92       	push	r11
    3d8e:	cf 92       	push	r12
    3d90:	df 92       	push	r13
    3d92:	ef 92       	push	r14
    3d94:	ff 92       	push	r15
    3d96:	0f 93       	push	r16
    3d98:	1f 93       	push	r17
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	5c 01       	movw	r10, r24
    3da0:	6b 01       	movw	r12, r22
    3da2:	ea 01       	movw	r28, r20
    3da4:	49 01       	movw	r8, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:45
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    3da6:	7a 01       	movw	r14, r20
    3da8:	e0 0e       	add	r14, r16
    3daa:	f1 1e       	adc	r15, r17
    3dac:	9b 01       	movw	r18, r22
    3dae:	28 0d       	add	r18, r8
    3db0:	39 1d       	adc	r19, r9
    3db2:	87 01       	movw	r16, r14
    3db4:	0e 94 9d 24 	call	0x493a	; 0x493a <u8g2_IsIntersection>
    3db8:	81 11       	cpse	r24, r1
    3dba:	15 c0       	rjmp	.+42     	; 0x3de6 <u8g2_DrawBox+0x60>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:54
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    3dbc:	df 91       	pop	r29
    3dbe:	cf 91       	pop	r28
    3dc0:	1f 91       	pop	r17
    3dc2:	0f 91       	pop	r16
    3dc4:	ff 90       	pop	r15
    3dc6:	ef 90       	pop	r14
    3dc8:	df 90       	pop	r13
    3dca:	cf 90       	pop	r12
    3dcc:	bf 90       	pop	r11
    3dce:	af 90       	pop	r10
    3dd0:	9f 90       	pop	r9
    3dd2:	8f 90       	pop	r8
    3dd4:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:50
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    3dd6:	00 e0       	ldi	r16, 0x00	; 0
    3dd8:	94 01       	movw	r18, r8
    3dda:	ae 01       	movw	r20, r28
    3ddc:	b6 01       	movw	r22, r12
    3dde:	c5 01       	movw	r24, r10
    3de0:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:51
    y++;    
    3de4:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:48
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    3de6:	ec 16       	cp	r14, r28
    3de8:	fd 06       	cpc	r15, r29
    3dea:	a9 f7       	brne	.-22     	; 0x3dd6 <u8g2_DrawBox+0x50>
    3dec:	e7 cf       	rjmp	.-50     	; 0x3dbc <u8g2_DrawBox+0x36>

00003dee <u8g2_DrawFrame>:
u8g2_DrawFrame():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:62
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    3dee:	6f 92       	push	r6
    3df0:	7f 92       	push	r7
    3df2:	8f 92       	push	r8
    3df4:	9f 92       	push	r9
    3df6:	af 92       	push	r10
    3df8:	bf 92       	push	r11
    3dfa:	cf 92       	push	r12
    3dfc:	df 92       	push	r13
    3dfe:	ef 92       	push	r14
    3e00:	ff 92       	push	r15
    3e02:	0f 93       	push	r16
    3e04:	1f 93       	push	r17
    3e06:	cf 93       	push	r28
    3e08:	df 93       	push	r29
    3e0a:	6c 01       	movw	r12, r24
    3e0c:	5b 01       	movw	r10, r22
    3e0e:	ea 01       	movw	r28, r20
    3e10:	49 01       	movw	r8, r18
    3e12:	78 01       	movw	r14, r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:66
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    3e14:	3b 01       	movw	r6, r22
    3e16:	62 0e       	add	r6, r18
    3e18:	73 1e       	adc	r7, r19
    3e1a:	8a 01       	movw	r16, r20
    3e1c:	0e 0d       	add	r16, r14
    3e1e:	1f 1d       	adc	r17, r15
    3e20:	93 01       	movw	r18, r6
    3e22:	0e 94 9d 24 	call	0x493a	; 0x493a <u8g2_IsIntersection>
    3e26:	88 23       	and	r24, r24
    3e28:	51 f1       	breq	.+84     	; 0x3e7e <u8g2_DrawFrame+0x90>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:70
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    3e2a:	00 e0       	ldi	r16, 0x00	; 0
    3e2c:	94 01       	movw	r18, r8
    3e2e:	ae 01       	movw	r20, r28
    3e30:	b5 01       	movw	r22, r10
    3e32:	c6 01       	movw	r24, r12
    3e34:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:71
  if (h >= 2) {
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	e8 16       	cp	r14, r24
    3e3c:	f1 04       	cpc	r15, r1
    3e3e:	f8 f0       	brcs	.+62     	; 0x3e7e <u8g2_DrawFrame+0x90>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:72
    h-=2;
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	e8 1a       	sub	r14, r24
    3e44:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:73
    y++;
    3e46:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:74
    if (h > 0) {
    3e48:	e1 14       	cp	r14, r1
    3e4a:	f1 04       	cpc	r15, r1
    3e4c:	89 f0       	breq	.+34     	; 0x3e70 <u8g2_DrawFrame+0x82>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:75
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    3e4e:	01 e0       	ldi	r16, 0x01	; 1
    3e50:	97 01       	movw	r18, r14
    3e52:	ae 01       	movw	r20, r28
    3e54:	b5 01       	movw	r22, r10
    3e56:	c6 01       	movw	r24, r12
    3e58:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:77
      x+=w;
      x--;
    3e5c:	b3 01       	movw	r22, r6
    3e5e:	61 50       	subi	r22, 0x01	; 1
    3e60:	71 09       	sbc	r23, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:78
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    3e62:	97 01       	movw	r18, r14
    3e64:	ae 01       	movw	r20, r28
    3e66:	c6 01       	movw	r24, r12
    3e68:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:79
      y+=h;
    3e6c:	ce 0d       	add	r28, r14
    3e6e:	df 1d       	adc	r29, r15
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:81
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    3e70:	00 e0       	ldi	r16, 0x00	; 0
    3e72:	94 01       	movw	r18, r8
    3e74:	ae 01       	movw	r20, r28
    3e76:	b5 01       	movw	r22, r10
    3e78:	c6 01       	movw	r24, r12
    3e7a:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:83
  }
}
    3e7e:	df 91       	pop	r29
    3e80:	cf 91       	pop	r28
    3e82:	1f 91       	pop	r17
    3e84:	0f 91       	pop	r16
    3e86:	ff 90       	pop	r15
    3e88:	ef 90       	pop	r14
    3e8a:	df 90       	pop	r13
    3e8c:	cf 90       	pop	r12
    3e8e:	bf 90       	pop	r11
    3e90:	af 90       	pop	r10
    3e92:	9f 90       	pop	r9
    3e94:	8f 90       	pop	r8
    3e96:	7f 90       	pop	r7
    3e98:	6f 90       	pop	r6
    3e9a:	08 95       	ret

00003e9c <u8g2_send_buffer>:
u8g2_send_buffer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:96

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    3e9c:	af 92       	push	r10
    3e9e:	bf 92       	push	r11
    3ea0:	cf 92       	push	r12
    3ea2:	df 92       	push	r13
    3ea4:	ef 92       	push	r14
    3ea6:	ff 92       	push	r15
    3ea8:	0f 93       	push	r16
    3eaa:	1f 93       	push	r17
    3eac:	cf 93       	push	r28
    3eae:	df 93       	push	r29
    3eb0:	ec 01       	movw	r28, r24
    3eb2:	aa ac       	ldd	r10, Y+58	; 0x3a
    3eb4:	eb ac       	ldd	r14, Y+59	; 0x3b
    3eb6:	e8 81       	ld	r30, Y
    3eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    3eba:	b1 88       	ldd	r11, Z+17	; 0x11
    3ebc:	fe 2c       	mov	r15, r14
    3ebe:	d1 2c       	mov	r13, r1
    3ec0:	c1 2c       	mov	r12, r1
u8g2_send_tile_row():
    3ec2:	e8 81       	ld	r30, Y
    3ec4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ec6:	20 89       	ldd	r18, Z+16	; 0x10
    3ec8:	08 ad       	ldd	r16, Y+56	; 0x38
    3eca:	19 ad       	ldd	r17, Y+57	; 0x39
    3ecc:	88 e0       	ldi	r24, 0x08	; 8
    3ece:	28 9f       	mul	r18, r24
    3ed0:	a0 01       	movw	r20, r0
    3ed2:	11 24       	eor	r1, r1
    3ed4:	4c 9d       	mul	r20, r12
    3ed6:	c0 01       	movw	r24, r0
    3ed8:	4d 9d       	mul	r20, r13
    3eda:	90 0d       	add	r25, r0
    3edc:	5c 9d       	mul	r21, r12
    3ede:	90 0d       	add	r25, r0
    3ee0:	11 24       	eor	r1, r1
    3ee2:	08 0f       	add	r16, r24
    3ee4:	19 1f       	adc	r17, r25
    3ee6:	4f 2d       	mov	r20, r15
    3ee8:	60 e0       	ldi	r22, 0x00	; 0
    3eea:	ce 01       	movw	r24, r28
    3eec:	0e 94 26 29 	call	0x524c	; 0x524c <u8x8_DrawTile>
u8g2_send_buffer():
    3ef0:	f3 94       	inc	r15
    3ef2:	8f 2d       	mov	r24, r15
    3ef4:	8e 19       	sub	r24, r14
    3ef6:	8a 15       	cp	r24, r10
    3ef8:	28 f4       	brcc	.+10     	; 0x3f04 <u8g2_send_buffer+0x68>
    3efa:	8f ef       	ldi	r24, 0xFF	; 255
    3efc:	c8 1a       	sub	r12, r24
    3efe:	d8 0a       	sbc	r13, r24
    3f00:	fb 14       	cp	r15, r11
    3f02:	f8 f2       	brcs	.-66     	; 0x3ec2 <u8g2_send_buffer+0x26>
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	1f 91       	pop	r17
    3f0a:	0f 91       	pop	r16
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	df 90       	pop	r13
    3f12:	cf 90       	pop	r12
    3f14:	bf 90       	pop	r11
    3f16:	af 90       	pop	r10
    3f18:	08 95       	ret

00003f1a <u8g2_ClearBuffer>:
u8g2_ClearBuffer():
    3f1a:	fc 01       	movw	r30, r24
    3f1c:	a0 81       	ld	r26, Z
    3f1e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f20:	50 96       	adiw	r26, 0x10	; 16
    3f22:	2c 91       	ld	r18, X
    3f24:	82 ad       	ldd	r24, Z+58	; 0x3a
    3f26:	38 e0       	ldi	r19, 0x08	; 8
    3f28:	83 9f       	mul	r24, r19
    3f2a:	c0 01       	movw	r24, r0
    3f2c:	11 24       	eor	r1, r1
    3f2e:	28 9f       	mul	r18, r24
    3f30:	a0 01       	movw	r20, r0
    3f32:	29 9f       	mul	r18, r25
    3f34:	50 0d       	add	r21, r0
    3f36:	11 24       	eor	r1, r1
    3f38:	70 e0       	ldi	r23, 0x00	; 0
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	80 ad       	ldd	r24, Z+56	; 0x38
    3f3e:	91 ad       	ldd	r25, Z+57	; 0x39
    3f40:	0c 94 de 3b 	jmp	0x77bc	; 0x77bc <memset>

00003f44 <u8g2_SetBufferCurrTileRow>:
u8g2_SetBufferCurrTileRow():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:101
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:102
  u8g2->tile_curr_row = row;
    3f4a:	6b af       	std	Y+59, r22	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:103
  u8g2->cb->update_dimension(u8g2);
    3f4c:	ee a9       	ldd	r30, Y+54	; 0x36
    3f4e:	ff a9       	ldd	r31, Y+55	; 0x37
    3f50:	01 90       	ld	r0, Z+
    3f52:	f0 81       	ld	r31, Z
    3f54:	e0 2d       	mov	r30, r0
    3f56:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
  u8g2->cb->update_page_win(u8g2);
    3f58:	ee a9       	ldd	r30, Y+54	; 0x36
    3f5a:	ff a9       	ldd	r31, Y+55	; 0x37
    3f5c:	02 80       	ldd	r0, Z+2	; 0x02
    3f5e:	f3 81       	ldd	r31, Z+3	; 0x03
    3f60:	e0 2d       	mov	r30, r0
    3f62:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:105
}
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
    3f68:	09 94       	ijmp

00003f6a <u8g2_FirstPage>:
u8g2_FirstPage():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:108
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:109
  if ( u8g2->is_auto_page_clear )
    3f70:	fc 01       	movw	r30, r24
    3f72:	e5 57       	subi	r30, 0x75	; 117
    3f74:	ff 4f       	sbci	r31, 0xFF	; 255
    3f76:	80 81       	ld	r24, Z
    3f78:	88 23       	and	r24, r24
    3f7a:	19 f0       	breq	.+6      	; 0x3f82 <u8g2_FirstPage+0x18>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:111
  {
    u8g2_ClearBuffer(u8g2);
    3f7c:	ce 01       	movw	r24, r28
    3f7e:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <u8g2_ClearBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:114
}
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    3f8a:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <u8g2_SetBufferCurrTileRow>

00003f8e <u8g2_NextPage>:
u8g2_NextPage():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:117
}

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    3f8e:	1f 93       	push	r17
    3f90:	cf 93       	push	r28
    3f92:	df 93       	push	r29
    3f94:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:119
  uint8_t row;
  u8g2_send_buffer(u8g2);
    3f96:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <u8g2_send_buffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:120
  row = u8g2->tile_curr_row;
    3f9a:	1b ad       	ldd	r17, Y+59	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:121
  row += u8g2->tile_buf_height;
    3f9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3f9e:	18 0f       	add	r17, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:122
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    3fa0:	e8 81       	ld	r30, Y
    3fa2:	f9 81       	ldd	r31, Y+1	; 0x01
    3fa4:	81 89       	ldd	r24, Z+17	; 0x11
    3fa6:	18 17       	cp	r17, r24
    3fa8:	40 f0       	brcs	.+16     	; 0x3fba <u8g2_NextPage+0x2c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:124
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    3faa:	ce 01       	movw	r24, r28
    3fac:	0e 94 63 29 	call	0x52c6	; 0x52c6 <u8x8_RefreshDisplay>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:125
    return 0;
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:133
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	1f 91       	pop	r17
    3fb8:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:127
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    3fba:	fe 01       	movw	r30, r28
    3fbc:	e5 57       	subi	r30, 0x75	; 117
    3fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc0:	80 81       	ld	r24, Z
    3fc2:	88 23       	and	r24, r24
    3fc4:	19 f0       	breq	.+6      	; 0x3fcc <u8g2_NextPage+0x3e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:129
  {
    u8g2_ClearBuffer(u8g2);
    3fc6:	ce 01       	movw	r24, r28
    3fc8:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <u8g2_ClearBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:131
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    3fcc:	61 2f       	mov	r22, r17
    3fce:	ce 01       	movw	r24, r28
    3fd0:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <u8g2_SetBufferCurrTileRow>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:132
  return 1;
    3fd4:	81 e0       	ldi	r24, 0x01	; 1
    3fd6:	ed cf       	rjmp	.-38     	; 0x3fb2 <u8g2_NextPage+0x24>

00003fd8 <u8g2_ClearDisplay>:
u8g2_ClearDisplay():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:40
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
    3fd8:	cf 93       	push	r28
    3fda:	df 93       	push	r29
    3fdc:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:41
  u8g2_FirstPage(u8g2);
    3fde:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <u8g2_FirstPage>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:43 (discriminator 1)
  do {
  } while ( u8g2_NextPage(u8g2) );
    3fe2:	ce 01       	movw	r24, r28
    3fe4:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <u8g2_NextPage>
    3fe8:	81 11       	cpse	r24, r1
    3fea:	fb cf       	rjmp	.-10     	; 0x3fe2 <u8g2_ClearDisplay+0xa>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:53
}
    3ff0:	df 91       	pop	r29
    3ff2:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    3ff4:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <u8g2_SetBufferCurrTileRow>

00003ff8 <u8g2_m_16_8_2>:
u8g2_m_16_8_2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:57
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
    3ff8:	22 e0       	ldi	r18, 0x02	; 2
    3ffa:	fc 01       	movw	r30, r24
    3ffc:	20 83       	st	Z, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:60
  return buf;
  #endif
}
    3ffe:	89 e1       	ldi	r24, 0x19	; 25
    4000:	93 e0       	ldi	r25, 0x03	; 3
    4002:	08 95       	ret

00004004 <u8g2_Setup_sh1106_i2c_128x64_noname_2>:
u8g2_Setup_sh1106_i2c_128x64_noname_2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:714
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 2 */
void u8g2_Setup_sh1106_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    4004:	cf 92       	push	r12
    4006:	df 92       	push	r13
    4008:	ef 92       	push	r14
    400a:	ff 92       	push	r15
    400c:	0f 93       	push	r16
    400e:	1f 93       	push	r17
    4010:	cf 93       	push	r28
    4012:	df 93       	push	r29
    4014:	1f 92       	push	r1
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	7c 01       	movw	r14, r24
    401c:	6b 01       	movw	r12, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:717
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    401e:	89 01       	movw	r16, r18
    4020:	9a 01       	movw	r18, r20
    4022:	48 ee       	ldi	r20, 0xE8	; 232
    4024:	57 e2       	ldi	r21, 0x27	; 39
    4026:	66 ec       	ldi	r22, 0xC6	; 198
    4028:	78 e2       	ldi	r23, 0x28	; 40
    402a:	0e 94 93 29 	call	0x5326	; 0x5326 <u8x8_Setup>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:718
  buf = u8g2_m_16_8_2(&tile_buf_height);
    402e:	ce 01       	movw	r24, r28
    4030:	01 96       	adiw	r24, 0x01	; 1
    4032:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <u8g2_m_16_8_2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:719
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    4036:	86 01       	movw	r16, r12
    4038:	2c e7       	ldi	r18, 0x7C	; 124
    403a:	35 e2       	ldi	r19, 0x25	; 37
    403c:	49 81       	ldd	r20, Y+1	; 0x01
    403e:	bc 01       	movw	r22, r24
    4040:	c7 01       	movw	r24, r14
    4042:	0e 94 ed 26 	call	0x4dda	; 0x4dda <u8g2_SetupBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:720
}
    4046:	0f 90       	pop	r0
    4048:	df 91       	pop	r29
    404a:	cf 91       	pop	r28
    404c:	1f 91       	pop	r17
    404e:	0f 91       	pop	r16
    4050:	ff 90       	pop	r15
    4052:	ef 90       	pop	r14
    4054:	df 90       	pop	r13
    4056:	cf 90       	pop	r12
    4058:	08 95       	ret

0000405a <u8g2_font_get_word>:
u8g2_font_get_word():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1275
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}
    405a:	fc 01       	movw	r30, r24
    405c:	e6 0f       	add	r30, r22
    405e:	f1 1d       	adc	r31, r1
    4060:	84 91       	lpm	r24, Z
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	98 2f       	mov	r25, r24
    4066:	88 27       	eor	r24, r24
    4068:	31 96       	adiw	r30, 0x01	; 1
    406a:	e4 91       	lpm	r30, Z
    406c:	8e 0f       	add	r24, r30
    406e:	91 1d       	adc	r25, r1
    4070:	08 95       	ret

00004072 <u8g2_font_calc_vref_font>:
u8g2_font_calc_vref_font():
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	08 95       	ret

00004078 <u8g2_read_font_info>:
u8g2_read_font_info():
    4078:	0f 93       	push	r16
    407a:	1f 93       	push	r17
    407c:	cf 93       	push	r28
    407e:	df 93       	push	r29
    4080:	ec 01       	movw	r28, r24
    4082:	8b 01       	movw	r16, r22
u8g2_font_get_byte():
    4084:	fb 01       	movw	r30, r22
    4086:	84 91       	lpm	r24, Z
u8g2_read_font_info():
    4088:	88 83       	st	Y, r24
u8g2_font_get_byte():
    408a:	31 96       	adiw	r30, 0x01	; 1
    408c:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    408e:	e9 83       	std	Y+1, r30	; 0x01
u8g2_font_get_byte():
    4090:	fb 01       	movw	r30, r22
    4092:	32 96       	adiw	r30, 0x02	; 2
    4094:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4096:	ea 83       	std	Y+2, r30	; 0x02
u8g2_font_get_byte():
    4098:	fb 01       	movw	r30, r22
    409a:	33 96       	adiw	r30, 0x03	; 3
    409c:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    409e:	eb 83       	std	Y+3, r30	; 0x03
u8g2_font_get_byte():
    40a0:	fb 01       	movw	r30, r22
    40a2:	34 96       	adiw	r30, 0x04	; 4
    40a4:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40a6:	ec 83       	std	Y+4, r30	; 0x04
u8g2_font_get_byte():
    40a8:	fb 01       	movw	r30, r22
    40aa:	35 96       	adiw	r30, 0x05	; 5
    40ac:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40ae:	ed 83       	std	Y+5, r30	; 0x05
u8g2_font_get_byte():
    40b0:	fb 01       	movw	r30, r22
    40b2:	36 96       	adiw	r30, 0x06	; 6
    40b4:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40b6:	ee 83       	std	Y+6, r30	; 0x06
u8g2_font_get_byte():
    40b8:	fb 01       	movw	r30, r22
    40ba:	37 96       	adiw	r30, 0x07	; 7
    40bc:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40be:	ef 83       	std	Y+7, r30	; 0x07
u8g2_font_get_byte():
    40c0:	fb 01       	movw	r30, r22
    40c2:	38 96       	adiw	r30, 0x08	; 8
    40c4:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40c6:	e8 87       	std	Y+8, r30	; 0x08
u8g2_font_get_byte():
    40c8:	fb 01       	movw	r30, r22
    40ca:	39 96       	adiw	r30, 0x09	; 9
    40cc:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40ce:	e9 87       	std	Y+9, r30	; 0x09
u8g2_font_get_byte():
    40d0:	fb 01       	movw	r30, r22
    40d2:	3a 96       	adiw	r30, 0x0a	; 10
    40d4:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40d6:	ea 87       	std	Y+10, r30	; 0x0a
u8g2_font_get_byte():
    40d8:	fb 01       	movw	r30, r22
    40da:	3b 96       	adiw	r30, 0x0b	; 11
    40dc:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40de:	eb 87       	std	Y+11, r30	; 0x0b
u8g2_font_get_byte():
    40e0:	fb 01       	movw	r30, r22
    40e2:	3c 96       	adiw	r30, 0x0c	; 12
    40e4:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40e6:	ec 87       	std	Y+12, r30	; 0x0c
u8g2_font_get_byte():
    40e8:	fb 01       	movw	r30, r22
    40ea:	3d 96       	adiw	r30, 0x0d	; 13
    40ec:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40ee:	ed 87       	std	Y+13, r30	; 0x0d
u8g2_font_get_byte():
    40f0:	fb 01       	movw	r30, r22
    40f2:	3e 96       	adiw	r30, 0x0e	; 14
    40f4:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40f6:	ee 87       	std	Y+14, r30	; 0x0e
u8g2_font_get_byte():
    40f8:	fb 01       	movw	r30, r22
    40fa:	3f 96       	adiw	r30, 0x0f	; 15
    40fc:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    40fe:	ef 87       	std	Y+15, r30	; 0x0f
u8g2_font_get_byte():
    4100:	fb 01       	movw	r30, r22
    4102:	70 96       	adiw	r30, 0x10	; 16
    4104:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4106:	e8 8b       	std	Y+16, r30	; 0x10
    4108:	61 e1       	ldi	r22, 0x11	; 17
    410a:	c8 01       	movw	r24, r16
    410c:	0e 94 2d 20 	call	0x405a	; 0x405a <u8g2_font_get_word>
    4110:	9a 8b       	std	Y+18, r25	; 0x12
    4112:	89 8b       	std	Y+17, r24	; 0x11
    4114:	63 e1       	ldi	r22, 0x13	; 19
    4116:	c8 01       	movw	r24, r16
    4118:	0e 94 2d 20 	call	0x405a	; 0x405a <u8g2_font_get_word>
    411c:	9c 8b       	std	Y+20, r25	; 0x14
    411e:	8b 8b       	std	Y+19, r24	; 0x13
    4120:	65 e1       	ldi	r22, 0x15	; 21
    4122:	c8 01       	movw	r24, r16
    4124:	0e 94 2d 20 	call	0x405a	; 0x405a <u8g2_font_get_word>
    4128:	9e 8b       	std	Y+22, r25	; 0x16
    412a:	8d 8b       	std	Y+21, r24	; 0x15
    412c:	df 91       	pop	r29
    412e:	cf 91       	pop	r28
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

00004136 <u8g2_font_decode_get_unsigned_bits>:
u8g2_font_decode_get_unsigned_bits():
    4136:	dc 01       	movw	r26, r24
    4138:	1a 96       	adiw	r26, 0x0a	; 10
    413a:	4c 91       	ld	r20, X
    413c:	1a 97       	sbiw	r26, 0x0a	; 10
    413e:	ed 91       	ld	r30, X+
    4140:	fc 91       	ld	r31, X
    4142:	11 97       	sbiw	r26, 0x01	; 1
    4144:	24 91       	lpm	r18, Z
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	04 2e       	mov	r0, r20
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <u8g2_font_decode_get_unsigned_bits+0x1a>
    414c:	35 95       	asr	r19
    414e:	27 95       	ror	r18
    4150:	0a 94       	dec	r0
    4152:	e2 f7       	brpl	.-8      	; 0x414c <u8g2_font_decode_get_unsigned_bits+0x16>
    4154:	84 2f       	mov	r24, r20
    4156:	86 0f       	add	r24, r22
    4158:	88 30       	cpi	r24, 0x08	; 8
    415a:	68 f0       	brcs	.+26     	; 0x4176 <u8g2_font_decode_get_unsigned_bits+0x40>
    415c:	31 96       	adiw	r30, 0x01	; 1
    415e:	11 96       	adiw	r26, 0x01	; 1
    4160:	fc 93       	st	X, r31
    4162:	ee 93       	st	-X, r30
    4164:	e4 91       	lpm	r30, Z
    4166:	98 e0       	ldi	r25, 0x08	; 8
    4168:	94 1b       	sub	r25, r20
    416a:	01 c0       	rjmp	.+2      	; 0x416e <u8g2_font_decode_get_unsigned_bits+0x38>
    416c:	ee 0f       	add	r30, r30
    416e:	9a 95       	dec	r25
    4170:	ea f7       	brpl	.-6      	; 0x416c <u8g2_font_decode_get_unsigned_bits+0x36>
    4172:	2e 2b       	or	r18, r30
    4174:	88 50       	subi	r24, 0x08	; 8
    4176:	1a 96       	adiw	r26, 0x0a	; 10
    4178:	8c 93       	st	X, r24
    417a:	8f ef       	ldi	r24, 0xFF	; 255
    417c:	9f ef       	ldi	r25, 0xFF	; 255
    417e:	01 c0       	rjmp	.+2      	; 0x4182 <u8g2_font_decode_get_unsigned_bits+0x4c>
    4180:	88 0f       	add	r24, r24
    4182:	6a 95       	dec	r22
    4184:	ea f7       	brpl	.-6      	; 0x4180 <u8g2_font_decode_get_unsigned_bits+0x4a>
    4186:	80 95       	com	r24
    4188:	82 23       	and	r24, r18
    418a:	08 95       	ret

0000418c <u8g2_font_setup_decode>:
u8g2_font_setup_decode():
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	8c 01       	movw	r16, r24
    4196:	ec 01       	movw	r28, r24
    4198:	c2 5a       	subi	r28, 0xA2	; 162
    419a:	df 4f       	sbci	r29, 0xFF	; 255
    419c:	79 83       	std	Y+1, r23	; 0x01
    419e:	68 83       	st	Y, r22
    41a0:	1a 86       	std	Y+10, r1	; 0x0a
    41a2:	fc 01       	movw	r30, r24
    41a4:	ef 58       	subi	r30, 0x8F	; 143
    41a6:	ff 4f       	sbci	r31, 0xFF	; 255
    41a8:	60 81       	ld	r22, Z
    41aa:	ce 01       	movw	r24, r28
    41ac:	0e 94 9b 20 	call	0x4136	; 0x4136 <u8g2_font_decode_get_unsigned_bits>
    41b0:	88 87       	std	Y+8, r24	; 0x08
    41b2:	f8 01       	movw	r30, r16
    41b4:	ee 58       	subi	r30, 0x8E	; 142
    41b6:	ff 4f       	sbci	r31, 0xFF	; 255
    41b8:	60 81       	ld	r22, Z
    41ba:	ce 01       	movw	r24, r28
    41bc:	0e 94 9b 20 	call	0x4136	; 0x4136 <u8g2_font_decode_get_unsigned_bits>
    41c0:	89 87       	std	Y+9, r24	; 0x09
    41c2:	f8 01       	movw	r30, r16
    41c4:	e6 57       	subi	r30, 0x76	; 118
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	90 81       	ld	r25, Z
    41ca:	9c 87       	std	Y+12, r25	; 0x0c
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	91 11       	cpse	r25, r1
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	8d 87       	std	Y+13, r24	; 0x0d
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	1f 91       	pop	r17
    41da:	0f 91       	pop	r16
    41dc:	08 95       	ret

000041de <u8g2_font_decode_get_signed_bits>:
u8g2_font_decode_get_signed_bits():
    41de:	cf 93       	push	r28
    41e0:	c6 2f       	mov	r28, r22
    41e2:	0e 94 9b 20 	call	0x4136	; 0x4136 <u8g2_font_decode_get_unsigned_bits>
    41e6:	c1 50       	subi	r28, 0x01	; 1
    41e8:	21 e0       	ldi	r18, 0x01	; 1
    41ea:	30 e0       	ldi	r19, 0x00	; 0
    41ec:	01 c0       	rjmp	.+2      	; 0x41f0 <u8g2_font_decode_get_signed_bits+0x12>
    41ee:	22 0f       	add	r18, r18
    41f0:	ca 95       	dec	r28
    41f2:	ea f7       	brpl	.-6      	; 0x41ee <u8g2_font_decode_get_signed_bits+0x10>
    41f4:	82 1b       	sub	r24, r18
    41f6:	cf 91       	pop	r28
    41f8:	08 95       	ret

000041fa <u8g2_add_vector_y>:
u8g2_add_vector_y():
    41fa:	21 30       	cpi	r18, 0x01	; 1
    41fc:	69 f0       	breq	.+26     	; 0x4218 <u8g2_add_vector_y+0x1e>
    41fe:	38 f0       	brcs	.+14     	; 0x420e <u8g2_add_vector_y+0x14>
    4200:	22 30       	cpi	r18, 0x02	; 2
    4202:	79 f0       	breq	.+30     	; 0x4222 <u8g2_add_vector_y+0x28>
    4204:	86 1b       	sub	r24, r22
    4206:	91 09       	sbc	r25, r1
    4208:	67 fd       	sbrc	r22, 7
    420a:	93 95       	inc	r25
    420c:	08 95       	ret
    420e:	84 0f       	add	r24, r20
    4210:	91 1d       	adc	r25, r1
    4212:	47 fd       	sbrc	r20, 7
    4214:	9a 95       	dec	r25
    4216:	08 95       	ret
    4218:	86 0f       	add	r24, r22
    421a:	91 1d       	adc	r25, r1
    421c:	67 fd       	sbrc	r22, 7
    421e:	9a 95       	dec	r25
    4220:	08 95       	ret
    4222:	84 1b       	sub	r24, r20
    4224:	91 09       	sbc	r25, r1
    4226:	47 fd       	sbrc	r20, 7
    4228:	93 95       	inc	r25
    422a:	08 95       	ret

0000422c <u8g2_add_vector_x>:
u8g2_add_vector_x():
    422c:	21 30       	cpi	r18, 0x01	; 1
    422e:	69 f0       	breq	.+26     	; 0x424a <u8g2_add_vector_x+0x1e>
    4230:	38 f0       	brcs	.+14     	; 0x4240 <u8g2_add_vector_x+0x14>
    4232:	22 30       	cpi	r18, 0x02	; 2
    4234:	79 f0       	breq	.+30     	; 0x4254 <u8g2_add_vector_x+0x28>
    4236:	84 0f       	add	r24, r20
    4238:	91 1d       	adc	r25, r1
    423a:	47 fd       	sbrc	r20, 7
    423c:	9a 95       	dec	r25
    423e:	08 95       	ret
    4240:	86 0f       	add	r24, r22
    4242:	91 1d       	adc	r25, r1
    4244:	67 fd       	sbrc	r22, 7
    4246:	9a 95       	dec	r25
    4248:	08 95       	ret
    424a:	84 1b       	sub	r24, r20
    424c:	91 09       	sbc	r25, r1
    424e:	47 fd       	sbrc	r20, 7
    4250:	93 95       	inc	r25
    4252:	08 95       	ret
    4254:	86 1b       	sub	r24, r22
    4256:	91 09       	sbc	r25, r1
    4258:	67 fd       	sbrc	r22, 7
    425a:	93 95       	inc	r25
    425c:	08 95       	ret

0000425e <u8g2_font_decode_len>:
u8g2_font_decode_len():
    425e:	3f 92       	push	r3
    4260:	4f 92       	push	r4
    4262:	5f 92       	push	r5
    4264:	6f 92       	push	r6
    4266:	7f 92       	push	r7
    4268:	8f 92       	push	r8
    426a:	9f 92       	push	r9
    426c:	af 92       	push	r10
    426e:	bf 92       	push	r11
    4270:	cf 92       	push	r12
    4272:	df 92       	push	r13
    4274:	ef 92       	push	r14
    4276:	ff 92       	push	r15
    4278:	0f 93       	push	r16
    427a:	1f 93       	push	r17
    427c:	cf 93       	push	r28
    427e:	df 93       	push	r29
    4280:	7c 01       	movw	r14, r24
    4282:	16 2f       	mov	r17, r22
    4284:	44 2e       	mov	r4, r20
    4286:	ec 01       	movw	r28, r24
    4288:	c2 5a       	subi	r28, 0xA2	; 162
    428a:	df 4f       	sbci	r29, 0xFF	; 255
    428c:	5e 80       	ldd	r5, Y+6	; 0x06
    428e:	6f 80       	ldd	r6, Y+7	; 0x07
    4290:	6c 01       	movw	r12, r24
    4292:	8a e8       	ldi	r24, 0x8A	; 138
    4294:	c8 0e       	add	r12, r24
    4296:	d1 1c       	adc	r13, r1
    4298:	78 84       	ldd	r7, Y+8	; 0x08
    429a:	75 18       	sub	r7, r5
    429c:	31 2e       	mov	r3, r17
    429e:	71 16       	cp	r7, r17
    42a0:	08 f4       	brcc	.+2      	; 0x42a4 <u8g2_font_decode_len+0x46>
    42a2:	37 2c       	mov	r3, r7
    42a4:	8c 80       	ldd	r8, Y+4	; 0x04
    42a6:	9d 80       	ldd	r9, Y+5	; 0x05
    42a8:	0e 85       	ldd	r16, Y+14	; 0x0e
    42aa:	20 2f       	mov	r18, r16
    42ac:	46 2d       	mov	r20, r6
    42ae:	65 2d       	mov	r22, r5
    42b0:	8a 81       	ldd	r24, Y+2	; 0x02
    42b2:	9b 81       	ldd	r25, Y+3	; 0x03
    42b4:	0e 94 16 21 	call	0x422c	; 0x422c <u8g2_add_vector_x>
    42b8:	5c 01       	movw	r10, r24
    42ba:	20 2f       	mov	r18, r16
    42bc:	46 2d       	mov	r20, r6
    42be:	65 2d       	mov	r22, r5
    42c0:	c4 01       	movw	r24, r8
    42c2:	0e 94 fd 20 	call	0x41fa	; 0x41fa <u8g2_add_vector_y>
    42c6:	ac 01       	movw	r20, r24
    42c8:	44 20       	and	r4, r4
    42ca:	79 f0       	breq	.+30     	; 0x42ea <u8g2_font_decode_len+0x8c>
    42cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    42ce:	f6 01       	movw	r30, r12
    42d0:	80 83       	st	Z, r24
    42d2:	23 2d       	mov	r18, r3
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	b5 01       	movw	r22, r10
    42d8:	c7 01       	movw	r24, r14
    42da:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
    42de:	17 15       	cp	r17, r7
    42e0:	48 f0       	brcs	.+18     	; 0x42f4 <u8g2_font_decode_len+0x96>
    42e2:	17 19       	sub	r17, r7
    42e4:	63 94       	inc	r6
    42e6:	51 2c       	mov	r5, r1
    42e8:	d7 cf       	rjmp	.-82     	; 0x4298 <u8g2_font_decode_len+0x3a>
    42ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    42ec:	81 11       	cpse	r24, r1
    42ee:	f7 cf       	rjmp	.-18     	; 0x42de <u8g2_font_decode_len+0x80>
    42f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42f2:	ed cf       	rjmp	.-38     	; 0x42ce <u8g2_font_decode_len+0x70>
    42f4:	15 0d       	add	r17, r5
    42f6:	1e 83       	std	Y+6, r17	; 0x06
    42f8:	6f 82       	std	Y+7, r6	; 0x07
    42fa:	df 91       	pop	r29
    42fc:	cf 91       	pop	r28
    42fe:	1f 91       	pop	r17
    4300:	0f 91       	pop	r16
    4302:	ff 90       	pop	r15
    4304:	ef 90       	pop	r14
    4306:	df 90       	pop	r13
    4308:	cf 90       	pop	r12
    430a:	bf 90       	pop	r11
    430c:	af 90       	pop	r10
    430e:	9f 90       	pop	r9
    4310:	8f 90       	pop	r8
    4312:	7f 90       	pop	r7
    4314:	6f 90       	pop	r6
    4316:	5f 90       	pop	r5
    4318:	4f 90       	pop	r4
    431a:	3f 90       	pop	r3
    431c:	08 95       	ret

0000431e <u8g2_font_decode_glyph>:
u8g2_font_decode_glyph():
    431e:	8f 92       	push	r8
    4320:	9f 92       	push	r9
    4322:	af 92       	push	r10
    4324:	bf 92       	push	r11
    4326:	cf 92       	push	r12
    4328:	df 92       	push	r13
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	7c 01       	movw	r14, r24
    4338:	ec 01       	movw	r28, r24
    433a:	c2 5a       	subi	r28, 0xA2	; 162
    433c:	df 4f       	sbci	r29, 0xFF	; 255
    433e:	0e 94 c6 20 	call	0x418c	; 0x418c <u8g2_font_setup_decode>
    4342:	f7 01       	movw	r30, r14
    4344:	e9 59       	subi	r30, 0x99	; 153
    4346:	ff 4f       	sbci	r31, 0xFF	; 255
    4348:	b0 80       	ld	r11, Z
    434a:	3c 96       	adiw	r30, 0x0c	; 12
    434c:	60 81       	ld	r22, Z
    434e:	ce 01       	movw	r24, r28
    4350:	0e 94 ef 20 	call	0x41de	; 0x41de <u8g2_font_decode_get_signed_bits>
    4354:	88 2e       	mov	r8, r24
    4356:	f7 01       	movw	r30, r14
    4358:	ec 58       	subi	r30, 0x8C	; 140
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	60 81       	ld	r22, Z
    435e:	ce 01       	movw	r24, r28
    4360:	0e 94 ef 20 	call	0x41de	; 0x41de <u8g2_font_decode_get_signed_bits>
    4364:	08 2f       	mov	r16, r24
    4366:	f7 01       	movw	r30, r14
    4368:	eb 58       	subi	r30, 0x8B	; 139
    436a:	ff 4f       	sbci	r31, 0xFF	; 255
    436c:	60 81       	ld	r22, Z
    436e:	ce 01       	movw	r24, r28
    4370:	0e 94 ef 20 	call	0x41de	; 0x41de <u8g2_font_decode_get_signed_bits>
    4374:	a8 2e       	mov	r10, r24
    4376:	98 84       	ldd	r9, Y+8	; 0x08
    4378:	19 14       	cp	r1, r9
    437a:	0c f0       	brlt	.+2      	; 0x437e <u8g2_font_decode_glyph+0x60>
    437c:	61 c0       	rjmp	.+194    	; 0x4440 <u8g2_font_decode_glyph+0x122>
    437e:	1e 85       	ldd	r17, Y+14	; 0x0e
    4380:	0b 0d       	add	r16, r11
    4382:	01 95       	neg	r16
    4384:	21 2f       	mov	r18, r17
    4386:	40 2f       	mov	r20, r16
    4388:	68 2d       	mov	r22, r8
    438a:	8a 81       	ldd	r24, Y+2	; 0x02
    438c:	9b 81       	ldd	r25, Y+3	; 0x03
    438e:	0e 94 16 21 	call	0x422c	; 0x422c <u8g2_add_vector_x>
    4392:	6c 01       	movw	r12, r24
    4394:	9b 83       	std	Y+3, r25	; 0x03
    4396:	8a 83       	std	Y+2, r24	; 0x02
    4398:	21 2f       	mov	r18, r17
    439a:	40 2f       	mov	r20, r16
    439c:	68 2d       	mov	r22, r8
    439e:	8c 81       	ldd	r24, Y+4	; 0x04
    43a0:	9d 81       	ldd	r25, Y+5	; 0x05
    43a2:	0e 94 fd 20 	call	0x41fa	; 0x41fa <u8g2_add_vector_y>
    43a6:	9d 83       	std	Y+5, r25	; 0x05
    43a8:	8c 83       	std	Y+4, r24	; 0x04
    43aa:	11 30       	cpi	r17, 0x01	; 1
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <u8g2_font_decode_glyph+0x92>
    43ae:	56 c0       	rjmp	.+172    	; 0x445c <u8g2_font_decode_glyph+0x13e>
    43b0:	48 f0       	brcs	.+18     	; 0x43c4 <u8g2_font_decode_glyph+0xa6>
    43b2:	12 30       	cpi	r17, 0x02	; 2
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <u8g2_font_decode_glyph+0x9a>
    43b6:	63 c0       	rjmp	.+198    	; 0x447e <u8g2_font_decode_glyph+0x160>
    43b8:	13 30       	cpi	r17, 0x03	; 3
    43ba:	09 f4       	brne	.+2      	; 0x43be <u8g2_font_decode_glyph+0xa0>
    43bc:	76 c0       	rjmp	.+236    	; 0x44aa <u8g2_font_decode_glyph+0x18c>
    43be:	8c 01       	movw	r16, r24
    43c0:	96 01       	movw	r18, r12
    43c2:	0a c0       	rjmp	.+20     	; 0x43d8 <u8g2_font_decode_glyph+0xba>
    43c4:	96 01       	movw	r18, r12
    43c6:	29 0d       	add	r18, r9
    43c8:	31 1d       	adc	r19, r1
    43ca:	97 fc       	sbrc	r9, 7
    43cc:	3a 95       	dec	r19
    43ce:	8c 01       	movw	r16, r24
    43d0:	0b 0d       	add	r16, r11
    43d2:	11 1d       	adc	r17, r1
    43d4:	b7 fc       	sbrc	r11, 7
    43d6:	1a 95       	dec	r17
    43d8:	ac 01       	movw	r20, r24
    43da:	b6 01       	movw	r22, r12
    43dc:	c7 01       	movw	r24, r14
    43de:	0e 94 9d 24 	call	0x493a	; 0x493a <u8g2_IsIntersection>
    43e2:	88 23       	and	r24, r24
    43e4:	69 f1       	breq	.+90     	; 0x4440 <u8g2_font_decode_glyph+0x122>
    43e6:	1e 82       	std	Y+6, r1	; 0x06
    43e8:	1f 82       	std	Y+7, r1	; 0x07
    43ea:	87 01       	movw	r16, r14
    43ec:	01 59       	subi	r16, 0x91	; 145
    43ee:	1f 4f       	sbci	r17, 0xFF	; 255
    43f0:	67 01       	movw	r12, r14
    43f2:	80 e7       	ldi	r24, 0x70	; 112
    43f4:	c8 0e       	add	r12, r24
    43f6:	d1 1c       	adc	r13, r1
    43f8:	f8 01       	movw	r30, r16
    43fa:	60 81       	ld	r22, Z
    43fc:	ce 01       	movw	r24, r28
    43fe:	0e 94 9b 20 	call	0x4136	; 0x4136 <u8g2_font_decode_get_unsigned_bits>
    4402:	88 2e       	mov	r8, r24
    4404:	f6 01       	movw	r30, r12
    4406:	60 81       	ld	r22, Z
    4408:	ce 01       	movw	r24, r28
    440a:	0e 94 9b 20 	call	0x4136	; 0x4136 <u8g2_font_decode_get_unsigned_bits>
    440e:	98 2e       	mov	r9, r24
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	68 2d       	mov	r22, r8
    4414:	c7 01       	movw	r24, r14
    4416:	0e 94 2f 21 	call	0x425e	; 0x425e <u8g2_font_decode_len>
    441a:	41 e0       	ldi	r20, 0x01	; 1
    441c:	69 2d       	mov	r22, r9
    441e:	c7 01       	movw	r24, r14
    4420:	0e 94 2f 21 	call	0x425e	; 0x425e <u8g2_font_decode_len>
    4424:	61 e0       	ldi	r22, 0x01	; 1
    4426:	ce 01       	movw	r24, r28
    4428:	0e 94 9b 20 	call	0x4136	; 0x4136 <u8g2_font_decode_get_unsigned_bits>
    442c:	81 11       	cpse	r24, r1
    442e:	f0 cf       	rjmp	.-32     	; 0x4410 <u8g2_font_decode_glyph+0xf2>
    4430:	8f 81       	ldd	r24, Y+7	; 0x07
    4432:	8b 15       	cp	r24, r11
    4434:	0c f3       	brlt	.-62     	; 0x43f8 <u8g2_font_decode_glyph+0xda>
    4436:	f7 01       	movw	r30, r14
    4438:	e6 57       	subi	r30, 0x76	; 118
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	8c 85       	ldd	r24, Y+12	; 0x0c
    443e:	80 83       	st	Z, r24
    4440:	8a 2d       	mov	r24, r10
    4442:	df 91       	pop	r29
    4444:	cf 91       	pop	r28
    4446:	1f 91       	pop	r17
    4448:	0f 91       	pop	r16
    444a:	ff 90       	pop	r15
    444c:	ef 90       	pop	r14
    444e:	df 90       	pop	r13
    4450:	cf 90       	pop	r12
    4452:	bf 90       	pop	r11
    4454:	af 90       	pop	r10
    4456:	9f 90       	pop	r9
    4458:	8f 90       	pop	r8
    445a:	08 95       	ret
    445c:	41 e0       	ldi	r20, 0x01	; 1
    445e:	50 e0       	ldi	r21, 0x00	; 0
    4460:	4b 19       	sub	r20, r11
    4462:	51 09       	sbc	r21, r1
    4464:	b7 fc       	sbrc	r11, 7
    4466:	53 95       	inc	r21
    4468:	96 01       	movw	r18, r12
    446a:	2f 5f       	subi	r18, 0xFF	; 255
    446c:	3f 4f       	sbci	r19, 0xFF	; 255
    446e:	8c 01       	movw	r16, r24
    4470:	09 0d       	add	r16, r9
    4472:	11 1d       	adc	r17, r1
    4474:	97 fc       	sbrc	r9, 7
    4476:	1a 95       	dec	r17
    4478:	c4 0e       	add	r12, r20
    447a:	d5 1e       	adc	r13, r21
    447c:	ad cf       	rjmp	.-166    	; 0x43d8 <u8g2_font_decode_glyph+0xba>
    447e:	41 e0       	ldi	r20, 0x01	; 1
    4480:	50 e0       	ldi	r21, 0x00	; 0
    4482:	ba 01       	movw	r22, r20
    4484:	69 19       	sub	r22, r9
    4486:	71 09       	sbc	r23, r1
    4488:	97 fc       	sbrc	r9, 7
    448a:	73 95       	inc	r23
    448c:	96 01       	movw	r18, r12
    448e:	2f 5f       	subi	r18, 0xFF	; 255
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
    4492:	4b 19       	sub	r20, r11
    4494:	51 09       	sbc	r21, r1
    4496:	b7 fc       	sbrc	r11, 7
    4498:	53 95       	inc	r21
    449a:	8c 01       	movw	r16, r24
    449c:	0f 5f       	subi	r16, 0xFF	; 255
    449e:	1f 4f       	sbci	r17, 0xFF	; 255
    44a0:	84 0f       	add	r24, r20
    44a2:	95 1f       	adc	r25, r21
    44a4:	c6 0e       	add	r12, r22
    44a6:	d7 1e       	adc	r13, r23
    44a8:	97 cf       	rjmp	.-210    	; 0x43d8 <u8g2_font_decode_glyph+0xba>
    44aa:	96 01       	movw	r18, r12
    44ac:	2b 0d       	add	r18, r11
    44ae:	31 1d       	adc	r19, r1
    44b0:	b7 fc       	sbrc	r11, 7
    44b2:	3a 95       	dec	r19
    44b4:	41 e0       	ldi	r20, 0x01	; 1
    44b6:	50 e0       	ldi	r21, 0x00	; 0
    44b8:	49 19       	sub	r20, r9
    44ba:	51 09       	sbc	r21, r1
    44bc:	97 fc       	sbrc	r9, 7
    44be:	53 95       	inc	r21
    44c0:	8c 01       	movw	r16, r24
    44c2:	0f 5f       	subi	r16, 0xFF	; 255
    44c4:	1f 4f       	sbci	r17, 0xFF	; 255
    44c6:	84 0f       	add	r24, r20
    44c8:	95 1f       	adc	r25, r21
    44ca:	86 cf       	rjmp	.-244    	; 0x43d8 <u8g2_font_decode_glyph+0xba>

000044cc <u8g2_font_get_glyph_data>:
u8g2_font_get_glyph_data():
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	0f 93       	push	r16
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	fc 01       	movw	r30, r24
    44da:	e6 5a       	subi	r30, 0xA6	; 166
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	20 81       	ld	r18, Z
    44e0:	31 81       	ldd	r19, Z+1	; 0x01
    44e2:	29 5e       	subi	r18, 0xE9	; 233
    44e4:	3f 4f       	sbci	r19, 0xFF	; 255
    44e6:	6f 3f       	cpi	r22, 0xFF	; 255
    44e8:	71 05       	cpc	r23, r1
    44ea:	09 f0       	breq	.+2      	; 0x44ee <u8g2_font_get_glyph_data+0x22>
    44ec:	48 f5       	brcc	.+82     	; 0x4540 <u8g2_font_get_glyph_data+0x74>
    44ee:	61 36       	cpi	r22, 0x61	; 97
    44f0:	71 05       	cpc	r23, r1
    44f2:	d8 f0       	brcs	.+54     	; 0x452a <u8g2_font_get_glyph_data+0x5e>
    44f4:	80 58       	subi	r24, 0x80	; 128
    44f6:	9f 4f       	sbci	r25, 0xFF	; 255
    44f8:	fc 01       	movw	r30, r24
    44fa:	80 81       	ld	r24, Z
    44fc:	91 81       	ldd	r25, Z+1	; 0x01
    44fe:	28 0f       	add	r18, r24
    4500:	39 1f       	adc	r19, r25
    4502:	c9 01       	movw	r24, r18
    4504:	01 96       	adiw	r24, 0x01	; 1
    4506:	fc 01       	movw	r30, r24
    4508:	44 91       	lpm	r20, Z
    450a:	44 23       	and	r20, r20
    450c:	09 f4       	brne	.+2      	; 0x4510 <u8g2_font_get_glyph_data+0x44>
    450e:	47 c0       	rjmp	.+142    	; 0x459e <u8g2_font_get_glyph_data+0xd2>
    4510:	f9 01       	movw	r30, r18
    4512:	44 91       	lpm	r20, Z
    4514:	46 17       	cp	r20, r22
    4516:	17 06       	cpc	r1, r23
    4518:	71 f4       	brne	.+28     	; 0x4536 <u8g2_font_get_glyph_data+0x6a>
    451a:	01 96       	adiw	r24, 0x01	; 1
    451c:	df 91       	pop	r29
    451e:	cf 91       	pop	r28
    4520:	1f 91       	pop	r17
    4522:	0f 91       	pop	r16
    4524:	ff 90       	pop	r15
    4526:	ef 90       	pop	r14
    4528:	08 95       	ret
    452a:	61 34       	cpi	r22, 0x41	; 65
    452c:	71 05       	cpc	r23, r1
    452e:	48 f3       	brcs	.-46     	; 0x4502 <u8g2_font_get_glyph_data+0x36>
    4530:	82 58       	subi	r24, 0x82	; 130
    4532:	9f 4f       	sbci	r25, 0xFF	; 255
    4534:	e1 cf       	rjmp	.-62     	; 0x44f8 <u8g2_font_get_glyph_data+0x2c>
    4536:	fc 01       	movw	r30, r24
    4538:	84 91       	lpm	r24, Z
    453a:	28 0f       	add	r18, r24
    453c:	31 1d       	adc	r19, r1
    453e:	e1 cf       	rjmp	.-62     	; 0x4502 <u8g2_font_get_glyph_data+0x36>
    4540:	8b 01       	movw	r16, r22
    4542:	fc 01       	movw	r30, r24
    4544:	ee 57       	subi	r30, 0x7E	; 126
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	c0 81       	ld	r28, Z
    454a:	d1 81       	ldd	r29, Z+1	; 0x01
    454c:	c2 0f       	add	r28, r18
    454e:	d3 1f       	adc	r29, r19
    4550:	7e 01       	movw	r14, r28
    4552:	60 e0       	ldi	r22, 0x00	; 0
    4554:	c7 01       	movw	r24, r14
    4556:	0e 94 2d 20 	call	0x405a	; 0x405a <u8g2_font_get_word>
    455a:	c8 0f       	add	r28, r24
    455c:	d9 1f       	adc	r29, r25
    455e:	62 e0       	ldi	r22, 0x02	; 2
    4560:	c7 01       	movw	r24, r14
    4562:	0e 94 2d 20 	call	0x405a	; 0x405a <u8g2_font_get_word>
    4566:	f4 e0       	ldi	r31, 0x04	; 4
    4568:	ef 0e       	add	r14, r31
    456a:	f1 1c       	adc	r15, r1
    456c:	80 17       	cp	r24, r16
    456e:	91 07       	cpc	r25, r17
    4570:	80 f3       	brcs	.-32     	; 0x4552 <u8g2_font_get_glyph_data+0x86>
    4572:	fe 01       	movw	r30, r28
    4574:	84 91       	lpm	r24, Z
    4576:	90 e0       	ldi	r25, 0x00	; 0
    4578:	98 2f       	mov	r25, r24
    457a:	88 27       	eor	r24, r24
    457c:	31 96       	adiw	r30, 0x01	; 1
    457e:	e4 91       	lpm	r30, Z
    4580:	8e 2b       	or	r24, r30
    4582:	00 97       	sbiw	r24, 0x00	; 0
    4584:	61 f0       	breq	.+24     	; 0x459e <u8g2_font_get_glyph_data+0xd2>
    4586:	08 17       	cp	r16, r24
    4588:	19 07       	cpc	r17, r25
    458a:	19 f4       	brne	.+6      	; 0x4592 <u8g2_font_get_glyph_data+0xc6>
    458c:	ce 01       	movw	r24, r28
    458e:	03 96       	adiw	r24, 0x03	; 3
    4590:	c5 cf       	rjmp	.-118    	; 0x451c <u8g2_font_get_glyph_data+0x50>
    4592:	fe 01       	movw	r30, r28
    4594:	32 96       	adiw	r30, 0x02	; 2
    4596:	e4 91       	lpm	r30, Z
    4598:	ce 0f       	add	r28, r30
    459a:	d1 1d       	adc	r29, r1
    459c:	ea cf       	rjmp	.-44     	; 0x4572 <u8g2_font_get_glyph_data+0xa6>
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	bc cf       	rjmp	.-136    	; 0x451c <u8g2_font_get_glyph_data+0x50>

000045a4 <u8g2_DrawGlyph>:
u8g2_DrawGlyph():
    45a4:	cf 92       	push	r12
    45a6:	df 92       	push	r13
    45a8:	ef 92       	push	r14
    45aa:	ff 92       	push	r15
    45ac:	0f 93       	push	r16
    45ae:	1f 93       	push	r17
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	ec 01       	movw	r28, r24
    45b6:	7b 01       	movw	r14, r22
    45b8:	8a 01       	movw	r16, r20
    45ba:	69 01       	movw	r12, r18
    45bc:	fc 01       	movw	r30, r24
    45be:	e4 59       	subi	r30, 0x94	; 148
    45c0:	ff 4f       	sbci	r31, 0xFF	; 255
    45c2:	80 81       	ld	r24, Z
    45c4:	81 30       	cpi	r24, 0x01	; 1
    45c6:	79 f1       	breq	.+94     	; 0x4626 <u8g2_DrawGlyph+0x82>
    45c8:	18 f1       	brcs	.+70     	; 0x4610 <u8g2_DrawGlyph+0x6c>
    45ca:	82 30       	cpi	r24, 0x02	; 2
    45cc:	b9 f1       	breq	.+110    	; 0x463c <u8g2_DrawGlyph+0x98>
    45ce:	83 30       	cpi	r24, 0x03	; 3
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <u8g2_DrawGlyph+0x30>
    45d2:	3f c0       	rjmp	.+126    	; 0x4652 <u8g2_DrawGlyph+0xae>
u8g2_font_draw_glyph():
    45d4:	fe 01       	movw	r30, r28
    45d6:	e0 5a       	subi	r30, 0xA0	; 160
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	f1 82       	std	Z+1, r15	; 0x01
    45dc:	e0 82       	st	Z, r14
    45de:	32 96       	adiw	r30, 0x02	; 2
    45e0:	11 83       	std	Z+1, r17	; 0x01
    45e2:	00 83       	st	Z, r16
    45e4:	b6 01       	movw	r22, r12
    45e6:	ce 01       	movw	r24, r28
    45e8:	0e 94 66 22 	call	0x44cc	; 0x44cc <u8g2_font_get_glyph_data>
    45ec:	00 97       	sbiw	r24, 0x00	; 0
    45ee:	e1 f1       	breq	.+120    	; 0x4668 <u8g2_DrawGlyph+0xc4>
    45f0:	bc 01       	movw	r22, r24
    45f2:	ce 01       	movw	r24, r28
    45f4:	0e 94 8f 21 	call	0x431e	; 0x431e <u8g2_font_decode_glyph>
    45f8:	08 2e       	mov	r0, r24
    45fa:	00 0c       	add	r0, r0
    45fc:	99 0b       	sbc	r25, r25
u8g2_DrawGlyph():
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	1f 91       	pop	r17
    4604:	0f 91       	pop	r16
    4606:	ff 90       	pop	r15
    4608:	ef 90       	pop	r14
    460a:	df 90       	pop	r13
    460c:	cf 90       	pop	r12
    460e:	08 95       	ret
    4610:	fe 01       	movw	r30, r28
    4612:	e4 5a       	subi	r30, 0xA4	; 164
    4614:	ff 4f       	sbci	r31, 0xFF	; 255
    4616:	01 90       	ld	r0, Z+
    4618:	f0 81       	ld	r31, Z
    461a:	e0 2d       	mov	r30, r0
    461c:	ce 01       	movw	r24, r28
    461e:	09 95       	icall
    4620:	08 0f       	add	r16, r24
    4622:	19 1f       	adc	r17, r25
    4624:	d7 cf       	rjmp	.-82     	; 0x45d4 <u8g2_DrawGlyph+0x30>
    4626:	fe 01       	movw	r30, r28
    4628:	e4 5a       	subi	r30, 0xA4	; 164
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	01 90       	ld	r0, Z+
    462e:	f0 81       	ld	r31, Z
    4630:	e0 2d       	mov	r30, r0
    4632:	ce 01       	movw	r24, r28
    4634:	09 95       	icall
    4636:	e8 1a       	sub	r14, r24
    4638:	f9 0a       	sbc	r15, r25
    463a:	cc cf       	rjmp	.-104    	; 0x45d4 <u8g2_DrawGlyph+0x30>
    463c:	fe 01       	movw	r30, r28
    463e:	e4 5a       	subi	r30, 0xA4	; 164
    4640:	ff 4f       	sbci	r31, 0xFF	; 255
    4642:	01 90       	ld	r0, Z+
    4644:	f0 81       	ld	r31, Z
    4646:	e0 2d       	mov	r30, r0
    4648:	ce 01       	movw	r24, r28
    464a:	09 95       	icall
    464c:	08 1b       	sub	r16, r24
    464e:	19 0b       	sbc	r17, r25
    4650:	c1 cf       	rjmp	.-126    	; 0x45d4 <u8g2_DrawGlyph+0x30>
    4652:	fe 01       	movw	r30, r28
    4654:	e4 5a       	subi	r30, 0xA4	; 164
    4656:	ff 4f       	sbci	r31, 0xFF	; 255
    4658:	01 90       	ld	r0, Z+
    465a:	f0 81       	ld	r31, Z
    465c:	e0 2d       	mov	r30, r0
    465e:	ce 01       	movw	r24, r28
    4660:	09 95       	icall
    4662:	e8 0e       	add	r14, r24
    4664:	f9 1e       	adc	r15, r25
    4666:	b6 cf       	rjmp	.-148    	; 0x45d4 <u8g2_DrawGlyph+0x30>
u8g2_font_draw_glyph():
    4668:	90 e0       	ldi	r25, 0x00	; 0
    466a:	80 e0       	ldi	r24, 0x00	; 0
u8g2_DrawGlyph():
    466c:	c8 cf       	rjmp	.-112    	; 0x45fe <u8g2_DrawGlyph+0x5a>

0000466e <u8g2_UpdateRefHeight>:
u8g2_UpdateRefHeight():
    466e:	cf 93       	push	r28
    4670:	df 93       	push	r29
    4672:	fc 01       	movw	r30, r24
    4674:	e6 5a       	subi	r30, 0xA6	; 166
    4676:	ff 4f       	sbci	r31, 0xFF	; 255
    4678:	20 81       	ld	r18, Z
    467a:	31 81       	ldd	r19, Z+1	; 0x01
    467c:	23 2b       	or	r18, r19
    467e:	f1 f0       	breq	.+60     	; 0x46bc <u8g2_UpdateRefHeight+0x4e>
    4680:	b0 96       	adiw	r30, 0x20	; 32
    4682:	20 81       	ld	r18, Z
    4684:	dc 01       	movw	r26, r24
    4686:	aa 57       	subi	r26, 0x7A	; 122
    4688:	bf 4f       	sbci	r27, 0xFF	; 255
    468a:	2c 93       	st	X, r18
    468c:	31 96       	adiw	r30, 0x01	; 1
    468e:	50 81       	ld	r21, Z
    4690:	3c 96       	adiw	r30, 0x0c	; 12
    4692:	50 83       	st	Z, r21
    4694:	ec 01       	movw	r28, r24
    4696:	cb 57       	subi	r28, 0x7B	; 123
    4698:	df 4f       	sbci	r29, 0xFF	; 255
    469a:	38 81       	ld	r19, Y
    469c:	33 23       	and	r19, r19
    469e:	71 f0       	breq	.+28     	; 0x46bc <u8g2_UpdateRefHeight+0x4e>
    46a0:	31 30       	cpi	r19, 0x01	; 1
    46a2:	79 f4       	brne	.+30     	; 0x46c2 <u8g2_UpdateRefHeight+0x54>
    46a4:	29 97       	sbiw	r28, 0x09	; 9
    46a6:	38 81       	ld	r19, Y
    46a8:	23 17       	cp	r18, r19
    46aa:	0c f4       	brge	.+2      	; 0x46ae <u8g2_UpdateRefHeight+0x40>
    46ac:	3c 93       	st	X, r19
    46ae:	83 58       	subi	r24, 0x83	; 131
    46b0:	9f 4f       	sbci	r25, 0xFF	; 255
    46b2:	dc 01       	movw	r26, r24
    46b4:	8c 91       	ld	r24, X
    46b6:	85 17       	cp	r24, r21
    46b8:	0c f4       	brge	.+2      	; 0x46bc <u8g2_UpdateRefHeight+0x4e>
    46ba:	80 83       	st	Z, r24
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	08 95       	ret
    46c2:	ec 01       	movw	r28, r24
    46c4:	c9 58       	subi	r28, 0x89	; 137
    46c6:	df 4f       	sbci	r29, 0xFF	; 255
    46c8:	48 81       	ld	r20, Y
    46ca:	87 58       	subi	r24, 0x87	; 135
    46cc:	9f 4f       	sbci	r25, 0xFF	; 255
    46ce:	ec 01       	movw	r28, r24
    46d0:	38 81       	ld	r19, Y
    46d2:	82 2f       	mov	r24, r18
    46d4:	22 0f       	add	r18, r18
    46d6:	99 0b       	sbc	r25, r25
    46d8:	63 2f       	mov	r22, r19
    46da:	03 2e       	mov	r0, r19
    46dc:	00 0c       	add	r0, r0
    46de:	77 0b       	sbc	r23, r23
    46e0:	64 0f       	add	r22, r20
    46e2:	71 1d       	adc	r23, r1
    46e4:	47 fd       	sbrc	r20, 7
    46e6:	7a 95       	dec	r23
    46e8:	86 17       	cp	r24, r22
    46ea:	97 07       	cpc	r25, r23
    46ec:	14 f4       	brge	.+4      	; 0x46f2 <u8g2_UpdateRefHeight+0x84>
    46ee:	43 0f       	add	r20, r19
    46f0:	4c 93       	st	X, r20
    46f2:	35 17       	cp	r19, r21
    46f4:	1c f7       	brge	.-58     	; 0x46bc <u8g2_UpdateRefHeight+0x4e>
    46f6:	30 83       	st	Z, r19
    46f8:	e1 cf       	rjmp	.-62     	; 0x46bc <u8g2_UpdateRefHeight+0x4e>

000046fa <u8g2_SetFontPosBaseline>:
u8g2_SetFontPosBaseline():
    46fa:	84 5a       	subi	r24, 0xA4	; 164
    46fc:	9f 4f       	sbci	r25, 0xFF	; 255
    46fe:	29 e3       	ldi	r18, 0x39	; 57
    4700:	30 e2       	ldi	r19, 0x20	; 32
    4702:	fc 01       	movw	r30, r24
    4704:	31 83       	std	Z+1, r19	; 0x01
    4706:	20 83       	st	Z, r18
    4708:	08 95       	ret

0000470a <u8g2_SetFont>:
u8g2_SetFont():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1280

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    470a:	cf 93       	push	r28
    470c:	df 93       	push	r29
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1281
  if ( u8g2->font != font )
    470e:	fc 01       	movw	r30, r24
    4710:	e6 5a       	subi	r30, 0xA6	; 166
    4712:	ff 4f       	sbci	r31, 0xFF	; 255
    4714:	20 81       	ld	r18, Z
    4716:	31 81       	ldd	r19, Z+1	; 0x01
    4718:	26 17       	cp	r18, r22
    471a:	37 07       	cpc	r19, r23
    471c:	61 f0       	breq	.+24     	; 0x4736 <u8g2_SetFont+0x2c>
    471e:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1287
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    4720:	71 83       	std	Z+1, r23	; 0x01
    4722:	60 83       	st	Z, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1288
    u8g2_read_font_info(&(u8g2->font_info), font);
    4724:	83 59       	subi	r24, 0x93	; 147
    4726:	9f 4f       	sbci	r25, 0xFF	; 255
    4728:	0e 94 3c 20 	call	0x4078	; 0x4078 <u8g2_read_font_info>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
    u8g2_UpdateRefHeight(u8g2);
    472c:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    4732:	0c 94 37 23 	jmp	0x466e	; 0x466e <u8g2_UpdateRefHeight>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    4736:	df 91       	pop	r29
    4738:	cf 91       	pop	r28
    473a:	08 95       	ret

0000473c <u8g2_draw_hv_line_2dir>:
u8g2_draw_hv_line_2dir():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:219
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}
    473c:	0f 93       	push	r16
    473e:	fc 01       	movw	r30, r24
    4740:	e0 5c       	subi	r30, 0xC0	; 192
    4742:	ff 4f       	sbci	r31, 0xFF	; 255
    4744:	01 90       	ld	r0, Z+
    4746:	f0 81       	ld	r31, Z
    4748:	e0 2d       	mov	r30, r0
    474a:	4e 1b       	sub	r20, r30
    474c:	5f 0b       	sbc	r21, r31
    474e:	dc 01       	movw	r26, r24
    4750:	d4 96       	adiw	r26, 0x34	; 52
    4752:	ed 91       	ld	r30, X+
    4754:	fc 91       	ld	r31, X
    4756:	09 95       	icall
    4758:	0f 91       	pop	r16
    475a:	08 95       	ret

0000475c <u8g2_DrawHVLine>:
u8g2_DrawHVLine():
    475c:	0f 93       	push	r16
    475e:	cf 93       	push	r28
    4760:	df 93       	push	r29
    4762:	e0 2f       	mov	r30, r16
    4764:	dc 01       	movw	r26, r24
    4766:	ac 57       	subi	r26, 0x7C	; 124
    4768:	bf 4f       	sbci	r27, 0xFF	; 255
    476a:	fc 91       	ld	r31, X
    476c:	ff 23       	and	r31, r31
    476e:	09 f4       	brne	.+2      	; 0x4772 <u8g2_DrawHVLine+0x16>
    4770:	60 c0       	rjmp	.+192    	; 0x4832 <u8g2_DrawHVLine+0xd6>
    4772:	21 15       	cp	r18, r1
    4774:	31 05       	cpc	r19, r1
    4776:	09 f4       	brne	.+2      	; 0x477a <u8g2_DrawHVLine+0x1e>
    4778:	5c c0       	rjmp	.+184    	; 0x4832 <u8g2_DrawHVLine+0xd6>
    477a:	22 30       	cpi	r18, 0x02	; 2
    477c:	31 05       	cpc	r19, r1
    477e:	38 f0       	brcs	.+14     	; 0x478e <u8g2_DrawHVLine+0x32>
    4780:	02 30       	cpi	r16, 0x02	; 2
    4782:	09 f0       	breq	.+2      	; 0x4786 <u8g2_DrawHVLine+0x2a>
    4784:	4a c0       	rjmp	.+148    	; 0x481a <u8g2_DrawHVLine+0xbe>
    4786:	6f 5f       	subi	r22, 0xFF	; 255
    4788:	7f 4f       	sbci	r23, 0xFF	; 255
    478a:	62 1b       	sub	r22, r18
    478c:	73 0b       	sbc	r23, r19
    478e:	0e 2f       	mov	r16, r30
    4790:	01 70       	andi	r16, 0x01	; 1
    4792:	e0 fd       	sbrc	r30, 0
    4794:	52 c0       	rjmp	.+164    	; 0x483a <u8g2_DrawHVLine+0xde>
    4796:	fc 01       	movw	r30, r24
    4798:	e2 5b       	subi	r30, 0xB2	; 178
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	01 90       	ld	r0, Z+
    479e:	f0 81       	ld	r31, Z
    47a0:	e0 2d       	mov	r30, r0
    47a2:	4e 17       	cp	r20, r30
    47a4:	5f 07       	cpc	r21, r31
    47a6:	08 f4       	brcc	.+2      	; 0x47aa <u8g2_DrawHVLine+0x4e>
    47a8:	44 c0       	rjmp	.+136    	; 0x4832 <u8g2_DrawHVLine+0xd6>
    47aa:	fc 01       	movw	r30, r24
    47ac:	e0 5b       	subi	r30, 0xB0	; 176
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	01 90       	ld	r0, Z+
    47b2:	f0 81       	ld	r31, Z
    47b4:	e0 2d       	mov	r30, r0
    47b6:	4e 17       	cp	r20, r30
    47b8:	5f 07       	cpc	r21, r31
    47ba:	d8 f5       	brcc	.+118    	; 0x4832 <u8g2_DrawHVLine+0xd6>
    47bc:	fc 01       	movw	r30, r24
    47be:	e4 5b       	subi	r30, 0xB4	; 180
    47c0:	ff 4f       	sbci	r31, 0xFF	; 255
    47c2:	01 90       	ld	r0, Z+
    47c4:	f0 81       	ld	r31, Z
    47c6:	e0 2d       	mov	r30, r0
    47c8:	dc 01       	movw	r26, r24
    47ca:	a6 5b       	subi	r26, 0xB6	; 182
    47cc:	bf 4f       	sbci	r27, 0xFF	; 255
    47ce:	0d 90       	ld	r0, X+
    47d0:	bc 91       	ld	r27, X
    47d2:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    47d4:	26 0f       	add	r18, r22
    47d6:	37 1f       	adc	r19, r23
    47d8:	26 17       	cp	r18, r22
    47da:	37 07       	cpc	r19, r23
    47dc:	38 f5       	brcc	.+78     	; 0x482c <u8g2_DrawHVLine+0xd0>
    47de:	6e 17       	cp	r22, r30
    47e0:	7f 07       	cpc	r23, r31
    47e2:	18 f5       	brcc	.+70     	; 0x482a <u8g2_DrawHVLine+0xce>
    47e4:	9f 01       	movw	r18, r30
    47e6:	21 50       	subi	r18, 0x01	; 1
    47e8:	31 09       	sbc	r19, r1
    47ea:	a2 17       	cp	r26, r18
    47ec:	b3 07       	cpc	r27, r19
    47ee:	08 f5       	brcc	.+66     	; 0x4832 <u8g2_DrawHVLine+0xd6>
    47f0:	6a 17       	cp	r22, r26
    47f2:	7b 07       	cpc	r23, r27
    47f4:	08 f4       	brcc	.+2      	; 0x47f8 <u8g2_DrawHVLine+0x9c>
    47f6:	bd 01       	movw	r22, r26
    47f8:	2e 17       	cp	r18, r30
    47fa:	3f 07       	cpc	r19, r31
    47fc:	08 f4       	brcc	.+2      	; 0x4800 <u8g2_DrawHVLine+0xa4>
    47fe:	f9 01       	movw	r30, r18
    4800:	e6 1b       	sub	r30, r22
    4802:	f7 0b       	sbc	r31, r23
u8g2_DrawHVLine():
    4804:	ec 01       	movw	r28, r24
    4806:	ae a9       	ldd	r26, Y+54	; 0x36
    4808:	bf a9       	ldd	r27, Y+55	; 0x37
    480a:	14 96       	adiw	r26, 0x04	; 4
    480c:	0d 90       	ld	r0, X+
    480e:	bc 91       	ld	r27, X
    4810:	a0 2d       	mov	r26, r0
    4812:	9f 01       	movw	r18, r30
    4814:	fd 01       	movw	r30, r26
    4816:	09 95       	icall
    4818:	0c c0       	rjmp	.+24     	; 0x4832 <u8g2_DrawHVLine+0xd6>
    481a:	03 30       	cpi	r16, 0x03	; 3
    481c:	09 f0       	breq	.+2      	; 0x4820 <u8g2_DrawHVLine+0xc4>
    481e:	b7 cf       	rjmp	.-146    	; 0x478e <u8g2_DrawHVLine+0x32>
    4820:	4f 5f       	subi	r20, 0xFF	; 255
    4822:	5f 4f       	sbci	r21, 0xFF	; 255
    4824:	42 1b       	sub	r20, r18
    4826:	53 0b       	sbc	r21, r19
    4828:	b2 cf       	rjmp	.-156    	; 0x478e <u8g2_DrawHVLine+0x32>
    482a:	bd 01       	movw	r22, r26
u8g2_clip_intersection2():
    482c:	6e 17       	cp	r22, r30
    482e:	7f 07       	cpc	r23, r31
    4830:	e0 f2       	brcs	.-72     	; 0x47ea <u8g2_DrawHVLine+0x8e>
u8g2_DrawHVLine():
    4832:	df 91       	pop	r29
    4834:	cf 91       	pop	r28
    4836:	0f 91       	pop	r16
    4838:	08 95       	ret
    483a:	fc 01       	movw	r30, r24
    483c:	e6 5b       	subi	r30, 0xB6	; 182
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	01 90       	ld	r0, Z+
    4842:	f0 81       	ld	r31, Z
    4844:	e0 2d       	mov	r30, r0
    4846:	6e 17       	cp	r22, r30
    4848:	7f 07       	cpc	r23, r31
    484a:	98 f3       	brcs	.-26     	; 0x4832 <u8g2_DrawHVLine+0xd6>
    484c:	fc 01       	movw	r30, r24
    484e:	e4 5b       	subi	r30, 0xB4	; 180
    4850:	ff 4f       	sbci	r31, 0xFF	; 255
    4852:	01 90       	ld	r0, Z+
    4854:	f0 81       	ld	r31, Z
    4856:	e0 2d       	mov	r30, r0
    4858:	6e 17       	cp	r22, r30
    485a:	7f 07       	cpc	r23, r31
    485c:	50 f7       	brcc	.-44     	; 0x4832 <u8g2_DrawHVLine+0xd6>
    485e:	fc 01       	movw	r30, r24
    4860:	e0 5b       	subi	r30, 0xB0	; 176
    4862:	ff 4f       	sbci	r31, 0xFF	; 255
    4864:	01 90       	ld	r0, Z+
    4866:	f0 81       	ld	r31, Z
    4868:	e0 2d       	mov	r30, r0
    486a:	dc 01       	movw	r26, r24
    486c:	a2 5b       	subi	r26, 0xB2	; 178
    486e:	bf 4f       	sbci	r27, 0xFF	; 255
    4870:	0d 90       	ld	r0, X+
    4872:	bc 91       	ld	r27, X
    4874:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    4876:	24 0f       	add	r18, r20
    4878:	35 1f       	adc	r19, r21
    487a:	24 17       	cp	r18, r20
    487c:	35 07       	cpc	r19, r21
    487e:	a8 f4       	brcc	.+42     	; 0x48aa <u8g2_DrawHVLine+0x14e>
    4880:	4e 17       	cp	r20, r30
    4882:	5f 07       	cpc	r21, r31
    4884:	88 f4       	brcc	.+34     	; 0x48a8 <u8g2_DrawHVLine+0x14c>
    4886:	9f 01       	movw	r18, r30
    4888:	21 50       	subi	r18, 0x01	; 1
    488a:	31 09       	sbc	r19, r1
    488c:	a2 17       	cp	r26, r18
    488e:	b3 07       	cpc	r27, r19
    4890:	80 f6       	brcc	.-96     	; 0x4832 <u8g2_DrawHVLine+0xd6>
    4892:	4a 17       	cp	r20, r26
    4894:	5b 07       	cpc	r21, r27
    4896:	08 f4       	brcc	.+2      	; 0x489a <u8g2_DrawHVLine+0x13e>
    4898:	ad 01       	movw	r20, r26
    489a:	2e 17       	cp	r18, r30
    489c:	3f 07       	cpc	r19, r31
    489e:	08 f4       	brcc	.+2      	; 0x48a2 <u8g2_DrawHVLine+0x146>
    48a0:	f9 01       	movw	r30, r18
    48a2:	e4 1b       	sub	r30, r20
    48a4:	f5 0b       	sbc	r31, r21
    48a6:	ae cf       	rjmp	.-164    	; 0x4804 <u8g2_DrawHVLine+0xa8>
u8g2_DrawHVLine():
    48a8:	ad 01       	movw	r20, r26
u8g2_clip_intersection2():
    48aa:	4e 17       	cp	r20, r30
    48ac:	5f 07       	cpc	r21, r31
    48ae:	08 f6       	brcc	.-126    	; 0x4832 <u8g2_DrawHVLine+0xd6>
    48b0:	ed cf       	rjmp	.-38     	; 0x488c <u8g2_DrawHVLine+0x130>

000048b2 <u8g2_DrawHLine>:
u8g2_DrawHLine():
    48b2:	0f 93       	push	r16
    48b4:	00 e0       	ldi	r16, 0x00	; 0
    48b6:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
    48ba:	0f 91       	pop	r16
    48bc:	08 95       	ret

000048be <u8g2_DrawPixel>:
u8g2_DrawPixel():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:222

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    48be:	0f 93       	push	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:224
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    48c0:	fc 01       	movw	r30, r24
    48c2:	e2 5b       	subi	r30, 0xB2	; 178
    48c4:	ff 4f       	sbci	r31, 0xFF	; 255
    48c6:	20 81       	ld	r18, Z
    48c8:	31 81       	ldd	r19, Z+1	; 0x01
    48ca:	42 17       	cp	r20, r18
    48cc:	53 07       	cpc	r21, r19
    48ce:	b8 f0       	brcs	.+46     	; 0x48fe <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:226
    return;
  if ( y >= u8g2->user_y1 )
    48d0:	32 96       	adiw	r30, 0x02	; 2
    48d2:	20 81       	ld	r18, Z
    48d4:	31 81       	ldd	r19, Z+1	; 0x01
    48d6:	42 17       	cp	r20, r18
    48d8:	53 07       	cpc	r21, r19
    48da:	88 f4       	brcc	.+34     	; 0x48fe <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:228
    return;
  if ( x < u8g2->user_x0 )
    48dc:	36 97       	sbiw	r30, 0x06	; 6
    48de:	20 81       	ld	r18, Z
    48e0:	31 81       	ldd	r19, Z+1	; 0x01
    48e2:	62 17       	cp	r22, r18
    48e4:	73 07       	cpc	r23, r19
    48e6:	58 f0       	brcs	.+22     	; 0x48fe <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:230
    return;
  if ( x >= u8g2->user_x1 )
    48e8:	32 96       	adiw	r30, 0x02	; 2
    48ea:	20 81       	ld	r18, Z
    48ec:	31 81       	ldd	r19, Z+1	; 0x01
    48ee:	62 17       	cp	r22, r18
    48f0:	73 07       	cpc	r23, r19
    48f2:	28 f4       	brcc	.+10     	; 0x48fe <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:233
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    48f4:	00 e0       	ldi	r16, 0x00	; 0
    48f6:	21 e0       	ldi	r18, 0x01	; 1
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	0e 94 ae 23 	call	0x475c	; 0x475c <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:234
}
    48fe:	0f 91       	pop	r16
    4900:	08 95       	ret

00004902 <u8g2_SetDrawColor>:
u8g2_SetDrawColor():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:250

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
    4902:	fc 01       	movw	r30, r24
    4904:	e6 57       	subi	r30, 0x76	; 118
    4906:	ff 4f       	sbci	r31, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:252
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    4908:	63 30       	cpi	r22, 0x03	; 3
    490a:	10 f4       	brcc	.+4      	; 0x4910 <u8g2_SetDrawColor+0xe>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:251
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    490c:	60 83       	st	Z, r22
    490e:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:253
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    4910:	81 e0       	ldi	r24, 0x01	; 1
    4912:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:254
}
    4914:	08 95       	ret

00004916 <u8g2_is_intersection_decision_tree>:
u8g2_is_intersection_decision_tree():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:125
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    4916:	46 17       	cp	r20, r22
    4918:	57 07       	cpc	r21, r23
    491a:	48 f4       	brcc	.+18     	; 0x492e <u8g2_is_intersection_decision_tree+0x18>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:127
  {
    if ( v1 > a0 )	// v1 >= a0
    491c:	82 17       	cp	r24, r18
    491e:	93 07       	cpc	r25, r19
    4920:	50 f0       	brcs	.+20     	; 0x4936 <u8g2_is_intersection_decision_tree+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:133
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	24 17       	cp	r18, r20
    4926:	35 07       	cpc	r19, r21
    4928:	38 f0       	brcs	.+14     	; 0x4938 <u8g2_is_intersection_decision_tree+0x22>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:158
	return 0;
      }
    }
    else
    {
      return 0;
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:145
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    492e:	82 17       	cp	r24, r18
    4930:	93 07       	cpc	r25, r19
    4932:	b8 f3       	brcs	.-18     	; 0x4922 <u8g2_is_intersection_decision_tree+0xc>
    4934:	fa cf       	rjmp	.-12     	; 0x492a <u8g2_is_intersection_decision_tree+0x14>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:129
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    4936:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:161
    else
    {
      return 0;
    }
  }
}
    4938:	08 95       	ret

0000493a <u8g2_IsIntersection>:
u8g2_IsIntersection():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:167



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    493a:	cf 92       	push	r12
    493c:	df 92       	push	r13
    493e:	ef 92       	push	r14
    4940:	ff 92       	push	r15
    4942:	0f 93       	push	r16
    4944:	1f 93       	push	r17
    4946:	cf 93       	push	r28
    4948:	df 93       	push	r29
    494a:	ec 01       	movw	r28, r24
    494c:	7b 01       	movw	r14, r22
    494e:	69 01       	movw	r12, r18
    4950:	98 01       	movw	r18, r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:168
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    4952:	fc 01       	movw	r30, r24
    4954:	e0 5b       	subi	r30, 0xB0	; 176
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	60 81       	ld	r22, Z
    495a:	71 81       	ldd	r23, Z+1	; 0x01
    495c:	32 97       	sbiw	r30, 0x02	; 2
    495e:	80 81       	ld	r24, Z
    4960:	91 81       	ldd	r25, Z+1	; 0x01
    4962:	0e 94 8b 24 	call	0x4916	; 0x4916 <u8g2_is_intersection_decision_tree>
    4966:	88 23       	and	r24, r24
    4968:	a9 f0       	breq	.+42     	; 0x4994 <u8g2_IsIntersection+0x5a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    496a:	fe 01       	movw	r30, r28
    496c:	e4 5b       	subi	r30, 0xB4	; 180
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	60 81       	ld	r22, Z
    4972:	71 81       	ldd	r23, Z+1	; 0x01
    4974:	c6 5b       	subi	r28, 0xB6	; 182
    4976:	df 4f       	sbci	r29, 0xFF	; 255
    4978:	96 01       	movw	r18, r12
    497a:	a7 01       	movw	r20, r14
    497c:	88 81       	ld	r24, Y
    497e:	99 81       	ldd	r25, Y+1	; 0x01
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    4980:	df 91       	pop	r29
    4982:	cf 91       	pop	r28
    4984:	1f 91       	pop	r17
    4986:	0f 91       	pop	r16
    4988:	ff 90       	pop	r15
    498a:	ef 90       	pop	r14
    498c:	df 90       	pop	r13
    498e:	cf 90       	pop	r12
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    4990:	0c 94 8b 24 	jmp	0x4916	; 0x4916 <u8g2_is_intersection_decision_tree>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    4994:	80 e0       	ldi	r24, 0x00	; 0
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	ff 90       	pop	r15
    49a0:	ef 90       	pop	r14
    49a2:	df 90       	pop	r13
    49a4:	cf 90       	pop	r12
    49a6:	08 95       	ret

000049a8 <u8g2_DrawLine>:
u8g2_DrawLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:40

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    49a8:	3f 92       	push	r3
    49aa:	4f 92       	push	r4
    49ac:	5f 92       	push	r5
    49ae:	6f 92       	push	r6
    49b0:	7f 92       	push	r7
    49b2:	8f 92       	push	r8
    49b4:	9f 92       	push	r9
    49b6:	af 92       	push	r10
    49b8:	bf 92       	push	r11
    49ba:	cf 92       	push	r12
    49bc:	df 92       	push	r13
    49be:	ef 92       	push	r14
    49c0:	ff 92       	push	r15
    49c2:	0f 93       	push	r16
    49c4:	1f 93       	push	r17
    49c6:	cf 93       	push	r28
    49c8:	df 93       	push	r29
    49ca:	2c 01       	movw	r4, r24
    49cc:	7b 01       	movw	r14, r22
    49ce:	6a 01       	movw	r12, r20
    49d0:	e9 01       	movw	r28, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:51

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    49d2:	5b 01       	movw	r10, r22
    49d4:	a2 1a       	sub	r10, r18
    49d6:	b3 0a       	sbc	r11, r19
    49d8:	26 17       	cp	r18, r22
    49da:	37 07       	cpc	r19, r23
    49dc:	18 f0       	brcs	.+6      	; 0x49e4 <u8g2_DrawLine+0x3c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:51 (discriminator 2)
    49de:	59 01       	movw	r10, r18
    49e0:	a6 1a       	sub	r10, r22
    49e2:	b7 0a       	sbc	r11, r23
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    49e4:	0c 15       	cp	r16, r12
    49e6:	1d 05       	cpc	r17, r13
    49e8:	60 f4       	brcc	.+24     	; 0x4a02 <u8g2_DrawLine+0x5a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52 (discriminator 1)
    49ea:	46 01       	movw	r8, r12
    49ec:	80 1a       	sub	r8, r16
    49ee:	91 0a       	sbc	r9, r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54 (discriminator 1)

  if ( dy > dx ) 
    49f0:	a8 14       	cp	r10, r8
    49f2:	b9 04       	cpc	r11, r9
    49f4:	38 f1       	brcs	.+78     	; 0x4a44 <u8g2_DrawLine+0x9c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:61
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    49f6:	ce 15       	cp	r28, r14
    49f8:	df 05       	cpc	r29, r15
    49fa:	08 f4       	brcc	.+2      	; 0x49fe <u8g2_DrawLine+0x56>
    49fc:	48 c0       	rjmp	.+144    	; 0x4a8e <u8g2_DrawLine+0xe6>
    49fe:	31 2c       	mov	r3, r1
    4a00:	18 c0       	rjmp	.+48     	; 0x4a32 <u8g2_DrawLine+0x8a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52 (discriminator 2)
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4a02:	48 01       	movw	r8, r16
    4a04:	8c 18       	sub	r8, r12
    4a06:	9d 08       	sbc	r9, r13
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54 (discriminator 2)

  if ( dy > dx ) 
    4a08:	a8 14       	cp	r10, r8
    4a0a:	b9 04       	cpc	r11, r9
    4a0c:	08 f0       	brcs	.+2      	; 0x4a10 <u8g2_DrawLine+0x68>
    4a0e:	65 c0       	rjmp	.+202    	; 0x4ada <u8g2_DrawLine+0x132>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54
    4a10:	9a 2d       	mov	r25, r10
    4a12:	8b 2d       	mov	r24, r11
    4a14:	54 01       	movw	r10, r8
    4a16:	89 2e       	mov	r8, r25
    4a18:	98 2e       	mov	r9, r24
    4a1a:	9c 2f       	mov	r25, r28
    4a1c:	8d 2f       	mov	r24, r29
    4a1e:	e8 01       	movw	r28, r16
    4a20:	09 2f       	mov	r16, r25
    4a22:	18 2f       	mov	r17, r24
    4a24:	9e 2d       	mov	r25, r14
    4a26:	8f 2d       	mov	r24, r15
    4a28:	76 01       	movw	r14, r12
    4a2a:	c9 2e       	mov	r12, r25
    4a2c:	d8 2e       	mov	r13, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:56
  {
    swapxy = 1;
    4a2e:	33 24       	eor	r3, r3
    4a30:	33 94       	inc	r3
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4a32:	35 01       	movw	r6, r10
    4a34:	76 94       	lsr	r7
    4a36:	67 94       	ror	r6
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:67
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4a38:	c0 16       	cp	r12, r16
    4a3a:	d1 06       	cpc	r13, r17
    4a3c:	90 f1       	brcs	.+100    	; 0x4aa2 <u8g2_DrawLine+0xfa>
    4a3e:	0f ef       	ldi	r16, 0xFF	; 255
    4a40:	1f ef       	ldi	r17, 0xFF	; 255
    4a42:	31 c0       	rjmp	.+98     	; 0x4aa6 <u8g2_DrawLine+0xfe>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    4a44:	9a 2d       	mov	r25, r10
    4a46:	8b 2d       	mov	r24, r11
    4a48:	54 01       	movw	r10, r8
    4a4a:	89 2e       	mov	r8, r25
    4a4c:	98 2e       	mov	r9, r24
    4a4e:	9c 2d       	mov	r25, r12
    4a50:	8d 2d       	mov	r24, r13
    4a52:	6e 01       	movw	r12, r28
    4a54:	c9 2f       	mov	r28, r25
    4a56:	d8 2f       	mov	r29, r24
    4a58:	9e 2d       	mov	r25, r14
    4a5a:	8f 2d       	mov	r24, r15
    4a5c:	78 01       	movw	r14, r16
    4a5e:	09 2f       	mov	r16, r25
    4a60:	18 2f       	mov	r17, r24
    4a62:	e5 cf       	rjmp	.-54     	; 0x4a2e <u8g2_DrawLine+0x86>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:81
#endif

  for( x = x1; x <= x2; x++ )
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    4a64:	a6 01       	movw	r20, r12
    4a66:	b7 01       	movw	r22, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:80
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
  {
    if ( swapxy == 0 ) 
    4a68:	33 20       	and	r3, r3
    4a6a:	11 f0       	breq	.+4      	; 0x4a70 <u8g2_DrawLine+0xc8>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:83
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    4a6c:	a7 01       	movw	r20, r14
    4a6e:	b6 01       	movw	r22, r12
    4a70:	c2 01       	movw	r24, r4
    4a72:	0e 94 5f 24 	call	0x48be	; 0x48be <u8g2_DrawPixel>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:84
    err -= (u8g2_uint_t)dy;
    4a76:	68 18       	sub	r6, r8
    4a78:	79 08       	sbc	r7, r9
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:85
    if ( err < 0 ) 
    4a7a:	77 fe       	sbrs	r7, 7
    4a7c:	04 c0       	rjmp	.+8      	; 0x4a86 <u8g2_DrawLine+0xde>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:87
    {
      y += (u8g2_uint_t)ystep;
    4a7e:	c0 0e       	add	r12, r16
    4a80:	d1 1e       	adc	r13, r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:88
      err += (u8g2_uint_t)dx;
    4a82:	6a 0c       	add	r6, r10
    4a84:	7b 1c       	adc	r7, r11
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:78 (discriminator 2)
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    4a86:	8f ef       	ldi	r24, 0xFF	; 255
    4a88:	e8 1a       	sub	r14, r24
    4a8a:	f8 0a       	sbc	r15, r24
    4a8c:	11 c0       	rjmp	.+34     	; 0x4ab0 <u8g2_DrawLine+0x108>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4a8e:	35 01       	movw	r6, r10
    4a90:	76 94       	lsr	r7
    4a92:	67 94       	ror	r6
    4a94:	68 01       	movw	r12, r16
    4a96:	9e 2d       	mov	r25, r14
    4a98:	8f 2d       	mov	r24, r15
    4a9a:	7e 01       	movw	r14, r28
    4a9c:	c9 2f       	mov	r28, r25
    4a9e:	d8 2f       	mov	r29, r24
    4aa0:	31 2c       	mov	r3, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:67
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4aa2:	01 e0       	ldi	r16, 0x01	; 1
    4aa4:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:74

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
    4aa6:	cf 3f       	cpi	r28, 0xFF	; 255
    4aa8:	dc 07       	cpc	r29, r28
    4aaa:	11 f4       	brne	.+4      	; 0x4ab0 <u8g2_DrawLine+0x108>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:75
    x2--;
    4aac:	ce ef       	ldi	r28, 0xFE	; 254
    4aae:	df ef       	ldi	r29, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:78 (discriminator 1)
#endif

  for( x = x1; x <= x2; x++ )
    4ab0:	ce 15       	cp	r28, r14
    4ab2:	df 05       	cpc	r29, r15
    4ab4:	b8 f6       	brcc	.-82     	; 0x4a64 <u8g2_DrawLine+0xbc>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:91
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    4ab6:	df 91       	pop	r29
    4ab8:	cf 91       	pop	r28
    4aba:	1f 91       	pop	r17
    4abc:	0f 91       	pop	r16
    4abe:	ff 90       	pop	r15
    4ac0:	ef 90       	pop	r14
    4ac2:	df 90       	pop	r13
    4ac4:	cf 90       	pop	r12
    4ac6:	bf 90       	pop	r11
    4ac8:	af 90       	pop	r10
    4aca:	9f 90       	pop	r9
    4acc:	8f 90       	pop	r8
    4ace:	7f 90       	pop	r7
    4ad0:	6f 90       	pop	r6
    4ad2:	5f 90       	pop	r5
    4ad4:	4f 90       	pop	r4
    4ad6:	3f 90       	pop	r3
    4ad8:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:61
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4ada:	ce 15       	cp	r28, r14
    4adc:	df 05       	cpc	r29, r15
    4ade:	08 f0       	brcs	.+2      	; 0x4ae2 <u8g2_DrawLine+0x13a>
    4ae0:	8e cf       	rjmp	.-228    	; 0x49fe <u8g2_DrawLine+0x56>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4ae2:	35 01       	movw	r6, r10
    4ae4:	76 94       	lsr	r7
    4ae6:	67 94       	ror	r6
    4ae8:	68 01       	movw	r12, r16
    4aea:	9e 2d       	mov	r25, r14
    4aec:	8f 2d       	mov	r24, r15
    4aee:	7e 01       	movw	r14, r28
    4af0:	c9 2f       	mov	r28, r25
    4af2:	d8 2f       	mov	r29, r24
    4af4:	31 2c       	mov	r3, r1
    4af6:	a3 cf       	rjmp	.-186    	; 0x4a3e <u8g2_DrawLine+0x96>

00004af8 <u8g2_ll_hvline_vertical_top_lsb>:
u8g2_ll_hvline_vertical_top_lsb():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:73
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    4af8:	af 92       	push	r10
    4afa:	bf 92       	push	r11
    4afc:	cf 92       	push	r12
    4afe:	df 92       	push	r13
    4b00:	ef 92       	push	r14
    4b02:	ff 92       	push	r15
    4b04:	0f 93       	push	r16
    4b06:	cf 93       	push	r28
    4b08:	df 93       	push	r29
    4b0a:	ec 01       	movw	r28, r24
    4b0c:	da 01       	movw	r26, r20
    4b0e:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:89
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    4b10:	94 2f       	mov	r25, r20
    4b12:	97 70       	andi	r25, 0x07	; 7
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:91
  mask = 1;
  mask <<= bit_pos;
    4b14:	e1 e0       	ldi	r30, 0x01	; 1
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	9f 01       	movw	r18, r30
    4b1a:	09 2e       	mov	r0, r25
    4b1c:	01 c0       	rjmp	.+2      	; 0x4b20 <u8g2_ll_hvline_vertical_top_lsb+0x28>
    4b1e:	22 0f       	add	r18, r18
    4b20:	0a 94       	dec	r0
    4b22:	ea f7       	brpl	.-6      	; 0x4b1e <u8g2_ll_hvline_vertical_top_lsb+0x26>
    4b24:	52 2f       	mov	r21, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4b26:	6e 01       	movw	r12, r28
    4b28:	8a e8       	ldi	r24, 0x8A	; 138
    4b2a:	c8 0e       	add	r12, r24
    4b2c:	d1 1c       	adc	r13, r1
    4b2e:	f6 01       	movw	r30, r12
    4b30:	80 81       	ld	r24, Z
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:93
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    4b32:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4b34:	82 30       	cpi	r24, 0x02	; 2
    4b36:	18 f4       	brcc	.+6      	; 0x4b3e <u8g2_ll_hvline_vertical_top_lsb+0x46>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:96
    or_mask  = mask;
    4b38:	42 2f       	mov	r20, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:97
  if ( u8g2->draw_color != 1 )
    4b3a:	81 30       	cpi	r24, 0x01	; 1
    4b3c:	49 f1       	breq	.+82     	; 0x4b90 <u8g2_ll_hvline_vertical_top_lsb+0x98>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:102
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    4b3e:	5d 01       	movw	r10, r26
    4b40:	f8 ef       	ldi	r31, 0xF8	; 248
    4b42:	af 22       	and	r10, r31
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:104
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    4b44:	e8 ad       	ldd	r30, Y+56	; 0x38
    4b46:	f9 ad       	ldd	r31, Y+57	; 0x39
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:103
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    4b48:	28 81       	ld	r18, Y
    4b4a:	39 81       	ldd	r19, Y+1	; 0x01
    4b4c:	d9 01       	movw	r26, r18
    4b4e:	50 96       	adiw	r26, 0x10	; 16
    4b50:	8c 91       	ld	r24, X
    4b52:	8a 9d       	mul	r24, r10
    4b54:	90 01       	movw	r18, r0
    4b56:	8b 9d       	mul	r24, r11
    4b58:	30 0d       	add	r19, r0
    4b5a:	11 24       	eor	r1, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:106
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    4b5c:	62 0f       	add	r22, r18
    4b5e:	73 1f       	adc	r23, r19
    4b60:	df 01       	movw	r26, r30
    4b62:	a6 0f       	add	r26, r22
    4b64:	b7 1f       	adc	r27, r23
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:108
  
  if ( dir == 0 )
    4b66:	01 11       	cpse	r16, r1
    4b68:	1a c0       	rjmp	.+52     	; 0x4b9e <u8g2_ll_hvline_vertical_top_lsb+0xa6>
    4b6a:	ea 0e       	add	r14, r26
    4b6c:	fb 1e       	adc	r15, r27
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:115 (discriminator 1)
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    4b6e:	8c 91       	ld	r24, X
    4b70:	84 2b       	or	r24, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:116 (discriminator 1)
	*ptr ^= xor_mask;
    4b72:	85 27       	eor	r24, r21
    4b74:	8d 93       	st	X+, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:119 (discriminator 1)
	ptr++;
	len--;
      } while( len != 0 );
    4b76:	ea 16       	cp	r14, r26
    4b78:	fb 06       	cpc	r15, r27
    4b7a:	c9 f7       	brne	.-14     	; 0x4b6e <u8g2_ll_hvline_vertical_top_lsb+0x76>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:152
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    4b7c:	df 91       	pop	r29
    4b7e:	cf 91       	pop	r28
    4b80:	0f 91       	pop	r16
    4b82:	ff 90       	pop	r15
    4b84:	ef 90       	pop	r14
    4b86:	df 90       	pop	r13
    4b88:	cf 90       	pop	r12
    4b8a:	bf 90       	pop	r11
    4b8c:	af 90       	pop	r10
    4b8e:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:94
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    4b90:	50 e0       	ldi	r21, 0x00	; 0
    4b92:	d5 cf       	rjmp	.-86     	; 0x4b3e <u8g2_ll_hvline_vertical_top_lsb+0x46>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:147
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    4b94:	44 0f       	add	r20, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:148
	xor_mask <<= 1;
    4b96:	55 0f       	add	r21, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:150
      }
    } while( len != 0 );
    4b98:	e1 14       	cp	r14, r1
    4b9a:	f1 04       	cpc	r15, r1
    4b9c:	79 f3       	breq	.-34     	; 0x4b7c <u8g2_ll_hvline_vertical_top_lsb+0x84>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:128
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    4b9e:	3c 91       	ld	r19, X
    4ba0:	34 2b       	or	r19, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:129
      *ptr ^= xor_mask;
    4ba2:	35 27       	eor	r19, r21
    4ba4:	3c 93       	st	X, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:131
      
      bit_pos++;
    4ba6:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:132
      bit_pos &= 7;
    4ba8:	97 70       	andi	r25, 0x07	; 7
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:134

      len--;
    4baa:	e1 e0       	ldi	r30, 0x01	; 1
    4bac:	ee 1a       	sub	r14, r30
    4bae:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:136

      if ( bit_pos == 0 )
    4bb0:	91 11       	cpse	r25, r1
    4bb2:	f0 cf       	rjmp	.-32     	; 0x4b94 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:138
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    4bb4:	2c ad       	ldd	r18, Y+60	; 0x3c
    4bb6:	3d ad       	ldd	r19, Y+61	; 0x3d
    4bb8:	a2 0f       	add	r26, r18
    4bba:	b3 1f       	adc	r27, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:140
		
	if ( u8g2->draw_color <= 1 )
    4bbc:	f6 01       	movw	r30, r12
    4bbe:	80 81       	ld	r24, Z
    4bc0:	82 30       	cpi	r24, 0x02	; 2
    4bc2:	28 f4       	brcc	.+10     	; 0x4bce <u8g2_ll_hvline_vertical_top_lsb+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:142
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    4bc4:	81 30       	cpi	r24, 0x01	; 1
    4bc6:	09 f0       	breq	.+2      	; 0x4bca <u8g2_ll_hvline_vertical_top_lsb+0xd2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	  xor_mask = 1;
    4bc8:	51 e0       	ldi	r21, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:141
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    4bca:	41 e0       	ldi	r20, 0x01	; 1
    4bcc:	e5 cf       	rjmp	.-54     	; 0x4b98 <u8g2_ll_hvline_vertical_top_lsb+0xa0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    4bce:	51 e0       	ldi	r21, 0x01	; 1
    4bd0:	e3 cf       	rjmp	.-58     	; 0x4b98 <u8g2_ll_hvline_vertical_top_lsb+0xa0>

00004bd2 <u8g2_update_dimension_common>:
u8g2_update_dimension_common():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:62
{
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
    4bd2:	cf 93       	push	r28
    4bd4:	df 93       	push	r29
    4bd6:	fc 01       	movw	r30, r24
    4bd8:	a0 81       	ld	r26, Z
    4bda:	b1 81       	ldd	r27, Z+1	; 0x01
    4bdc:	82 ad       	ldd	r24, Z+58	; 0x3a
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	9c 01       	movw	r18, r24
    4be2:	43 e0       	ldi	r20, 0x03	; 3
    4be4:	22 0f       	add	r18, r18
    4be6:	33 1f       	adc	r19, r19
    4be8:	4a 95       	dec	r20
    4bea:	e1 f7       	brne	.-8      	; 0x4be4 <u8g2_update_dimension_common+0x12>
    4bec:	37 af       	std	Z+63, r19	; 0x3f
    4bee:	26 af       	std	Z+62, r18	; 0x3e
    4bf0:	50 96       	adiw	r26, 0x10	; 16
    4bf2:	2c 91       	ld	r18, X
    4bf4:	50 97       	sbiw	r26, 0x10	; 16
    4bf6:	48 e0       	ldi	r20, 0x08	; 8
    4bf8:	24 9f       	mul	r18, r20
    4bfa:	90 01       	movw	r18, r0
    4bfc:	11 24       	eor	r1, r1
    4bfe:	35 af       	std	Z+61, r19	; 0x3d
    4c00:	24 af       	std	Z+60, r18	; 0x3c
    4c02:	23 ad       	ldd	r18, Z+59	; 0x3b
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	b9 01       	movw	r22, r18
    4c08:	53 e0       	ldi	r21, 0x03	; 3
    4c0a:	66 0f       	add	r22, r22
    4c0c:	77 1f       	adc	r23, r23
    4c0e:	5a 95       	dec	r21
    4c10:	e1 f7       	brne	.-8      	; 0x4c0a <u8g2_update_dimension_common+0x38>
    4c12:	ef 01       	movw	r28, r30
    4c14:	c0 5c       	subi	r28, 0xC0	; 192
    4c16:	df 4f       	sbci	r29, 0xFF	; 255
    4c18:	79 83       	std	Y+1, r23	; 0x01
    4c1a:	68 83       	st	Y, r22
    4c1c:	51 96       	adiw	r26, 0x11	; 17
    4c1e:	4c 91       	ld	r20, X
    4c20:	51 97       	sbiw	r26, 0x11	; 17
    4c22:	e9 01       	movw	r28, r18
    4c24:	c8 0f       	add	r28, r24
    4c26:	d9 1f       	adc	r29, r25
    4c28:	50 e0       	ldi	r21, 0x00	; 0
    4c2a:	4c 17       	cp	r20, r28
    4c2c:	5d 07       	cpc	r21, r29
    4c2e:	18 f4       	brcc	.+6      	; 0x4c36 <u8g2_update_dimension_common+0x64>
    4c30:	ca 01       	movw	r24, r20
    4c32:	82 1b       	sub	r24, r18
    4c34:	93 0b       	sbc	r25, r19
    4c36:	ef 01       	movw	r28, r30
    4c38:	ce 5b       	subi	r28, 0xBE	; 190
    4c3a:	df 4f       	sbci	r29, 0xFF	; 255
    4c3c:	79 83       	std	Y+1, r23	; 0x01
    4c3e:	68 83       	st	Y, r22
    4c40:	22 96       	adiw	r28, 0x02	; 2
    4c42:	23 e0       	ldi	r18, 0x03	; 3
    4c44:	88 0f       	add	r24, r24
    4c46:	99 1f       	adc	r25, r25
    4c48:	2a 95       	dec	r18
    4c4a:	e1 f7       	brne	.-8      	; 0x4c44 <u8g2_update_dimension_common+0x72>
    4c4c:	86 0f       	add	r24, r22
    4c4e:	97 1f       	adc	r25, r23
    4c50:	99 83       	std	Y+1, r25	; 0x01
    4c52:	88 83       	st	Y, r24
    4c54:	22 96       	adiw	r28, 0x02	; 2
    4c56:	54 96       	adiw	r26, 0x14	; 20
    4c58:	8d 91       	ld	r24, X+
    4c5a:	9c 91       	ld	r25, X
    4c5c:	55 97       	sbiw	r26, 0x15	; 21
    4c5e:	99 83       	std	Y+1, r25	; 0x01
    4c60:	88 83       	st	Y, r24
    4c62:	e8 5b       	subi	r30, 0xB8	; 184
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	56 96       	adiw	r26, 0x16	; 22
    4c68:	8d 91       	ld	r24, X+
    4c6a:	9c 91       	ld	r25, X
    4c6c:	91 83       	std	Z+1, r25	; 0x01
    4c6e:	80 83       	st	Z, r24
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	08 95       	ret

00004c76 <u8g2_update_dimension_r0>:
u8g2_update_dimension_r0():
    4c76:	0c 94 e9 25 	jmp	0x4bd2	; 0x4bd2 <u8g2_update_dimension_common>

00004c7a <u8g2_draw_l90_r0>:
u8g2_draw_l90_r0():
    4c7a:	0f 93       	push	r16
    4c7c:	0e 94 9e 23 	call	0x473c	; 0x473c <u8g2_draw_hv_line_2dir>
    4c80:	0f 91       	pop	r16
    4c82:	08 95       	ret

00004c84 <u8g2_apply_clip_window>:
u8g2_apply_clip_window():
    4c84:	8f 92       	push	r8
    4c86:	9f 92       	push	r9
    4c88:	af 92       	push	r10
    4c8a:	bf 92       	push	r11
    4c8c:	cf 92       	push	r12
    4c8e:	df 92       	push	r13
    4c90:	ef 92       	push	r14
    4c92:	ff 92       	push	r15
    4c94:	0f 93       	push	r16
    4c96:	1f 93       	push	r17
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	ec 01       	movw	r28, r24
    4c9e:	7c 01       	movw	r14, r24
    4ca0:	88 e5       	ldi	r24, 0x58	; 88
    4ca2:	e8 0e       	add	r14, r24
    4ca4:	f1 1c       	adc	r15, r1
    4ca6:	f7 01       	movw	r30, r14
    4ca8:	00 81       	ld	r16, Z
    4caa:	11 81       	ldd	r17, Z+1	; 0x01
    4cac:	5e 01       	movw	r10, r28
    4cae:	f4 e5       	ldi	r31, 0x54	; 84
    4cb0:	af 0e       	add	r10, r31
    4cb2:	b1 1c       	adc	r11, r1
    4cb4:	f5 01       	movw	r30, r10
    4cb6:	20 81       	ld	r18, Z
    4cb8:	31 81       	ldd	r19, Z+1	; 0x01
    4cba:	6e 01       	movw	r12, r28
    4cbc:	f6 e5       	ldi	r31, 0x56	; 86
    4cbe:	cf 0e       	add	r12, r31
    4cc0:	d1 1c       	adc	r13, r1
    4cc2:	f6 01       	movw	r30, r12
    4cc4:	40 81       	ld	r20, Z
    4cc6:	51 81       	ldd	r21, Z+1	; 0x01
    4cc8:	4e 01       	movw	r8, r28
    4cca:	f2 e5       	ldi	r31, 0x52	; 82
    4ccc:	8f 0e       	add	r8, r31
    4cce:	91 1c       	adc	r9, r1
    4cd0:	f4 01       	movw	r30, r8
    4cd2:	60 81       	ld	r22, Z
    4cd4:	71 81       	ldd	r23, Z+1	; 0x01
    4cd6:	ce 01       	movw	r24, r28
    4cd8:	0e 94 9d 24 	call	0x493a	; 0x493a <u8g2_IsIntersection>
    4cdc:	fe 01       	movw	r30, r28
    4cde:	ec 57       	subi	r30, 0x7C	; 124
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	81 11       	cpse	r24, r1
    4ce4:	0e c0       	rjmp	.+28     	; 0x4d02 <u8g2_apply_clip_window+0x7e>
    4ce6:	10 82       	st	Z, r1
    4ce8:	df 91       	pop	r29
    4cea:	cf 91       	pop	r28
    4cec:	1f 91       	pop	r17
    4cee:	0f 91       	pop	r16
    4cf0:	ff 90       	pop	r15
    4cf2:	ef 90       	pop	r14
    4cf4:	df 90       	pop	r13
    4cf6:	cf 90       	pop	r12
    4cf8:	bf 90       	pop	r11
    4cfa:	af 90       	pop	r10
    4cfc:	9f 90       	pop	r9
    4cfe:	8f 90       	pop	r8
    4d00:	08 95       	ret
    4d02:	81 e0       	ldi	r24, 0x01	; 1
    4d04:	80 83       	st	Z, r24
    4d06:	f4 01       	movw	r30, r8
    4d08:	80 81       	ld	r24, Z
    4d0a:	91 81       	ldd	r25, Z+1	; 0x01
    4d0c:	fe 01       	movw	r30, r28
    4d0e:	e6 5b       	subi	r30, 0xB6	; 182
    4d10:	ff 4f       	sbci	r31, 0xFF	; 255
    4d12:	20 81       	ld	r18, Z
    4d14:	31 81       	ldd	r19, Z+1	; 0x01
    4d16:	28 17       	cp	r18, r24
    4d18:	39 07       	cpc	r19, r25
    4d1a:	10 f4       	brcc	.+4      	; 0x4d20 <u8g2_apply_clip_window+0x9c>
    4d1c:	91 83       	std	Z+1, r25	; 0x01
    4d1e:	80 83       	st	Z, r24
    4d20:	f5 01       	movw	r30, r10
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	fe 01       	movw	r30, r28
    4d28:	e4 5b       	subi	r30, 0xB4	; 180
    4d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d2c:	20 81       	ld	r18, Z
    4d2e:	31 81       	ldd	r19, Z+1	; 0x01
    4d30:	82 17       	cp	r24, r18
    4d32:	93 07       	cpc	r25, r19
    4d34:	10 f4       	brcc	.+4      	; 0x4d3a <u8g2_apply_clip_window+0xb6>
    4d36:	91 83       	std	Z+1, r25	; 0x01
    4d38:	80 83       	st	Z, r24
    4d3a:	f6 01       	movw	r30, r12
    4d3c:	80 81       	ld	r24, Z
    4d3e:	91 81       	ldd	r25, Z+1	; 0x01
    4d40:	fe 01       	movw	r30, r28
    4d42:	e2 5b       	subi	r30, 0xB2	; 178
    4d44:	ff 4f       	sbci	r31, 0xFF	; 255
    4d46:	20 81       	ld	r18, Z
    4d48:	31 81       	ldd	r19, Z+1	; 0x01
    4d4a:	28 17       	cp	r18, r24
    4d4c:	39 07       	cpc	r19, r25
    4d4e:	10 f4       	brcc	.+4      	; 0x4d54 <u8g2_apply_clip_window+0xd0>
    4d50:	91 83       	std	Z+1, r25	; 0x01
    4d52:	80 83       	st	Z, r24
    4d54:	f7 01       	movw	r30, r14
    4d56:	80 81       	ld	r24, Z
    4d58:	91 81       	ldd	r25, Z+1	; 0x01
    4d5a:	c0 5b       	subi	r28, 0xB0	; 176
    4d5c:	df 4f       	sbci	r29, 0xFF	; 255
    4d5e:	28 81       	ld	r18, Y
    4d60:	39 81       	ldd	r19, Y+1	; 0x01
    4d62:	82 17       	cp	r24, r18
    4d64:	93 07       	cpc	r25, r19
    4d66:	08 f0       	brcs	.+2      	; 0x4d6a <u8g2_apply_clip_window+0xe6>
    4d68:	bf cf       	rjmp	.-130    	; 0x4ce8 <u8g2_apply_clip_window+0x64>
    4d6a:	99 83       	std	Y+1, r25	; 0x01
    4d6c:	88 83       	st	Y, r24
    4d6e:	bc cf       	rjmp	.-136    	; 0x4ce8 <u8g2_apply_clip_window+0x64>

00004d70 <u8g2_update_page_win_r0>:
u8g2_update_page_win_r0():
    4d70:	fc 01       	movw	r30, r24
    4d72:	e6 5b       	subi	r30, 0xB6	; 182
    4d74:	ff 4f       	sbci	r31, 0xFF	; 255
    4d76:	11 82       	std	Z+1, r1	; 0x01
    4d78:	10 82       	st	Z, r1
    4d7a:	32 96       	adiw	r30, 0x02	; 2
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	aa 5b       	subi	r26, 0xBA	; 186
    4d80:	bf 4f       	sbci	r27, 0xFF	; 255
    4d82:	2d 91       	ld	r18, X+
    4d84:	3c 91       	ld	r19, X
    4d86:	11 97       	sbiw	r26, 0x01	; 1
    4d88:	31 83       	std	Z+1, r19	; 0x01
    4d8a:	20 83       	st	Z, r18
    4d8c:	32 96       	adiw	r30, 0x02	; 2
    4d8e:	14 97       	sbiw	r26, 0x04	; 4
    4d90:	2d 91       	ld	r18, X+
    4d92:	3c 91       	ld	r19, X
    4d94:	11 97       	sbiw	r26, 0x01	; 1
    4d96:	31 83       	std	Z+1, r19	; 0x01
    4d98:	20 83       	st	Z, r18
    4d9a:	32 96       	adiw	r30, 0x02	; 2
    4d9c:	12 96       	adiw	r26, 0x02	; 2
    4d9e:	2d 91       	ld	r18, X+
    4da0:	3c 91       	ld	r19, X
    4da2:	31 83       	std	Z+1, r19	; 0x01
    4da4:	20 83       	st	Z, r18
    4da6:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <u8g2_apply_clip_window>

00004daa <u8g2_SetMaxClipWindow>:
u8g2_SetMaxClipWindow():
    4daa:	fc 01       	movw	r30, r24
    4dac:	ee 5a       	subi	r30, 0xAE	; 174
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	11 82       	std	Z+1, r1	; 0x01
    4db2:	10 82       	st	Z, r1
    4db4:	34 96       	adiw	r30, 0x04	; 4
    4db6:	11 82       	std	Z+1, r1	; 0x01
    4db8:	10 82       	st	Z, r1
    4dba:	32 97       	sbiw	r30, 0x02	; 2
    4dbc:	2f ef       	ldi	r18, 0xFF	; 255
    4dbe:	3f ef       	ldi	r19, 0xFF	; 255
    4dc0:	31 83       	std	Z+1, r19	; 0x01
    4dc2:	20 83       	st	Z, r18
    4dc4:	34 96       	adiw	r30, 0x04	; 4
    4dc6:	31 83       	std	Z+1, r19	; 0x01
    4dc8:	20 83       	st	Z, r18
    4dca:	dc 01       	movw	r26, r24
    4dcc:	d6 96       	adiw	r26, 0x36	; 54
    4dce:	ed 91       	ld	r30, X+
    4dd0:	fc 91       	ld	r31, X
    4dd2:	02 80       	ldd	r0, Z+2	; 0x02
    4dd4:	f3 81       	ldd	r31, Z+3	; 0x03
    4dd6:	e0 2d       	mov	r30, r0
    4dd8:	09 94       	ijmp

00004dda <u8g2_SetupBuffer>:
u8g2_SetupBuffer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:72
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    4dda:	0f 93       	push	r16
    4ddc:	1f 93       	push	r17
    4dde:	cf 93       	push	r28
    4de0:	df 93       	push	r29
    4de2:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:73
  u8g2->font = NULL;
    4de4:	fc 01       	movw	r30, r24
    4de6:	e6 5a       	subi	r30, 0xA6	; 166
    4de8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dea:	11 82       	std	Z+1, r1	; 0x01
    4dec:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:78
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    4dee:	3d ab       	std	Y+53, r19	; 0x35
    4df0:	2c ab       	std	Y+52, r18	; 0x34
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:80
  
  u8g2->tile_buf_ptr = buf;
    4df2:	79 af       	std	Y+57, r23	; 0x39
    4df4:	68 af       	std	Y+56, r22	; 0x38
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:81
  u8g2->tile_buf_height = tile_buf_height;
    4df6:	4a af       	std	Y+58, r20	; 0x3a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:83
  
  u8g2->tile_curr_row = 0;
    4df8:	1b ae       	std	Y+59, r1	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:85
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    4dfa:	3f 96       	adiw	r30, 0x0f	; 15
    4dfc:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:86
  u8g2->bitmap_transparency = 0;
    4dfe:	b0 96       	adiw	r30, 0x20	; 32
    4e00:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:88
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    4e02:	34 97       	sbiw	r30, 0x04	; 4
    4e04:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:89
  u8g2->draw_color = 1;
    4e06:	35 96       	adiw	r30, 0x05	; 5
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:90
  u8g2->is_auto_page_clear = 1;
    4e0c:	31 96       	adiw	r30, 0x01	; 1
    4e0e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:92
  
  u8g2->cb = u8g2_cb;
    4e10:	1f ab       	std	Y+55, r17	; 0x37
    4e12:	0e ab       	std	Y+54, r16	; 0x36
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:93
  u8g2->cb->update_dimension(u8g2);
    4e14:	d8 01       	movw	r26, r16
    4e16:	ed 91       	ld	r30, X+
    4e18:	fc 91       	ld	r31, X
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:95
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    4e1e:	ce 01       	movw	r24, r28
    4e20:	0e 94 d5 26 	call	0x4daa	; 0x4daa <u8g2_SetMaxClipWindow>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:100
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    4e24:	ce 01       	movw	r24, r28
    4e26:	0e 94 7d 23 	call	0x46fa	; 0x46fa <u8g2_SetFontPosBaseline>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:103
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    4e2a:	c4 59       	subi	r28, 0x94	; 148
    4e2c:	df 4f       	sbci	r29, 0xFF	; 255
    4e2e:	18 82       	st	Y, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:105
#endif
}
    4e30:	df 91       	pop	r29
    4e32:	cf 91       	pop	r28
    4e34:	1f 91       	pop	r17
    4e36:	0f 91       	pop	r16
    4e38:	08 95       	ret

00004e3a <u8x8_ascii_next>:
u8x8_ascii_next():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:459
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    4e3a:	66 23       	and	r22, r22
    4e3c:	29 f0       	breq	.+10     	; 0x4e48 <u8x8_ascii_next+0xe>
    4e3e:	6a 30       	cpi	r22, 0x0A	; 10
    4e40:	19 f0       	breq	.+6      	; 0x4e48 <u8x8_ascii_next+0xe>
    4e42:	86 2f       	mov	r24, r22
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	08 95       	ret
    4e48:	8f ef       	ldi	r24, 0xFF	; 255
    4e4a:	9f ef       	ldi	r25, 0xFF	; 255
    4e4c:	08 95       	ret

00004e4e <u8x8_utf8_init>:
u8x8_utf8_init():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    4e4e:	fc 01       	movw	r30, r24
    4e50:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:288
}
    4e52:	08 95       	ret

00004e54 <u8x8_byte_SendBytes>:
u8x8_byte_SendBytes():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:45
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    4e54:	9a 01       	movw	r18, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:46
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    4e56:	dc 01       	movw	r26, r24
    4e58:	18 96       	adiw	r26, 0x08	; 8
    4e5a:	ed 91       	ld	r30, X+
    4e5c:	fc 91       	ld	r31, X
    4e5e:	46 2f       	mov	r20, r22
    4e60:	67 e1       	ldi	r22, 0x17	; 23
    4e62:	09 94       	ijmp

00004e64 <u8x8_byte_SendByte>:
u8x8_byte_SendByte():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:50
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    4e64:	cf 93       	push	r28
    4e66:	df 93       	push	r29
    4e68:	1f 92       	push	r1
    4e6a:	cd b7       	in	r28, 0x3d	; 61
    4e6c:	de b7       	in	r29, 0x3e	; 62
    4e6e:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:51
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    4e70:	ae 01       	movw	r20, r28
    4e72:	4f 5f       	subi	r20, 0xFF	; 255
    4e74:	5f 4f       	sbci	r21, 0xFF	; 255
    4e76:	61 e0       	ldi	r22, 0x01	; 1
    4e78:	0e 94 2a 27 	call	0x4e54	; 0x4e54 <u8x8_byte_SendBytes>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:52
}
    4e7c:	0f 90       	pop	r0
    4e7e:	df 91       	pop	r29
    4e80:	cf 91       	pop	r28
    4e82:	08 95       	ret

00004e84 <u8x8_byte_StartTransfer>:
u8x8_byte_StartTransfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:56

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    4e84:	dc 01       	movw	r26, r24
    4e86:	18 96       	adiw	r26, 0x08	; 8
    4e88:	ed 91       	ld	r30, X+
    4e8a:	fc 91       	ld	r31, X
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	40 e0       	ldi	r20, 0x00	; 0
    4e92:	68 e1       	ldi	r22, 0x18	; 24
    4e94:	09 94       	ijmp

00004e96 <u8x8_byte_EndTransfer>:
u8x8_byte_EndTransfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:61
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    4e96:	dc 01       	movw	r26, r24
    4e98:	18 96       	adiw	r26, 0x08	; 8
    4e9a:	ed 91       	ld	r30, X+
    4e9c:	fc 91       	ld	r31, X
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	40 e0       	ldi	r20, 0x00	; 0
    4ea4:	69 e1       	ldi	r22, 0x19	; 25
    4ea6:	09 94       	ijmp

00004ea8 <u8x8_i2c_data_transfer>:
u8x8_i2c_data_transfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:521
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    4ea8:	ef 92       	push	r14
    4eaa:	ff 92       	push	r15
    4eac:	1f 93       	push	r17
    4eae:	cf 93       	push	r28
    4eb0:	df 93       	push	r29
    4eb2:	ec 01       	movw	r28, r24
    4eb4:	16 2f       	mov	r17, r22
    4eb6:	7a 01       	movw	r14, r20
    4eb8:	0e 94 42 27 	call	0x4e84	; 0x4e84 <u8x8_byte_StartTransfer>
    4ebc:	60 e4       	ldi	r22, 0x40	; 64
    4ebe:	ce 01       	movw	r24, r28
    4ec0:	0e 94 32 27 	call	0x4e64	; 0x4e64 <u8x8_byte_SendByte>
    4ec4:	e8 85       	ldd	r30, Y+8	; 0x08
    4ec6:	f9 85       	ldd	r31, Y+9	; 0x09
    4ec8:	97 01       	movw	r18, r14
    4eca:	41 2f       	mov	r20, r17
    4ecc:	67 e1       	ldi	r22, 0x17	; 23
    4ece:	ce 01       	movw	r24, r28
    4ed0:	09 95       	icall
    4ed2:	ce 01       	movw	r24, r28
    4ed4:	df 91       	pop	r29
    4ed6:	cf 91       	pop	r28
    4ed8:	1f 91       	pop	r17
    4eda:	ff 90       	pop	r15
    4edc:	ef 90       	pop	r14
    4ede:	0c 94 4b 27 	jmp	0x4e96	; 0x4e96 <u8x8_byte_EndTransfer>

00004ee2 <u8x8_cad_SendCmd>:
u8x8_cad_SendCmd():
    4ee2:	46 2f       	mov	r20, r22
    4ee4:	dc 01       	movw	r26, r24
    4ee6:	16 96       	adiw	r26, 0x06	; 6
    4ee8:	ed 91       	ld	r30, X+
    4eea:	fc 91       	ld	r31, X
    4eec:	30 e0       	ldi	r19, 0x00	; 0
    4eee:	20 e0       	ldi	r18, 0x00	; 0
    4ef0:	65 e1       	ldi	r22, 0x15	; 21
    4ef2:	09 94       	ijmp

00004ef4 <u8x8_cad_SendArg>:
u8x8_cad_SendArg():
    4ef4:	46 2f       	mov	r20, r22
    4ef6:	dc 01       	movw	r26, r24
    4ef8:	16 96       	adiw	r26, 0x06	; 6
    4efa:	ed 91       	ld	r30, X+
    4efc:	fc 91       	ld	r31, X
    4efe:	30 e0       	ldi	r19, 0x00	; 0
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	66 e1       	ldi	r22, 0x16	; 22
    4f04:	09 94       	ijmp

00004f06 <u8x8_cad_SendData>:
u8x8_cad_SendData():
    4f06:	9a 01       	movw	r18, r20
    4f08:	dc 01       	movw	r26, r24
    4f0a:	16 96       	adiw	r26, 0x06	; 6
    4f0c:	ed 91       	ld	r30, X+
    4f0e:	fc 91       	ld	r31, X
    4f10:	46 2f       	mov	r20, r22
    4f12:	67 e1       	ldi	r22, 0x17	; 23
    4f14:	09 94       	ijmp

00004f16 <u8x8_cad_StartTransfer>:
u8x8_cad_StartTransfer():
    4f16:	dc 01       	movw	r26, r24
    4f18:	16 96       	adiw	r26, 0x06	; 6
    4f1a:	ed 91       	ld	r30, X+
    4f1c:	fc 91       	ld	r31, X
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	20 e0       	ldi	r18, 0x00	; 0
    4f22:	40 e0       	ldi	r20, 0x00	; 0
    4f24:	68 e1       	ldi	r22, 0x18	; 24
    4f26:	09 94       	ijmp

00004f28 <u8x8_cad_EndTransfer>:
u8x8_cad_EndTransfer():
    4f28:	dc 01       	movw	r26, r24
    4f2a:	16 96       	adiw	r26, 0x06	; 6
    4f2c:	ed 91       	ld	r30, X+
    4f2e:	fc 91       	ld	r31, X
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	40 e0       	ldi	r20, 0x00	; 0
    4f36:	69 e1       	ldi	r22, 0x19	; 25
    4f38:	09 94       	ijmp

00004f3a <u8x8_cad_SendSequence>:
u8x8_cad_SendSequence():
    4f3a:	ef 92       	push	r14
    4f3c:	ff 92       	push	r15
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	1f 92       	push	r1
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	7c 01       	movw	r14, r24
    4f4e:	8b 01       	movw	r16, r22
    4f50:	d8 01       	movw	r26, r16
    4f52:	6c 91       	ld	r22, X
    4f54:	67 31       	cpi	r22, 0x17	; 23
    4f56:	29 f1       	breq	.+74     	; 0x4fa2 <u8x8_cad_SendSequence+0x68>
    4f58:	50 f4       	brcc	.+20     	; 0x4f6e <u8x8_cad_SendSequence+0x34>
    4f5a:	65 31       	cpi	r22, 0x15	; 21
    4f5c:	a0 f4       	brcc	.+40     	; 0x4f86 <u8x8_cad_SendSequence+0x4c>
    4f5e:	0f 90       	pop	r0
    4f60:	df 91       	pop	r29
    4f62:	cf 91       	pop	r28
    4f64:	1f 91       	pop	r17
    4f66:	0f 91       	pop	r16
    4f68:	ff 90       	pop	r15
    4f6a:	ef 90       	pop	r14
    4f6c:	08 95       	ret
    4f6e:	6a 31       	cpi	r22, 0x1A	; 26
    4f70:	18 f1       	brcs	.+70     	; 0x4fb8 <u8x8_cad_SendSequence+0x7e>
    4f72:	6e 3f       	cpi	r22, 0xFE	; 254
    4f74:	a1 f7       	brne	.-24     	; 0x4f5e <u8x8_cad_SendSequence+0x24>
    4f76:	f8 01       	movw	r30, r16
    4f78:	41 81       	ldd	r20, Z+1	; 0x01
    4f7a:	49 83       	std	Y+1, r20	; 0x01
    4f7c:	69 e2       	ldi	r22, 0x29	; 41
    4f7e:	c7 01       	movw	r24, r14
    4f80:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <u8x8_gpio_call>
    4f84:	0b c0       	rjmp	.+22     	; 0x4f9c <u8x8_cad_SendSequence+0x62>
    4f86:	f8 01       	movw	r30, r16
    4f88:	41 81       	ldd	r20, Z+1	; 0x01
    4f8a:	49 83       	std	Y+1, r20	; 0x01
    4f8c:	d7 01       	movw	r26, r14
    4f8e:	16 96       	adiw	r26, 0x06	; 6
    4f90:	ed 91       	ld	r30, X+
    4f92:	fc 91       	ld	r31, X
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	c7 01       	movw	r24, r14
    4f9a:	09 95       	icall
    4f9c:	0e 5f       	subi	r16, 0xFE	; 254
    4f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    4fa0:	d7 cf       	rjmp	.-82     	; 0x4f50 <u8x8_cad_SendSequence+0x16>
    4fa2:	f8 01       	movw	r30, r16
    4fa4:	81 81       	ldd	r24, Z+1	; 0x01
    4fa6:	89 83       	std	Y+1, r24	; 0x01
    4fa8:	ae 01       	movw	r20, r28
    4faa:	4f 5f       	subi	r20, 0xFF	; 255
    4fac:	5f 4f       	sbci	r21, 0xFF	; 255
    4fae:	61 e0       	ldi	r22, 0x01	; 1
    4fb0:	c7 01       	movw	r24, r14
    4fb2:	0e 94 83 27 	call	0x4f06	; 0x4f06 <u8x8_cad_SendData>
    4fb6:	f2 cf       	rjmp	.-28     	; 0x4f9c <u8x8_cad_SendSequence+0x62>
    4fb8:	0f 5f       	subi	r16, 0xFF	; 255
    4fba:	1f 4f       	sbci	r17, 0xFF	; 255
    4fbc:	d7 01       	movw	r26, r14
    4fbe:	16 96       	adiw	r26, 0x06	; 6
    4fc0:	ed 91       	ld	r30, X+
    4fc2:	fc 91       	ld	r31, X
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	20 e0       	ldi	r18, 0x00	; 0
    4fc8:	40 e0       	ldi	r20, 0x00	; 0
    4fca:	c7 01       	movw	r24, r14
    4fcc:	09 95       	icall
    4fce:	c0 cf       	rjmp	.-128    	; 0x4f50 <u8x8_cad_SendSequence+0x16>

00004fd0 <u8x8_cad_ssd13xx_fast_i2c>:
u8x8_cad_ssd13xx_fast_i2c():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:535
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    4fd0:	ef 92       	push	r14
    4fd2:	ff 92       	push	r15
    4fd4:	1f 93       	push	r17
    4fd6:	cf 93       	push	r28
    4fd8:	df 93       	push	r29
    4fda:	ec 01       	movw	r28, r24
    4fdc:	14 2f       	mov	r17, r20
    4fde:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    4fe0:	66 31       	cpi	r22, 0x16	; 22
    4fe2:	81 f1       	breq	.+96     	; 0x5044 <u8x8_cad_ssd13xx_fast_i2c+0x74>
    4fe4:	38 f4       	brcc	.+14     	; 0x4ff4 <u8x8_cad_ssd13xx_fast_i2c+0x24>
    4fe6:	64 31       	cpi	r22, 0x14	; 20
    4fe8:	09 f4       	brne	.+2      	; 0x4fec <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    4fea:	4b c0       	rjmp	.+150    	; 0x5082 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
    4fec:	65 31       	cpi	r22, 0x15	; 21
    4fee:	79 f0       	breq	.+30     	; 0x500e <u8x8_cad_ssd13xx_fast_i2c+0x3e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:602
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
    4ff0:	80 e0       	ldi	r24, 0x00	; 0
    4ff2:	22 c0       	rjmp	.+68     	; 0x5038 <u8x8_cad_ssd13xx_fast_i2c+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    4ff4:	68 31       	cpi	r22, 0x18	; 24
    4ff6:	c9 f1       	breq	.+114    	; 0x506a <u8x8_cad_ssd13xx_fast_i2c+0x9a>
    4ff8:	50 f1       	brcs	.+84     	; 0x504e <u8x8_cad_ssd13xx_fast_i2c+0x7e>
    4ffa:	69 31       	cpi	r22, 0x19	; 25
    4ffc:	c9 f7       	brne	.-14     	; 0x4ff0 <u8x8_cad_ssd13xx_fast_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:597
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    4ffe:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    5002:	88 23       	and	r24, r24
    5004:	91 f1       	breq	.+100    	; 0x506a <u8x8_cad_ssd13xx_fast_i2c+0x9a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:598
	u8x8_byte_EndTransfer(u8x8); 
    5006:	ce 01       	movw	r24, r28
    5008:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <u8x8_byte_EndTransfer>
    500c:	2e c0       	rjmp	.+92     	; 0x506a <u8x8_cad_ssd13xx_fast_i2c+0x9a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:544
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    500e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    5012:	88 23       	and	r24, r24
    5014:	19 f0       	breq	.+6      	; 0x501c <u8x8_cad_ssd13xx_fast_i2c+0x4c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:545
	 u8x8_byte_EndTransfer(u8x8); 
    5016:	ce 01       	movw	r24, r28
    5018:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <u8x8_byte_EndTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:547
      
      u8x8_byte_StartTransfer(u8x8);
    501c:	ce 01       	movw	r24, r28
    501e:	0e 94 42 27 	call	0x4e84	; 0x4e84 <u8x8_byte_StartTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:548
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    5022:	60 e0       	ldi	r22, 0x00	; 0
    5024:	ce 01       	movw	r24, r28
    5026:	0e 94 32 27 	call	0x4e64	; 0x4e64 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:549
      u8x8_byte_SendByte(u8x8, arg_int);
    502a:	61 2f       	mov	r22, r17
    502c:	ce 01       	movw	r24, r28
    502e:	0e 94 32 27 	call	0x4e64	; 0x4e64 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:550
      in_transfer = 1;
    5032:	81 e0       	ldi	r24, 0x01	; 1
    5034:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <in_transfer.3489>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    5038:	df 91       	pop	r29
    503a:	cf 91       	pop	r28
    503c:	1f 91       	pop	r17
    503e:	ff 90       	pop	r15
    5040:	ef 90       	pop	r14
    5042:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:564
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    5044:	64 2f       	mov	r22, r20
    5046:	0e 94 32 27 	call	0x4e64	; 0x4e64 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:604
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    504a:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:600
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    504c:	f5 cf       	rjmp	.-22     	; 0x5038 <u8x8_cad_ssd13xx_fast_i2c+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:567
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    504e:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    5052:	88 23       	and	r24, r24
    5054:	19 f0       	breq	.+6      	; 0x505c <u8x8_cad_ssd13xx_fast_i2c+0x8c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:568
	u8x8_byte_EndTransfer(u8x8); 
    5056:	ce 01       	movw	r24, r28
    5058:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <u8x8_byte_EndTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    505c:	a7 01       	movw	r20, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:579
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    505e:	19 31       	cpi	r17, 0x19	; 25
    5060:	38 f4       	brcc	.+14     	; 0x5070 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:585
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    5062:	61 2f       	mov	r22, r17
    5064:	ce 01       	movw	r24, r28
    5066:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <u8x8_i2c_data_transfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:599
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    506a:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <in_transfer.3489>
    506e:	ed cf       	rjmp	.-38     	; 0x504a <u8x8_cad_ssd13xx_fast_i2c+0x7a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    5070:	68 e1       	ldi	r22, 0x18	; 24
    5072:	ce 01       	movw	r24, r28
    5074:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <u8x8_i2c_data_transfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:582
	arg_int-=24;
    5078:	18 51       	subi	r17, 0x18	; 24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:583
	p+=24;
    507a:	88 e1       	ldi	r24, 0x18	; 24
    507c:	e8 0e       	add	r14, r24
    507e:	f1 1c       	adc	r15, r1
    5080:	ed cf       	rjmp	.-38     	; 0x505c <u8x8_cad_ssd13xx_fast_i2c+0x8c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:590
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    5082:	8e 89       	ldd	r24, Y+22	; 0x16
    5084:	8f 3f       	cpi	r24, 0xFF	; 255
    5086:	11 f4       	brne	.+4      	; 0x508c <u8x8_cad_ssd13xx_fast_i2c+0xbc>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:591
	u8x8->i2c_address = 0x078;
    5088:	88 e7       	ldi	r24, 0x78	; 120
    508a:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    508c:	e8 85       	ldd	r30, Y+8	; 0x08
    508e:	f9 85       	ldd	r31, Y+9	; 0x09
    5090:	97 01       	movw	r18, r14
    5092:	41 2f       	mov	r20, r17
    5094:	64 e1       	ldi	r22, 0x14	; 20
    5096:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    5098:	df 91       	pop	r29
    509a:	cf 91       	pop	r28
    509c:	1f 91       	pop	r17
    509e:	ff 90       	pop	r15
    50a0:	ef 90       	pop	r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    50a2:	09 94       	ijmp

000050a4 <u8x8_d_ssd1306_sh1106_generic>:
u8x8_d_ssd1306_sh1106_generic():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:446
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    50a4:	ef 92       	push	r14
    50a6:	ff 92       	push	r15
    50a8:	0f 93       	push	r16
    50aa:	1f 93       	push	r17
    50ac:	cf 93       	push	r28
    50ae:	df 93       	push	r29
    50b0:	ec 01       	movw	r28, r24
    50b2:	04 2f       	mov	r16, r20
    50b4:	79 01       	movw	r14, r18
    50b6:	6d 30       	cpi	r22, 0x0D	; 13
    50b8:	09 f4       	brne	.+2      	; 0x50bc <u8x8_d_ssd1306_sh1106_generic+0x18>
    50ba:	47 c0       	rjmp	.+142    	; 0x514a <u8x8_d_ssd1306_sh1106_generic+0xa6>
    50bc:	20 f4       	brcc	.+8      	; 0x50c6 <u8x8_d_ssd1306_sh1106_generic+0x22>
    50be:	6b 30       	cpi	r22, 0x0B	; 11
    50c0:	99 f1       	breq	.+102    	; 0x5128 <u8x8_d_ssd1306_sh1106_generic+0x84>
    50c2:	80 e0       	ldi	r24, 0x00	; 0
    50c4:	3b c0       	rjmp	.+118    	; 0x513c <u8x8_d_ssd1306_sh1106_generic+0x98>
    50c6:	6e 30       	cpi	r22, 0x0E	; 14
    50c8:	09 f4       	brne	.+2      	; 0x50cc <u8x8_d_ssd1306_sh1106_generic+0x28>
    50ca:	52 c0       	rjmp	.+164    	; 0x5170 <u8x8_d_ssd1306_sh1106_generic+0xcc>
    50cc:	6f 30       	cpi	r22, 0x0F	; 15
    50ce:	c9 f7       	brne	.-14     	; 0x50c2 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    50d0:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <u8x8_cad_StartTransfer>
    50d4:	f7 01       	movw	r30, r14
    50d6:	13 81       	ldd	r17, Z+3	; 0x03
    50d8:	11 0f       	add	r17, r17
    50da:	11 0f       	add	r17, r17
    50dc:	11 0f       	add	r17, r17
    50de:	6c 89       	ldd	r22, Y+20	; 0x14
    50e0:	16 0f       	add	r17, r22
    50e2:	60 e4       	ldi	r22, 0x40	; 64
    50e4:	ce 01       	movw	r24, r28
    50e6:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <u8x8_cad_SendCmd>
    50ea:	61 2f       	mov	r22, r17
    50ec:	62 95       	swap	r22
    50ee:	6f 70       	andi	r22, 0x0F	; 15
    50f0:	60 61       	ori	r22, 0x10	; 16
    50f2:	ce 01       	movw	r24, r28
    50f4:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <u8x8_cad_SendCmd>
    50f8:	61 2f       	mov	r22, r17
    50fa:	6f 70       	andi	r22, 0x0F	; 15
    50fc:	ce 01       	movw	r24, r28
    50fe:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <u8x8_cad_SendArg>
    5102:	f7 01       	movw	r30, r14
    5104:	64 81       	ldd	r22, Z+4	; 0x04
    5106:	60 6b       	ori	r22, 0xB0	; 176
    5108:	ce 01       	movw	r24, r28
    510a:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <u8x8_cad_SendArg>
    510e:	f7 01       	movw	r30, r14
    5110:	40 81       	ld	r20, Z
    5112:	51 81       	ldd	r21, Z+1	; 0x01
    5114:	62 81       	ldd	r22, Z+2	; 0x02
    5116:	66 0f       	add	r22, r22
    5118:	66 0f       	add	r22, r22
    511a:	66 0f       	add	r22, r22
    511c:	ce 01       	movw	r24, r28
    511e:	0e 94 83 27 	call	0x4f06	; 0x4f06 <u8x8_cad_SendData>
    5122:	01 50       	subi	r16, 0x01	; 1
    5124:	a1 f7       	brne	.-24     	; 0x510e <u8x8_d_ssd1306_sh1106_generic+0x6a>
    5126:	2e c0       	rjmp	.+92     	; 0x5184 <u8x8_d_ssd1306_sh1106_generic+0xe0>
    5128:	61 e8       	ldi	r22, 0x81	; 129
    512a:	71 e0       	ldi	r23, 0x01	; 1
    512c:	44 23       	and	r20, r20
    512e:	11 f0       	breq	.+4      	; 0x5134 <u8x8_d_ssd1306_sh1106_generic+0x90>
    5130:	6c e7       	ldi	r22, 0x7C	; 124
    5132:	71 e0       	ldi	r23, 0x01	; 1
    5134:	ce 01       	movw	r24, r28
    5136:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <u8x8_cad_SendSequence>
    513a:	81 e0       	ldi	r24, 0x01	; 1
    513c:	df 91       	pop	r29
    513e:	cf 91       	pop	r28
    5140:	1f 91       	pop	r17
    5142:	0f 91       	pop	r16
    5144:	ff 90       	pop	r15
    5146:	ef 90       	pop	r14
    5148:	08 95       	ret
    514a:	41 11       	cpse	r20, r1
    514c:	09 c0       	rjmp	.+18     	; 0x5160 <u8x8_d_ssd1306_sh1106_generic+0xbc>
    514e:	65 e7       	ldi	r22, 0x75	; 117
    5150:	71 e0       	ldi	r23, 0x01	; 1
    5152:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <u8x8_cad_SendSequence>
    5156:	e8 81       	ld	r30, Y
    5158:	f9 81       	ldd	r31, Y+1	; 0x01
    515a:	82 89       	ldd	r24, Z+18	; 0x12
    515c:	8c 8b       	std	Y+20, r24	; 0x14
    515e:	ed cf       	rjmp	.-38     	; 0x513a <u8x8_d_ssd1306_sh1106_generic+0x96>
    5160:	6e e6       	ldi	r22, 0x6E	; 110
    5162:	71 e0       	ldi	r23, 0x01	; 1
    5164:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <u8x8_cad_SendSequence>
    5168:	e8 81       	ld	r30, Y
    516a:	f9 81       	ldd	r31, Y+1	; 0x01
    516c:	83 89       	ldd	r24, Z+19	; 0x13
    516e:	f6 cf       	rjmp	.-20     	; 0x515c <u8x8_d_ssd1306_sh1106_generic+0xb8>
    5170:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <u8x8_cad_StartTransfer>
    5174:	61 e8       	ldi	r22, 0x81	; 129
    5176:	ce 01       	movw	r24, r28
    5178:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <u8x8_cad_SendCmd>
    517c:	60 2f       	mov	r22, r16
    517e:	ce 01       	movw	r24, r28
    5180:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <u8x8_cad_SendArg>
    5184:	ce 01       	movw	r24, r28
    5186:	0e 94 94 27 	call	0x4f28	; 0x4f28 <u8x8_cad_EndTransfer>
    518a:	d7 cf       	rjmp	.-82     	; 0x513a <u8x8_d_ssd1306_sh1106_generic+0x96>

0000518c <u8x8_d_sh1106_128x64_noname>:
u8x8_d_sh1106_128x64_noname():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:480
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    518c:	1f 93       	push	r17
    518e:	cf 93       	push	r28
    5190:	df 93       	push	r29
    5192:	ec 01       	movw	r28, r24
    5194:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:481
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    5196:	0e 94 52 28 	call	0x50a4	; 0x50a4 <u8x8_d_ssd1306_sh1106_generic>
    519a:	81 11       	cpse	r24, r1
    519c:	0c c0       	rjmp	.+24     	; 0x51b6 <u8x8_d_sh1106_128x64_noname+0x2a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:484
    return 1;
  
  switch(msg)
    519e:	19 30       	cpi	r17, 0x09	; 9
    51a0:	79 f0       	breq	.+30     	; 0x51c0 <u8x8_d_sh1106_128x64_noname+0x34>
    51a2:	1a 30       	cpi	r17, 0x0A	; 10
    51a4:	49 f4       	brne	.+18     	; 0x51b8 <u8x8_d_sh1106_128x64_noname+0x2c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:487
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    51a6:	ce 01       	movw	r24, r28
    51a8:	0e 94 ee 28 	call	0x51dc	; 0x51dc <u8x8_d_helper_display_init>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:491
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    51ac:	66 e8       	ldi	r22, 0x86	; 134
    51ae:	71 e0       	ldi	r23, 0x01	; 1
    51b0:	ce 01       	movw	r24, r28
    51b2:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <u8x8_cad_SendSequence>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:482
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    51b6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:501
    default:
      return 0;
  }
  return 1;
    
}
    51b8:	df 91       	pop	r29
    51ba:	cf 91       	pop	r28
    51bc:	1f 91       	pop	r17
    51be:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:494
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
    51c0:	66 e5       	ldi	r22, 0x56	; 86
    51c2:	71 e0       	ldi	r23, 0x01	; 1
    51c4:	ce 01       	movw	r24, r28
    51c6:	0e 94 e6 28 	call	0x51cc	; 0x51cc <u8x8_d_helper_display_setup_memory>
    51ca:	f5 cf       	rjmp	.-22     	; 0x51b6 <u8x8_d_sh1106_128x64_noname+0x2a>

000051cc <u8x8_d_helper_display_setup_memory>:
u8x8_d_helper_display_setup_memory():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:153
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    51cc:	fc 01       	movw	r30, r24
    51ce:	71 83       	std	Z+1, r23	; 0x01
    51d0:	60 83       	st	Z, r22
    51d2:	fb 01       	movw	r30, r22
    51d4:	22 89       	ldd	r18, Z+18	; 0x12
    51d6:	fc 01       	movw	r30, r24
    51d8:	24 8b       	std	Z+20, r18	; 0x14
    51da:	08 95       	ret

000051dc <u8x8_d_helper_display_init>:
u8x8_d_helper_display_init():
    51dc:	cf 93       	push	r28
    51de:	df 93       	push	r29
    51e0:	ec 01       	movw	r28, r24
    51e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    51e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	20 e0       	ldi	r18, 0x00	; 0
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	68 e2       	ldi	r22, 0x28	; 40
    51ee:	09 95       	icall
    51f0:	ee 81       	ldd	r30, Y+6	; 0x06
    51f2:	ff 81       	ldd	r31, Y+7	; 0x07
    51f4:	30 e0       	ldi	r19, 0x00	; 0
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	40 e0       	ldi	r20, 0x00	; 0
    51fa:	64 e1       	ldi	r22, 0x14	; 20
    51fc:	ce 01       	movw	r24, r28
    51fe:	09 95       	icall
    5200:	41 e0       	ldi	r20, 0x01	; 1
    5202:	6b e4       	ldi	r22, 0x4B	; 75
    5204:	ce 01       	movw	r24, r28
    5206:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <u8x8_gpio_call>
    520a:	e8 81       	ld	r30, Y
    520c:	f9 81       	ldd	r31, Y+1	; 0x01
    520e:	44 81       	ldd	r20, Z+4	; 0x04
    5210:	69 e2       	ldi	r22, 0x29	; 41
    5212:	ce 01       	movw	r24, r28
    5214:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <u8x8_gpio_call>
    5218:	40 e0       	ldi	r20, 0x00	; 0
    521a:	6b e4       	ldi	r22, 0x4B	; 75
    521c:	ce 01       	movw	r24, r28
    521e:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <u8x8_gpio_call>
    5222:	e8 81       	ld	r30, Y
    5224:	f9 81       	ldd	r31, Y+1	; 0x01
    5226:	44 81       	ldd	r20, Z+4	; 0x04
    5228:	69 e2       	ldi	r22, 0x29	; 41
    522a:	ce 01       	movw	r24, r28
    522c:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <u8x8_gpio_call>
    5230:	41 e0       	ldi	r20, 0x01	; 1
    5232:	6b e4       	ldi	r22, 0x4B	; 75
    5234:	ce 01       	movw	r24, r28
    5236:	0e 94 6c 29 	call	0x52d8	; 0x52d8 <u8x8_gpio_call>
    523a:	e8 81       	ld	r30, Y
    523c:	f9 81       	ldd	r31, Y+1	; 0x01
    523e:	45 81       	ldd	r20, Z+5	; 0x05
    5240:	69 e2       	ldi	r22, 0x29	; 41
    5242:	ce 01       	movw	r24, r28
    5244:	df 91       	pop	r29
    5246:	cf 91       	pop	r28
    5248:	0c 94 6c 29 	jmp	0x52d8	; 0x52d8 <u8x8_gpio_call>

0000524c <u8x8_DrawTile>:
u8x8_DrawTile():
    524c:	0f 93       	push	r16
    524e:	1f 93       	push	r17
    5250:	cf 93       	push	r28
    5252:	df 93       	push	r29
    5254:	00 d0       	rcall	.+0      	; 0x5256 <u8x8_DrawTile+0xa>
    5256:	00 d0       	rcall	.+0      	; 0x5258 <u8x8_DrawTile+0xc>
    5258:	1f 92       	push	r1
    525a:	cd b7       	in	r28, 0x3d	; 61
    525c:	de b7       	in	r29, 0x3e	; 62
    525e:	6c 83       	std	Y+4, r22	; 0x04
    5260:	4d 83       	std	Y+5, r20	; 0x05
    5262:	2b 83       	std	Y+3, r18	; 0x03
    5264:	1a 83       	std	Y+2, r17	; 0x02
    5266:	09 83       	std	Y+1, r16	; 0x01
    5268:	dc 01       	movw	r26, r24
    526a:	14 96       	adiw	r26, 0x04	; 4
    526c:	ed 91       	ld	r30, X+
    526e:	fc 91       	ld	r31, X
    5270:	9e 01       	movw	r18, r28
    5272:	2f 5f       	subi	r18, 0xFF	; 255
    5274:	3f 4f       	sbci	r19, 0xFF	; 255
    5276:	41 e0       	ldi	r20, 0x01	; 1
    5278:	6f e0       	ldi	r22, 0x0F	; 15
    527a:	09 95       	icall
    527c:	0f 90       	pop	r0
    527e:	0f 90       	pop	r0
    5280:	0f 90       	pop	r0
    5282:	0f 90       	pop	r0
    5284:	0f 90       	pop	r0
    5286:	df 91       	pop	r29
    5288:	cf 91       	pop	r28
    528a:	1f 91       	pop	r17
    528c:	0f 91       	pop	r16
    528e:	08 95       	ret

00005290 <u8x8_SetupMemory>:
u8x8_SetupMemory():
    5290:	dc 01       	movw	r26, r24
    5292:	14 96       	adiw	r26, 0x04	; 4
    5294:	ed 91       	ld	r30, X+
    5296:	fc 91       	ld	r31, X
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	40 e0       	ldi	r20, 0x00	; 0
    529e:	69 e0       	ldi	r22, 0x09	; 9
    52a0:	09 94       	ijmp

000052a2 <u8x8_InitDisplay>:
u8x8_InitDisplay():
    52a2:	dc 01       	movw	r26, r24
    52a4:	14 96       	adiw	r26, 0x04	; 4
    52a6:	ed 91       	ld	r30, X+
    52a8:	fc 91       	ld	r31, X
    52aa:	30 e0       	ldi	r19, 0x00	; 0
    52ac:	20 e0       	ldi	r18, 0x00	; 0
    52ae:	40 e0       	ldi	r20, 0x00	; 0
    52b0:	6a e0       	ldi	r22, 0x0A	; 10
    52b2:	09 94       	ijmp

000052b4 <u8x8_SetPowerSave>:
u8x8_SetPowerSave():
    52b4:	46 2f       	mov	r20, r22
    52b6:	dc 01       	movw	r26, r24
    52b8:	14 96       	adiw	r26, 0x04	; 4
    52ba:	ed 91       	ld	r30, X+
    52bc:	fc 91       	ld	r31, X
    52be:	30 e0       	ldi	r19, 0x00	; 0
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	6b e0       	ldi	r22, 0x0B	; 11
    52c4:	09 94       	ijmp

000052c6 <u8x8_RefreshDisplay>:
u8x8_RefreshDisplay():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:158
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    52c6:	dc 01       	movw	r26, r24
    52c8:	14 96       	adiw	r26, 0x04	; 4
    52ca:	ed 91       	ld	r30, X+
    52cc:	fc 91       	ld	r31, X
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	40 e0       	ldi	r20, 0x00	; 0
    52d4:	60 e1       	ldi	r22, 0x10	; 16
    52d6:	09 94       	ijmp

000052d8 <u8x8_gpio_call>:
u8x8_gpio_call():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_gpio.c:42
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    52d8:	dc 01       	movw	r26, r24
    52da:	1a 96       	adiw	r26, 0x0a	; 10
    52dc:	ed 91       	ld	r30, X+
    52de:	fc 91       	ld	r31, X
    52e0:	30 e0       	ldi	r19, 0x00	; 0
    52e2:	20 e0       	ldi	r18, 0x00	; 0
    52e4:	09 94       	ijmp

000052e6 <u8x8_dummy_cb>:
u8x8_dummy_cb():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:82
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_null_display_info);
      break;
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      break;
    52e6:	80 e0       	ldi	r24, 0x00	; 0
    52e8:	08 95       	ret

000052ea <u8x8_SetupDefaults>:
u8x8_SetupDefaults():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:96
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    52ea:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:97
    u8x8->display_info = NULL;
    52ec:	11 82       	std	Z+1, r1	; 0x01
    52ee:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:98
    u8x8->display_cb = u8x8_dummy_cb;
    52f0:	83 e7       	ldi	r24, 0x73	; 115
    52f2:	99 e2       	ldi	r25, 0x29	; 41
    52f4:	95 83       	std	Z+5, r25	; 0x05
    52f6:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:99
    u8x8->cad_cb = u8x8_dummy_cb;
    52f8:	97 83       	std	Z+7, r25	; 0x07
    52fa:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:100
    u8x8->byte_cb = u8x8_dummy_cb;
    52fc:	91 87       	std	Z+9, r25	; 0x09
    52fe:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:101
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    5300:	93 87       	std	Z+11, r25	; 0x0b
    5302:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:102
    u8x8->is_font_inverse_mode = 0;
    5304:	15 8a       	std	Z+21, r1	; 0x15
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:104
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    5306:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:105
    u8x8->bus_clock = 0;		/* issue 769 */
    5308:	14 86       	std	Z+12, r1	; 0x0c
    530a:	15 86       	std	Z+13, r1	; 0x0d
    530c:	16 86       	std	Z+14, r1	; 0x0e
    530e:	17 86       	std	Z+15, r1	; 0x0f
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:106
    u8x8->i2c_address = 255;
    5310:	8f ef       	ldi	r24, 0xFF	; 255
    5312:	86 8b       	std	Z+22, r24	; 0x16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:107
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    5314:	82 8f       	std	Z+26, r24	; 0x1a
    5316:	df 01       	movw	r26, r30
    5318:	5e 96       	adiw	r26, 0x1e	; 30
    531a:	f4 96       	adiw	r30, 0x34	; 52
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:113 (discriminator 3)
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
    531c:	8d 93       	st	X+, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:112 (discriminator 3)
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
    531e:	ae 17       	cp	r26, r30
    5320:	bf 07       	cpc	r27, r31
    5322:	e1 f7       	brne	.-8      	; 0x531c <u8x8_SetupDefaults+0x32>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:116
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    5324:	08 95       	ret

00005326 <u8x8_Setup>:
u8x8_Setup():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:134
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    5326:	af 92       	push	r10
    5328:	bf 92       	push	r11
    532a:	cf 92       	push	r12
    532c:	df 92       	push	r13
    532e:	ef 92       	push	r14
    5330:	ff 92       	push	r15
    5332:	0f 93       	push	r16
    5334:	1f 93       	push	r17
    5336:	cf 93       	push	r28
    5338:	df 93       	push	r29
    533a:	ec 01       	movw	r28, r24
    533c:	5b 01       	movw	r10, r22
    533e:	6a 01       	movw	r12, r20
    5340:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:136
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    5342:	0e 94 75 29 	call	0x52ea	; 0x52ea <u8x8_SetupDefaults>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:139

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    5346:	bd 82       	std	Y+5, r11	; 0x05
    5348:	ac 82       	std	Y+4, r10	; 0x04
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:140
  u8x8->cad_cb = cad_cb;
    534a:	df 82       	std	Y+7, r13	; 0x07
    534c:	ce 82       	std	Y+6, r12	; 0x06
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:141
  u8x8->byte_cb = byte_cb;
    534e:	f9 86       	std	Y+9, r15	; 0x09
    5350:	e8 86       	std	Y+8, r14	; 0x08
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:142
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    5352:	1b 87       	std	Y+11, r17	; 0x0b
    5354:	0a 87       	std	Y+10, r16	; 0x0a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    5356:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:146
}
    5358:	df 91       	pop	r29
    535a:	cf 91       	pop	r28
    535c:	1f 91       	pop	r17
    535e:	0f 91       	pop	r16
    5360:	ff 90       	pop	r15
    5362:	ef 90       	pop	r14
    5364:	df 90       	pop	r13
    5366:	cf 90       	pop	r12
    5368:	bf 90       	pop	r11
    536a:	af 90       	pop	r10
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    536c:	0c 94 48 29 	jmp	0x5290	; 0x5290 <u8x8_SetupMemory>

00005370 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:657

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    5370:	cf 93       	push	r28
    5372:	df 93       	push	r29
    5374:	1f 92       	push	r1
    5376:	cd b7       	in	r28, 0x3d	; 61
    5378:	de b7       	in	r29, 0x3e	; 62
    537a:	fc 01       	movw	r30, r24
    537c:	69 83       	std	Y+1, r22	; 0x01
    537e:	87 89       	ldd	r24, Z+23	; 0x17
    5380:	88 23       	and	r24, r24
    5382:	f9 f0       	breq	.+62     	; 0x53c2 <TwoWire::write(unsigned char)+0x52>
    5384:	26 89       	ldd	r18, Z+22	; 0x16
    5386:	84 85       	ldd	r24, Z+12	; 0x0c
    5388:	95 85       	ldd	r25, Z+13	; 0x0d
    538a:	28 17       	cp	r18, r24
    538c:	19 06       	cpc	r1, r25
    538e:	54 f0       	brlt	.+20     	; 0x53a4 <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
    5390:	81 e0       	ldi	r24, 0x01	; 1
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	93 83       	std	Z+3, r25	; 0x03
    5396:	82 83       	std	Z+2, r24	; 0x02
_ZN7TwoWire5writeEh():
    5398:	90 e0       	ldi	r25, 0x00	; 0
    539a:	80 e0       	ldi	r24, 0x00	; 0
    539c:	0f 90       	pop	r0
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	08 95       	ret
    53a4:	89 81       	ldd	r24, Y+1	; 0x01
    53a6:	a5 89       	ldd	r26, Z+21	; 0x15
    53a8:	23 89       	ldd	r18, Z+19	; 0x13
    53aa:	34 89       	ldd	r19, Z+20	; 0x14
    53ac:	a2 0f       	add	r26, r18
    53ae:	b3 2f       	mov	r27, r19
    53b0:	b1 1d       	adc	r27, r1
    53b2:	8c 93       	st	X, r24
    53b4:	85 89       	ldd	r24, Z+21	; 0x15
    53b6:	8f 5f       	subi	r24, 0xFF	; 255
    53b8:	85 8b       	std	Z+21, r24	; 0x15
    53ba:	86 8b       	std	Z+22, r24	; 0x16
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	ed cf       	rjmp	.-38     	; 0x539c <TwoWire::write(unsigned char)+0x2c>
    53c2:	00 a4       	ldd	r0, Z+40	; 0x28
    53c4:	f1 a5       	ldd	r31, Z+41	; 0x29
    53c6:	e0 2d       	mov	r30, r0
    53c8:	61 e0       	ldi	r22, 0x01	; 1
    53ca:	ce 01       	movw	r24, r28
    53cc:	01 96       	adiw	r24, 0x01	; 1
    53ce:	09 95       	icall
    53d0:	f5 cf       	rjmp	.-22     	; 0x53bc <TwoWire::write(unsigned char)+0x4c>

000053d2 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    53d2:	fc 01       	movw	r30, r24
    53d4:	81 89       	ldd	r24, Z+17	; 0x11
    53d6:	90 89       	ldd	r25, Z+16	; 0x10
    53d8:	89 1b       	sub	r24, r25
    53da:	99 0b       	sbc	r25, r25
    53dc:	08 95       	ret

000053de <TwoWire::read()>:
_ZN7TwoWire4readEv():
    53de:	fc 01       	movw	r30, r24
    53e0:	90 89       	ldd	r25, Z+16	; 0x10
    53e2:	81 89       	ldd	r24, Z+17	; 0x11
    53e4:	2f ef       	ldi	r18, 0xFF	; 255
    53e6:	3f ef       	ldi	r19, 0xFF	; 255
    53e8:	98 17       	cp	r25, r24
    53ea:	40 f4       	brcc	.+16     	; 0x53fc <TwoWire::read()+0x1e>
    53ec:	a6 85       	ldd	r26, Z+14	; 0x0e
    53ee:	b7 85       	ldd	r27, Z+15	; 0x0f
    53f0:	a9 0f       	add	r26, r25
    53f2:	b1 1d       	adc	r27, r1
    53f4:	2c 91       	ld	r18, X
    53f6:	30 e0       	ldi	r19, 0x00	; 0
    53f8:	9f 5f       	subi	r25, 0xFF	; 255
    53fa:	90 8b       	std	Z+16, r25	; 0x10
    53fc:	c9 01       	movw	r24, r18
    53fe:	08 95       	ret

00005400 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    5400:	dc 01       	movw	r26, r24
    5402:	50 96       	adiw	r26, 0x10	; 16
    5404:	ec 91       	ld	r30, X
    5406:	50 97       	sbiw	r26, 0x10	; 16
    5408:	51 96       	adiw	r26, 0x11	; 17
    540a:	8c 91       	ld	r24, X
    540c:	51 97       	sbiw	r26, 0x11	; 17
    540e:	e8 17       	cp	r30, r24
    5410:	48 f4       	brcc	.+18     	; 0x5424 <TwoWire::peek()+0x24>
    5412:	1e 96       	adiw	r26, 0x0e	; 14
    5414:	8d 91       	ld	r24, X+
    5416:	9c 91       	ld	r25, X
    5418:	e8 0f       	add	r30, r24
    541a:	f9 2f       	mov	r31, r25
    541c:	f1 1d       	adc	r31, r1
    541e:	80 81       	ld	r24, Z
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	08 95       	ret
    5424:	8f ef       	ldi	r24, 0xFF	; 255
    5426:	9f ef       	ldi	r25, 0xFF	; 255
    5428:	08 95       	ret

0000542a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    542a:	08 95       	ret

0000542c <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    542c:	cf 92       	push	r12
    542e:	df 92       	push	r13
    5430:	ef 92       	push	r14
    5432:	ff 92       	push	r15
    5434:	0f 93       	push	r16
    5436:	1f 93       	push	r17
    5438:	cf 93       	push	r28
    543a:	df 93       	push	r29
    543c:	8c 01       	movw	r16, r24
    543e:	cb 01       	movw	r24, r22
    5440:	7a 01       	movw	r14, r20
    5442:	d8 01       	movw	r26, r16
    5444:	57 96       	adiw	r26, 0x17	; 23
    5446:	2c 91       	ld	r18, X
    5448:	57 97       	sbiw	r26, 0x17	; 23
    544a:	22 23       	and	r18, r18
    544c:	89 f0       	breq	.+34     	; 0x5470 <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    544e:	eb 01       	movw	r28, r22
    5450:	6b 01       	movw	r12, r22
    5452:	c4 0e       	add	r12, r20
    5454:	d5 1e       	adc	r13, r21
    5456:	cc 15       	cp	r28, r12
    5458:	dd 05       	cpc	r29, r13
    545a:	79 f0       	breq	.+30     	; 0x547a <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
    545c:	69 91       	ld	r22, Y+
    545e:	d8 01       	movw	r26, r16
    5460:	ed 91       	ld	r30, X+
    5462:	fc 91       	ld	r31, X
    5464:	01 90       	ld	r0, Z+
    5466:	f0 81       	ld	r31, Z
    5468:	e0 2d       	mov	r30, r0
    546a:	c8 01       	movw	r24, r16
    546c:	09 95       	icall
    546e:	f3 cf       	rjmp	.-26     	; 0x5456 <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
    5470:	98 96       	adiw	r26, 0x28	; 40
    5472:	ed 91       	ld	r30, X+
    5474:	fc 91       	ld	r31, X
    5476:	64 2f       	mov	r22, r20
    5478:	09 95       	icall
    547a:	c7 01       	movw	r24, r14
    547c:	df 91       	pop	r29
    547e:	cf 91       	pop	r28
    5480:	1f 91       	pop	r17
    5482:	0f 91       	pop	r16
    5484:	ff 90       	pop	r15
    5486:	ef 90       	pop	r14
    5488:	df 90       	pop	r13
    548a:	cf 90       	pop	r12
    548c:	08 95       	ret

0000548e <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>:
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    548e:	2f 92       	push	r2
    5490:	3f 92       	push	r3
    5492:	4f 92       	push	r4
    5494:	5f 92       	push	r5
    5496:	6f 92       	push	r6
    5498:	7f 92       	push	r7
    549a:	8f 92       	push	r8
    549c:	9f 92       	push	r9
    549e:	af 92       	push	r10
    54a0:	bf 92       	push	r11
    54a2:	cf 92       	push	r12
    54a4:	df 92       	push	r13
    54a6:	ef 92       	push	r14
    54a8:	ff 92       	push	r15
    54aa:	0f 93       	push	r16
    54ac:	1f 93       	push	r17
    54ae:	cf 93       	push	r28
    54b0:	df 93       	push	r29
    54b2:	cd b7       	in	r28, 0x3d	; 61
    54b4:	de b7       	in	r29, 0x3e	; 62
    54b6:	60 97       	sbiw	r28, 0x10	; 16
    54b8:	0f b6       	in	r0, 0x3f	; 63
    54ba:	f8 94       	cli
    54bc:	de bf       	out	0x3e, r29	; 62
    54be:	0f be       	out	0x3f, r0	; 63
    54c0:	cd bf       	out	0x3d, r28	; 61
    54c2:	3c 01       	movw	r6, r24
    54c4:	2b 01       	movw	r4, r22
    54c6:	5a 83       	std	Y+2, r21	; 0x02
    54c8:	49 83       	std	Y+1, r20	; 0x01
    54ca:	3c 83       	std	Y+4, r19	; 0x04
    54cc:	2b 83       	std	Y+3, r18	; 0x03
    54ce:	8d a1       	ldd	r24, Y+37	; 0x25
    54d0:	9e a1       	ldd	r25, Y+38	; 0x26
    54d2:	9e 83       	std	Y+6, r25	; 0x06
    54d4:	8d 83       	std	Y+5, r24	; 0x05
    54d6:	ef a1       	ldd	r30, Y+39	; 0x27
    54d8:	f8 a5       	ldd	r31, Y+40	; 0x28
    54da:	f8 87       	std	Y+8, r31	; 0x08
    54dc:	ef 83       	std	Y+7, r30	; 0x07
    54de:	89 a5       	ldd	r24, Y+41	; 0x29
    54e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    54e2:	9a 87       	std	Y+10, r25	; 0x0a
    54e4:	89 87       	std	Y+9, r24	; 0x09
    54e6:	eb a5       	ldd	r30, Y+43	; 0x2b
    54e8:	fc a5       	ldd	r31, Y+44	; 0x2c
    54ea:	fc 87       	std	Y+12, r31	; 0x0c
    54ec:	eb 87       	std	Y+11, r30	; 0x0b
    54ee:	2d a4       	ldd	r2, Y+45	; 0x2d
    54f0:	3e a4       	ldd	r3, Y+46	; 0x2e
    54f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    54f4:	98 a9       	ldd	r25, Y+48	; 0x30
    54f6:	9e 87       	std	Y+14, r25	; 0x0e
    54f8:	8d 87       	std	Y+13, r24	; 0x0d
    54fa:	e9 a9       	ldd	r30, Y+49	; 0x31
    54fc:	fa a9       	ldd	r31, Y+50	; 0x32
    54fe:	f8 8b       	std	Y+16, r31	; 0x10
    5500:	ef 87       	std	Y+15, r30	; 0x0f
_ZN5PrintC4Ev():
    5502:	f3 01       	movw	r30, r6
    5504:	13 82       	std	Z+3, r1	; 0x03
    5506:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
    5508:	88 ee       	ldi	r24, 0xE8	; 232
    550a:	93 e0       	ldi	r25, 0x03	; 3
    550c:	a0 e0       	ldi	r26, 0x00	; 0
    550e:	b0 e0       	ldi	r27, 0x00	; 0
    5510:	84 83       	std	Z+4, r24	; 0x04
    5512:	95 83       	std	Z+5, r25	; 0x05
    5514:	a6 83       	std	Z+6, r26	; 0x06
    5516:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    5518:	8f eb       	ldi	r24, 0xBF	; 191
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	91 83       	std	Z+1, r25	; 0x01
    551e:	80 83       	st	Z, r24
    5520:	75 87       	std	Z+13, r23	; 0x0d
    5522:	64 87       	std	Z+12, r22	; 0x0c
    5524:	cb 01       	movw	r24, r22
    5526:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <operator new[](unsigned int)>
    552a:	f3 01       	movw	r30, r6
    552c:	97 87       	std	Z+15, r25	; 0x0f
    552e:	86 87       	std	Z+14, r24	; 0x0e
    5530:	10 8a       	std	Z+16, r1	; 0x10
    5532:	11 8a       	std	Z+17, r1	; 0x11
    5534:	12 8a       	std	Z+18, r1	; 0x12
    5536:	c2 01       	movw	r24, r4
    5538:	0e 94 d1 34 	call	0x69a2	; 0x69a2 <operator new[](unsigned int)>
    553c:	f3 01       	movw	r30, r6
    553e:	94 8b       	std	Z+20, r25	; 0x14
    5540:	83 8b       	std	Z+19, r24	; 0x13
    5542:	15 8a       	std	Z+21, r1	; 0x15
    5544:	16 8a       	std	Z+22, r1	; 0x16
    5546:	17 8a       	std	Z+23, r1	; 0x17
    5548:	89 81       	ldd	r24, Y+1	; 0x01
    554a:	9a 81       	ldd	r25, Y+2	; 0x02
    554c:	95 8f       	std	Z+29, r25	; 0x1d
    554e:	84 8f       	std	Z+28, r24	; 0x1c
    5550:	8b 81       	ldd	r24, Y+3	; 0x03
    5552:	9c 81       	ldd	r25, Y+4	; 0x04
    5554:	97 8f       	std	Z+31, r25	; 0x1f
    5556:	86 8f       	std	Z+30, r24	; 0x1e
    5558:	11 a3       	std	Z+33, r17	; 0x21
    555a:	00 a3       	std	Z+32, r16	; 0x20
    555c:	f3 a2       	std	Z+35, r15	; 0x23
    555e:	e2 a2       	std	Z+34, r14	; 0x22
    5560:	d5 a2       	std	Z+37, r13	; 0x25
    5562:	c4 a2       	std	Z+36, r12	; 0x24
    5564:	b7 a2       	std	Z+39, r11	; 0x27
    5566:	a6 a2       	std	Z+38, r10	; 0x26
    5568:	91 a6       	std	Z+41, r9	; 0x29
    556a:	80 a6       	std	Z+40, r8	; 0x28
    556c:	8d 81       	ldd	r24, Y+5	; 0x05
    556e:	9e 81       	ldd	r25, Y+6	; 0x06
    5570:	93 a7       	std	Z+43, r25	; 0x2b
    5572:	82 a7       	std	Z+42, r24	; 0x2a
    5574:	8f 81       	ldd	r24, Y+7	; 0x07
    5576:	98 85       	ldd	r25, Y+8	; 0x08
    5578:	95 a7       	std	Z+45, r25	; 0x2d
    557a:	84 a7       	std	Z+44, r24	; 0x2c
    557c:	89 85       	ldd	r24, Y+9	; 0x09
    557e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5580:	97 a7       	std	Z+47, r25	; 0x2f
    5582:	86 a7       	std	Z+46, r24	; 0x2e
    5584:	c1 01       	movw	r24, r2
    5586:	eb 85       	ldd	r30, Y+11	; 0x0b
    5588:	fc 85       	ldd	r31, Y+12	; 0x0c
    558a:	09 95       	icall
    558c:	8f 85       	ldd	r24, Y+15	; 0x0f
    558e:	98 89       	ldd	r25, Y+16	; 0x10
    5590:	ed 85       	ldd	r30, Y+13	; 0x0d
    5592:	fe 85       	ldd	r31, Y+14	; 0x0e
    5594:	60 96       	adiw	r28, 0x10	; 16
    5596:	0f b6       	in	r0, 0x3f	; 63
    5598:	f8 94       	cli
    559a:	de bf       	out	0x3e, r29	; 62
    559c:	0f be       	out	0x3f, r0	; 63
    559e:	cd bf       	out	0x3d, r28	; 61
    55a0:	df 91       	pop	r29
    55a2:	cf 91       	pop	r28
    55a4:	1f 91       	pop	r17
    55a6:	0f 91       	pop	r16
    55a8:	ff 90       	pop	r15
    55aa:	ef 90       	pop	r14
    55ac:	df 90       	pop	r13
    55ae:	cf 90       	pop	r12
    55b0:	bf 90       	pop	r11
    55b2:	af 90       	pop	r10
    55b4:	9f 90       	pop	r9
    55b6:	8f 90       	pop	r8
    55b8:	7f 90       	pop	r7
    55ba:	6f 90       	pop	r6
    55bc:	5f 90       	pop	r5
    55be:	4f 90       	pop	r4
    55c0:	3f 90       	pop	r3
    55c2:	2f 90       	pop	r2
    55c4:	09 94       	ijmp

000055c6 <TwoWire::~TwoWire()>:
_ZN7TwoWireD2Ev():
    55c6:	cf 93       	push	r28
    55c8:	df 93       	push	r29
    55ca:	ec 01       	movw	r28, r24
    55cc:	8f eb       	ldi	r24, 0xBF	; 191
    55ce:	91 e0       	ldi	r25, 0x01	; 1
    55d0:	99 83       	std	Y+1, r25	; 0x01
    55d2:	88 83       	st	Y, r24
    55d4:	61 e0       	ldi	r22, 0x01	; 1
    55d6:	70 e0       	ldi	r23, 0x00	; 0
    55d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    55da:	9f 85       	ldd	r25, Y+15	; 0x0f
    55dc:	0e 94 d3 34 	call	0x69a6	; 0x69a6 <operator delete(void*, unsigned int)>
    55e0:	61 e0       	ldi	r22, 0x01	; 1
    55e2:	70 e0       	ldi	r23, 0x00	; 0
    55e4:	8b 89       	ldd	r24, Y+19	; 0x13
    55e6:	9c 89       	ldd	r25, Y+20	; 0x14
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	0c 94 d3 34 	jmp	0x69a6	; 0x69a6 <operator delete(void*, unsigned int)>

000055f0 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    55f0:	fc 01       	movw	r30, r24
    55f2:	10 8a       	std	Z+16, r1	; 0x10
    55f4:	11 8a       	std	Z+17, r1	; 0x11
    55f6:	15 8a       	std	Z+21, r1	; 0x15
    55f8:	16 8a       	std	Z+22, r1	; 0x16
    55fa:	04 8c       	ldd	r0, Z+28	; 0x1c
    55fc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    55fe:	e0 2d       	mov	r30, r0
    5600:	09 94       	ijmp

00005602 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    5602:	dc 01       	movw	r26, r24
    5604:	92 96       	adiw	r26, 0x22	; 34
    5606:	ed 91       	ld	r30, X+
    5608:	fc 91       	ld	r31, X
    560a:	cb 01       	movw	r24, r22
    560c:	ba 01       	movw	r22, r20
    560e:	09 94       	ijmp

00005610 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    5610:	fc 01       	movw	r30, r24
_ZN7TwoWire17beginTransmissionEh():
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	87 8b       	std	Z+23, r24	; 0x17
_ZN7TwoWire17beginTransmissionEi():
    5616:	62 8b       	std	Z+18, r22	; 0x12
_ZN7TwoWire17beginTransmissionEh():
    5618:	15 8a       	std	Z+21, r1	; 0x15
    561a:	16 8a       	std	Z+22, r1	; 0x16
_ZN7TwoWire17beginTransmissionEi():
    561c:	08 95       	ret

0000561e <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    561e:	0f 93       	push	r16
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	ec 01       	movw	r28, r24
    5626:	8b 89       	ldd	r24, Y+19	; 0x13
    5628:	9c 89       	ldd	r25, Y+20	; 0x14
    562a:	ee a1       	ldd	r30, Y+38	; 0x26
    562c:	ff a1       	ldd	r31, Y+39	; 0x27
    562e:	06 2f       	mov	r16, r22
    5630:	21 e0       	ldi	r18, 0x01	; 1
    5632:	4e 89       	ldd	r20, Y+22	; 0x16
    5634:	bc 01       	movw	r22, r24
    5636:	8a 89       	ldd	r24, Y+18	; 0x12
    5638:	09 95       	icall
    563a:	1d 8a       	std	Y+21, r1	; 0x15
    563c:	1e 8a       	std	Y+22, r1	; 0x16
    563e:	1f 8a       	std	Y+23, r1	; 0x17
    5640:	df 91       	pop	r29
    5642:	cf 91       	pop	r28
    5644:	0f 91       	pop	r16
    5646:	08 95       	ret

00005648 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    5648:	61 e0       	ldi	r22, 0x01	; 1
    564a:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <TwoWire::endTransmission(unsigned char)>

0000564e <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    564e:	fc 01       	movw	r30, r24
    5650:	ca 01       	movw	r24, r20
    5652:	22 8d       	ldd	r18, Z+26	; 0x1a
    5654:	33 8d       	ldd	r19, Z+27	; 0x1b
    5656:	23 2b       	or	r18, r19
    5658:	d9 f0       	breq	.+54     	; 0x5690 <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    565a:	30 89       	ldd	r19, Z+16	; 0x10
    565c:	21 89       	ldd	r18, Z+17	; 0x11
    565e:	32 17       	cp	r19, r18
    5660:	b8 f0       	brcs	.+46     	; 0x5690 <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    5662:	20 e0       	ldi	r18, 0x00	; 0
    5664:	42 2f       	mov	r20, r18
    5666:	50 e0       	ldi	r21, 0x00	; 0
    5668:	48 17       	cp	r20, r24
    566a:	59 07       	cpc	r21, r25
    566c:	5c f4       	brge	.+22     	; 0x5684 <TwoWire::onReceiveService(unsigned char*, int)+0x36>
    566e:	db 01       	movw	r26, r22
    5670:	a4 0f       	add	r26, r20
    5672:	b5 1f       	adc	r27, r21
    5674:	3c 91       	ld	r19, X
    5676:	a6 85       	ldd	r26, Z+14	; 0x0e
    5678:	b7 85       	ldd	r27, Z+15	; 0x0f
    567a:	a4 0f       	add	r26, r20
    567c:	b5 1f       	adc	r27, r21
    567e:	3c 93       	st	X, r19
    5680:	2f 5f       	subi	r18, 0xFF	; 255
    5682:	f0 cf       	rjmp	.-32     	; 0x5664 <TwoWire::onReceiveService(unsigned char*, int)+0x16>
    5684:	10 8a       	std	Z+16, r1	; 0x10
    5686:	81 8b       	std	Z+17, r24	; 0x11
    5688:	02 8c       	ldd	r0, Z+26	; 0x1a
    568a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    568c:	e0 2d       	mov	r30, r0
    568e:	09 94       	ijmp
    5690:	08 95       	ret

00005692 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
    5692:	ab 01       	movw	r20, r22
operator()():
    5694:	bc 01       	movw	r22, r24
    5696:	8a e1       	ldi	r24, 0x1A	; 26
    5698:	94 e0       	ldi	r25, 0x04	; 4
    569a:	0c 94 27 2b 	jmp	0x564e	; 0x564e <TwoWire::onReceiveService(unsigned char*, int)>

0000569e <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    569e:	dc 01       	movw	r26, r24
    56a0:	58 96       	adiw	r26, 0x18	; 24
    56a2:	ed 91       	ld	r30, X+
    56a4:	fc 91       	ld	r31, X
    56a6:	59 97       	sbiw	r26, 0x19	; 25
    56a8:	30 97       	sbiw	r30, 0x00	; 0
    56aa:	31 f0       	breq	.+12     	; 0x56b8 <TwoWire::onRequestService()+0x1a>
    56ac:	55 96       	adiw	r26, 0x15	; 21
    56ae:	1c 92       	st	X, r1
    56b0:	55 97       	sbiw	r26, 0x15	; 21
    56b2:	56 96       	adiw	r26, 0x16	; 22
    56b4:	1c 92       	st	X, r1
    56b6:	09 94       	ijmp
    56b8:	08 95       	ret

000056ba <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
    56ba:	8a e1       	ldi	r24, 0x1A	; 26
    56bc:	94 e0       	ldi	r25, 0x04	; 4
    56be:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <TwoWire::onRequestService()>

000056c2 <_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    56c2:	8f 92       	push	r8
    56c4:	9f 92       	push	r9
    56c6:	af 92       	push	r10
    56c8:	bf 92       	push	r11
    56ca:	cf 92       	push	r12
    56cc:	df 92       	push	r13
    56ce:	ef 92       	push	r14
    56d0:	ff 92       	push	r15
    56d2:	0f 93       	push	r16
    56d4:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    56d6:	8d e5       	ldi	r24, 0x5D	; 93
    56d8:	9b e2       	ldi	r25, 0x2B	; 43
    56da:	9f 93       	push	r25
    56dc:	8f 93       	push	r24
    56de:	87 ec       	ldi	r24, 0xC7	; 199
    56e0:	9c e2       	ldi	r25, 0x2C	; 44
    56e2:	9f 93       	push	r25
    56e4:	8f 93       	push	r24
    56e6:	89 e4       	ldi	r24, 0x49	; 73
    56e8:	9b e2       	ldi	r25, 0x2B	; 43
    56ea:	9f 93       	push	r25
    56ec:	8f 93       	push	r24
    56ee:	82 ec       	ldi	r24, 0xC2	; 194
    56f0:	9c e2       	ldi	r25, 0x2C	; 44
    56f2:	9f 93       	push	r25
    56f4:	8f 93       	push	r24
    56f6:	8e ed       	ldi	r24, 0xDE	; 222
    56f8:	9c e2       	ldi	r25, 0x2C	; 44
    56fa:	9f 93       	push	r25
    56fc:	8f 93       	push	r24
    56fe:	84 ed       	ldi	r24, 0xD4	; 212
    5700:	9c e2       	ldi	r25, 0x2C	; 44
    5702:	9f 93       	push	r25
    5704:	8f 93       	push	r24
    5706:	8c ec       	ldi	r24, 0xCC	; 204
    5708:	9c e2       	ldi	r25, 0x2C	; 44
    570a:	9f 93       	push	r25
    570c:	8f 93       	push	r24
    570e:	8b e9       	ldi	r24, 0x9B	; 155
    5710:	88 2e       	mov	r8, r24
    5712:	8c e2       	ldi	r24, 0x2C	; 44
    5714:	98 2e       	mov	r9, r24
    5716:	94 e4       	ldi	r25, 0x44	; 68
    5718:	a9 2e       	mov	r10, r25
    571a:	9c e2       	ldi	r25, 0x2C	; 44
    571c:	b9 2e       	mov	r11, r25
    571e:	2c ef       	ldi	r18, 0xFC	; 252
    5720:	c2 2e       	mov	r12, r18
    5722:	2b e2       	ldi	r18, 0x2B	; 43
    5724:	d2 2e       	mov	r13, r18
    5726:	39 ee       	ldi	r19, 0xE9	; 233
    5728:	e3 2e       	mov	r14, r19
    572a:	3b e2       	ldi	r19, 0x2B	; 43
    572c:	f3 2e       	mov	r15, r19
    572e:	05 ee       	ldi	r16, 0xE5	; 229
    5730:	1b e2       	ldi	r17, 0x2B	; 43
    5732:	28 ed       	ldi	r18, 0xD8	; 216
    5734:	3b e2       	ldi	r19, 0x2B	; 43
    5736:	4a eb       	ldi	r20, 0xBA	; 186
    5738:	5b e2       	ldi	r21, 0x2B	; 43
    573a:	60 e2       	ldi	r22, 0x20	; 32
    573c:	70 e0       	ldi	r23, 0x00	; 0
    573e:	8a e1       	ldi	r24, 0x1A	; 26
    5740:	94 e0       	ldi	r25, 0x04	; 4
    5742:	0e 94 47 2a 	call	0x548e	; 0x548e <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    5746:	8d b7       	in	r24, 0x3d	; 61
    5748:	9e b7       	in	r25, 0x3e	; 62
    574a:	0e 96       	adiw	r24, 0x0e	; 14
    574c:	0f b6       	in	r0, 0x3f	; 63
    574e:	f8 94       	cli
    5750:	9e bf       	out	0x3e, r25	; 62
    5752:	0f be       	out	0x3f, r0	; 63
    5754:	8d bf       	out	0x3d, r24	; 61
    5756:	1f 91       	pop	r17
    5758:	0f 91       	pop	r16
    575a:	ff 90       	pop	r15
    575c:	ef 90       	pop	r14
    575e:	df 90       	pop	r13
    5760:	cf 90       	pop	r12
    5762:	bf 90       	pop	r11
    5764:	af 90       	pop	r10
    5766:	9f 90       	pop	r9
    5768:	8f 90       	pop	r8
    576a:	08 95       	ret

0000576c <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    576c:	8a e1       	ldi	r24, 0x1A	; 26
    576e:	94 e0       	ldi	r25, 0x04	; 4
    5770:	0c 94 e3 2a 	jmp	0x55c6	; 0x55c6 <TwoWire::~TwoWire()>

00005774 <twi_init>:
twi_init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    5774:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
    5778:	81 e0       	ldi	r24, 0x01	; 1
    577a:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
    577e:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    5782:	61 e0       	ldi	r22, 0x01	; 1
    5784:	82 e1       	ldi	r24, 0x12	; 18
    5786:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
    578a:	61 e0       	ldi	r22, 0x01	; 1
    578c:	83 e1       	ldi	r24, 0x13	; 19
    578e:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    5792:	e9 eb       	ldi	r30, 0xB9	; 185
    5794:	f0 e0       	ldi	r31, 0x00	; 0
    5796:	80 81       	ld	r24, Z
    5798:	8e 7f       	andi	r24, 0xFE	; 254
    579a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
    579c:	80 81       	ld	r24, Z
    579e:	8d 7f       	andi	r24, 0xFD	; 253
    57a0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    57a2:	88 e4       	ldi	r24, 0x48	; 72
    57a4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    57a8:	85 e4       	ldi	r24, 0x45	; 69
    57aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:91
}
    57ae:	08 95       	ret

000057b0 <twi_disable>:
twi_disable():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:102
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    57b0:	ec eb       	ldi	r30, 0xBC	; 188
    57b2:	f0 e0       	ldi	r31, 0x00	; 0
    57b4:	80 81       	ld	r24, Z
    57b6:	8a 7b       	andi	r24, 0xBA	; 186
    57b8:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    57ba:	60 e0       	ldi	r22, 0x00	; 0
    57bc:	82 e1       	ldi	r24, 0x12	; 18
    57be:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:106
  digitalWrite(SCL, 0);
    57c2:	60 e0       	ldi	r22, 0x00	; 0
    57c4:	83 e1       	ldi	r24, 0x13	; 19
    57c6:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <digitalWrite>

000057ca <twi_setAddress>:
twi_setAddress():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:118
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    57ca:	88 0f       	add	r24, r24
    57cc:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:119
}
    57d0:	08 95       	ret

000057d2 <twi_setFrequency>:
twi_setFrequency():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    57d2:	9b 01       	movw	r18, r22
    57d4:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    57d6:	60 e0       	ldi	r22, 0x00	; 0
    57d8:	74 e2       	ldi	r23, 0x24	; 36
    57da:	84 ef       	ldi	r24, 0xF4	; 244
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__udivmodsi4>
    57e2:	20 51       	subi	r18, 0x10	; 16
    57e4:	31 09       	sbc	r19, r1
    57e6:	41 09       	sbc	r20, r1
    57e8:	51 09       	sbc	r21, r1
    57ea:	56 95       	lsr	r21
    57ec:	47 95       	ror	r20
    57ee:	37 95       	ror	r19
    57f0:	27 95       	ror	r18
    57f2:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    57f6:	08 95       	ret

000057f8 <twi_readFrom>:
twi_readFrom():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:152
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    57f8:	41 32       	cpi	r20, 0x21	; 33
    57fa:	08 f0       	brcs	.+2      	; 0x57fe <twi_readFrom+0x6>
    57fc:	43 c0       	rjmp	.+134    	; 0x5884 <twi_readFrom+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    57fe:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_state>
    5802:	91 11       	cpse	r25, r1
    5804:	fc cf       	rjmp	.-8      	; 0x57fe <twi_readFrom+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    5806:	91 e0       	ldi	r25, 0x01	; 1
    5808:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    580c:	20 93 b5 04 	sts	0x04B5, r18	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5810:	2f ef       	ldi	r18, 0xFF	; 255
    5812:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5816:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    581a:	24 0f       	add	r18, r20
    581c:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5820:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    5824:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    5828:	88 0f       	add	r24, r24
    582a:	89 2b       	or	r24, r25
    582c:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    5830:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    5834:	81 30       	cpi	r24, 0x01	; 1
    5836:	09 f5       	brne	.+66     	; 0x587a <twi_readFrom+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5838:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187 (discriminator 1)
    do {
      TWDR = twi_slarw;
    583c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    5840:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    5844:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5848:	83 fd       	sbrc	r24, 3
    584a:	f8 cf       	rjmp	.-16     	; 0x583c <twi_readFrom+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    584c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    584e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5852:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    5856:	81 30       	cpi	r24, 0x01	; 1
    5858:	e1 f3       	breq	.-8      	; 0x5852 <twi_readFrom+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    585a:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <twi_masterBufferIndex>
    585e:	84 17       	cp	r24, r20
    5860:	10 f4       	brcc	.+4      	; 0x5866 <twi_readFrom+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    5862:	40 91 8f 04 	lds	r20, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5866:	a0 e9       	ldi	r26, 0x90	; 144
    5868:	b4 e0       	ldi	r27, 0x04	; 4
    586a:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    586c:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204 (discriminator 1)
    586e:	8e 2f       	mov	r24, r30
    5870:	89 1b       	sub	r24, r25
    5872:	84 17       	cp	r24, r20
    5874:	20 f0       	brcs	.+8      	; 0x587e <twi_readFrom+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    5876:	84 2f       	mov	r24, r20
    5878:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    587a:	85 ee       	ldi	r24, 0xE5	; 229
    587c:	e8 cf       	rjmp	.-48     	; 0x584e <twi_readFrom+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    587e:	8d 91       	ld	r24, X+
    5880:	81 93       	st	Z+, r24
    5882:	f5 cf       	rjmp	.-22     	; 0x586e <twi_readFrom+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 0;
    5884:	40 e0       	ldi	r20, 0x00	; 0
    5886:	f7 cf       	rjmp	.-18     	; 0x5876 <twi_readFrom+0x7e>

00005888 <twi_writeTo>:
twi_writeTo():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    5888:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    588a:	41 32       	cpi	r20, 0x21	; 33
    588c:	08 f0       	brcs	.+2      	; 0x5890 <twi_writeTo+0x8>
    588e:	4b c0       	rjmp	.+150    	; 0x5926 <twi_writeTo+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    5890:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_state>
    5894:	91 11       	cpse	r25, r1
    5896:	fc cf       	rjmp	.-8      	; 0x5890 <twi_writeTo+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    5898:	92 e0       	ldi	r25, 0x02	; 2
    589a:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
    589e:	00 93 b5 04 	sts	0x04B5, r16	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    58a2:	9f ef       	ldi	r25, 0xFF	; 255
    58a4:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    58a8:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
    58ac:	40 93 8e 04 	sts	0x048E, r20	; 0x80048e <twi_masterBufferLength>
    58b0:	36 2f       	mov	r19, r22
    58b2:	a0 e9       	ldi	r26, 0x90	; 144
    58b4:	b4 e0       	ldi	r27, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    58b6:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249 (discriminator 1)
    58b8:	9e 2f       	mov	r25, r30
    58ba:	93 1b       	sub	r25, r19
    58bc:	94 17       	cp	r25, r20
    58be:	70 f1       	brcs	.+92     	; 0x591c <twi_writeTo+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    58c0:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
    58c4:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    58c8:	88 0f       	add	r24, r24
    58ca:	89 2b       	or	r24, r25
    58cc:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    58d0:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    58d4:	81 30       	cpi	r24, 0x01	; 1
    58d6:	29 f5       	brne	.+74     	; 0x5922 <twi_writeTo+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    58d8:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269 (discriminator 1)
    do {
      TWDR = twi_slarw;
    58dc:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    58e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    58e4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    58e8:	83 fd       	sbrc	r24, 3
    58ea:	f8 cf       	rjmp	.-16     	; 0x58dc <twi_writeTo+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    58ec:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    58ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    58f2:	22 23       	and	r18, r18
    58f4:	21 f0       	breq	.+8      	; 0x58fe <twi_writeTo+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278 (discriminator 1)
    58f6:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    58fa:	82 30       	cpi	r24, 0x02	; 2
    58fc:	d1 f3       	breq	.-12     	; 0x58f2 <twi_writeTo+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    58fe:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5902:	8f 3f       	cpi	r24, 0xFF	; 255
    5904:	91 f0       	breq	.+36     	; 0x592a <twi_writeTo+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    5906:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    590a:	80 32       	cpi	r24, 0x20	; 32
    590c:	81 f0       	breq	.+32     	; 0x592e <twi_writeTo+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    590e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5912:	80 33       	cpi	r24, 0x30	; 48
    5914:	71 f0       	breq	.+28     	; 0x5932 <twi_writeTo+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    5916:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:290
}
    5918:	0f 91       	pop	r16
    591a:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    591c:	91 91       	ld	r25, Z+
    591e:	9d 93       	st	X+, r25
    5920:	cb cf       	rjmp	.-106    	; 0x58b8 <twi_writeTo+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    5922:	85 ee       	ldi	r24, 0xE5	; 229
    5924:	e4 cf       	rjmp	.-56     	; 0x58ee <twi_writeTo+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	f7 cf       	rjmp	.-18     	; 0x5918 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	f5 cf       	rjmp	.-22     	; 0x5918 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    592e:	82 e0       	ldi	r24, 0x02	; 2
    5930:	f3 cf       	rjmp	.-26     	; 0x5918 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    5932:	83 e0       	ldi	r24, 0x03	; 3
    5934:	f1 cf       	rjmp	.-30     	; 0x5918 <twi_writeTo+0x90>

00005936 <twi_transmit>:
twi_transmit():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    5936:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <twi_txBufferLength>
    593a:	26 0f       	add	r18, r22
    593c:	33 27       	eor	r19, r19
    593e:	33 1f       	adc	r19, r19
    5940:	21 32       	cpi	r18, 0x21	; 33
    5942:	31 05       	cpc	r19, r1
    5944:	ec f4       	brge	.+58     	; 0x5980 <twi_transmit+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5946:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <twi_state>
    594a:	fc 01       	movw	r30, r24
    594c:	90 e0       	ldi	r25, 0x00	; 0
    594e:	80 e0       	ldi	r24, 0x00	; 0
    5950:	24 30       	cpi	r18, 0x04	; 4
    5952:	69 f0       	breq	.+26     	; 0x596e <twi_transmit+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
    5954:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    5956:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    5958:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <twi_txBufferLength>
    595c:	21 91       	ld	r18, Z+
    595e:	ac 01       	movw	r20, r24
    5960:	42 59       	subi	r20, 0x92	; 146
    5962:	5b 4f       	sbci	r21, 0xFB	; 251
    5964:	a4 0f       	add	r26, r20
    5966:	b5 2f       	mov	r27, r21
    5968:	b1 1d       	adc	r27, r1
    596a:	2c 93       	st	X, r18
    596c:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    596e:	86 17       	cp	r24, r22
    5970:	98 f3       	brcs	.-26     	; 0x5958 <twi_transmit+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    5972:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5976:	68 0f       	add	r22, r24
    5978:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:322

  return 0;
    597c:	80 e0       	ldi	r24, 0x00	; 0
    597e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    5980:	81 e0       	ldi	r24, 0x01	; 1
    5982:	08 95       	ret

00005984 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    5984:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <twi_onSlaveReceive+0x1>
    5988:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:334
}
    598c:	08 95       	ret

0000598e <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    598e:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <twi_onSlaveTransmit+0x1>
    5992:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:345
}
    5996:	08 95       	ret

00005998 <twi_reply>:
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:356
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    5998:	88 23       	and	r24, r24
    599a:	21 f0       	breq	.+8      	; 0x59a4 <twi_reply+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    599c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    599e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:361
  }
}
    59a2:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    59a4:	85 e8       	ldi	r24, 0x85	; 133
    59a6:	fb cf       	rjmp	.-10     	; 0x599e <twi_reply+0x6>

000059a8 <twi_stop>:
twi_stop():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    59a8:	85 ed       	ldi	r24, 0xD5	; 213
    59aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    59ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    59b2:	84 fd       	sbrc	r24, 4
    59b4:	fc cf       	rjmp	.-8      	; 0x59ae <twi_stop+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    59b6:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    59ba:	08 95       	ret

000059bc <twi_releaseBus>:
twi_releaseBus():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    59bc:	85 ec       	ldi	r24, 0xC5	; 197
    59be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    59c2:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    59c6:	08 95       	ret

000059c8 <__vector_24>:
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    59c8:	1f 92       	push	r1
    59ca:	0f 92       	push	r0
    59cc:	0f b6       	in	r0, 0x3f	; 63
    59ce:	0f 92       	push	r0
    59d0:	11 24       	eor	r1, r1
    59d2:	2f 93       	push	r18
    59d4:	3f 93       	push	r19
    59d6:	4f 93       	push	r20
    59d8:	5f 93       	push	r21
    59da:	6f 93       	push	r22
    59dc:	7f 93       	push	r23
    59de:	8f 93       	push	r24
    59e0:	9f 93       	push	r25
    59e2:	af 93       	push	r26
    59e4:	bf 93       	push	r27
    59e6:	ef 93       	push	r30
    59e8:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    59ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    59ee:	88 7f       	andi	r24, 0xF8	; 248
    59f0:	80 36       	cpi	r24, 0x60	; 96
    59f2:	09 f4       	brne	.+2      	; 0x59f6 <__vector_24+0x2e>
    59f4:	4c c0       	rjmp	.+152    	; 0x5a8e <__vector_24+0xc6>
    59f6:	08 f0       	brcs	.+2      	; 0x59fa <__vector_24+0x32>
    59f8:	3f c0       	rjmp	.+126    	; 0x5a78 <__vector_24+0xb0>
    59fa:	88 32       	cpi	r24, 0x28	; 40
    59fc:	09 f4       	brne	.+2      	; 0x5a00 <__vector_24+0x38>
    59fe:	a8 c0       	rjmp	.+336    	; 0x5b50 <__vector_24+0x188>
    5a00:	18 f5       	brcc	.+70     	; 0x5a48 <__vector_24+0x80>
    5a02:	80 31       	cpi	r24, 0x10	; 16
    5a04:	09 f4       	brne	.+2      	; 0x5a08 <__vector_24+0x40>
    5a06:	9c c0       	rjmp	.+312    	; 0x5b40 <__vector_24+0x178>
    5a08:	b8 f4       	brcc	.+46     	; 0x5a38 <__vector_24+0x70>
    5a0a:	88 23       	and	r24, r24
    5a0c:	09 f4       	brne	.+2      	; 0x5a10 <__vector_24+0x48>
    5a0e:	f9 c0       	rjmp	.+498    	; 0x5c02 <__vector_24+0x23a>
    5a10:	88 30       	cpi	r24, 0x08	; 8
    5a12:	09 f4       	brne	.+2      	; 0x5a16 <__vector_24+0x4e>
    5a14:	95 c0       	rjmp	.+298    	; 0x5b40 <__vector_24+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    5a16:	ff 91       	pop	r31
    5a18:	ef 91       	pop	r30
    5a1a:	bf 91       	pop	r27
    5a1c:	af 91       	pop	r26
    5a1e:	9f 91       	pop	r25
    5a20:	8f 91       	pop	r24
    5a22:	7f 91       	pop	r23
    5a24:	6f 91       	pop	r22
    5a26:	5f 91       	pop	r21
    5a28:	4f 91       	pop	r20
    5a2a:	3f 91       	pop	r19
    5a2c:	2f 91       	pop	r18
    5a2e:	0f 90       	pop	r0
    5a30:	0f be       	out	0x3f, r0	; 63
    5a32:	0f 90       	pop	r0
    5a34:	1f 90       	pop	r1
    5a36:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5a38:	88 31       	cpi	r24, 0x18	; 24
    5a3a:	09 f4       	brne	.+2      	; 0x5a3e <__vector_24+0x76>
    5a3c:	89 c0       	rjmp	.+274    	; 0x5b50 <__vector_24+0x188>
    5a3e:	80 32       	cpi	r24, 0x20	; 32
    5a40:	51 f7       	brne	.-44     	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5a42:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_error>
    5a46:	15 c0       	rjmp	.+42     	; 0x5a72 <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5a48:	80 34       	cpi	r24, 0x40	; 64
    5a4a:	09 f4       	brne	.+2      	; 0x5a4e <__vector_24+0x86>
    5a4c:	9e c0       	rjmp	.+316    	; 0x5b8a <__vector_24+0x1c2>
    5a4e:	48 f4       	brcc	.+18     	; 0x5a62 <__vector_24+0x9a>
    5a50:	80 33       	cpi	r24, 0x30	; 48
    5a52:	b9 f3       	breq	.-18     	; 0x5a42 <__vector_24+0x7a>
    5a54:	88 33       	cpi	r24, 0x38	; 56
    5a56:	f9 f6       	brne	.-66     	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5a58:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    5a5c:	0e 94 de 2c 	call	0x59bc	; 0x59bc <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    5a60:	da cf       	rjmp	.-76     	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5a62:	80 35       	cpi	r24, 0x50	; 80
    5a64:	09 f4       	brne	.+2      	; 0x5a68 <__vector_24+0xa0>
    5a66:	85 c0       	rjmp	.+266    	; 0x5b72 <__vector_24+0x1aa>
    5a68:	88 35       	cpi	r24, 0x58	; 88
    5a6a:	09 f4       	brne	.+2      	; 0x5a6e <__vector_24+0xa6>
    5a6c:	96 c0       	rjmp	.+300    	; 0x5b9a <__vector_24+0x1d2>
    5a6e:	88 34       	cpi	r24, 0x48	; 72
    5a70:	91 f6       	brne	.-92     	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    5a72:	0e 94 d4 2c 	call	0x59a8	; 0x59a8 <twi_stop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    5a76:	cf cf       	rjmp	.-98     	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5a78:	88 39       	cpi	r24, 0x98	; 152
    5a7a:	09 f4       	brne	.+2      	; 0x5a7e <__vector_24+0xb6>
    5a7c:	8c c0       	rjmp	.+280    	; 0x5b96 <__vector_24+0x1ce>
    5a7e:	38 f5       	brcc	.+78     	; 0x5ace <__vector_24+0x106>
    5a80:	88 37       	cpi	r24, 0x78	; 120
    5a82:	29 f0       	breq	.+10     	; 0x5a8e <__vector_24+0xc6>
    5a84:	50 f4       	brcc	.+20     	; 0x5a9a <__vector_24+0xd2>
    5a86:	88 36       	cpi	r24, 0x68	; 104
    5a88:	11 f0       	breq	.+4      	; 0x5a8e <__vector_24+0xc6>
    5a8a:	80 37       	cpi	r24, 0x70	; 112
    5a8c:	21 f6       	brne	.-120    	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5a8e:	83 e0       	ldi	r24, 0x03	; 3
    5a90:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5a94:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_rxBufferIndex>
    5a98:	57 c0       	rjmp	.+174    	; 0x5b48 <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5a9a:	88 38       	cpi	r24, 0x88	; 136
    5a9c:	09 f4       	brne	.+2      	; 0x5aa0 <__vector_24+0xd8>
    5a9e:	7b c0       	rjmp	.+246    	; 0x5b96 <__vector_24+0x1ce>
    5aa0:	80 39       	cpi	r24, 0x90	; 144
    5aa2:	19 f0       	breq	.+6      	; 0x5aaa <__vector_24+0xe2>
    5aa4:	80 38       	cpi	r24, 0x80	; 128
    5aa6:	09 f0       	breq	.+2      	; 0x5aaa <__vector_24+0xe2>
    5aa8:	b6 cf       	rjmp	.-148    	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    5aaa:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5aae:	80 32       	cpi	r24, 0x20	; 32
    5ab0:	08 f0       	brcs	.+2      	; 0x5ab4 <__vector_24+0xec>
    5ab2:	71 c0       	rjmp	.+226    	; 0x5b96 <__vector_24+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5ab4:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	8e 0f       	add	r24, r30
    5abc:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_rxBufferIndex>
    5ac0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5ac4:	f0 e0       	ldi	r31, 0x00	; 0
    5ac6:	e4 5b       	subi	r30, 0xB4	; 180
    5ac8:	fb 4f       	sbci	r31, 0xFB	; 251
    5aca:	80 83       	st	Z, r24
    5acc:	3d c0       	rjmp	.+122    	; 0x5b48 <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5ace:	80 3b       	cpi	r24, 0xB0	; 176
    5ad0:	39 f0       	breq	.+14     	; 0x5ae0 <__vector_24+0x118>
    5ad2:	e0 f4       	brcc	.+56     	; 0x5b0c <__vector_24+0x144>
    5ad4:	80 3a       	cpi	r24, 0xA0	; 160
    5ad6:	09 f4       	brne	.+2      	; 0x5ada <__vector_24+0x112>
    5ad8:	79 c0       	rjmp	.+242    	; 0x5bcc <__vector_24+0x204>
    5ada:	88 3a       	cpi	r24, 0xA8	; 168
    5adc:	09 f0       	breq	.+2      	; 0x5ae0 <__vector_24+0x118>
    5ade:	9b cf       	rjmp	.-202    	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5ae0:	84 e0       	ldi	r24, 0x04	; 4
    5ae2:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5ae6:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5aea:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5aee:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <twi_onSlaveTransmit>
    5af2:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <twi_onSlaveTransmit+0x1>
    5af6:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5af8:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5afc:	81 11       	cpse	r24, r1
    5afe:	0f c0       	rjmp	.+30     	; 0x5b1e <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    5b00:	81 e0       	ldi	r24, 0x01	; 1
    5b02:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    5b06:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_txBuffer>
    5b0a:	09 c0       	rjmp	.+18     	; 0x5b1e <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5b0c:	80 3c       	cpi	r24, 0xC0	; 192
    5b0e:	09 f4       	brne	.+2      	; 0x5b12 <__vector_24+0x14a>
    5b10:	76 c0       	rjmp	.+236    	; 0x5bfe <__vector_24+0x236>
    5b12:	88 3c       	cpi	r24, 0xC8	; 200
    5b14:	09 f4       	brne	.+2      	; 0x5b18 <__vector_24+0x150>
    5b16:	73 c0       	rjmp	.+230    	; 0x5bfe <__vector_24+0x236>
    5b18:	88 3b       	cpi	r24, 0xB8	; 184
    5b1a:	09 f0       	breq	.+2      	; 0x5b1e <__vector_24+0x156>
    5b1c:	7c cf       	rjmp	.-264    	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5b1e:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <twi_txBufferIndex>
    5b22:	81 e0       	ldi	r24, 0x01	; 1
    5b24:	8e 0f       	add	r24, r30
    5b26:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_txBufferIndex>
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	e2 59       	subi	r30, 0x92	; 146
    5b2e:	fb 4f       	sbci	r31, 0xFB	; 251
    5b30:	80 81       	ld	r24, Z
    5b32:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5b36:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_txBufferIndex>
    5b3a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5b3e:	29 c0       	rjmp	.+82     	; 0x5b92 <__vector_24+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5b40:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5b44:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5b48:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5b4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5b4e:	63 cf       	rjmp	.-314    	; 0x5a16 <__vector_24+0x4e>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5b50:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5b54:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_masterBufferLength>
    5b58:	98 17       	cp	r25, r24
    5b5a:	58 f5       	brcc	.+86     	; 0x5bb2 <__vector_24+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5b5c:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	8e 0f       	add	r24, r30
    5b64:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5b68:	f0 e0       	ldi	r31, 0x00	; 0
    5b6a:	e0 57       	subi	r30, 0x70	; 112
    5b6c:	fb 4f       	sbci	r31, 0xFB	; 251
    5b6e:	80 81       	ld	r24, Z
    5b70:	e9 cf       	rjmp	.-46     	; 0x5b44 <__vector_24+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5b72:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	8e 0f       	add	r24, r30
    5b7a:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5b7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5b82:	f0 e0       	ldi	r31, 0x00	; 0
    5b84:	e0 57       	subi	r30, 0x70	; 112
    5b86:	fb 4f       	sbci	r31, 0xFB	; 251
    5b88:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5b8a:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5b8e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5b92:	98 17       	cp	r25, r24
    5b94:	c8 f2       	brcs	.-78     	; 0x5b48 <__vector_24+0x180>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5b96:	85 e8       	ldi	r24, 0x85	; 133
    5b98:	d8 cf       	rjmp	.-80     	; 0x5b4a <__vector_24+0x182>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5b9a:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5b9e:	81 e0       	ldi	r24, 0x01	; 1
    5ba0:	8e 0f       	add	r24, r30
    5ba2:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5ba6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5baa:	f0 e0       	ldi	r31, 0x00	; 0
    5bac:	e0 57       	subi	r30, 0x70	; 112
    5bae:	fb 4f       	sbci	r31, 0xFB	; 251
    5bb0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    5bb2:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_sendStop>
    5bb6:	81 11       	cpse	r24, r1
    5bb8:	5c cf       	rjmp	.-328    	; 0x5a72 <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    5bba:	81 e0       	ldi	r24, 0x01	; 1
    5bbc:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5bc0:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5bc2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5bc6:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    5bca:	25 cf       	rjmp	.-438    	; 0x5a16 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5bcc:	0e 94 de 2c 	call	0x59bc	; 0x59bc <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    5bd0:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5bd4:	80 32       	cpi	r24, 0x20	; 32
    5bd6:	30 f4       	brcc	.+12     	; 0x5be4 <__vector_24+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5bd8:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5bdc:	f0 e0       	ldi	r31, 0x00	; 0
    5bde:	e4 5b       	subi	r30, 0xB4	; 180
    5be0:	fb 4f       	sbci	r31, 0xFB	; 251
    5be2:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5be4:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5be8:	70 e0       	ldi	r23, 0x00	; 0
    5bea:	e0 91 b0 04 	lds	r30, 0x04B0	; 0x8004b0 <twi_onSlaveReceive>
    5bee:	f0 91 b1 04 	lds	r31, 0x04B1	; 0x8004b1 <twi_onSlaveReceive+0x1>
    5bf2:	8c e4       	ldi	r24, 0x4C	; 76
    5bf4:	94 e0       	ldi	r25, 0x04	; 4
    5bf6:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5bf8:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    5bfc:	0c cf       	rjmp	.-488    	; 0x5a16 <__vector_24+0x4e>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5bfe:	85 ec       	ldi	r24, 0xC5	; 197
    5c00:	e0 cf       	rjmp	.-64     	; 0x5bc2 <__vector_24+0x1fa>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5c02:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <twi_error>
    5c06:	35 cf       	rjmp	.-406    	; 0x5a72 <__vector_24+0xaa>

00005c08 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5c08:	88 eb       	ldi	r24, 0xB8	; 184
    5c0a:	94 e0       	ldi	r25, 0x04	; 4
    5c0c:	0c 94 4f 2b 	jmp	0x569e	; 0x569e <TwoWire::onRequestService()>

00005c10 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:19
                        twi_transmit1,
                        twi_reply1,
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
    5c10:	ab 01       	movw	r20, r22
operator()():
    5c12:	bc 01       	movw	r22, r24
    5c14:	88 eb       	ldi	r24, 0xB8	; 184
    5c16:	94 e0       	ldi	r25, 0x04	; 4
    5c18:	0c 94 27 2b 	jmp	0x564e	; 0x564e <TwoWire::onReceiveService(unsigned char*, int)>

00005c1c <_GLOBAL__sub_I_Wire1>:
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5c1c:	8f 92       	push	r8
    5c1e:	9f 92       	push	r9
    5c20:	af 92       	push	r10
    5c22:	bf 92       	push	r11
    5c24:	cf 92       	push	r12
    5c26:	df 92       	push	r13
    5c28:	ef 92       	push	r14
    5c2a:	ff 92       	push	r15
    5c2c:	0f 93       	push	r16
    5c2e:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    5c30:	84 e0       	ldi	r24, 0x04	; 4
    5c32:	9e e2       	ldi	r25, 0x2E	; 46
    5c34:	9f 93       	push	r25
    5c36:	8f 93       	push	r24
    5c38:	84 e7       	ldi	r24, 0x74	; 116
    5c3a:	9f e2       	ldi	r25, 0x2F	; 47
    5c3c:	9f 93       	push	r25
    5c3e:	8f 93       	push	r24
    5c40:	88 e0       	ldi	r24, 0x08	; 8
    5c42:	9e e2       	ldi	r25, 0x2E	; 46
    5c44:	9f 93       	push	r25
    5c46:	8f 93       	push	r24
    5c48:	8f e6       	ldi	r24, 0x6F	; 111
    5c4a:	9f e2       	ldi	r25, 0x2F	; 47
    5c4c:	9f 93       	push	r25
    5c4e:	8f 93       	push	r24
    5c50:	8b e8       	ldi	r24, 0x8B	; 139
    5c52:	9f e2       	ldi	r25, 0x2F	; 47
    5c54:	9f 93       	push	r25
    5c56:	8f 93       	push	r24
    5c58:	81 e8       	ldi	r24, 0x81	; 129
    5c5a:	9f e2       	ldi	r25, 0x2F	; 47
    5c5c:	9f 93       	push	r25
    5c5e:	8f 93       	push	r24
    5c60:	89 e7       	ldi	r24, 0x79	; 121
    5c62:	9f e2       	ldi	r25, 0x2F	; 47
    5c64:	9f 93       	push	r25
    5c66:	8f 93       	push	r24
    5c68:	88 e4       	ldi	r24, 0x48	; 72
    5c6a:	88 2e       	mov	r8, r24
    5c6c:	8f e2       	ldi	r24, 0x2F	; 47
    5c6e:	98 2e       	mov	r9, r24
    5c70:	91 ef       	ldi	r25, 0xF1	; 241
    5c72:	a9 2e       	mov	r10, r25
    5c74:	9e e2       	ldi	r25, 0x2E	; 46
    5c76:	b9 2e       	mov	r11, r25
    5c78:	29 ea       	ldi	r18, 0xA9	; 169
    5c7a:	c2 2e       	mov	r12, r18
    5c7c:	2e e2       	ldi	r18, 0x2E	; 46
    5c7e:	d2 2e       	mov	r13, r18
    5c80:	36 e9       	ldi	r19, 0x96	; 150
    5c82:	e3 2e       	mov	r14, r19
    5c84:	3e e2       	ldi	r19, 0x2E	; 46
    5c86:	f3 2e       	mov	r15, r19
    5c88:	02 e9       	ldi	r16, 0x92	; 146
    5c8a:	1e e2       	ldi	r17, 0x2E	; 46
    5c8c:	25 e8       	ldi	r18, 0x85	; 133
    5c8e:	3e e2       	ldi	r19, 0x2E	; 46
    5c90:	47 e6       	ldi	r20, 0x67	; 103
    5c92:	5e e2       	ldi	r21, 0x2E	; 46
    5c94:	60 e2       	ldi	r22, 0x20	; 32
    5c96:	70 e0       	ldi	r23, 0x00	; 0
    5c98:	88 eb       	ldi	r24, 0xB8	; 184
    5c9a:	94 e0       	ldi	r25, 0x04	; 4
    5c9c:	0e 94 47 2a 	call	0x548e	; 0x548e <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5ca0:	8d b7       	in	r24, 0x3d	; 61
    5ca2:	9e b7       	in	r25, 0x3e	; 62
    5ca4:	0e 96       	adiw	r24, 0x0e	; 14
    5ca6:	0f b6       	in	r0, 0x3f	; 63
    5ca8:	f8 94       	cli
    5caa:	9e bf       	out	0x3e, r25	; 62
    5cac:	0f be       	out	0x3f, r0	; 63
    5cae:	8d bf       	out	0x3d, r24	; 61
    5cb0:	1f 91       	pop	r17
    5cb2:	0f 91       	pop	r16
    5cb4:	ff 90       	pop	r15
    5cb6:	ef 90       	pop	r14
    5cb8:	df 90       	pop	r13
    5cba:	cf 90       	pop	r12
    5cbc:	bf 90       	pop	r11
    5cbe:	af 90       	pop	r10
    5cc0:	9f 90       	pop	r9
    5cc2:	8f 90       	pop	r8
    5cc4:	08 95       	ret

00005cc6 <_GLOBAL__sub_D_Wire1>:
_GLOBAL__sub_D_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    5cc6:	88 eb       	ldi	r24, 0xB8	; 184
    5cc8:	94 e0       	ldi	r25, 0x04	; 4
    5cca:	0c 94 e3 2a 	jmp	0x55c6	; 0x55c6 <TwoWire::~TwoWire()>

00005cce <twi_init1>:
twi_init1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:71
 * Output   none
 */
void twi_init1(void)
{
  // initialize state
  twi_state = TWI_READY;
    5cce:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:72
  twi_sendStop = true;  // default value
    5cd2:	81 e0       	ldi	r24, 0x01	; 1
    5cd4:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:73
  twi_inRepStart = false;
    5cd8:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA1, 1);
    5cdc:	61 e0       	ldi	r22, 0x01	; 1
    5cde:	87 e1       	ldi	r24, 0x17	; 23
    5ce0:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:77
  digitalWrite(SCL1, 1);
    5ce4:	61 e0       	ldi	r22, 0x01	; 1
    5ce6:	88 e1       	ldi	r24, 0x18	; 24
    5ce8:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR1, TWPS0);
    5cec:	e9 ed       	ldi	r30, 0xD9	; 217
    5cee:	f0 e0       	ldi	r31, 0x00	; 0
    5cf0:	80 81       	ld	r24, Z
    5cf2:	8e 7f       	andi	r24, 0xFE	; 254
    5cf4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:81
  cbi(TWSR1, TWPS1);
    5cf6:	80 81       	ld	r24, Z
    5cf8:	8d 7f       	andi	r24, 0xFD	; 253
    5cfa:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:82
  TWBR1 = ((F_CPU / TWI_FREQ) - 16) / 2;
    5cfc:	88 e4       	ldi	r24, 0x48	; 72
    5cfe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5d02:	85 e4       	ldi	r24, 0x45	; 69
    5d04:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:91
}
    5d08:	08 95       	ret

00005d0a <twi_disable1>:
twi_disable1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:102
 * Output   none
 */
void twi_disable1(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR1 &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    5d0a:	ec ed       	ldi	r30, 0xDC	; 220
    5d0c:	f0 e0       	ldi	r31, 0x00	; 0
    5d0e:	80 81       	ld	r24, Z
    5d10:	8a 7b       	andi	r24, 0xBA	; 186
    5d12:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA1, 0);
    5d14:	60 e0       	ldi	r22, 0x00	; 0
    5d16:	87 e1       	ldi	r24, 0x17	; 23
    5d18:	0e 94 77 36 	call	0x6cee	; 0x6cee <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:106
  digitalWrite(SCL1, 0);
    5d1c:	60 e0       	ldi	r22, 0x00	; 0
    5d1e:	88 e1       	ldi	r24, 0x18	; 24
    5d20:	0c 94 77 36 	jmp	0x6cee	; 0x6cee <digitalWrite>

00005d24 <twi_setAddress1>:
twi_setAddress1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:118
 * Output   none
 */
void twi_setAddress1(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR1 = address << 1;
    5d24:	88 0f       	add	r24, r24
    5d26:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:119
}
    5d2a:	08 95       	ret

00005d2c <twi_setFrequency1>:
twi_setFrequency1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency1(uint32_t frequency)
{
    5d2c:	9b 01       	movw	r18, r22
    5d2e:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    5d30:	60 e0       	ldi	r22, 0x00	; 0
    5d32:	74 e2       	ldi	r23, 0x24	; 36
    5d34:	84 ef       	ldi	r24, 0xF4	; 244
    5d36:	90 e0       	ldi	r25, 0x00	; 0
    5d38:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__udivmodsi4>
    5d3c:	20 51       	subi	r18, 0x10	; 16
    5d3e:	31 09       	sbc	r19, r1
    5d40:	41 09       	sbc	r20, r1
    5d42:	51 09       	sbc	r21, r1
    5d44:	56 95       	lsr	r21
    5d46:	47 95       	ror	r20
    5d48:	37 95       	ror	r19
    5d4a:	27 95       	ror	r18
    5d4c:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
  note: TWBR1 should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    5d50:	08 95       	ret

00005d52 <twi_readFrom1>:
twi_readFrom1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:152
uint8_t twi_readFrom1(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    5d52:	41 32       	cpi	r20, 0x21	; 33
    5d54:	08 f0       	brcs	.+2      	; 0x5d58 <twi_readFrom1+0x6>
    5d56:	43 c0       	rjmp	.+134    	; 0x5dde <twi_readFrom1+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5d58:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <twi_state>
    5d5c:	91 11       	cpse	r25, r1
    5d5e:	fc cf       	rjmp	.-8      	; 0x5d58 <twi_readFrom1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:160
    continue;
  }
  twi_state = TWI_MRX;
    5d60:	91 e0       	ldi	r25, 0x01	; 1
    5d62:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:161
  twi_sendStop = sendStop;
    5d66:	20 93 53 05 	sts	0x0553, r18	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5d6a:	2f ef       	ldi	r18, 0xFF	; 255
    5d6c:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5d70:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5d74:	24 0f       	add	r18, r20
    5d76:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5d7a:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:176
  twi_slarw |= address << 1;
    5d7e:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <twi_slarw>
    5d82:	88 0f       	add	r24, r24
    5d84:	89 2b       	or	r24, r25
    5d86:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:178

  if (true == twi_inRepStart) {
    5d8a:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    5d8e:	81 30       	cpi	r24, 0x01	; 1
    5d90:	09 f5       	brne	.+66     	; 0x5dd4 <twi_readFrom1+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5d92:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:187 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    5d96:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    5d9a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:188 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    5d9e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5da2:	83 fd       	sbrc	r24, 3
    5da4:	f8 cf       	rjmp	.-16     	; 0x5d96 <twi_readFrom1+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:189
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    5da6:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5da8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5dac:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    5db0:	81 30       	cpi	r24, 0x01	; 1
    5db2:	e1 f3       	breq	.-8      	; 0x5dac <twi_readFrom1+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    5db4:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5db8:	84 17       	cp	r24, r20
    5dba:	10 f4       	brcc	.+4      	; 0x5dc0 <twi_readFrom1+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:201
    length = twi_masterBufferIndex;
    5dbc:	40 91 2d 05 	lds	r20, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5dc0:	ae e2       	ldi	r26, 0x2E	; 46
    5dc2:	b5 e0       	ldi	r27, 0x05	; 5
    5dc4:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    5dc6:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204 (discriminator 1)
    5dc8:	8e 2f       	mov	r24, r30
    5dca:	89 1b       	sub	r24, r25
    5dcc:	84 17       	cp	r24, r20
    5dce:	20 f0       	brcs	.+8      	; 0x5dd8 <twi_readFrom1+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    5dd0:	84 2f       	mov	r24, r20
    5dd2:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5dd4:	85 ee       	ldi	r24, 0xE5	; 229
    5dd6:	e8 cf       	rjmp	.-48     	; 0x5da8 <twi_readFrom1+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5dd8:	8d 91       	ld	r24, X+
    5dda:	81 93       	st	Z+, r24
    5ddc:	f5 cf       	rjmp	.-22     	; 0x5dc8 <twi_readFrom1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 0;
    5dde:	40 e0       	ldi	r20, 0x00	; 0
    5de0:	f7 cf       	rjmp	.-18     	; 0x5dd0 <twi_readFrom1+0x7e>

00005de2 <twi_writeTo1>:
twi_writeTo1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo1(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    5de2:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    5de4:	41 32       	cpi	r20, 0x21	; 33
    5de6:	08 f0       	brcs	.+2      	; 0x5dea <twi_writeTo1+0x8>
    5de8:	4b c0       	rjmp	.+150    	; 0x5e80 <twi_writeTo1+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    5dea:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <twi_state>
    5dee:	91 11       	cpse	r25, r1
    5df0:	fc cf       	rjmp	.-8      	; 0x5dea <twi_writeTo1+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:239
    continue;
  }
  twi_state = TWI_MTX;
    5df2:	92 e0       	ldi	r25, 0x02	; 2
    5df4:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:240
  twi_sendStop = sendStop;
    5df8:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5dfc:	9f ef       	ldi	r25, 0xFF	; 255
    5dfe:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5e02:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:246
  twi_masterBufferLength = length;
    5e06:	40 93 2c 05 	sts	0x052C, r20	; 0x80052c <twi_masterBufferLength>
    5e0a:	36 2f       	mov	r19, r22
    5e0c:	ae e2       	ldi	r26, 0x2E	; 46
    5e0e:	b5 e0       	ldi	r27, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    5e10:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249 (discriminator 1)
    5e12:	9e 2f       	mov	r25, r30
    5e14:	93 1b       	sub	r25, r19
    5e16:	94 17       	cp	r25, r20
    5e18:	70 f1       	brcs	.+92     	; 0x5e76 <twi_writeTo1+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    5e1a:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:255
  twi_slarw |= address << 1;
    5e1e:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <twi_slarw>
    5e22:	88 0f       	add	r24, r24
    5e24:	89 2b       	or	r24, r25
    5e26:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5e2a:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    5e2e:	81 30       	cpi	r24, 0x01	; 1
    5e30:	29 f5       	brne	.+74     	; 0x5e7c <twi_writeTo1+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5e32:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:269 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    5e36:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    5e3a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:270 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    5e3e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5e42:	83 fd       	sbrc	r24, 3
    5e44:	f8 cf       	rjmp	.-16     	; 0x5e36 <twi_writeTo1+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:271
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    5e46:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    5e48:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    5e4c:	22 23       	and	r18, r18
    5e4e:	21 f0       	breq	.+8      	; 0x5e58 <twi_writeTo1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278 (discriminator 1)
    5e50:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    5e54:	82 30       	cpi	r24, 0x02	; 2
    5e56:	d1 f3       	breq	.-12     	; 0x5e4c <twi_writeTo1+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    5e58:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    5e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    5e5e:	91 f0       	breq	.+36     	; 0x5e84 <twi_writeTo1+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    5e60:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    5e64:	80 32       	cpi	r24, 0x20	; 32
    5e66:	81 f0       	breq	.+32     	; 0x5e88 <twi_writeTo1+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5e68:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    5e6c:	80 33       	cpi	r24, 0x30	; 48
    5e6e:	71 f0       	breq	.+28     	; 0x5e8c <twi_writeTo1+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    5e70:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:290
}
    5e72:	0f 91       	pop	r16
    5e74:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    5e76:	91 91       	ld	r25, Z+
    5e78:	9d 93       	st	X+, r25
    5e7a:	cb cf       	rjmp	.-106    	; 0x5e12 <twi_writeTo1+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    5e7c:	85 ee       	ldi	r24, 0xE5	; 229
    5e7e:	e4 cf       	rjmp	.-56     	; 0x5e48 <twi_writeTo1+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 1;
    5e80:	81 e0       	ldi	r24, 0x01	; 1
    5e82:	f7 cf       	rjmp	.-18     	; 0x5e72 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    5e84:	80 e0       	ldi	r24, 0x00	; 0
    5e86:	f5 cf       	rjmp	.-22     	; 0x5e72 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    5e88:	82 e0       	ldi	r24, 0x02	; 2
    5e8a:	f3 cf       	rjmp	.-26     	; 0x5e72 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    5e8c:	83 e0       	ldi	r24, 0x03	; 3
    5e8e:	f1 cf       	rjmp	.-30     	; 0x5e72 <twi_writeTo1+0x90>

00005e90 <twi_transmit1>:
twi_transmit1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:307
uint8_t twi_transmit1(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    5e90:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <twi_txBufferLength>
    5e94:	26 0f       	add	r18, r22
    5e96:	33 27       	eor	r19, r19
    5e98:	33 1f       	adc	r19, r19
    5e9a:	21 32       	cpi	r18, 0x21	; 33
    5e9c:	31 05       	cpc	r19, r1
    5e9e:	ec f4       	brge	.+58     	; 0x5eda <twi_transmit1+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5ea0:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <twi_state>
    5ea4:	fc 01       	movw	r30, r24
    5ea6:	90 e0       	ldi	r25, 0x00	; 0
    5ea8:	80 e0       	ldi	r24, 0x00	; 0
    5eaa:	24 30       	cpi	r18, 0x04	; 4
    5eac:	69 f0       	breq	.+26     	; 0x5ec8 <twi_transmit1+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:313
    return 2;
    5eae:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
    5eb0:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    5eb2:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <twi_txBufferLength>
    5eb6:	21 91       	ld	r18, Z+
    5eb8:	ac 01       	movw	r20, r24
    5eba:	44 5f       	subi	r20, 0xF4	; 244
    5ebc:	5a 4f       	sbci	r21, 0xFA	; 250
    5ebe:	a4 0f       	add	r26, r20
    5ec0:	b5 2f       	mov	r27, r21
    5ec2:	b1 1d       	adc	r27, r1
    5ec4:	2c 93       	st	X, r18
    5ec6:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    5ec8:	86 17       	cp	r24, r22
    5eca:	98 f3       	brcs	.-26     	; 0x5eb2 <twi_transmit1+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    5ecc:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    5ed0:	68 0f       	add	r22, r24
    5ed2:	60 93 0a 05 	sts	0x050A, r22	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:322
  
  return 0;
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    5eda:	81 e0       	ldi	r24, 0x01	; 1
    5edc:	08 95       	ret

00005ede <twi_attachSlaveRxEvent1>:
twi_attachSlaveRxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent1( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    5ede:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <twi_onSlaveReceive+0x1>
    5ee2:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:334
}
    5ee6:	08 95       	ret

00005ee8 <twi_attachSlaveTxEvent1>:
twi_attachSlaveTxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent1( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    5ee8:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <twi_onSlaveTransmit+0x1>
    5eec:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:345
}
    5ef0:	08 95       	ret

00005ef2 <twi_reply1>:
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:356
 * Output   none
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    5ef2:	88 23       	and	r24, r24
    5ef4:	21 f0       	breq	.+8      	; 0x5efe <twi_reply1+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5ef6:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5ef8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:361
  }
}
    5efc:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5efe:	85 e8       	ldi	r24, 0x85	; 133
    5f00:	fb cf       	rjmp	.-10     	; 0x5ef8 <twi_reply1+0x6>

00005f02 <twi_stop1>:
twi_stop1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:372
 * Output   none
 */
void twi_stop1(void)
{
  // send stop condition
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5f02:	85 ed       	ldi	r24, 0xD5	; 213
    5f04:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR1 & _BV(TWSTO)){
    5f08:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5f0c:	84 fd       	sbrc	r24, 4
    5f0e:	fc cf       	rjmp	.-8      	; 0x5f08 <twi_stop1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5f10:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:382
}
    5f14:	08 95       	ret

00005f16 <twi_releaseBus1>:
twi_releaseBus1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:393
 * Output   none
 */
void twi_releaseBus1(void)
{
  // release bus
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5f16:	85 ec       	ldi	r24, 0xC5	; 197
    5f18:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:396

  // update twi state
  twi_state = TWI_READY;
    5f1c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:397
}
    5f20:	08 95       	ret

00005f22 <__vector_40>:
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:400

ISR(TWI1_vect)
{
    5f22:	1f 92       	push	r1
    5f24:	0f 92       	push	r0
    5f26:	0f b6       	in	r0, 0x3f	; 63
    5f28:	0f 92       	push	r0
    5f2a:	11 24       	eor	r1, r1
    5f2c:	2f 93       	push	r18
    5f2e:	3f 93       	push	r19
    5f30:	4f 93       	push	r20
    5f32:	5f 93       	push	r21
    5f34:	6f 93       	push	r22
    5f36:	7f 93       	push	r23
    5f38:	8f 93       	push	r24
    5f3a:	9f 93       	push	r25
    5f3c:	af 93       	push	r26
    5f3e:	bf 93       	push	r27
    5f40:	ef 93       	push	r30
    5f42:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5f44:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    5f48:	88 7f       	andi	r24, 0xF8	; 248
    5f4a:	80 36       	cpi	r24, 0x60	; 96
    5f4c:	09 f4       	brne	.+2      	; 0x5f50 <__vector_40+0x2e>
    5f4e:	4c c0       	rjmp	.+152    	; 0x5fe8 <__vector_40+0xc6>
    5f50:	08 f0       	brcs	.+2      	; 0x5f54 <__vector_40+0x32>
    5f52:	3f c0       	rjmp	.+126    	; 0x5fd2 <__vector_40+0xb0>
    5f54:	88 32       	cpi	r24, 0x28	; 40
    5f56:	09 f4       	brne	.+2      	; 0x5f5a <__vector_40+0x38>
    5f58:	a8 c0       	rjmp	.+336    	; 0x60aa <__vector_40+0x188>
    5f5a:	18 f5       	brcc	.+70     	; 0x5fa2 <__vector_40+0x80>
    5f5c:	80 31       	cpi	r24, 0x10	; 16
    5f5e:	09 f4       	brne	.+2      	; 0x5f62 <__vector_40+0x40>
    5f60:	9c c0       	rjmp	.+312    	; 0x609a <__vector_40+0x178>
    5f62:	b8 f4       	brcc	.+46     	; 0x5f92 <__vector_40+0x70>
    5f64:	88 23       	and	r24, r24
    5f66:	09 f4       	brne	.+2      	; 0x5f6a <__vector_40+0x48>
    5f68:	f9 c0       	rjmp	.+498    	; 0x615c <__vector_40+0x23a>
    5f6a:	88 30       	cpi	r24, 0x08	; 8
    5f6c:	09 f4       	brne	.+2      	; 0x5f70 <__vector_40+0x4e>
    5f6e:	95 c0       	rjmp	.+298    	; 0x609a <__vector_40+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
      break;
  }
}
    5f70:	ff 91       	pop	r31
    5f72:	ef 91       	pop	r30
    5f74:	bf 91       	pop	r27
    5f76:	af 91       	pop	r26
    5f78:	9f 91       	pop	r25
    5f7a:	8f 91       	pop	r24
    5f7c:	7f 91       	pop	r23
    5f7e:	6f 91       	pop	r22
    5f80:	5f 91       	pop	r21
    5f82:	4f 91       	pop	r20
    5f84:	3f 91       	pop	r19
    5f86:	2f 91       	pop	r18
    5f88:	0f 90       	pop	r0
    5f8a:	0f be       	out	0x3f, r0	; 63
    5f8c:	0f 90       	pop	r0
    5f8e:	1f 90       	pop	r1
    5f90:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5f92:	88 31       	cpi	r24, 0x18	; 24
    5f94:	09 f4       	brne	.+2      	; 0x5f98 <__vector_40+0x76>
    5f96:	89 c0       	rjmp	.+274    	; 0x60aa <__vector_40+0x188>
    5f98:	80 32       	cpi	r24, 0x20	; 32
    5f9a:	51 f7       	brne	.-44     	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:437
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop1();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5f9c:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <twi_error>
    5fa0:	15 c0       	rjmp	.+42     	; 0x5fcc <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5fa2:	80 34       	cpi	r24, 0x40	; 64
    5fa4:	09 f4       	brne	.+2      	; 0x5fa8 <__vector_40+0x86>
    5fa6:	9e c0       	rjmp	.+316    	; 0x60e4 <__vector_40+0x1c2>
    5fa8:	48 f4       	brcc	.+18     	; 0x5fbc <__vector_40+0x9a>
    5faa:	80 33       	cpi	r24, 0x30	; 48
    5fac:	b9 f3       	breq	.-18     	; 0x5f9c <__vector_40+0x7a>
    5fae:	88 33       	cpi	r24, 0x38	; 56
    5fb0:	f9 f6       	brne	.-66     	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:441
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop1();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5fb2:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:442
      twi_releaseBus1();
    5fb6:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:443
      break;
    5fba:	da cf       	rjmp	.-76     	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5fbc:	80 35       	cpi	r24, 0x50	; 80
    5fbe:	09 f4       	brne	.+2      	; 0x5fc2 <__vector_40+0xa0>
    5fc0:	85 c0       	rjmp	.+266    	; 0x60cc <__vector_40+0x1aa>
    5fc2:	88 35       	cpi	r24, 0x58	; 88
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <__vector_40+0xa6>
    5fc6:	96 c0       	rjmp	.+300    	; 0x60f4 <__vector_40+0x1d2>
    5fc8:	88 34       	cpi	r24, 0x48	; 72
    5fca:	91 f6       	brne	.-92     	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:560
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
    5fcc:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <twi_stop1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
      break;
  }
}
    5fd0:	cf cf       	rjmp	.-98     	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5fd2:	88 39       	cpi	r24, 0x98	; 152
    5fd4:	09 f4       	brne	.+2      	; 0x5fd8 <__vector_40+0xb6>
    5fd6:	8c c0       	rjmp	.+280    	; 0x60f0 <__vector_40+0x1ce>
    5fd8:	38 f5       	brcc	.+78     	; 0x6028 <__vector_40+0x106>
    5fda:	88 37       	cpi	r24, 0x78	; 120
    5fdc:	29 f0       	breq	.+10     	; 0x5fe8 <__vector_40+0xc6>
    5fde:	50 f4       	brcc	.+20     	; 0x5ff4 <__vector_40+0xd2>
    5fe0:	88 36       	cpi	r24, 0x68	; 104
    5fe2:	11 f0       	breq	.+4      	; 0x5fe8 <__vector_40+0xc6>
    5fe4:	80 37       	cpi	r24, 0x70	; 112
    5fe6:	21 f6       	brne	.-120    	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:483
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5fe8:	83 e0       	ldi	r24, 0x03	; 3
    5fea:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:485
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5fee:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <twi_rxBufferIndex>
    5ff2:	57 c0       	rjmp	.+174    	; 0x60a2 <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5ff4:	88 38       	cpi	r24, 0x88	; 136
    5ff6:	09 f4       	brne	.+2      	; 0x5ffa <__vector_40+0xd8>
    5ff8:	7b c0       	rjmp	.+246    	; 0x60f0 <__vector_40+0x1ce>
    5ffa:	80 39       	cpi	r24, 0x90	; 144
    5ffc:	19 f0       	breq	.+6      	; 0x6004 <__vector_40+0xe2>
    5ffe:	80 38       	cpi	r24, 0x80	; 128
    6000:	09 f0       	breq	.+2      	; 0x6004 <__vector_40+0xe2>
    6002:	b6 cf       	rjmp	.-148    	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:491
      twi_reply1(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    6004:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    6008:	80 32       	cpi	r24, 0x20	; 32
    600a:	08 f0       	brcs	.+2      	; 0x600e <__vector_40+0xec>
    600c:	71 c0       	rjmp	.+226    	; 0x60f0 <__vector_40+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:493
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR1;
    600e:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    6012:	81 e0       	ldi	r24, 0x01	; 1
    6014:	8e 0f       	add	r24, r30
    6016:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <twi_rxBufferIndex>
    601a:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    601e:	f0 e0       	ldi	r31, 0x00	; 0
    6020:	e6 51       	subi	r30, 0x16	; 22
    6022:	fb 4f       	sbci	r31, 0xFB	; 251
    6024:	80 83       	st	Z, r24
    6026:	3d c0       	rjmp	.+122    	; 0x60a2 <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6028:	80 3b       	cpi	r24, 0xB0	; 176
    602a:	39 f0       	breq	.+14     	; 0x603a <__vector_40+0x118>
    602c:	e0 f4       	brcc	.+56     	; 0x6066 <__vector_40+0x144>
    602e:	80 3a       	cpi	r24, 0xA0	; 160
    6030:	09 f4       	brne	.+2      	; 0x6034 <__vector_40+0x112>
    6032:	79 c0       	rjmp	.+242    	; 0x6126 <__vector_40+0x204>
    6034:	88 3a       	cpi	r24, 0xA8	; 168
    6036:	09 f0       	breq	.+2      	; 0x603a <__vector_40+0x118>
    6038:	9b cf       	rjmp	.-202    	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:522
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    603a:	84 e0       	ldi	r24, 0x04	; 4
    603c:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:524
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6040:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:526
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6044:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:529
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6048:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <twi_onSlaveTransmit>
    604c:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <twi_onSlaveTransmit+0x1>
    6050:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:531
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6052:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    6056:	81 11       	cpse	r24, r1
    6058:	0f c0       	rjmp	.+30     	; 0x6078 <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:532
        twi_txBufferLength = 1;
    605a:	81 e0       	ldi	r24, 0x01	; 1
    605c:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:533
        twi_txBuffer[0] = 0x00;
    6060:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_txBuffer>
    6064:	09 c0       	rjmp	.+18     	; 0x6078 <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6066:	80 3c       	cpi	r24, 0xC0	; 192
    6068:	09 f4       	brne	.+2      	; 0x606c <__vector_40+0x14a>
    606a:	76 c0       	rjmp	.+236    	; 0x6158 <__vector_40+0x236>
    606c:	88 3c       	cpi	r24, 0xC8	; 200
    606e:	09 f4       	brne	.+2      	; 0x6072 <__vector_40+0x150>
    6070:	73 c0       	rjmp	.+230    	; 0x6158 <__vector_40+0x236>
    6072:	88 3b       	cpi	r24, 0xB8	; 184
    6074:	09 f0       	breq	.+2      	; 0x6078 <__vector_40+0x156>
    6076:	7c cf       	rjmp	.-264    	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:539
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
    6078:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <twi_txBufferIndex>
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	8e 0f       	add	r24, r30
    6080:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_txBufferIndex>
    6084:	f0 e0       	ldi	r31, 0x00	; 0
    6086:	e4 5f       	subi	r30, 0xF4	; 244
    6088:	fa 4f       	sbci	r31, 0xFA	; 250
    608a:	80 81       	ld	r24, Z
    608c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6090:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <twi_txBufferIndex>
    6094:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    6098:	29 c0       	rjmp	.+82     	; 0x60ec <__vector_40+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:407
  switch(TWSR1 & TW_STATUS_MASK){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR1 = twi_slarw;
    609a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    609e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    60a2:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    60a4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    60a8:	63 cf       	rjmp	.-314    	; 0x5f70 <__vector_40+0x4e>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:415

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    60aa:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_masterBufferIndex>
    60ae:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_masterBufferLength>
    60b2:	98 17       	cp	r25, r24
    60b4:	58 f5       	brcc	.+86     	; 0x610c <__vector_40+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    60b6:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    60ba:	81 e0       	ldi	r24, 0x01	; 1
    60bc:	8e 0f       	add	r24, r30
    60be:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    60c2:	f0 e0       	ldi	r31, 0x00	; 0
    60c4:	e2 5d       	subi	r30, 0xD2	; 210
    60c6:	fa 4f       	sbci	r31, 0xFA	; 250
    60c8:	80 81       	ld	r24, Z
    60ca:	e9 cf       	rjmp	.-46     	; 0x609e <__vector_40+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:448
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    60cc:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    60d0:	81 e0       	ldi	r24, 0x01	; 1
    60d2:	8e 0f       	add	r24, r30
    60d4:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    60d8:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    60dc:	f0 e0       	ldi	r31, 0x00	; 0
    60de:	e2 5d       	subi	r30, 0xD2	; 210
    60e0:	fa 4f       	sbci	r31, 0xFA	; 250
    60e2:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:452
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    60e4:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_masterBufferIndex>
    60e8:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    60ec:	98 17       	cp	r25, r24
    60ee:	c8 f2       	brcs	.-78     	; 0x60a2 <__vector_40+0x180>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    60f0:	85 e8       	ldi	r24, 0x85	; 133
    60f2:	d8 cf       	rjmp	.-80     	; 0x60a4 <__vector_40+0x182>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:460
        twi_reply1(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    60f4:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	8e 0f       	add	r24, r30
    60fc:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    6100:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    6104:	f0 e0       	ldi	r31, 0x00	; 0
    6106:	e2 5d       	subi	r30, 0xD2	; 210
    6108:	fa 4f       	sbci	r31, 0xFA	; 250
    610a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:461
  if (twi_sendStop)
    610c:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <twi_sendStop>
    6110:	81 11       	cpse	r24, r1
    6112:	5c cf       	rjmp	.-328    	; 0x5fcc <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:464
          twi_stop1();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    6114:	81 e0       	ldi	r24, 0x01	; 1
    6116:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:468
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR1 = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    611a:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    611c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:552
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply1(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    6120:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:553
      break;
    6124:	25 cf       	rjmp	.-438    	; 0x5f70 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:502
        twi_reply1(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus1();
    6126:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:504
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    612a:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    612e:	80 32       	cpi	r24, 0x20	; 32
    6130:	30 f4       	brcc	.+12     	; 0x613e <__vector_40+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:505
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6132:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    6136:	f0 e0       	ldi	r31, 0x00	; 0
    6138:	e6 51       	subi	r30, 0x16	; 22
    613a:	fb 4f       	sbci	r31, 0xFB	; 251
    613c:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:508
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    613e:	60 91 e9 04 	lds	r22, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    6142:	70 e0       	ldi	r23, 0x00	; 0
    6144:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <twi_onSlaveReceive>
    6148:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <twi_onSlaveReceive+0x1>
    614c:	8a ee       	ldi	r24, 0xEA	; 234
    614e:	94 e0       	ldi	r25, 0x04	; 4
    6150:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:510
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6152:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:511
      break;
    6156:	0c cf       	rjmp	.-488    	; 0x5f70 <__vector_40+0x4e>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6158:	85 ec       	ldi	r24, 0xC5	; 197
    615a:	e0 cf       	rjmp	.-64     	; 0x611c <__vector_40+0x1fa>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:559

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    615c:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <twi_error>
    6160:	35 cf       	rjmp	.-406    	; 0x5fcc <__vector_40+0xaa>

00006162 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    6162:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6164:	91 8d       	ldd	r25, Z+25	; 0x19
    6166:	22 8d       	ldd	r18, Z+26	; 0x1a
    6168:	89 2f       	mov	r24, r25
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	80 5c       	subi	r24, 0xC0	; 192
    616e:	9f 4f       	sbci	r25, 0xFF	; 255
    6170:	82 1b       	sub	r24, r18
    6172:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    6174:	8f 73       	andi	r24, 0x3F	; 63
    6176:	99 27       	eor	r25, r25
    6178:	08 95       	ret

0000617a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    617a:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    617c:	91 8d       	ldd	r25, Z+25	; 0x19
    617e:	82 8d       	ldd	r24, Z+26	; 0x1a
    6180:	98 17       	cp	r25, r24
    6182:	31 f0       	breq	.+12     	; 0x6190 <HardwareSerial::peek()+0x16>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6184:	82 8d       	ldd	r24, Z+26	; 0x1a
    6186:	e8 0f       	add	r30, r24
    6188:	f1 1d       	adc	r31, r1
    618a:	85 8d       	ldd	r24, Z+29	; 0x1d
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6190:	8f ef       	ldi	r24, 0xFF	; 255
    6192:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6194:	08 95       	ret

00006196 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    6196:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6198:	91 8d       	ldd	r25, Z+25	; 0x19
    619a:	82 8d       	ldd	r24, Z+26	; 0x1a
    619c:	98 17       	cp	r25, r24
    619e:	61 f0       	breq	.+24     	; 0x61b8 <HardwareSerial::read()+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    61a0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    61a2:	ae 0f       	add	r26, r30
    61a4:	bf 2f       	mov	r27, r31
    61a6:	b1 1d       	adc	r27, r1
    61a8:	5d 96       	adiw	r26, 0x1d	; 29
    61aa:	8c 91       	ld	r24, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    61ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    61ae:	9f 5f       	subi	r25, 0xFF	; 255
    61b0:	9f 73       	andi	r25, 0x3F	; 63
    61b2:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    61b4:	90 e0       	ldi	r25, 0x00	; 0
    61b6:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    61b8:	8f ef       	ldi	r24, 0xFF	; 255
    61ba:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    61bc:	08 95       	ret

000061be <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    61be:	fc 01       	movw	r30, r24
    61c0:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    61c2:	44 8d       	ldd	r20, Z+28	; 0x1c
    61c4:	25 2f       	mov	r18, r21
    61c6:	30 e0       	ldi	r19, 0x00	; 0
    61c8:	84 2f       	mov	r24, r20
    61ca:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    61cc:	82 1b       	sub	r24, r18
    61ce:	93 0b       	sbc	r25, r19
    61d0:	54 17       	cp	r21, r20
    61d2:	10 f0       	brcs	.+4      	; 0x61d8 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    61d4:	cf 96       	adiw	r24, 0x3f	; 63
    61d6:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    61d8:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    61da:	08 95       	ret

000061dc <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    61dc:	84 e5       	ldi	r24, 0x54	; 84
    61de:	92 e3       	ldi	r25, 0x32	; 50
    61e0:	89 2b       	or	r24, r25
    61e2:	49 f0       	breq	.+18     	; 0x61f6 <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    61e4:	80 e0       	ldi	r24, 0x00	; 0
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	89 2b       	or	r24, r25
    61ea:	29 f0       	breq	.+10     	; 0x61f6 <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    61ec:	0e 94 54 32 	call	0x64a8	; 0x64a8 <Serial0_available()>
    61f0:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    61f2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    61f6:	80 e0       	ldi	r24, 0x00	; 0
    61f8:	90 e0       	ldi	r25, 0x00	; 0
    61fa:	89 2b       	or	r24, r25
    61fc:	49 f0       	breq	.+18     	; 0x6210 <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    61fe:	80 e0       	ldi	r24, 0x00	; 0
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	89 2b       	or	r24, r25
    6204:	29 f0       	breq	.+10     	; 0x6210 <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    6206:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    620a:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    620c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    6210:	08 95       	ret

00006212 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6212:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6214:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6216:	a8 0f       	add	r26, r24
    6218:	b9 2f       	mov	r27, r25
    621a:	b1 1d       	adc	r27, r1
    621c:	a3 5a       	subi	r26, 0xA3	; 163
    621e:	bf 4f       	sbci	r27, 0xFF	; 255
    6220:	2c 91       	ld	r18, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6222:	84 8d       	ldd	r24, Z+28	; 0x1c
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	01 96       	adiw	r24, 0x01	; 1
    6228:	8f 73       	andi	r24, 0x3F	; 63
    622a:	99 27       	eor	r25, r25
    622c:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    622e:	a6 89       	ldd	r26, Z+22	; 0x16
    6230:	b7 89       	ldd	r27, Z+23	; 0x17
    6232:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    6234:	a0 89       	ldd	r26, Z+16	; 0x10
    6236:	b1 89       	ldd	r27, Z+17	; 0x11
    6238:	8c 91       	ld	r24, X
    623a:	80 64       	ori	r24, 0x40	; 64
    623c:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    623e:	93 8d       	ldd	r25, Z+27	; 0x1b
    6240:	84 8d       	ldd	r24, Z+28	; 0x1c
    6242:	98 13       	cpse	r25, r24
    6244:	06 c0       	rjmp	.+12     	; 0x6252 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    6246:	02 88       	ldd	r0, Z+18	; 0x12
    6248:	f3 89       	ldd	r31, Z+19	; 0x13
    624a:	e0 2d       	mov	r30, r0
    624c:	80 81       	ld	r24, Z
    624e:	8f 7d       	andi	r24, 0xDF	; 223
    6250:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    6252:	08 95       	ret

00006254 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
    6258:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    625a:	88 8d       	ldd	r24, Y+24	; 0x18
    625c:	88 23       	and	r24, r24
    625e:	b9 f0       	breq	.+46     	; 0x628e <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    6260:	aa 89       	ldd	r26, Y+18	; 0x12
    6262:	bb 89       	ldd	r27, Y+19	; 0x13
    6264:	e8 89       	ldd	r30, Y+16	; 0x10
    6266:	f9 89       	ldd	r31, Y+17	; 0x11
    6268:	8c 91       	ld	r24, X
    626a:	85 fd       	sbrc	r24, 5
    626c:	03 c0       	rjmp	.+6      	; 0x6274 <HardwareSerial::flush()+0x20>
    626e:	80 81       	ld	r24, Z
    6270:	86 fd       	sbrc	r24, 6
    6272:	0d c0       	rjmp	.+26     	; 0x628e <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6274:	0f b6       	in	r0, 0x3f	; 63
    6276:	07 fc       	sbrc	r0, 7
    6278:	f7 cf       	rjmp	.-18     	; 0x6268 <HardwareSerial::flush()+0x14>
    627a:	8c 91       	ld	r24, X
    627c:	85 ff       	sbrs	r24, 5
    627e:	f2 cf       	rjmp	.-28     	; 0x6264 <HardwareSerial::flush()+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    6280:	80 81       	ld	r24, Z
    6282:	85 ff       	sbrs	r24, 5
    6284:	ed cf       	rjmp	.-38     	; 0x6260 <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    6286:	ce 01       	movw	r24, r28
    6288:	0e 94 09 31 	call	0x6212	; 0x6212 <HardwareSerial::_tx_udr_empty_irq()>
    628c:	e9 cf       	rjmp	.-46     	; 0x6260 <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    628e:	df 91       	pop	r29
    6290:	cf 91       	pop	r28
    6292:	08 95       	ret

00006294 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    6294:	ef 92       	push	r14
    6296:	ff 92       	push	r15
    6298:	0f 93       	push	r16
    629a:	1f 93       	push	r17
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    62a2:	81 e0       	ldi	r24, 0x01	; 1
    62a4:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    62a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    62a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    62aa:	98 13       	cpse	r25, r24
    62ac:	16 c0       	rjmp	.+44     	; 0x62da <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    62ae:	e8 89       	ldd	r30, Y+16	; 0x10
    62b0:	f9 89       	ldd	r31, Y+17	; 0x11
    62b2:	80 81       	ld	r24, Z
    62b4:	85 ff       	sbrs	r24, 5
    62b6:	11 c0       	rjmp	.+34     	; 0x62da <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    62b8:	ee 89       	ldd	r30, Y+22	; 0x16
    62ba:	ff 89       	ldd	r31, Y+23	; 0x17
    62bc:	60 83       	st	Z, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    62be:	e8 89       	ldd	r30, Y+16	; 0x10
    62c0:	f9 89       	ldd	r31, Y+17	; 0x11
    62c2:	80 81       	ld	r24, Z
    62c4:	80 64       	ori	r24, 0x40	; 64
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    62c6:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    62c8:	81 e0       	ldi	r24, 0x01	; 1
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	1f 91       	pop	r17
    62d2:	0f 91       	pop	r16
    62d4:	ff 90       	pop	r15
    62d6:	ef 90       	pop	r14
    62d8:	08 95       	ret
    62da:	f6 2e       	mov	r15, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    62dc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    62de:	10 e0       	ldi	r17, 0x00	; 0
    62e0:	0f 5f       	subi	r16, 0xFF	; 255
    62e2:	1f 4f       	sbci	r17, 0xFF	; 255
    62e4:	0f 73       	andi	r16, 0x3F	; 63
    62e6:	11 27       	eor	r17, r17
    62e8:	e0 2e       	mov	r14, r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    62ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    62ec:	8e 11       	cpse	r24, r14
    62ee:	0c c0       	rjmp	.+24     	; 0x6308 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	07 fc       	sbrc	r0, 7
    62f4:	fa cf       	rjmp	.-12     	; 0x62ea <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    62f6:	e8 89       	ldd	r30, Y+16	; 0x10
    62f8:	f9 89       	ldd	r31, Y+17	; 0x11
    62fa:	80 81       	ld	r24, Z
    62fc:	85 ff       	sbrs	r24, 5
    62fe:	f5 cf       	rjmp	.-22     	; 0x62ea <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    6300:	ce 01       	movw	r24, r28
    6302:	0e 94 09 31 	call	0x6212	; 0x6212 <HardwareSerial::_tx_udr_empty_irq()>
    6306:	f1 cf       	rjmp	.-30     	; 0x62ea <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6308:	eb 8d       	ldd	r30, Y+27	; 0x1b
    630a:	ec 0f       	add	r30, r28
    630c:	fd 2f       	mov	r31, r29
    630e:	f1 1d       	adc	r31, r1
    6310:	e3 5a       	subi	r30, 0xA3	; 163
    6312:	ff 4f       	sbci	r31, 0xFF	; 255
    6314:	f0 82       	st	Z, r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    6316:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    6318:	ea 89       	ldd	r30, Y+18	; 0x12
    631a:	fb 89       	ldd	r31, Y+19	; 0x13
    631c:	80 81       	ld	r24, Z
    631e:	80 62       	ori	r24, 0x20	; 32
    6320:	d2 cf       	rjmp	.-92     	; 0x62c6 <HardwareSerial::write(unsigned char)+0x32>

00006322 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6322:	cf 92       	push	r12
    6324:	df 92       	push	r13
    6326:	ef 92       	push	r14
    6328:	ff 92       	push	r15
    632a:	1f 93       	push	r17
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
    6330:	ec 01       	movw	r28, r24
    6332:	6a 01       	movw	r12, r20
    6334:	7b 01       	movw	r14, r22
    6336:	12 2f       	mov	r17, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6338:	e8 89       	ldd	r30, Y+16	; 0x10
    633a:	f9 89       	ldd	r31, Y+17	; 0x11
    633c:	82 e0       	ldi	r24, 0x02	; 2
    633e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6340:	c1 14       	cp	r12, r1
    6342:	81 ee       	ldi	r24, 0xE1	; 225
    6344:	d8 06       	cpc	r13, r24
    6346:	e1 04       	cpc	r14, r1
    6348:	f1 04       	cpc	r15, r1
    634a:	a1 f0       	breq	.+40     	; 0x6374 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    634c:	60 e0       	ldi	r22, 0x00	; 0
    634e:	79 e0       	ldi	r23, 0x09	; 9
    6350:	8d e3       	ldi	r24, 0x3D	; 61
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	a7 01       	movw	r20, r14
    6356:	96 01       	movw	r18, r12
    6358:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__udivmodsi4>
    635c:	21 50       	subi	r18, 0x01	; 1
    635e:	31 09       	sbc	r19, r1
    6360:	41 09       	sbc	r20, r1
    6362:	51 09       	sbc	r21, r1
    6364:	56 95       	lsr	r21
    6366:	47 95       	ror	r20
    6368:	37 95       	ror	r19
    636a:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    636c:	21 15       	cp	r18, r1
    636e:	80 e1       	ldi	r24, 0x10	; 16
    6370:	38 07       	cpc	r19, r24
    6372:	98 f0       	brcs	.+38     	; 0x639a <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    6374:	e8 89       	ldd	r30, Y+16	; 0x10
    6376:	f9 89       	ldd	r31, Y+17	; 0x11
    6378:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    637a:	60 e8       	ldi	r22, 0x80	; 128
    637c:	74 e8       	ldi	r23, 0x84	; 132
    637e:	8e e1       	ldi	r24, 0x1E	; 30
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	a7 01       	movw	r20, r14
    6384:	96 01       	movw	r18, r12
    6386:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__udivmodsi4>
    638a:	21 50       	subi	r18, 0x01	; 1
    638c:	31 09       	sbc	r19, r1
    638e:	41 09       	sbc	r20, r1
    6390:	51 09       	sbc	r21, r1
    6392:	56 95       	lsr	r21
    6394:	47 95       	ror	r20
    6396:	37 95       	ror	r19
    6398:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    639a:	ec 85       	ldd	r30, Y+12	; 0x0c
    639c:	fd 85       	ldd	r31, Y+13	; 0x0d
    639e:	30 83       	st	Z, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    63a0:	ee 85       	ldd	r30, Y+14	; 0x0e
    63a2:	ff 85       	ldd	r31, Y+15	; 0x0f
    63a4:	20 83       	st	Z, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    63a6:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    63a8:	ec 89       	ldd	r30, Y+20	; 0x14
    63aa:	fd 89       	ldd	r31, Y+21	; 0x15
    63ac:	10 83       	st	Z, r17
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    63ae:	ea 89       	ldd	r30, Y+18	; 0x12
    63b0:	fb 89       	ldd	r31, Y+19	; 0x13
    63b2:	80 81       	ld	r24, Z
    63b4:	88 69       	ori	r24, 0x98	; 152
    63b6:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    63b8:	ea 89       	ldd	r30, Y+18	; 0x12
    63ba:	fb 89       	ldd	r31, Y+19	; 0x13
    63bc:	80 81       	ld	r24, Z
    63be:	8f 7d       	andi	r24, 0xDF	; 223
    63c0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	1f 91       	pop	r17
    63c8:	ff 90       	pop	r15
    63ca:	ef 90       	pop	r14
    63cc:	df 90       	pop	r13
    63ce:	cf 90       	pop	r12
    63d0:	08 95       	ret

000063d2 <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    63d2:	cf 93       	push	r28
    63d4:	df 93       	push	r29
    63d6:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    63d8:	e8 81       	ld	r30, Y
    63da:	f9 81       	ldd	r31, Y+1	; 0x01
    63dc:	06 80       	ldd	r0, Z+6	; 0x06
    63de:	f7 81       	ldd	r31, Z+7	; 0x07
    63e0:	e0 2d       	mov	r30, r0
    63e2:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    63e4:	ea 89       	ldd	r30, Y+18	; 0x12
    63e6:	fb 89       	ldd	r31, Y+19	; 0x13
    63e8:	80 81       	ld	r24, Z
    63ea:	87 74       	andi	r24, 0x47	; 71
    63ec:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    63ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    63f0:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    63f2:	df 91       	pop	r29
    63f4:	cf 91       	pop	r28
    63f6:	08 95       	ret

000063f8 <__vector_18>:
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    63f8:	1f 92       	push	r1
    63fa:	0f 92       	push	r0
    63fc:	0f b6       	in	r0, 0x3f	; 63
    63fe:	0f 92       	push	r0
    6400:	11 24       	eor	r1, r1
    6402:	2f 93       	push	r18
    6404:	8f 93       	push	r24
    6406:	9f 93       	push	r25
    6408:	ef 93       	push	r30
    640a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    640c:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <Serial+0x10>
    6410:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <Serial+0x11>
    6414:	80 81       	ld	r24, Z
    6416:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <Serial+0x16>
    641a:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <Serial+0x17>
    641e:	82 fd       	sbrc	r24, 2
    6420:	1b c0       	rjmp	.+54     	; 0x6458 <__vector_18+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6422:	90 81       	ld	r25, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6424:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Serial+0x19>
    6428:	8f 5f       	subi	r24, 0xFF	; 255
    642a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    642c:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <Serial+0x1a>
    6430:	82 17       	cp	r24, r18
    6432:	41 f0       	breq	.+16     	; 0x6444 <__vector_18+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    6434:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <Serial+0x19>
    6438:	f0 e0       	ldi	r31, 0x00	; 0
    643a:	ea 5a       	subi	r30, 0xAA	; 170
    643c:	fa 4f       	sbci	r31, 0xFA	; 250
    643e:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    6440:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Serial+0x19>
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    6444:	ff 91       	pop	r31
    6446:	ef 91       	pop	r30
    6448:	9f 91       	pop	r25
    644a:	8f 91       	pop	r24
    644c:	2f 91       	pop	r18
    644e:	0f 90       	pop	r0
    6450:	0f be       	out	0x3f, r0	; 63
    6452:	0f 90       	pop	r0
    6454:	1f 90       	pop	r1
    6456:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6458:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    645a:	f4 cf       	rjmp	.-24     	; 0x6444 <__vector_18+0x4c>

0000645c <__vector_19>:
__vector_19():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    645c:	1f 92       	push	r1
    645e:	0f 92       	push	r0
    6460:	0f b6       	in	r0, 0x3f	; 63
    6462:	0f 92       	push	r0
    6464:	11 24       	eor	r1, r1
    6466:	2f 93       	push	r18
    6468:	3f 93       	push	r19
    646a:	4f 93       	push	r20
    646c:	5f 93       	push	r21
    646e:	6f 93       	push	r22
    6470:	7f 93       	push	r23
    6472:	8f 93       	push	r24
    6474:	9f 93       	push	r25
    6476:	af 93       	push	r26
    6478:	bf 93       	push	r27
    647a:	ef 93       	push	r30
    647c:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    647e:	86 e5       	ldi	r24, 0x56	; 86
    6480:	95 e0       	ldi	r25, 0x05	; 5
    6482:	0e 94 09 31 	call	0x6212	; 0x6212 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    6486:	ff 91       	pop	r31
    6488:	ef 91       	pop	r30
    648a:	bf 91       	pop	r27
    648c:	af 91       	pop	r26
    648e:	9f 91       	pop	r25
    6490:	8f 91       	pop	r24
    6492:	7f 91       	pop	r23
    6494:	6f 91       	pop	r22
    6496:	5f 91       	pop	r21
    6498:	4f 91       	pop	r20
    649a:	3f 91       	pop	r19
    649c:	2f 91       	pop	r18
    649e:	0f 90       	pop	r0
    64a0:	0f be       	out	0x3f, r0	; 63
    64a2:	0f 90       	pop	r0
    64a4:	1f 90       	pop	r1
    64a6:	18 95       	reti

000064a8 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    64a8:	86 e5       	ldi	r24, 0x56	; 86
    64aa:	95 e0       	ldi	r25, 0x05	; 5
    64ac:	0e 94 b1 30 	call	0x6162	; 0x6162 <HardwareSerial::available()>
    64b0:	21 e0       	ldi	r18, 0x01	; 1
    64b2:	89 2b       	or	r24, r25
    64b4:	09 f4       	brne	.+2      	; 0x64b8 <Serial0_available()+0x10>
    64b6:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    64b8:	82 2f       	mov	r24, r18
    64ba:	08 95       	ret

000064bc <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    64bc:	e6 e5       	ldi	r30, 0x56	; 86
    64be:	f5 e0       	ldi	r31, 0x05	; 5
    64c0:	13 82       	std	Z+3, r1	; 0x03
    64c2:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    64c4:	88 ee       	ldi	r24, 0xE8	; 232
    64c6:	93 e0       	ldi	r25, 0x03	; 3
    64c8:	a0 e0       	ldi	r26, 0x00	; 0
    64ca:	b0 e0       	ldi	r27, 0x00	; 0
    64cc:	84 83       	std	Z+4, r24	; 0x04
    64ce:	95 83       	std	Z+5, r25	; 0x05
    64d0:	a6 83       	std	Z+6, r26	; 0x06
    64d2:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    64d4:	81 ed       	ldi	r24, 0xD1	; 209
    64d6:	91 e0       	ldi	r25, 0x01	; 1
    64d8:	91 83       	std	Z+1, r25	; 0x01
    64da:	80 83       	st	Z, r24
    64dc:	85 ec       	ldi	r24, 0xC5	; 197
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	95 87       	std	Z+13, r25	; 0x0d
    64e2:	84 87       	std	Z+12, r24	; 0x0c
    64e4:	84 ec       	ldi	r24, 0xC4	; 196
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	97 87       	std	Z+15, r25	; 0x0f
    64ea:	86 87       	std	Z+14, r24	; 0x0e
    64ec:	80 ec       	ldi	r24, 0xC0	; 192
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	91 8b       	std	Z+17, r25	; 0x11
    64f2:	80 8b       	std	Z+16, r24	; 0x10
    64f4:	81 ec       	ldi	r24, 0xC1	; 193
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	93 8b       	std	Z+19, r25	; 0x13
    64fa:	82 8b       	std	Z+18, r24	; 0x12
    64fc:	82 ec       	ldi	r24, 0xC2	; 194
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	95 8b       	std	Z+21, r25	; 0x15
    6502:	84 8b       	std	Z+20, r24	; 0x14
    6504:	86 ec       	ldi	r24, 0xC6	; 198
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	97 8b       	std	Z+23, r25	; 0x17
    650a:	86 8b       	std	Z+22, r24	; 0x16
    650c:	11 8e       	std	Z+25, r1	; 0x19
    650e:	12 8e       	std	Z+26, r1	; 0x1a
    6510:	13 8e       	std	Z+27, r1	; 0x1b
    6512:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    6514:	08 95       	ret

00006516 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6516:	af 92       	push	r10
    6518:	bf 92       	push	r11
    651a:	cf 92       	push	r12
    651c:	df 92       	push	r13
    651e:	ef 92       	push	r14
    6520:	ff 92       	push	r15
    6522:	0f 93       	push	r16
    6524:	1f 93       	push	r17
    6526:	cf 93       	push	r28
    6528:	df 93       	push	r29
    652a:	6c 01       	movw	r12, r24
    652c:	7b 01       	movw	r14, r22
    652e:	8b 01       	movw	r16, r22
    6530:	04 0f       	add	r16, r20
    6532:	15 1f       	adc	r17, r21
    6534:	eb 01       	movw	r28, r22
    6536:	5e 01       	movw	r10, r28
    6538:	ae 18       	sub	r10, r14
    653a:	bf 08       	sbc	r11, r15
    653c:	c0 17       	cp	r28, r16
    653e:	d1 07       	cpc	r29, r17
    6540:	59 f0       	breq	.+22     	; 0x6558 <Print::write(unsigned char const*, unsigned int)+0x42>
    6542:	69 91       	ld	r22, Y+
    6544:	d6 01       	movw	r26, r12
    6546:	ed 91       	ld	r30, X+
    6548:	fc 91       	ld	r31, X
    654a:	01 90       	ld	r0, Z+
    654c:	f0 81       	ld	r31, Z
    654e:	e0 2d       	mov	r30, r0
    6550:	c6 01       	movw	r24, r12
    6552:	09 95       	icall
    6554:	89 2b       	or	r24, r25
    6556:	79 f7       	brne	.-34     	; 0x6536 <Print::write(unsigned char const*, unsigned int)+0x20>
    6558:	c5 01       	movw	r24, r10
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	1f 91       	pop	r17
    6560:	0f 91       	pop	r16
    6562:	ff 90       	pop	r15
    6564:	ef 90       	pop	r14
    6566:	df 90       	pop	r13
    6568:	cf 90       	pop	r12
    656a:	bf 90       	pop	r11
    656c:	af 90       	pop	r10
    656e:	08 95       	ret

00006570 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    6570:	fb 01       	movw	r30, r22
    6572:	01 90       	ld	r0, Z+
    6574:	00 20       	and	r0, r0
    6576:	e9 f7       	brne	.-6      	; 0x6572 <Print::write(char const*) [clone .part.2]+0x2>
    6578:	31 97       	sbiw	r30, 0x01	; 1
    657a:	af 01       	movw	r20, r30
    657c:	46 1b       	sub	r20, r22
    657e:	57 0b       	sbc	r21, r23
    6580:	dc 01       	movw	r26, r24
    6582:	ed 91       	ld	r30, X+
    6584:	fc 91       	ld	r31, X
    6586:	02 80       	ldd	r0, Z+2	; 0x02
    6588:	f3 81       	ldd	r31, Z+3	; 0x03
    658a:	e0 2d       	mov	r30, r0
    658c:	09 94       	ijmp

0000658e <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    658e:	ef 92       	push	r14
    6590:	ff 92       	push	r15
    6592:	0f 93       	push	r16
    6594:	1f 93       	push	r17
    6596:	cf 93       	push	r28
    6598:	df 93       	push	r29
    659a:	8c 01       	movw	r16, r24
    659c:	7b 01       	movw	r14, r22
    659e:	d0 e0       	ldi	r29, 0x00	; 0
    65a0:	c0 e0       	ldi	r28, 0x00	; 0
    65a2:	f7 01       	movw	r30, r14
    65a4:	ec 0f       	add	r30, r28
    65a6:	fd 1f       	adc	r31, r29
    65a8:	64 91       	lpm	r22, Z
    65aa:	66 23       	and	r22, r22
    65ac:	61 f0       	breq	.+24     	; 0x65c6 <Print::print(__FlashStringHelper const*)+0x38>
    65ae:	d8 01       	movw	r26, r16
    65b0:	ed 91       	ld	r30, X+
    65b2:	fc 91       	ld	r31, X
    65b4:	01 90       	ld	r0, Z+
    65b6:	f0 81       	ld	r31, Z
    65b8:	e0 2d       	mov	r30, r0
    65ba:	c8 01       	movw	r24, r16
    65bc:	09 95       	icall
    65be:	89 2b       	or	r24, r25
    65c0:	11 f0       	breq	.+4      	; 0x65c6 <Print::print(__FlashStringHelper const*)+0x38>
    65c2:	21 96       	adiw	r28, 0x01	; 1
    65c4:	ee cf       	rjmp	.-36     	; 0x65a2 <Print::print(__FlashStringHelper const*)+0x14>
    65c6:	ce 01       	movw	r24, r28
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	1f 91       	pop	r17
    65ce:	0f 91       	pop	r16
    65d0:	ff 90       	pop	r15
    65d2:	ef 90       	pop	r14
    65d4:	08 95       	ret

000065d6 <Print::print(char)>:
_ZN5Print5printEc():
    65d6:	dc 01       	movw	r26, r24
    65d8:	ed 91       	ld	r30, X+
    65da:	fc 91       	ld	r31, X
    65dc:	01 90       	ld	r0, Z+
    65de:	f0 81       	ld	r31, Z
    65e0:	e0 2d       	mov	r30, r0
    65e2:	09 94       	ijmp

000065e4 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    65e4:	8f 92       	push	r8
    65e6:	9f 92       	push	r9
    65e8:	af 92       	push	r10
    65ea:	bf 92       	push	r11
    65ec:	ef 92       	push	r14
    65ee:	ff 92       	push	r15
    65f0:	0f 93       	push	r16
    65f2:	1f 93       	push	r17
    65f4:	cf 93       	push	r28
    65f6:	df 93       	push	r29
    65f8:	cd b7       	in	r28, 0x3d	; 61
    65fa:	de b7       	in	r29, 0x3e	; 62
    65fc:	a1 97       	sbiw	r28, 0x21	; 33
    65fe:	0f b6       	in	r0, 0x3f	; 63
    6600:	f8 94       	cli
    6602:	de bf       	out	0x3e, r29	; 62
    6604:	0f be       	out	0x3f, r0	; 63
    6606:	cd bf       	out	0x3d, r28	; 61
    6608:	7c 01       	movw	r14, r24
    660a:	fa 01       	movw	r30, r20
    660c:	cb 01       	movw	r24, r22
    660e:	19 a2       	std	Y+33, r1	; 0x21
    6610:	22 30       	cpi	r18, 0x02	; 2
    6612:	08 f4       	brcc	.+2      	; 0x6616 <Print::printNumber(unsigned long, unsigned char)+0x32>
    6614:	2a e0       	ldi	r18, 0x0A	; 10
    6616:	8e 01       	movw	r16, r28
    6618:	0f 5d       	subi	r16, 0xDF	; 223
    661a:	1f 4f       	sbci	r17, 0xFF	; 255
    661c:	82 2e       	mov	r8, r18
    661e:	91 2c       	mov	r9, r1
    6620:	b1 2c       	mov	r11, r1
    6622:	a1 2c       	mov	r10, r1
    6624:	bf 01       	movw	r22, r30
    6626:	a5 01       	movw	r20, r10
    6628:	94 01       	movw	r18, r8
    662a:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__udivmodsi4>
    662e:	f9 01       	movw	r30, r18
    6630:	ca 01       	movw	r24, r20
    6632:	6a 30       	cpi	r22, 0x0A	; 10
    6634:	0c f5       	brge	.+66     	; 0x6678 <Print::printNumber(unsigned long, unsigned char)+0x94>
    6636:	60 5d       	subi	r22, 0xD0	; 208
    6638:	d8 01       	movw	r26, r16
    663a:	6e 93       	st	-X, r22
    663c:	8d 01       	movw	r16, r26
    663e:	23 2b       	or	r18, r19
    6640:	24 2b       	or	r18, r20
    6642:	25 2b       	or	r18, r21
    6644:	79 f7       	brne	.-34     	; 0x6624 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	80 e0       	ldi	r24, 0x00	; 0
    664a:	10 97       	sbiw	r26, 0x00	; 0
    664c:	21 f0       	breq	.+8      	; 0x6656 <Print::printNumber(unsigned long, unsigned char)+0x72>
    664e:	bd 01       	movw	r22, r26
    6650:	c7 01       	movw	r24, r14
    6652:	0e 94 b8 32 	call	0x6570	; 0x6570 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    6656:	a1 96       	adiw	r28, 0x21	; 33
    6658:	0f b6       	in	r0, 0x3f	; 63
    665a:	f8 94       	cli
    665c:	de bf       	out	0x3e, r29	; 62
    665e:	0f be       	out	0x3f, r0	; 63
    6660:	cd bf       	out	0x3d, r28	; 61
    6662:	df 91       	pop	r29
    6664:	cf 91       	pop	r28
    6666:	1f 91       	pop	r17
    6668:	0f 91       	pop	r16
    666a:	ff 90       	pop	r15
    666c:	ef 90       	pop	r14
    666e:	bf 90       	pop	r11
    6670:	af 90       	pop	r10
    6672:	9f 90       	pop	r9
    6674:	8f 90       	pop	r8
    6676:	08 95       	ret
    6678:	69 5c       	subi	r22, 0xC9	; 201
    667a:	de cf       	rjmp	.-68     	; 0x6638 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000667c <Print::print(long, int)>:
_ZN5Print5printEli():
    667c:	cf 92       	push	r12
    667e:	df 92       	push	r13
    6680:	ef 92       	push	r14
    6682:	ff 92       	push	r15
    6684:	0f 93       	push	r16
    6686:	1f 93       	push	r17
    6688:	cf 93       	push	r28
    668a:	df 93       	push	r29
    668c:	21 15       	cp	r18, r1
    668e:	31 05       	cpc	r19, r1
    6690:	81 f4       	brne	.+32     	; 0x66b2 <Print::print(long, int)+0x36>
    6692:	dc 01       	movw	r26, r24
    6694:	ed 91       	ld	r30, X+
    6696:	fc 91       	ld	r31, X
    6698:	01 90       	ld	r0, Z+
    669a:	f0 81       	ld	r31, Z
    669c:	e0 2d       	mov	r30, r0
    669e:	64 2f       	mov	r22, r20
    66a0:	df 91       	pop	r29
    66a2:	cf 91       	pop	r28
    66a4:	1f 91       	pop	r17
    66a6:	0f 91       	pop	r16
    66a8:	ff 90       	pop	r15
    66aa:	ef 90       	pop	r14
    66ac:	df 90       	pop	r13
    66ae:	cf 90       	pop	r12
    66b0:	09 94       	ijmp
    66b2:	2a 30       	cpi	r18, 0x0A	; 10
    66b4:	31 05       	cpc	r19, r1
    66b6:	01 f5       	brne	.+64     	; 0x66f8 <Print::print(long, int)+0x7c>
    66b8:	2a e0       	ldi	r18, 0x0A	; 10
    66ba:	77 ff       	sbrs	r23, 7
    66bc:	1d c0       	rjmp	.+58     	; 0x66f8 <Print::print(long, int)+0x7c>
    66be:	6a 01       	movw	r12, r20
    66c0:	7b 01       	movw	r14, r22
    66c2:	ec 01       	movw	r28, r24
    66c4:	6d e2       	ldi	r22, 0x2D	; 45
    66c6:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Print::print(char)>
    66ca:	8c 01       	movw	r16, r24
    66cc:	44 27       	eor	r20, r20
    66ce:	55 27       	eor	r21, r21
    66d0:	ba 01       	movw	r22, r20
    66d2:	4c 19       	sub	r20, r12
    66d4:	5d 09       	sbc	r21, r13
    66d6:	6e 09       	sbc	r22, r14
    66d8:	7f 09       	sbc	r23, r15
    66da:	2a e0       	ldi	r18, 0x0A	; 10
    66dc:	ce 01       	movw	r24, r28
    66de:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <Print::printNumber(unsigned long, unsigned char)>
    66e2:	80 0f       	add	r24, r16
    66e4:	91 1f       	adc	r25, r17
    66e6:	df 91       	pop	r29
    66e8:	cf 91       	pop	r28
    66ea:	1f 91       	pop	r17
    66ec:	0f 91       	pop	r16
    66ee:	ff 90       	pop	r15
    66f0:	ef 90       	pop	r14
    66f2:	df 90       	pop	r13
    66f4:	cf 90       	pop	r12
    66f6:	08 95       	ret
    66f8:	df 91       	pop	r29
    66fa:	cf 91       	pop	r28
    66fc:	1f 91       	pop	r17
    66fe:	0f 91       	pop	r16
    6700:	ff 90       	pop	r15
    6702:	ef 90       	pop	r14
    6704:	df 90       	pop	r13
    6706:	cf 90       	pop	r12
    6708:	0c 94 f2 32 	jmp	0x65e4	; 0x65e4 <Print::printNumber(unsigned long, unsigned char)>

0000670c <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    670c:	21 15       	cp	r18, r1
    670e:	31 05       	cpc	r19, r1
    6710:	41 f4       	brne	.+16     	; 0x6722 <Print::print(unsigned long, int)+0x16>
    6712:	dc 01       	movw	r26, r24
    6714:	ed 91       	ld	r30, X+
    6716:	fc 91       	ld	r31, X
    6718:	01 90       	ld	r0, Z+
    671a:	f0 81       	ld	r31, Z
    671c:	e0 2d       	mov	r30, r0
    671e:	64 2f       	mov	r22, r20
    6720:	09 94       	ijmp
    6722:	0c 94 f2 32 	jmp	0x65e4	; 0x65e4 <Print::printNumber(unsigned long, unsigned char)>

00006726 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    6726:	9a 01       	movw	r18, r20
    6728:	ab 01       	movw	r20, r22
    672a:	70 e0       	ldi	r23, 0x00	; 0
    672c:	60 e0       	ldi	r22, 0x00	; 0
    672e:	0c 94 86 33 	jmp	0x670c	; 0x670c <Print::print(unsigned long, int)>

00006732 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    6732:	2f 92       	push	r2
    6734:	3f 92       	push	r3
    6736:	4f 92       	push	r4
    6738:	5f 92       	push	r5
    673a:	6f 92       	push	r6
    673c:	7f 92       	push	r7
    673e:	8f 92       	push	r8
    6740:	9f 92       	push	r9
    6742:	af 92       	push	r10
    6744:	bf 92       	push	r11
    6746:	cf 92       	push	r12
    6748:	df 92       	push	r13
    674a:	ef 92       	push	r14
    674c:	ff 92       	push	r15
    674e:	1f 93       	push	r17
    6750:	cf 93       	push	r28
    6752:	df 93       	push	r29
    6754:	ec 01       	movw	r28, r24
    6756:	6a 01       	movw	r12, r20
    6758:	7b 01       	movw	r14, r22
    675a:	72 2e       	mov	r7, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    675c:	ab 01       	movw	r20, r22
    675e:	96 01       	movw	r18, r12
    6760:	cb 01       	movw	r24, r22
    6762:	b6 01       	movw	r22, r12
    6764:	0e 94 a2 39 	call	0x7344	; 0x7344 <__unordsf2>
_ZN5Print5writeEPKc():
    6768:	6f ed       	ldi	r22, 0xDF	; 223
    676a:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    676c:	81 11       	cpse	r24, r1
    676e:	26 c0       	rjmp	.+76     	; 0x67bc <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    6770:	46 01       	movw	r8, r12
    6772:	57 01       	movw	r10, r14
    6774:	e8 94       	clt
    6776:	b7 f8       	bld	r11, 7
    6778:	2f ef       	ldi	r18, 0xFF	; 255
    677a:	3f ef       	ldi	r19, 0xFF	; 255
    677c:	4f e7       	ldi	r20, 0x7F	; 127
    677e:	5f e7       	ldi	r21, 0x7F	; 127
    6780:	c5 01       	movw	r24, r10
    6782:	b4 01       	movw	r22, r8
    6784:	0e 94 a2 39 	call	0x7344	; 0x7344 <__unordsf2>
    6788:	81 11       	cpse	r24, r1
    678a:	0c c0       	rjmp	.+24     	; 0x67a4 <Print::printFloat(double, unsigned char)+0x72>
    678c:	2f ef       	ldi	r18, 0xFF	; 255
    678e:	3f ef       	ldi	r19, 0xFF	; 255
    6790:	4f e7       	ldi	r20, 0x7F	; 127
    6792:	5f e7       	ldi	r21, 0x7F	; 127
    6794:	c5 01       	movw	r24, r10
    6796:	b4 01       	movw	r22, r8
    6798:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
_ZN5Print5writeEPKc():
    679c:	63 ee       	ldi	r22, 0xE3	; 227
    679e:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    67a0:	18 16       	cp	r1, r24
    67a2:	64 f0       	brlt	.+24     	; 0x67bc <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    67a4:	2f ef       	ldi	r18, 0xFF	; 255
    67a6:	3f ef       	ldi	r19, 0xFF	; 255
    67a8:	4f e7       	ldi	r20, 0x7F	; 127
    67aa:	5f e4       	ldi	r21, 0x4F	; 79
    67ac:	c7 01       	movw	r24, r14
    67ae:	b6 01       	movw	r22, r12
    67b0:	0e 94 9a 38 	call	0x7134	; 0x7134 <__gesf2>
    67b4:	18 16       	cp	r1, r24
    67b6:	b4 f4       	brge	.+44     	; 0x67e4 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    67b8:	67 ee       	ldi	r22, 0xE7	; 231
    67ba:	71 e0       	ldi	r23, 0x01	; 1
    67bc:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    67be:	df 91       	pop	r29
    67c0:	cf 91       	pop	r28
    67c2:	1f 91       	pop	r17
    67c4:	ff 90       	pop	r15
    67c6:	ef 90       	pop	r14
    67c8:	df 90       	pop	r13
    67ca:	cf 90       	pop	r12
    67cc:	bf 90       	pop	r11
    67ce:	af 90       	pop	r10
    67d0:	9f 90       	pop	r9
    67d2:	8f 90       	pop	r8
    67d4:	7f 90       	pop	r7
    67d6:	6f 90       	pop	r6
    67d8:	5f 90       	pop	r5
    67da:	4f 90       	pop	r4
    67dc:	3f 90       	pop	r3
    67de:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    67e0:	0c 94 b8 32 	jmp	0x6570	; 0x6570 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    67e4:	2f ef       	ldi	r18, 0xFF	; 255
    67e6:	3f ef       	ldi	r19, 0xFF	; 255
    67e8:	4f e7       	ldi	r20, 0x7F	; 127
    67ea:	5f ec       	ldi	r21, 0xCF	; 207
    67ec:	c7 01       	movw	r24, r14
    67ee:	b6 01       	movw	r22, r12
    67f0:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
    67f4:	87 fd       	sbrc	r24, 7
    67f6:	e0 cf       	rjmp	.-64     	; 0x67b8 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    67f8:	20 e0       	ldi	r18, 0x00	; 0
    67fa:	30 e0       	ldi	r19, 0x00	; 0
    67fc:	a9 01       	movw	r20, r18
    67fe:	c7 01       	movw	r24, r14
    6800:	b6 01       	movw	r22, r12
    6802:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <__cmpsf2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    6806:	31 2c       	mov	r3, r1
    6808:	21 2c       	mov	r2, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    680a:	87 ff       	sbrs	r24, 7
    680c:	09 c0       	rjmp	.+18     	; 0x6820 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    680e:	6d e2       	ldi	r22, 0x2D	; 45
    6810:	ce 01       	movw	r24, r28
    6812:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Print::print(char)>
    6816:	1c 01       	movw	r2, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    6818:	f7 fa       	bst	r15, 7
    681a:	f0 94       	com	r15
    681c:	f7 f8       	bld	r15, 7
    681e:	f0 94       	com	r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6820:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6822:	60 e0       	ldi	r22, 0x00	; 0
    6824:	70 e0       	ldi	r23, 0x00	; 0
    6826:	80 e0       	ldi	r24, 0x00	; 0
    6828:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    682a:	71 16       	cp	r7, r17
    682c:	41 f0       	breq	.+16     	; 0x683e <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    682e:	20 e0       	ldi	r18, 0x00	; 0
    6830:	30 e0       	ldi	r19, 0x00	; 0
    6832:	40 e2       	ldi	r20, 0x20	; 32
    6834:	51 e4       	ldi	r21, 0x41	; 65
    6836:	0e 94 40 37 	call	0x6e80	; 0x6e80 <__divsf3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    683a:	1f 5f       	subi	r17, 0xFF	; 255
    683c:	f6 cf       	rjmp	.-20     	; 0x682a <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    683e:	a7 01       	movw	r20, r14
    6840:	96 01       	movw	r18, r12
    6842:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    6846:	2b 01       	movw	r4, r22
    6848:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    684a:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <__fixunssfsi>
    684e:	4b 01       	movw	r8, r22
    6850:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    6852:	2a e0       	ldi	r18, 0x0A	; 10
    6854:	bc 01       	movw	r22, r24
    6856:	a4 01       	movw	r20, r8
    6858:	ce 01       	movw	r24, r28
    685a:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    685e:	7c 01       	movw	r14, r24
    6860:	e2 0c       	add	r14, r2
    6862:	f3 1c       	adc	r15, r3
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    6864:	11 23       	and	r17, r17
    6866:	b1 f1       	breq	.+108    	; 0x68d4 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    6868:	c5 01       	movw	r24, r10
    686a:	b4 01       	movw	r22, r8
    686c:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__floatunsisf>
    6870:	9b 01       	movw	r18, r22
    6872:	ac 01       	movw	r20, r24
    6874:	c3 01       	movw	r24, r6
    6876:	b2 01       	movw	r22, r4
    6878:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    687c:	4b 01       	movw	r8, r22
    687e:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    6880:	6e e2       	ldi	r22, 0x2E	; 46
    6882:	ce 01       	movw	r24, r28
    6884:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <Print::print(char)>
    6888:	e8 0e       	add	r14, r24
    688a:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    688c:	11 50       	subi	r17, 0x01	; 1
    688e:	10 f1       	brcs	.+68     	; 0x68d4 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    6890:	20 e0       	ldi	r18, 0x00	; 0
    6892:	30 e0       	ldi	r19, 0x00	; 0
    6894:	40 e2       	ldi	r20, 0x20	; 32
    6896:	51 e4       	ldi	r21, 0x41	; 65
    6898:	c5 01       	movw	r24, r10
    689a:	b4 01       	movw	r22, r8
    689c:	0e 94 ef 38 	call	0x71de	; 0x71de <__mulsf3>
    68a0:	2b 01       	movw	r4, r22
    68a2:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    68a4:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <__fixunssfsi>
    68a8:	4b 01       	movw	r8, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    68aa:	4a e0       	ldi	r20, 0x0A	; 10
    68ac:	50 e0       	ldi	r21, 0x00	; 0
    68ae:	ce 01       	movw	r24, r28
    68b0:	0e 94 93 33 	call	0x6726	; 0x6726 <Print::print(unsigned int, int)>
    68b4:	e8 0e       	add	r14, r24
    68b6:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    68b8:	b4 01       	movw	r22, r8
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	80 e0       	ldi	r24, 0x00	; 0
    68be:	0e 94 e8 37 	call	0x6fd0	; 0x6fd0 <__floatunsisf>
    68c2:	9b 01       	movw	r18, r22
    68c4:	ac 01       	movw	r20, r24
    68c6:	c3 01       	movw	r24, r6
    68c8:	b2 01       	movw	r22, r4
    68ca:	0e 94 ce 36 	call	0x6d9c	; 0x6d9c <__subsf3>
    68ce:	4b 01       	movw	r8, r22
    68d0:	5c 01       	movw	r10, r24
    68d2:	dc cf       	rjmp	.-72     	; 0x688c <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    68d4:	c7 01       	movw	r24, r14
    68d6:	df 91       	pop	r29
    68d8:	cf 91       	pop	r28
    68da:	1f 91       	pop	r17
    68dc:	ff 90       	pop	r15
    68de:	ef 90       	pop	r14
    68e0:	df 90       	pop	r13
    68e2:	cf 90       	pop	r12
    68e4:	bf 90       	pop	r11
    68e6:	af 90       	pop	r10
    68e8:	9f 90       	pop	r9
    68ea:	8f 90       	pop	r8
    68ec:	7f 90       	pop	r7
    68ee:	6f 90       	pop	r6
    68f0:	5f 90       	pop	r5
    68f2:	4f 90       	pop	r4
    68f4:	3f 90       	pop	r3
    68f6:	2f 90       	pop	r2
    68f8:	08 95       	ret

000068fa <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    68fa:	0c 94 99 33 	jmp	0x6732	; 0x6732 <Print::printFloat(double, unsigned char)>

000068fe <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    68fe:	4f 92       	push	r4
    6900:	5f 92       	push	r5
    6902:	6f 92       	push	r6
    6904:	7f 92       	push	r7
    6906:	af 92       	push	r10
    6908:	bf 92       	push	r11
    690a:	cf 92       	push	r12
    690c:	df 92       	push	r13
    690e:	ef 92       	push	r14
    6910:	ff 92       	push	r15
    6912:	0f 93       	push	r16
    6914:	1f 93       	push	r17
    6916:	cf 93       	push	r28
    6918:	df 93       	push	r29
    691a:	cd b7       	in	r28, 0x3d	; 61
    691c:	de b7       	in	r29, 0x3e	; 62
    691e:	29 01       	movw	r4, r18
    6920:	3a 01       	movw	r6, r20
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6922:	9b 01       	movw	r18, r22
    6924:	ac 01       	movw	r20, r24
    6926:	24 19       	sub	r18, r4
    6928:	35 09       	sbc	r19, r5
    692a:	46 09       	sbc	r20, r6
    692c:	57 09       	sbc	r21, r7
    692e:	89 89       	ldd	r24, Y+17	; 0x11
    6930:	9a 89       	ldd	r25, Y+18	; 0x12
    6932:	ab 89       	ldd	r26, Y+19	; 0x13
    6934:	bc 89       	ldd	r27, Y+20	; 0x14
    6936:	bc 01       	movw	r22, r24
    6938:	cd 01       	movw	r24, r26
    693a:	6a 19       	sub	r22, r10
    693c:	7b 09       	sbc	r23, r11
    693e:	8c 09       	sbc	r24, r12
    6940:	9d 09       	sbc	r25, r13
    6942:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <__mulsi3>
    6946:	a8 01       	movw	r20, r16
    6948:	97 01       	movw	r18, r14
    694a:	24 19       	sub	r18, r4
    694c:	35 09       	sbc	r19, r5
    694e:	46 09       	sbc	r20, r6
    6950:	57 09       	sbc	r21, r7
    6952:	0e 94 3d 3a 	call	0x747a	; 0x747a <__divmodsi4>
    6956:	ca 01       	movw	r24, r20
    6958:	b9 01       	movw	r22, r18
    695a:	6a 0d       	add	r22, r10
    695c:	7b 1d       	adc	r23, r11
    695e:	8c 1d       	adc	r24, r12
    6960:	9d 1d       	adc	r25, r13
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    6962:	df 91       	pop	r29
    6964:	cf 91       	pop	r28
    6966:	1f 91       	pop	r17
    6968:	0f 91       	pop	r16
    696a:	ff 90       	pop	r15
    696c:	ef 90       	pop	r14
    696e:	df 90       	pop	r13
    6970:	cf 90       	pop	r12
    6972:	bf 90       	pop	r11
    6974:	af 90       	pop	r10
    6976:	7f 90       	pop	r7
    6978:	6f 90       	pop	r6
    697a:	5f 90       	pop	r5
    697c:	4f 90       	pop	r4
    697e:	08 95       	ret

00006980 <yield>:
__empty():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    6980:	08 95       	ret

00006982 <initVariant>:
initVariant():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6982:	08 95       	ret

00006984 <main>:
main():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    6984:	0e 94 94 35 	call	0x6b28	; 0x6b28 <init>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    6988:	0e 94 c1 34 	call	0x6982	; 0x6982 <initVariant>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    698c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <setup>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    6990:	ce ee       	ldi	r28, 0xEE	; 238
    6992:	d0 e3       	ldi	r29, 0x30	; 48
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    6994:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <loop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    6998:	20 97       	sbiw	r28, 0x00	; 0
    699a:	e1 f3       	breq	.-8      	; 0x6994 <main+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    699c:	0e 94 ee 30 	call	0x61dc	; 0x61dc <serialEventRun()>
    69a0:	f9 cf       	rjmp	.-14     	; 0x6994 <main+0x10>

000069a2 <operator new[](unsigned int)>:
_Znaj():
    69a2:	0c 94 b9 3a 	jmp	0x7572	; 0x7572 <malloc>

000069a6 <operator delete(void*, unsigned int)>:
_ZdlPv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    69a6:	0c 94 55 3b 	jmp	0x76aa	; 0x76aa <free>

000069aa <__vector_16>:
__vector_16():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    69aa:	1f 92       	push	r1
    69ac:	0f 92       	push	r0
    69ae:	0f b6       	in	r0, 0x3f	; 63
    69b0:	0f 92       	push	r0
    69b2:	11 24       	eor	r1, r1
    69b4:	2f 93       	push	r18
    69b6:	3f 93       	push	r19
    69b8:	8f 93       	push	r24
    69ba:	9f 93       	push	r25
    69bc:	af 93       	push	r26
    69be:	bf 93       	push	r27
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    69c0:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_millis>
    69c4:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_millis+0x1>
    69c8:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_millis+0x2>
    69cc:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    69d0:	30 91 f7 05 	lds	r19, 0x05F7	; 0x8005f7 <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    69d4:	23 e0       	ldi	r18, 0x03	; 3
    69d6:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    69d8:	2d 37       	cpi	r18, 0x7D	; 125
    69da:	68 f1       	brcs	.+90     	; 0x6a36 <__vector_16+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    69dc:	26 e8       	ldi	r18, 0x86	; 134
    69de:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    69e0:	02 96       	adiw	r24, 0x02	; 2
    69e2:	a1 1d       	adc	r26, r1
    69e4:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    69e6:	20 93 f7 05 	sts	0x05F7, r18	; 0x8005f7 <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    69ea:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <timer0_millis>
    69ee:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <timer0_millis+0x1>
    69f2:	a0 93 fa 05 	sts	0x05FA, r26	; 0x8005fa <timer0_millis+0x2>
    69f6:	b0 93 fb 05 	sts	0x05FB, r27	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    69fa:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <timer0_overflow_count>
    69fe:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x1>
    6a02:	a0 91 f5 05 	lds	r26, 0x05F5	; 0x8005f5 <timer0_overflow_count+0x2>
    6a06:	b0 91 f6 05 	lds	r27, 0x05F6	; 0x8005f6 <timer0_overflow_count+0x3>
    6a0a:	01 96       	adiw	r24, 0x01	; 1
    6a0c:	a1 1d       	adc	r26, r1
    6a0e:	b1 1d       	adc	r27, r1
    6a10:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <timer0_overflow_count>
    6a14:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <timer0_overflow_count+0x1>
    6a18:	a0 93 f5 05 	sts	0x05F5, r26	; 0x8005f5 <timer0_overflow_count+0x2>
    6a1c:	b0 93 f6 05 	sts	0x05F6, r27	; 0x8005f6 <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    6a20:	bf 91       	pop	r27
    6a22:	af 91       	pop	r26
    6a24:	9f 91       	pop	r25
    6a26:	8f 91       	pop	r24
    6a28:	3f 91       	pop	r19
    6a2a:	2f 91       	pop	r18
    6a2c:	0f 90       	pop	r0
    6a2e:	0f be       	out	0x3f, r0	; 63
    6a30:	0f 90       	pop	r0
    6a32:	1f 90       	pop	r1
    6a34:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    6a36:	01 96       	adiw	r24, 0x01	; 1
    6a38:	a1 1d       	adc	r26, r1
    6a3a:	b1 1d       	adc	r27, r1
    6a3c:	d4 cf       	rjmp	.-88     	; 0x69e6 <__vector_16+0x3c>

00006a3e <millis>:
millis():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    6a3e:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    6a40:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    6a42:	60 91 f8 05 	lds	r22, 0x05F8	; 0x8005f8 <timer0_millis>
    6a46:	70 91 f9 05 	lds	r23, 0x05F9	; 0x8005f9 <timer0_millis+0x1>
    6a4a:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <timer0_millis+0x2>
    6a4e:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    6a52:	2f bf       	out	0x3f, r18	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    6a54:	08 95       	ret

00006a56 <micros>:
micros():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    6a56:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    6a58:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    6a5a:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <timer0_overflow_count>
    6a5e:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x1>
    6a62:	a0 91 f5 05 	lds	r26, 0x05F5	; 0x8005f5 <timer0_overflow_count+0x2>
    6a66:	b0 91 f6 05 	lds	r27, 0x05F6	; 0x8005f6 <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    6a6a:	26 b5       	in	r18, 0x26	; 38
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6a6c:	a8 9b       	sbis	0x15, 0	; 21
    6a6e:	05 c0       	rjmp	.+10     	; 0x6a7a <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    6a70:	2f 3f       	cpi	r18, 0xFF	; 255
    6a72:	19 f0       	breq	.+6      	; 0x6a7a <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    6a74:	01 96       	adiw	r24, 0x01	; 1
    6a76:	a1 1d       	adc	r26, r1
    6a78:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    6a7a:	3f bf       	out	0x3f, r19	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    6a7c:	ba 2f       	mov	r27, r26
    6a7e:	a9 2f       	mov	r26, r25
    6a80:	98 2f       	mov	r25, r24
    6a82:	88 27       	eor	r24, r24
    6a84:	bc 01       	movw	r22, r24
    6a86:	cd 01       	movw	r24, r26
    6a88:	62 0f       	add	r22, r18
    6a8a:	71 1d       	adc	r23, r1
    6a8c:	81 1d       	adc	r24, r1
    6a8e:	91 1d       	adc	r25, r1
    6a90:	42 e0       	ldi	r20, 0x02	; 2
    6a92:	66 0f       	add	r22, r22
    6a94:	77 1f       	adc	r23, r23
    6a96:	88 1f       	adc	r24, r24
    6a98:	99 1f       	adc	r25, r25
    6a9a:	4a 95       	dec	r20
    6a9c:	d1 f7       	brne	.-12     	; 0x6a92 <micros+0x3c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    6a9e:	08 95       	ret

00006aa0 <delay>:
delay():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    6aa0:	8f 92       	push	r8
    6aa2:	9f 92       	push	r9
    6aa4:	af 92       	push	r10
    6aa6:	bf 92       	push	r11
    6aa8:	cf 92       	push	r12
    6aaa:	df 92       	push	r13
    6aac:	ef 92       	push	r14
    6aae:	ff 92       	push	r15
    6ab0:	6b 01       	movw	r12, r22
    6ab2:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    6ab4:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <micros>
    6ab8:	4b 01       	movw	r8, r22
    6aba:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    6abc:	c1 14       	cp	r12, r1
    6abe:	d1 04       	cpc	r13, r1
    6ac0:	e1 04       	cpc	r14, r1
    6ac2:	f1 04       	cpc	r15, r1
    6ac4:	e9 f0       	breq	.+58     	; 0x6b00 <delay+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    6ac6:	0e 94 c0 34 	call	0x6980	; 0x6980 <yield>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6aca:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <micros>
    6ace:	68 19       	sub	r22, r8
    6ad0:	79 09       	sbc	r23, r9
    6ad2:	8a 09       	sbc	r24, r10
    6ad4:	9b 09       	sbc	r25, r11
    6ad6:	68 3e       	cpi	r22, 0xE8	; 232
    6ad8:	73 40       	sbci	r23, 0x03	; 3
    6ada:	81 05       	cpc	r24, r1
    6adc:	91 05       	cpc	r25, r1
    6ade:	70 f3       	brcs	.-36     	; 0x6abc <delay+0x1c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    6ae0:	21 e0       	ldi	r18, 0x01	; 1
    6ae2:	c2 1a       	sub	r12, r18
    6ae4:	d1 08       	sbc	r13, r1
    6ae6:	e1 08       	sbc	r14, r1
    6ae8:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    6aea:	88 ee       	ldi	r24, 0xE8	; 232
    6aec:	88 0e       	add	r8, r24
    6aee:	83 e0       	ldi	r24, 0x03	; 3
    6af0:	98 1e       	adc	r9, r24
    6af2:	a1 1c       	adc	r10, r1
    6af4:	b1 1c       	adc	r11, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6af6:	c1 14       	cp	r12, r1
    6af8:	d1 04       	cpc	r13, r1
    6afa:	e1 04       	cpc	r14, r1
    6afc:	f1 04       	cpc	r15, r1
    6afe:	29 f7       	brne	.-54     	; 0x6aca <delay+0x2a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    6b00:	ff 90       	pop	r15
    6b02:	ef 90       	pop	r14
    6b04:	df 90       	pop	r13
    6b06:	cf 90       	pop	r12
    6b08:	bf 90       	pop	r11
    6b0a:	af 90       	pop	r10
    6b0c:	9f 90       	pop	r9
    6b0e:	8f 90       	pop	r8
    6b10:	08 95       	ret

00006b12 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    6b12:	82 30       	cpi	r24, 0x02	; 2
    6b14:	91 05       	cpc	r25, r1
    6b16:	38 f0       	brcs	.+14     	; 0x6b26 <delayMicroseconds+0x14>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    6b18:	88 0f       	add	r24, r24
    6b1a:	99 1f       	adc	r25, r25
    6b1c:	88 0f       	add	r24, r24
    6b1e:	99 1f       	adc	r25, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    6b20:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    6b22:	01 97       	sbiw	r24, 0x01	; 1
    6b24:	f1 f7       	brne	.-4      	; 0x6b22 <delayMicroseconds+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    6b26:	08 95       	ret

00006b28 <init>:
init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    6b28:	78 94       	sei
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    6b2a:	84 b5       	in	r24, 0x24	; 36
    6b2c:	83 60       	ori	r24, 0x03	; 3
    6b2e:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    6b30:	85 b5       	in	r24, 0x25	; 37
    6b32:	83 60       	ori	r24, 0x03	; 3
    6b34:	85 bd       	out	0x25, r24	; 37
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    6b36:	ee e6       	ldi	r30, 0x6E	; 110
    6b38:	f0 e0       	ldi	r31, 0x00	; 0
    6b3a:	80 81       	ld	r24, Z
    6b3c:	81 60       	ori	r24, 0x01	; 1
    6b3e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    6b40:	e1 e8       	ldi	r30, 0x81	; 129
    6b42:	f0 e0       	ldi	r31, 0x00	; 0
    6b44:	82 e0       	ldi	r24, 0x02	; 2
    6b46:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    6b48:	80 81       	ld	r24, Z
    6b4a:	81 60       	ori	r24, 0x01	; 1
    6b4c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    6b4e:	e0 e8       	ldi	r30, 0x80	; 128
    6b50:	f0 e0       	ldi	r31, 0x00	; 0
    6b52:	80 81       	ld	r24, Z
    6b54:	81 60       	ori	r24, 0x01	; 1
    6b56:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    6b58:	e1 eb       	ldi	r30, 0xB1	; 177
    6b5a:	f0 e0       	ldi	r31, 0x00	; 0
    6b5c:	80 81       	ld	r24, Z
    6b5e:	84 60       	ori	r24, 0x04	; 4
    6b60:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    6b62:	e0 eb       	ldi	r30, 0xB0	; 176
    6b64:	f0 e0       	ldi	r31, 0x00	; 0
    6b66:	80 81       	ld	r24, Z
    6b68:	81 60       	ori	r24, 0x01	; 1
    6b6a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    6b6c:	e1 e9       	ldi	r30, 0x91	; 145
    6b6e:	f0 e0       	ldi	r31, 0x00	; 0
    6b70:	80 81       	ld	r24, Z
    6b72:	83 60       	ori	r24, 0x03	; 3
    6b74:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    6b76:	e0 e9       	ldi	r30, 0x90	; 144
    6b78:	f0 e0       	ldi	r31, 0x00	; 0
    6b7a:	80 81       	ld	r24, Z
    6b7c:	81 60       	ori	r24, 0x01	; 1
    6b7e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    6b80:	e1 ea       	ldi	r30, 0xA1	; 161
    6b82:	f0 e0       	ldi	r31, 0x00	; 0
    6b84:	80 81       	ld	r24, Z
    6b86:	83 60       	ori	r24, 0x03	; 3
    6b88:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    6b8a:	e0 ea       	ldi	r30, 0xA0	; 160
    6b8c:	f0 e0       	ldi	r31, 0x00	; 0
    6b8e:	80 81       	ld	r24, Z
    6b90:	81 60       	ori	r24, 0x01	; 1
    6b92:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    6b94:	87 e8       	ldi	r24, 0x87	; 135
    6b96:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    6b9a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    6b9e:	08 95       	ret

00006ba0 <analogRead>:
analogRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    6ba0:	88 30       	cpi	r24, 0x08	; 8
    6ba2:	38 f0       	brcs	.+14     	; 0x6bb2 <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    6ba4:	92 ef       	ldi	r25, 0xF2	; 242
    6ba6:	98 0f       	add	r25, r24
    6ba8:	9b 30       	cpi	r25, 0x0B	; 11
    6baa:	d8 f0       	brcs	.+54     	; 0x6be2 <analogRead+0x42>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 4)
    6bac:	89 31       	cpi	r24, 0x19	; 25
    6bae:	d8 f0       	brcs	.+54     	; 0x6be6 <analogRead+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 6)
    6bb0:	83 51       	subi	r24, 0x13	; 19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 12)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    6bb2:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <analog_reference>
    6bb6:	90 e4       	ldi	r25, 0x40	; 64
    6bb8:	29 9f       	mul	r18, r25
    6bba:	90 01       	movw	r18, r0
    6bbc:	11 24       	eor	r1, r1
    6bbe:	87 70       	andi	r24, 0x07	; 7
    6bc0:	82 2b       	or	r24, r18
    6bc2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 12)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    6bc6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    6bca:	80 64       	ori	r24, 0x40	; 64
    6bcc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    6bd0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    6bd4:	86 fd       	sbrc	r24, 6
    6bd6:	fc cf       	rjmp	.-8      	; 0x6bd0 <analogRead+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    6bd8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    6bdc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    6be0:	08 95       	ret
    6be2:	89 2f       	mov	r24, r25
    6be4:	e6 cf       	rjmp	.-52     	; 0x6bb2 <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    6be6:	8f ef       	ldi	r24, 0xFF	; 255
    6be8:	e4 cf       	rjmp	.-56     	; 0x6bb2 <analogRead+0x12>

00006bea <turnOffPWM>:
turnOffPWM():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    6bea:	82 50       	subi	r24, 0x02	; 2
    6bec:	8d 30       	cpi	r24, 0x0D	; 13
    6bee:	08 f0       	brcs	.+2      	; 0x6bf2 <turnOffPWM+0x8>
    6bf0:	3e c0       	rjmp	.+124    	; 0x6c6e <turnOffPWM+0x84>
    6bf2:	e8 2f       	mov	r30, r24
    6bf4:	f0 e0       	ldi	r31, 0x00	; 0
    6bf6:	e1 50       	subi	r30, 0x01	; 1
    6bf8:	fa 4c       	sbci	r31, 0xCA	; 202
    6bfa:	0c 94 5c 3a 	jmp	0x74b8	; 0x74b8 <__tablejump2__>
    6bfe:	34 36       	cpi	r19, 0x64	; 100
    6c00:	38 36       	cpi	r19, 0x68	; 104
    6c02:	0c 36       	cpi	r16, 0x6C	; 108
    6c04:	12 36       	cpi	r17, 0x62	; 98
    6c06:	37 36       	cpi	r19, 0x67	; 103
    6c08:	37 36       	cpi	r19, 0x67	; 103
    6c0a:	16 36       	cpi	r17, 0x66	; 102
    6c0c:	1c 36       	cpi	r17, 0x6C	; 108
    6c0e:	20 36       	cpi	r18, 0x60	; 96
    6c10:	26 36       	cpi	r18, 0x66	; 102
    6c12:	37 36       	cpi	r19, 0x67	; 103
    6c14:	2a 36       	cpi	r18, 0x6A	; 106
    6c16:	30 36       	cpi	r19, 0x60	; 96
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    6c18:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    6c1c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    6c1e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    6c22:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    6c24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    6c28:	8f 7d       	andi	r24, 0xDF	; 223
    6c2a:	f9 cf       	rjmp	.-14     	; 0x6c1e <turnOffPWM+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    6c2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    6c30:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    6c32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    6c36:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    6c38:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    6c3c:	8f 7d       	andi	r24, 0xDF	; 223
    6c3e:	f9 cf       	rjmp	.-14     	; 0x6c32 <turnOffPWM+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    6c40:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    6c44:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    6c46:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    6c4a:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    6c4c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    6c50:	8f 7d       	andi	r24, 0xDF	; 223
    6c52:	f9 cf       	rjmp	.-14     	; 0x6c46 <turnOffPWM+0x5c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    6c54:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    6c58:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    6c5a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
    6c5e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    6c60:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    6c64:	8f 7d       	andi	r24, 0xDF	; 223
    6c66:	f9 cf       	rjmp	.-14     	; 0x6c5a <turnOffPWM+0x70>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    6c68:	84 b5       	in	r24, 0x24	; 36
    6c6a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    6c6c:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    6c6e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    6c70:	84 b5       	in	r24, 0x24	; 36
    6c72:	8f 7d       	andi	r24, 0xDF	; 223
    6c74:	fb cf       	rjmp	.-10     	; 0x6c6c <turnOffPWM+0x82>

00006c76 <pinMode>:
pinMode():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6c76:	cf 93       	push	r28
    6c78:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	fc 01       	movw	r30, r24
    6c7e:	e9 59       	subi	r30, 0x99	; 153
    6c80:	fe 4e       	sbci	r31, 0xEE	; 238
    6c82:	24 91       	lpm	r18, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    6c84:	8e 57       	subi	r24, 0x7E	; 126
    6c86:	9e 4e       	sbci	r25, 0xEE	; 238
    6c88:	fc 01       	movw	r30, r24
    6c8a:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    6c8c:	88 23       	and	r24, r24
    6c8e:	c9 f0       	breq	.+50     	; 0x6cc2 <pinMode+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    6c90:	90 e0       	ldi	r25, 0x00	; 0
    6c92:	88 0f       	add	r24, r24
    6c94:	99 1f       	adc	r25, r25
    6c96:	fc 01       	movw	r30, r24
    6c98:	eb 54       	subi	r30, 0x4B	; 75
    6c9a:	fe 4e       	sbci	r31, 0xEE	; 238
    6c9c:	a5 91       	lpm	r26, Z+
    6c9e:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    6ca0:	fc 01       	movw	r30, r24
    6ca2:	e7 55       	subi	r30, 0x57	; 87
    6ca4:	fe 4e       	sbci	r31, 0xEE	; 238
    6ca6:	c5 91       	lpm	r28, Z+
    6ca8:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    6caa:	61 11       	cpse	r22, r1
    6cac:	0d c0       	rjmp	.+26     	; 0x6cc8 <pinMode+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    6cae:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    6cb0:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    6cb2:	8c 91       	ld	r24, X
    6cb4:	20 95       	com	r18
    6cb6:	82 23       	and	r24, r18
    6cb8:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    6cba:	88 81       	ld	r24, Y
    6cbc:	28 23       	and	r18, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    6cbe:	28 83       	st	Y, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    6cc0:	9f bf       	out	0x3f, r25	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    6cc2:	df 91       	pop	r29
    6cc4:	cf 91       	pop	r28
    6cc6:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    6cc8:	62 30       	cpi	r22, 0x02	; 2
    6cca:	51 f4       	brne	.+20     	; 0x6ce0 <pinMode+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    6ccc:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    6cce:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    6cd0:	3c 91       	ld	r19, X
    6cd2:	82 2f       	mov	r24, r18
    6cd4:	80 95       	com	r24
    6cd6:	83 23       	and	r24, r19
    6cd8:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    6cda:	e8 81       	ld	r30, Y
    6cdc:	2e 2b       	or	r18, r30
    6cde:	ef cf       	rjmp	.-34     	; 0x6cbe <pinMode+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    6ce0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    6ce2:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    6ce4:	ec 91       	ld	r30, X
    6ce6:	2e 2b       	or	r18, r30
    6ce8:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    6cea:	8f bf       	out	0x3f, r24	; 63
    6cec:	ea cf       	rjmp	.-44     	; 0x6cc2 <pinMode+0x4c>

00006cee <digitalWrite>:
digitalWrite():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6cee:	1f 93       	push	r17
    6cf0:	cf 93       	push	r28
    6cf2:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    6cf4:	28 2f       	mov	r18, r24
    6cf6:	30 e0       	ldi	r19, 0x00	; 0
    6cf8:	f9 01       	movw	r30, r18
    6cfa:	e4 5b       	subi	r30, 0xB4	; 180
    6cfc:	fe 4e       	sbci	r31, 0xEE	; 238
    6cfe:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    6d00:	f9 01       	movw	r30, r18
    6d02:	e9 59       	subi	r30, 0x99	; 153
    6d04:	fe 4e       	sbci	r31, 0xEE	; 238
    6d06:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    6d08:	f9 01       	movw	r30, r18
    6d0a:	ee 57       	subi	r30, 0x7E	; 126
    6d0c:	fe 4e       	sbci	r31, 0xEE	; 238
    6d0e:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    6d10:	cc 23       	and	r28, r28
    6d12:	a9 f0       	breq	.+42     	; 0x6d3e <digitalWrite+0x50>
    6d14:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6d16:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    6d18:	0e 94 f5 35 	call	0x6bea	; 0x6bea <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    6d1c:	ec 2f       	mov	r30, r28
    6d1e:	f0 e0       	ldi	r31, 0x00	; 0
    6d20:	ee 0f       	add	r30, r30
    6d22:	ff 1f       	adc	r31, r31
    6d24:	e7 55       	subi	r30, 0x57	; 87
    6d26:	fe 4e       	sbci	r31, 0xEE	; 238
    6d28:	a5 91       	lpm	r26, Z+
    6d2a:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    6d2c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    6d2e:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    6d30:	ec 91       	ld	r30, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    6d32:	11 11       	cpse	r17, r1
    6d34:	08 c0       	rjmp	.+16     	; 0x6d46 <digitalWrite+0x58>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    6d36:	d0 95       	com	r29
    6d38:	de 23       	and	r29, r30
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    6d3a:	dc 93       	st	X, r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    6d3c:	8f bf       	out	0x3f, r24	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    6d3e:	df 91       	pop	r29
    6d40:	cf 91       	pop	r28
    6d42:	1f 91       	pop	r17
    6d44:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    6d46:	de 2b       	or	r29, r30
    6d48:	f8 cf       	rjmp	.-16     	; 0x6d3a <digitalWrite+0x4c>

00006d4a <digitalRead>:
digitalRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    6d4a:	cf 93       	push	r28
    6d4c:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    6d4e:	28 2f       	mov	r18, r24
    6d50:	30 e0       	ldi	r19, 0x00	; 0
    6d52:	f9 01       	movw	r30, r18
    6d54:	e4 5b       	subi	r30, 0xB4	; 180
    6d56:	fe 4e       	sbci	r31, 0xEE	; 238
    6d58:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6d5a:	f9 01       	movw	r30, r18
    6d5c:	e9 59       	subi	r30, 0x99	; 153
    6d5e:	fe 4e       	sbci	r31, 0xEE	; 238
    6d60:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    6d62:	f9 01       	movw	r30, r18
    6d64:	ee 57       	subi	r30, 0x7E	; 126
    6d66:	fe 4e       	sbci	r31, 0xEE	; 238
    6d68:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6d6a:	cc 23       	and	r28, r28
    6d6c:	a1 f0       	breq	.+40     	; 0x6d96 <digitalRead+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6d6e:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    6d70:	0e 94 f5 35 	call	0x6bea	; 0x6bea <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6d74:	ec 2f       	mov	r30, r28
    6d76:	f0 e0       	ldi	r31, 0x00	; 0
    6d78:	ee 0f       	add	r30, r30
    6d7a:	ff 1f       	adc	r31, r31
    6d7c:	e3 56       	subi	r30, 0x63	; 99
    6d7e:	fe 4e       	sbci	r31, 0xEE	; 238
    6d80:	a5 91       	lpm	r26, Z+
    6d82:	b4 91       	lpm	r27, Z
    6d84:	ec 91       	ld	r30, X
    6d86:	ed 23       	and	r30, r29
    6d88:	81 e0       	ldi	r24, 0x01	; 1
    6d8a:	90 e0       	ldi	r25, 0x00	; 0
    6d8c:	09 f4       	brne	.+2      	; 0x6d90 <digitalRead+0x46>
    6d8e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    6d90:	df 91       	pop	r29
    6d92:	cf 91       	pop	r28
    6d94:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    6d96:	80 e0       	ldi	r24, 0x00	; 0
    6d98:	90 e0       	ldi	r25, 0x00	; 0
    6d9a:	fa cf       	rjmp	.-12     	; 0x6d90 <digitalRead+0x46>

00006d9c <__subsf3>:
__subsf3():
    6d9c:	50 58       	subi	r21, 0x80	; 128

00006d9e <__addsf3>:
    6d9e:	bb 27       	eor	r27, r27
    6da0:	aa 27       	eor	r26, r26
    6da2:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <__addsf3x>
    6da6:	0c 94 60 38 	jmp	0x70c0	; 0x70c0 <__fp_round>
__addsf3():
    6daa:	0e 94 52 38 	call	0x70a4	; 0x70a4 <__fp_pscA>
    6dae:	38 f0       	brcs	.+14     	; 0x6dbe <__addsf3+0x20>
    6db0:	0e 94 59 38 	call	0x70b2	; 0x70b2 <__fp_pscB>
    6db4:	20 f0       	brcs	.+8      	; 0x6dbe <__addsf3+0x20>
    6db6:	39 f4       	brne	.+14     	; 0x6dc6 <__addsf3+0x28>
    6db8:	9f 3f       	cpi	r25, 0xFF	; 255
    6dba:	19 f4       	brne	.+6      	; 0x6dc2 <__addsf3+0x24>
    6dbc:	26 f4       	brtc	.+8      	; 0x6dc6 <__addsf3+0x28>
    6dbe:	0c 94 4f 38 	jmp	0x709e	; 0x709e <__fp_nan>
    6dc2:	0e f4       	brtc	.+2      	; 0x6dc6 <__addsf3+0x28>
    6dc4:	e0 95       	com	r30
    6dc6:	e7 fb       	bst	r30, 7
    6dc8:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__fp_inf>

00006dcc <__addsf3x>:
__addsf3x():
    6dcc:	e9 2f       	mov	r30, r25
    6dce:	0e 94 71 38 	call	0x70e2	; 0x70e2 <__fp_split3>
    6dd2:	58 f3       	brcs	.-42     	; 0x6daa <__addsf3+0xc>
    6dd4:	ba 17       	cp	r27, r26
    6dd6:	62 07       	cpc	r22, r18
    6dd8:	73 07       	cpc	r23, r19
    6dda:	84 07       	cpc	r24, r20
    6ddc:	95 07       	cpc	r25, r21
    6dde:	20 f0       	brcs	.+8      	; 0x6de8 <__addsf3x+0x1c>
    6de0:	79 f4       	brne	.+30     	; 0x6e00 <__addsf3x+0x34>
    6de2:	a6 f5       	brtc	.+104    	; 0x6e4c <__addsf3x+0x80>
    6de4:	0c 94 93 38 	jmp	0x7126	; 0x7126 <__fp_zero>
    6de8:	0e f4       	brtc	.+2      	; 0x6dec <__addsf3x+0x20>
    6dea:	e0 95       	com	r30
    6dec:	0b 2e       	mov	r0, r27
    6dee:	ba 2f       	mov	r27, r26
    6df0:	a0 2d       	mov	r26, r0
    6df2:	0b 01       	movw	r0, r22
    6df4:	b9 01       	movw	r22, r18
    6df6:	90 01       	movw	r18, r0
    6df8:	0c 01       	movw	r0, r24
    6dfa:	ca 01       	movw	r24, r20
    6dfc:	a0 01       	movw	r20, r0
    6dfe:	11 24       	eor	r1, r1
    6e00:	ff 27       	eor	r31, r31
    6e02:	59 1b       	sub	r21, r25
    6e04:	99 f0       	breq	.+38     	; 0x6e2c <__addsf3x+0x60>
    6e06:	59 3f       	cpi	r21, 0xF9	; 249
    6e08:	50 f4       	brcc	.+20     	; 0x6e1e <__addsf3x+0x52>
    6e0a:	50 3e       	cpi	r21, 0xE0	; 224
    6e0c:	68 f1       	brcs	.+90     	; 0x6e68 <__addsf3x+0x9c>
    6e0e:	1a 16       	cp	r1, r26
    6e10:	f0 40       	sbci	r31, 0x00	; 0
    6e12:	a2 2f       	mov	r26, r18
    6e14:	23 2f       	mov	r18, r19
    6e16:	34 2f       	mov	r19, r20
    6e18:	44 27       	eor	r20, r20
    6e1a:	58 5f       	subi	r21, 0xF8	; 248
    6e1c:	f3 cf       	rjmp	.-26     	; 0x6e04 <__addsf3x+0x38>
    6e1e:	46 95       	lsr	r20
    6e20:	37 95       	ror	r19
    6e22:	27 95       	ror	r18
    6e24:	a7 95       	ror	r26
    6e26:	f0 40       	sbci	r31, 0x00	; 0
    6e28:	53 95       	inc	r21
    6e2a:	c9 f7       	brne	.-14     	; 0x6e1e <__addsf3x+0x52>
    6e2c:	7e f4       	brtc	.+30     	; 0x6e4c <__addsf3x+0x80>
    6e2e:	1f 16       	cp	r1, r31
    6e30:	ba 0b       	sbc	r27, r26
    6e32:	62 0b       	sbc	r22, r18
    6e34:	73 0b       	sbc	r23, r19
    6e36:	84 0b       	sbc	r24, r20
    6e38:	ba f0       	brmi	.+46     	; 0x6e68 <__addsf3x+0x9c>
    6e3a:	91 50       	subi	r25, 0x01	; 1
    6e3c:	a1 f0       	breq	.+40     	; 0x6e66 <__addsf3x+0x9a>
    6e3e:	ff 0f       	add	r31, r31
    6e40:	bb 1f       	adc	r27, r27
    6e42:	66 1f       	adc	r22, r22
    6e44:	77 1f       	adc	r23, r23
    6e46:	88 1f       	adc	r24, r24
    6e48:	c2 f7       	brpl	.-16     	; 0x6e3a <__addsf3x+0x6e>
    6e4a:	0e c0       	rjmp	.+28     	; 0x6e68 <__addsf3x+0x9c>
    6e4c:	ba 0f       	add	r27, r26
    6e4e:	62 1f       	adc	r22, r18
    6e50:	73 1f       	adc	r23, r19
    6e52:	84 1f       	adc	r24, r20
    6e54:	48 f4       	brcc	.+18     	; 0x6e68 <__addsf3x+0x9c>
    6e56:	87 95       	ror	r24
    6e58:	77 95       	ror	r23
    6e5a:	67 95       	ror	r22
    6e5c:	b7 95       	ror	r27
    6e5e:	f7 95       	ror	r31
    6e60:	9e 3f       	cpi	r25, 0xFE	; 254
    6e62:	08 f0       	brcs	.+2      	; 0x6e66 <__addsf3x+0x9a>
    6e64:	b0 cf       	rjmp	.-160    	; 0x6dc6 <__addsf3+0x28>
    6e66:	93 95       	inc	r25
    6e68:	88 0f       	add	r24, r24
    6e6a:	08 f0       	brcs	.+2      	; 0x6e6e <__addsf3x+0xa2>
    6e6c:	99 27       	eor	r25, r25
    6e6e:	ee 0f       	add	r30, r30
    6e70:	97 95       	ror	r25
    6e72:	87 95       	ror	r24
    6e74:	08 95       	ret

00006e76 <__cmpsf2>:
    6e76:	0e 94 25 38 	call	0x704a	; 0x704a <__fp_cmp>
    6e7a:	08 f4       	brcc	.+2      	; 0x6e7e <__cmpsf2+0x8>
    6e7c:	81 e0       	ldi	r24, 0x01	; 1
    6e7e:	08 95       	ret

00006e80 <__divsf3>:
    6e80:	0e 94 54 37 	call	0x6ea8	; 0x6ea8 <__divsf3x>
    6e84:	0c 94 60 38 	jmp	0x70c0	; 0x70c0 <__fp_round>
    6e88:	0e 94 59 38 	call	0x70b2	; 0x70b2 <__fp_pscB>
    6e8c:	58 f0       	brcs	.+22     	; 0x6ea4 <__divsf3+0x24>
    6e8e:	0e 94 52 38 	call	0x70a4	; 0x70a4 <__fp_pscA>
    6e92:	40 f0       	brcs	.+16     	; 0x6ea4 <__divsf3+0x24>
    6e94:	29 f4       	brne	.+10     	; 0x6ea0 <__divsf3+0x20>
    6e96:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    6e98:	29 f0       	breq	.+10     	; 0x6ea4 <__divsf3+0x24>
    6e9a:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__fp_inf>
    6e9e:	51 11       	cpse	r21, r1
    6ea0:	0c 94 94 38 	jmp	0x7128	; 0x7128 <__fp_szero>
    6ea4:	0c 94 4f 38 	jmp	0x709e	; 0x709e <__fp_nan>

00006ea8 <__divsf3x>:
__divsf3x():
    6ea8:	0e 94 71 38 	call	0x70e2	; 0x70e2 <__fp_split3>
    6eac:	68 f3       	brcs	.-38     	; 0x6e88 <__divsf3+0x8>

00006eae <__divsf3_pse>:
    6eae:	99 23       	and	r25, r25
    6eb0:	b1 f3       	breq	.-20     	; 0x6e9e <__divsf3+0x1e>
    6eb2:	55 23       	and	r21, r21
    6eb4:	91 f3       	breq	.-28     	; 0x6e9a <__divsf3+0x1a>
    6eb6:	95 1b       	sub	r25, r21
    6eb8:	55 0b       	sbc	r21, r21
    6eba:	bb 27       	eor	r27, r27
    6ebc:	aa 27       	eor	r26, r26
    6ebe:	62 17       	cp	r22, r18
    6ec0:	73 07       	cpc	r23, r19
    6ec2:	84 07       	cpc	r24, r20
    6ec4:	38 f0       	brcs	.+14     	; 0x6ed4 <__divsf3_pse+0x26>
    6ec6:	9f 5f       	subi	r25, 0xFF	; 255
    6ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eca:	22 0f       	add	r18, r18
    6ecc:	33 1f       	adc	r19, r19
    6ece:	44 1f       	adc	r20, r20
    6ed0:	aa 1f       	adc	r26, r26
    6ed2:	a9 f3       	breq	.-22     	; 0x6ebe <__divsf3_pse+0x10>
    6ed4:	35 d0       	rcall	.+106    	; 0x6f40 <__divsf3_pse+0x92>
    6ed6:	0e 2e       	mov	r0, r30
    6ed8:	3a f0       	brmi	.+14     	; 0x6ee8 <__divsf3_pse+0x3a>
    6eda:	e0 e8       	ldi	r30, 0x80	; 128
    6edc:	32 d0       	rcall	.+100    	; 0x6f42 <__divsf3_pse+0x94>
    6ede:	91 50       	subi	r25, 0x01	; 1
    6ee0:	50 40       	sbci	r21, 0x00	; 0
    6ee2:	e6 95       	lsr	r30
    6ee4:	00 1c       	adc	r0, r0
    6ee6:	ca f7       	brpl	.-14     	; 0x6eda <__divsf3_pse+0x2c>
    6ee8:	2b d0       	rcall	.+86     	; 0x6f40 <__divsf3_pse+0x92>
    6eea:	fe 2f       	mov	r31, r30
    6eec:	29 d0       	rcall	.+82     	; 0x6f40 <__divsf3_pse+0x92>
    6eee:	66 0f       	add	r22, r22
    6ef0:	77 1f       	adc	r23, r23
    6ef2:	88 1f       	adc	r24, r24
    6ef4:	bb 1f       	adc	r27, r27
    6ef6:	26 17       	cp	r18, r22
    6ef8:	37 07       	cpc	r19, r23
    6efa:	48 07       	cpc	r20, r24
    6efc:	ab 07       	cpc	r26, r27
    6efe:	b0 e8       	ldi	r27, 0x80	; 128
    6f00:	09 f0       	breq	.+2      	; 0x6f04 <__divsf3_pse+0x56>
    6f02:	bb 0b       	sbc	r27, r27
    6f04:	80 2d       	mov	r24, r0
    6f06:	bf 01       	movw	r22, r30
    6f08:	ff 27       	eor	r31, r31
    6f0a:	93 58       	subi	r25, 0x83	; 131
    6f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    6f0e:	3a f0       	brmi	.+14     	; 0x6f1e <__divsf3_pse+0x70>
    6f10:	9e 3f       	cpi	r25, 0xFE	; 254
    6f12:	51 05       	cpc	r21, r1
    6f14:	78 f0       	brcs	.+30     	; 0x6f34 <__divsf3_pse+0x86>
    6f16:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__fp_inf>
    6f1a:	0c 94 94 38 	jmp	0x7128	; 0x7128 <__fp_szero>
    6f1e:	5f 3f       	cpi	r21, 0xFF	; 255
    6f20:	e4 f3       	brlt	.-8      	; 0x6f1a <__divsf3_pse+0x6c>
    6f22:	98 3e       	cpi	r25, 0xE8	; 232
    6f24:	d4 f3       	brlt	.-12     	; 0x6f1a <__divsf3_pse+0x6c>
    6f26:	86 95       	lsr	r24
    6f28:	77 95       	ror	r23
    6f2a:	67 95       	ror	r22
    6f2c:	b7 95       	ror	r27
    6f2e:	f7 95       	ror	r31
    6f30:	9f 5f       	subi	r25, 0xFF	; 255
    6f32:	c9 f7       	brne	.-14     	; 0x6f26 <__divsf3_pse+0x78>
    6f34:	88 0f       	add	r24, r24
    6f36:	91 1d       	adc	r25, r1
    6f38:	96 95       	lsr	r25
    6f3a:	87 95       	ror	r24
    6f3c:	97 f9       	bld	r25, 7
    6f3e:	08 95       	ret
    6f40:	e1 e0       	ldi	r30, 0x01	; 1
    6f42:	66 0f       	add	r22, r22
    6f44:	77 1f       	adc	r23, r23
    6f46:	88 1f       	adc	r24, r24
    6f48:	bb 1f       	adc	r27, r27
    6f4a:	62 17       	cp	r22, r18
    6f4c:	73 07       	cpc	r23, r19
    6f4e:	84 07       	cpc	r24, r20
    6f50:	ba 07       	cpc	r27, r26
    6f52:	20 f0       	brcs	.+8      	; 0x6f5c <__divsf3_pse+0xae>
    6f54:	62 1b       	sub	r22, r18
    6f56:	73 0b       	sbc	r23, r19
    6f58:	84 0b       	sbc	r24, r20
    6f5a:	ba 0b       	sbc	r27, r26
    6f5c:	ee 1f       	adc	r30, r30
    6f5e:	88 f7       	brcc	.-30     	; 0x6f42 <__divsf3_pse+0x94>
    6f60:	e0 95       	com	r30
    6f62:	08 95       	ret

00006f64 <__fixsfsi>:
    6f64:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <__fixunssfsi>
    6f68:	68 94       	set
    6f6a:	b1 11       	cpse	r27, r1
    6f6c:	0c 94 94 38 	jmp	0x7128	; 0x7128 <__fp_szero>
    6f70:	08 95       	ret

00006f72 <__fixunssfsi>:
    6f72:	0e 94 79 38 	call	0x70f2	; 0x70f2 <__fp_splitA>
    6f76:	88 f0       	brcs	.+34     	; 0x6f9a <__fixunssfsi+0x28>
    6f78:	9f 57       	subi	r25, 0x7F	; 127
    6f7a:	98 f0       	brcs	.+38     	; 0x6fa2 <__fixunssfsi+0x30>
    6f7c:	b9 2f       	mov	r27, r25
    6f7e:	99 27       	eor	r25, r25
    6f80:	b7 51       	subi	r27, 0x17	; 23
    6f82:	b0 f0       	brcs	.+44     	; 0x6fb0 <__fixunssfsi+0x3e>
__fixunssfsi():
    6f84:	e1 f0       	breq	.+56     	; 0x6fbe <__fixunssfsi+0x4c>
    6f86:	66 0f       	add	r22, r22
    6f88:	77 1f       	adc	r23, r23
    6f8a:	88 1f       	adc	r24, r24
    6f8c:	99 1f       	adc	r25, r25
    6f8e:	1a f0       	brmi	.+6      	; 0x6f96 <__fixunssfsi+0x24>
    6f90:	ba 95       	dec	r27
    6f92:	c9 f7       	brne	.-14     	; 0x6f86 <__fixunssfsi+0x14>
    6f94:	14 c0       	rjmp	.+40     	; 0x6fbe <__fixunssfsi+0x4c>
    6f96:	b1 30       	cpi	r27, 0x01	; 1
    6f98:	91 f0       	breq	.+36     	; 0x6fbe <__fixunssfsi+0x4c>
    6f9a:	0e 94 93 38 	call	0x7126	; 0x7126 <__fp_zero>
    6f9e:	b1 e0       	ldi	r27, 0x01	; 1
    6fa0:	08 95       	ret
    6fa2:	0c 94 93 38 	jmp	0x7126	; 0x7126 <__fp_zero>
    6fa6:	67 2f       	mov	r22, r23
    6fa8:	78 2f       	mov	r23, r24
    6faa:	88 27       	eor	r24, r24
    6fac:	b8 5f       	subi	r27, 0xF8	; 248
    6fae:	39 f0       	breq	.+14     	; 0x6fbe <__fixunssfsi+0x4c>
    6fb0:	b9 3f       	cpi	r27, 0xF9	; 249
    6fb2:	cc f3       	brlt	.-14     	; 0x6fa6 <__fixunssfsi+0x34>
    6fb4:	86 95       	lsr	r24
    6fb6:	77 95       	ror	r23
    6fb8:	67 95       	ror	r22
    6fba:	b3 95       	inc	r27
    6fbc:	d9 f7       	brne	.-10     	; 0x6fb4 <__fixunssfsi+0x42>
    6fbe:	3e f4       	brtc	.+14     	; 0x6fce <__fixunssfsi+0x5c>
    6fc0:	90 95       	com	r25
    6fc2:	80 95       	com	r24
    6fc4:	70 95       	com	r23
    6fc6:	61 95       	neg	r22
    6fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    6fca:	8f 4f       	sbci	r24, 0xFF	; 255
    6fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    6fce:	08 95       	ret

00006fd0 <__floatunsisf>:
__floatunsisf():
    6fd0:	e8 94       	clt
    6fd2:	09 c0       	rjmp	.+18     	; 0x6fe6 <__floatsisf+0x12>

00006fd4 <__floatsisf>:
    6fd4:	97 fb       	bst	r25, 7
    6fd6:	3e f4       	brtc	.+14     	; 0x6fe6 <__floatsisf+0x12>
    6fd8:	90 95       	com	r25
    6fda:	80 95       	com	r24
    6fdc:	70 95       	com	r23
    6fde:	61 95       	neg	r22
    6fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    6fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    6fe4:	9f 4f       	sbci	r25, 0xFF	; 255
    6fe6:	99 23       	and	r25, r25
    6fe8:	a9 f0       	breq	.+42     	; 0x7014 <__floatsisf+0x40>
    6fea:	f9 2f       	mov	r31, r25
    6fec:	96 e9       	ldi	r25, 0x96	; 150
    6fee:	bb 27       	eor	r27, r27
    6ff0:	93 95       	inc	r25
    6ff2:	f6 95       	lsr	r31
    6ff4:	87 95       	ror	r24
    6ff6:	77 95       	ror	r23
    6ff8:	67 95       	ror	r22
    6ffa:	b7 95       	ror	r27
    6ffc:	f1 11       	cpse	r31, r1
    6ffe:	f8 cf       	rjmp	.-16     	; 0x6ff0 <__floatsisf+0x1c>
    7000:	fa f4       	brpl	.+62     	; 0x7040 <__floatsisf+0x6c>
    7002:	bb 0f       	add	r27, r27
    7004:	11 f4       	brne	.+4      	; 0x700a <__floatsisf+0x36>
    7006:	60 ff       	sbrs	r22, 0
    7008:	1b c0       	rjmp	.+54     	; 0x7040 <__floatsisf+0x6c>
    700a:	6f 5f       	subi	r22, 0xFF	; 255
    700c:	7f 4f       	sbci	r23, 0xFF	; 255
    700e:	8f 4f       	sbci	r24, 0xFF	; 255
    7010:	9f 4f       	sbci	r25, 0xFF	; 255
    7012:	16 c0       	rjmp	.+44     	; 0x7040 <__floatsisf+0x6c>
    7014:	88 23       	and	r24, r24
    7016:	11 f0       	breq	.+4      	; 0x701c <__floatsisf+0x48>
    7018:	96 e9       	ldi	r25, 0x96	; 150
    701a:	11 c0       	rjmp	.+34     	; 0x703e <__floatsisf+0x6a>
    701c:	77 23       	and	r23, r23
    701e:	21 f0       	breq	.+8      	; 0x7028 <__floatsisf+0x54>
    7020:	9e e8       	ldi	r25, 0x8E	; 142
    7022:	87 2f       	mov	r24, r23
    7024:	76 2f       	mov	r23, r22
    7026:	05 c0       	rjmp	.+10     	; 0x7032 <__floatsisf+0x5e>
    7028:	66 23       	and	r22, r22
    702a:	71 f0       	breq	.+28     	; 0x7048 <__floatsisf+0x74>
    702c:	96 e8       	ldi	r25, 0x86	; 134
    702e:	86 2f       	mov	r24, r22
    7030:	70 e0       	ldi	r23, 0x00	; 0
    7032:	60 e0       	ldi	r22, 0x00	; 0
    7034:	2a f0       	brmi	.+10     	; 0x7040 <__floatsisf+0x6c>
    7036:	9a 95       	dec	r25
    7038:	66 0f       	add	r22, r22
    703a:	77 1f       	adc	r23, r23
    703c:	88 1f       	adc	r24, r24
    703e:	da f7       	brpl	.-10     	; 0x7036 <__floatsisf+0x62>
    7040:	88 0f       	add	r24, r24
    7042:	96 95       	lsr	r25
    7044:	87 95       	ror	r24
    7046:	97 f9       	bld	r25, 7
    7048:	08 95       	ret

0000704a <__fp_cmp>:
__fp_cmp():
    704a:	99 0f       	add	r25, r25
    704c:	00 08       	sbc	r0, r0
    704e:	55 0f       	add	r21, r21
    7050:	aa 0b       	sbc	r26, r26
    7052:	e0 e8       	ldi	r30, 0x80	; 128
    7054:	fe ef       	ldi	r31, 0xFE	; 254
    7056:	16 16       	cp	r1, r22
    7058:	17 06       	cpc	r1, r23
    705a:	e8 07       	cpc	r30, r24
    705c:	f9 07       	cpc	r31, r25
    705e:	c0 f0       	brcs	.+48     	; 0x7090 <__fp_cmp+0x46>
    7060:	12 16       	cp	r1, r18
    7062:	13 06       	cpc	r1, r19
    7064:	e4 07       	cpc	r30, r20
    7066:	f5 07       	cpc	r31, r21
    7068:	98 f0       	brcs	.+38     	; 0x7090 <__fp_cmp+0x46>
    706a:	62 1b       	sub	r22, r18
    706c:	73 0b       	sbc	r23, r19
    706e:	84 0b       	sbc	r24, r20
    7070:	95 0b       	sbc	r25, r21
    7072:	39 f4       	brne	.+14     	; 0x7082 <__fp_cmp+0x38>
    7074:	0a 26       	eor	r0, r26
    7076:	61 f0       	breq	.+24     	; 0x7090 <__fp_cmp+0x46>
    7078:	23 2b       	or	r18, r19
    707a:	24 2b       	or	r18, r20
    707c:	25 2b       	or	r18, r21
    707e:	21 f4       	brne	.+8      	; 0x7088 <__fp_cmp+0x3e>
    7080:	08 95       	ret
    7082:	0a 26       	eor	r0, r26
    7084:	09 f4       	brne	.+2      	; 0x7088 <__fp_cmp+0x3e>
    7086:	a1 40       	sbci	r26, 0x01	; 1
    7088:	a6 95       	lsr	r26
    708a:	8f ef       	ldi	r24, 0xFF	; 255
    708c:	81 1d       	adc	r24, r1
    708e:	81 1d       	adc	r24, r1
    7090:	08 95       	ret

00007092 <__fp_inf>:
__fp_inf():
    7092:	97 f9       	bld	r25, 7
    7094:	9f 67       	ori	r25, 0x7F	; 127
    7096:	80 e8       	ldi	r24, 0x80	; 128
    7098:	70 e0       	ldi	r23, 0x00	; 0
    709a:	60 e0       	ldi	r22, 0x00	; 0
    709c:	08 95       	ret

0000709e <__fp_nan>:
__fp_nan():
    709e:	9f ef       	ldi	r25, 0xFF	; 255
    70a0:	80 ec       	ldi	r24, 0xC0	; 192
    70a2:	08 95       	ret

000070a4 <__fp_pscA>:
__fp_pscA():
    70a4:	00 24       	eor	r0, r0
    70a6:	0a 94       	dec	r0
    70a8:	16 16       	cp	r1, r22
    70aa:	17 06       	cpc	r1, r23
    70ac:	18 06       	cpc	r1, r24
    70ae:	09 06       	cpc	r0, r25
    70b0:	08 95       	ret

000070b2 <__fp_pscB>:
__fp_pscB():
    70b2:	00 24       	eor	r0, r0
    70b4:	0a 94       	dec	r0
    70b6:	12 16       	cp	r1, r18
    70b8:	13 06       	cpc	r1, r19
    70ba:	14 06       	cpc	r1, r20
    70bc:	05 06       	cpc	r0, r21
    70be:	08 95       	ret

000070c0 <__fp_round>:
__fp_round():
    70c0:	09 2e       	mov	r0, r25
    70c2:	03 94       	inc	r0
    70c4:	00 0c       	add	r0, r0
    70c6:	11 f4       	brne	.+4      	; 0x70cc <__fp_round+0xc>
    70c8:	88 23       	and	r24, r24
    70ca:	52 f0       	brmi	.+20     	; 0x70e0 <__fp_round+0x20>
    70cc:	bb 0f       	add	r27, r27
    70ce:	40 f4       	brcc	.+16     	; 0x70e0 <__fp_round+0x20>
    70d0:	bf 2b       	or	r27, r31
    70d2:	11 f4       	brne	.+4      	; 0x70d8 <__fp_round+0x18>
    70d4:	60 ff       	sbrs	r22, 0
    70d6:	04 c0       	rjmp	.+8      	; 0x70e0 <__fp_round+0x20>
    70d8:	6f 5f       	subi	r22, 0xFF	; 255
    70da:	7f 4f       	sbci	r23, 0xFF	; 255
    70dc:	8f 4f       	sbci	r24, 0xFF	; 255
    70de:	9f 4f       	sbci	r25, 0xFF	; 255
    70e0:	08 95       	ret

000070e2 <__fp_split3>:
__fp_split3():
    70e2:	57 fd       	sbrc	r21, 7
    70e4:	90 58       	subi	r25, 0x80	; 128
    70e6:	44 0f       	add	r20, r20
    70e8:	55 1f       	adc	r21, r21
    70ea:	59 f0       	breq	.+22     	; 0x7102 <__fp_splitA+0x10>
    70ec:	5f 3f       	cpi	r21, 0xFF	; 255
    70ee:	71 f0       	breq	.+28     	; 0x710c <__fp_splitA+0x1a>
    70f0:	47 95       	ror	r20

000070f2 <__fp_splitA>:
    70f2:	88 0f       	add	r24, r24
    70f4:	97 fb       	bst	r25, 7
    70f6:	99 1f       	adc	r25, r25
    70f8:	61 f0       	breq	.+24     	; 0x7112 <__fp_splitA+0x20>
    70fa:	9f 3f       	cpi	r25, 0xFF	; 255
    70fc:	79 f0       	breq	.+30     	; 0x711c <__fp_splitA+0x2a>
    70fe:	87 95       	ror	r24
    7100:	08 95       	ret
    7102:	12 16       	cp	r1, r18
    7104:	13 06       	cpc	r1, r19
    7106:	14 06       	cpc	r1, r20
    7108:	55 1f       	adc	r21, r21
    710a:	f2 cf       	rjmp	.-28     	; 0x70f0 <__fp_split3+0xe>
    710c:	46 95       	lsr	r20
    710e:	f1 df       	rcall	.-30     	; 0x70f2 <__fp_splitA>
    7110:	08 c0       	rjmp	.+16     	; 0x7122 <__fp_splitA+0x30>
    7112:	16 16       	cp	r1, r22
    7114:	17 06       	cpc	r1, r23
    7116:	18 06       	cpc	r1, r24
    7118:	99 1f       	adc	r25, r25
    711a:	f1 cf       	rjmp	.-30     	; 0x70fe <__fp_splitA+0xc>
    711c:	86 95       	lsr	r24
    711e:	71 05       	cpc	r23, r1
    7120:	61 05       	cpc	r22, r1
    7122:	08 94       	sec
    7124:	08 95       	ret

00007126 <__fp_zero>:
__fp_zero():
    7126:	e8 94       	clt

00007128 <__fp_szero>:
    7128:	bb 27       	eor	r27, r27
    712a:	66 27       	eor	r22, r22
    712c:	77 27       	eor	r23, r23
    712e:	cb 01       	movw	r24, r22
    7130:	97 f9       	bld	r25, 7
    7132:	08 95       	ret

00007134 <__gesf2>:
__gesf2():
    7134:	0e 94 25 38 	call	0x704a	; 0x704a <__fp_cmp>
    7138:	08 f4       	brcc	.+2      	; 0x713c <__gesf2+0x8>
    713a:	8f ef       	ldi	r24, 0xFF	; 255
    713c:	08 95       	ret
    713e:	16 f0       	brts	.+4      	; 0x7144 <__gesf2+0x10>
    7140:	0c 94 a7 39 	jmp	0x734e	; 0x734e <__fp_mpack>
    7144:	0c 94 4f 38 	jmp	0x709e	; 0x709e <__fp_nan>
    7148:	68 94       	set
    714a:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__fp_inf>

0000714e <log>:
log():
    714e:	0e 94 79 38 	call	0x70f2	; 0x70f2 <__fp_splitA>
    7152:	a8 f3       	brcs	.-22     	; 0x713e <__gesf2+0xa>
    7154:	99 23       	and	r25, r25
    7156:	c1 f3       	breq	.-16     	; 0x7148 <__gesf2+0x14>
    7158:	ae f3       	brts	.-22     	; 0x7144 <__gesf2+0x10>
    715a:	df 93       	push	r29
    715c:	cf 93       	push	r28
    715e:	1f 93       	push	r17
    7160:	0f 93       	push	r16
    7162:	ff 92       	push	r15
    7164:	c9 2f       	mov	r28, r25
    7166:	dd 27       	eor	r29, r29
    7168:	88 23       	and	r24, r24
    716a:	2a f0       	brmi	.+10     	; 0x7176 <log+0x28>
    716c:	21 97       	sbiw	r28, 0x01	; 1
    716e:	66 0f       	add	r22, r22
    7170:	77 1f       	adc	r23, r23
    7172:	88 1f       	adc	r24, r24
    7174:	da f7       	brpl	.-10     	; 0x716c <log+0x1e>
    7176:	20 e0       	ldi	r18, 0x00	; 0
    7178:	30 e0       	ldi	r19, 0x00	; 0
    717a:	40 e8       	ldi	r20, 0x80	; 128
    717c:	5f eb       	ldi	r21, 0xBF	; 191
    717e:	9f e3       	ldi	r25, 0x3F	; 63
    7180:	88 39       	cpi	r24, 0x98	; 152
    7182:	20 f0       	brcs	.+8      	; 0x718c <log+0x3e>
    7184:	80 3e       	cpi	r24, 0xE0	; 224
    7186:	38 f0       	brcs	.+14     	; 0x7196 <log+0x48>
    7188:	21 96       	adiw	r28, 0x01	; 1
    718a:	8f 77       	andi	r24, 0x7F	; 127
    718c:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    7190:	e4 eb       	ldi	r30, 0xB4	; 180
    7192:	f0 e0       	ldi	r31, 0x00	; 0
    7194:	04 c0       	rjmp	.+8      	; 0x719e <log+0x50>
    7196:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <__addsf3>
    719a:	e1 ee       	ldi	r30, 0xE1	; 225
    719c:	f0 e0       	ldi	r31, 0x00	; 0
    719e:	0e 94 bc 39 	call	0x7378	; 0x7378 <__fp_powser>
    71a2:	8b 01       	movw	r16, r22
    71a4:	be 01       	movw	r22, r28
    71a6:	ec 01       	movw	r28, r24
    71a8:	fb 2e       	mov	r15, r27
    71aa:	6f 57       	subi	r22, 0x7F	; 127
    71ac:	71 09       	sbc	r23, r1
    71ae:	75 95       	asr	r23
    71b0:	77 1f       	adc	r23, r23
    71b2:	88 0b       	sbc	r24, r24
    71b4:	99 0b       	sbc	r25, r25
    71b6:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <__floatsisf>
    71ba:	28 e1       	ldi	r18, 0x18	; 24
    71bc:	32 e7       	ldi	r19, 0x72	; 114
    71be:	41 e3       	ldi	r20, 0x31	; 49
    71c0:	5f e3       	ldi	r21, 0x3F	; 63
    71c2:	0e 94 02 39 	call	0x7204	; 0x7204 <__mulsf3x>
    71c6:	af 2d       	mov	r26, r15
    71c8:	98 01       	movw	r18, r16
    71ca:	ae 01       	movw	r20, r28
    71cc:	ff 90       	pop	r15
    71ce:	0f 91       	pop	r16
    71d0:	1f 91       	pop	r17
    71d2:	cf 91       	pop	r28
    71d4:	df 91       	pop	r29
    71d6:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <__addsf3x>
    71da:	0c 94 60 38 	jmp	0x70c0	; 0x70c0 <__fp_round>

000071de <__mulsf3>:
    71de:	0e 94 02 39 	call	0x7204	; 0x7204 <__mulsf3x>
    71e2:	0c 94 60 38 	jmp	0x70c0	; 0x70c0 <__fp_round>
    71e6:	0e 94 52 38 	call	0x70a4	; 0x70a4 <__fp_pscA>
    71ea:	38 f0       	brcs	.+14     	; 0x71fa <__mulsf3+0x1c>
    71ec:	0e 94 59 38 	call	0x70b2	; 0x70b2 <__fp_pscB>
__mulsf3():
    71f0:	20 f0       	brcs	.+8      	; 0x71fa <__mulsf3+0x1c>
    71f2:	95 23       	and	r25, r21
    71f4:	11 f0       	breq	.+4      	; 0x71fa <__mulsf3+0x1c>
    71f6:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__fp_inf>
    71fa:	0c 94 4f 38 	jmp	0x709e	; 0x709e <__fp_nan>
    71fe:	11 24       	eor	r1, r1
    7200:	0c 94 94 38 	jmp	0x7128	; 0x7128 <__fp_szero>

00007204 <__mulsf3x>:
__mulsf3x():
    7204:	0e 94 71 38 	call	0x70e2	; 0x70e2 <__fp_split3>
    7208:	70 f3       	brcs	.-36     	; 0x71e6 <__mulsf3+0x8>

0000720a <__mulsf3_pse>:
    720a:	95 9f       	mul	r25, r21
    720c:	c1 f3       	breq	.-16     	; 0x71fe <__mulsf3+0x20>
    720e:	95 0f       	add	r25, r21
    7210:	50 e0       	ldi	r21, 0x00	; 0
    7212:	55 1f       	adc	r21, r21
    7214:	62 9f       	mul	r22, r18
    7216:	f0 01       	movw	r30, r0
    7218:	72 9f       	mul	r23, r18
    721a:	bb 27       	eor	r27, r27
    721c:	f0 0d       	add	r31, r0
    721e:	b1 1d       	adc	r27, r1
    7220:	63 9f       	mul	r22, r19
    7222:	aa 27       	eor	r26, r26
    7224:	f0 0d       	add	r31, r0
    7226:	b1 1d       	adc	r27, r1
    7228:	aa 1f       	adc	r26, r26
    722a:	64 9f       	mul	r22, r20
    722c:	66 27       	eor	r22, r22
    722e:	b0 0d       	add	r27, r0
    7230:	a1 1d       	adc	r26, r1
    7232:	66 1f       	adc	r22, r22
    7234:	82 9f       	mul	r24, r18
    7236:	22 27       	eor	r18, r18
    7238:	b0 0d       	add	r27, r0
    723a:	a1 1d       	adc	r26, r1
    723c:	62 1f       	adc	r22, r18
    723e:	73 9f       	mul	r23, r19
    7240:	b0 0d       	add	r27, r0
    7242:	a1 1d       	adc	r26, r1
    7244:	62 1f       	adc	r22, r18
    7246:	83 9f       	mul	r24, r19
    7248:	a0 0d       	add	r26, r0
    724a:	61 1d       	adc	r22, r1
    724c:	22 1f       	adc	r18, r18
    724e:	74 9f       	mul	r23, r20
    7250:	33 27       	eor	r19, r19
    7252:	a0 0d       	add	r26, r0
    7254:	61 1d       	adc	r22, r1
    7256:	23 1f       	adc	r18, r19
    7258:	84 9f       	mul	r24, r20
    725a:	60 0d       	add	r22, r0
    725c:	21 1d       	adc	r18, r1
    725e:	82 2f       	mov	r24, r18
    7260:	76 2f       	mov	r23, r22
    7262:	6a 2f       	mov	r22, r26
    7264:	11 24       	eor	r1, r1
    7266:	9f 57       	subi	r25, 0x7F	; 127
    7268:	50 40       	sbci	r21, 0x00	; 0
    726a:	9a f0       	brmi	.+38     	; 0x7292 <__mulsf3_pse+0x88>
    726c:	f1 f0       	breq	.+60     	; 0x72aa <__mulsf3_pse+0xa0>
    726e:	88 23       	and	r24, r24
    7270:	4a f0       	brmi	.+18     	; 0x7284 <__mulsf3_pse+0x7a>
    7272:	ee 0f       	add	r30, r30
    7274:	ff 1f       	adc	r31, r31
    7276:	bb 1f       	adc	r27, r27
    7278:	66 1f       	adc	r22, r22
    727a:	77 1f       	adc	r23, r23
    727c:	88 1f       	adc	r24, r24
    727e:	91 50       	subi	r25, 0x01	; 1
    7280:	50 40       	sbci	r21, 0x00	; 0
    7282:	a9 f7       	brne	.-22     	; 0x726e <__mulsf3_pse+0x64>
    7284:	9e 3f       	cpi	r25, 0xFE	; 254
    7286:	51 05       	cpc	r21, r1
    7288:	80 f0       	brcs	.+32     	; 0x72aa <__mulsf3_pse+0xa0>
    728a:	0c 94 49 38 	jmp	0x7092	; 0x7092 <__fp_inf>
    728e:	0c 94 94 38 	jmp	0x7128	; 0x7128 <__fp_szero>
    7292:	5f 3f       	cpi	r21, 0xFF	; 255
    7294:	e4 f3       	brlt	.-8      	; 0x728e <__mulsf3_pse+0x84>
    7296:	98 3e       	cpi	r25, 0xE8	; 232
    7298:	d4 f3       	brlt	.-12     	; 0x728e <__mulsf3_pse+0x84>
    729a:	86 95       	lsr	r24
    729c:	77 95       	ror	r23
    729e:	67 95       	ror	r22
    72a0:	b7 95       	ror	r27
    72a2:	f7 95       	ror	r31
    72a4:	e7 95       	ror	r30
    72a6:	9f 5f       	subi	r25, 0xFF	; 255
    72a8:	c1 f7       	brne	.-16     	; 0x729a <__mulsf3_pse+0x90>
    72aa:	fe 2b       	or	r31, r30
    72ac:	88 0f       	add	r24, r24
    72ae:	91 1d       	adc	r25, r1
    72b0:	96 95       	lsr	r25
    72b2:	87 95       	ror	r24
    72b4:	97 f9       	bld	r25, 7
    72b6:	08 95       	ret
    72b8:	19 f4       	brne	.+6      	; 0x72c0 <__mulsf3_pse+0xb6>
    72ba:	16 f4       	brtc	.+4      	; 0x72c0 <__mulsf3_pse+0xb6>
    72bc:	0c 94 4f 38 	jmp	0x709e	; 0x709e <__fp_nan>
    72c0:	0c 94 a7 39 	jmp	0x734e	; 0x734e <__fp_mpack>

000072c4 <sqrt>:
    72c4:	0e 94 79 38 	call	0x70f2	; 0x70f2 <__fp_splitA>
    72c8:	b8 f3       	brcs	.-18     	; 0x72b8 <__mulsf3_pse+0xae>
    72ca:	99 23       	and	r25, r25
    72cc:	c9 f3       	breq	.-14     	; 0x72c0 <__mulsf3_pse+0xb6>
    72ce:	b6 f3       	brts	.-20     	; 0x72bc <__mulsf3_pse+0xb2>
    72d0:	9f 57       	subi	r25, 0x7F	; 127
    72d2:	55 0b       	sbc	r21, r21
    72d4:	87 ff       	sbrs	r24, 7
sqrt():
    72d6:	0e 94 b5 39 	call	0x736a	; 0x736a <__fp_norm2>
    72da:	00 24       	eor	r0, r0
    72dc:	a0 e6       	ldi	r26, 0x60	; 96
    72de:	40 ea       	ldi	r20, 0xA0	; 160
    72e0:	90 01       	movw	r18, r0
    72e2:	80 58       	subi	r24, 0x80	; 128
    72e4:	56 95       	lsr	r21
    72e6:	97 95       	ror	r25
    72e8:	28 f4       	brcc	.+10     	; 0x72f4 <sqrt+0x30>
    72ea:	80 5c       	subi	r24, 0xC0	; 192
    72ec:	66 0f       	add	r22, r22
    72ee:	77 1f       	adc	r23, r23
    72f0:	88 1f       	adc	r24, r24
    72f2:	20 f0       	brcs	.+8      	; 0x72fc <sqrt+0x38>
    72f4:	26 17       	cp	r18, r22
    72f6:	37 07       	cpc	r19, r23
    72f8:	48 07       	cpc	r20, r24
    72fa:	30 f4       	brcc	.+12     	; 0x7308 <sqrt+0x44>
    72fc:	62 1b       	sub	r22, r18
    72fe:	73 0b       	sbc	r23, r19
    7300:	84 0b       	sbc	r24, r20
    7302:	20 29       	or	r18, r0
    7304:	31 29       	or	r19, r1
    7306:	4a 2b       	or	r20, r26
    7308:	a6 95       	lsr	r26
    730a:	17 94       	ror	r1
    730c:	07 94       	ror	r0
    730e:	20 25       	eor	r18, r0
    7310:	31 25       	eor	r19, r1
    7312:	4a 27       	eor	r20, r26
    7314:	58 f7       	brcc	.-42     	; 0x72ec <sqrt+0x28>
    7316:	66 0f       	add	r22, r22
    7318:	77 1f       	adc	r23, r23
    731a:	88 1f       	adc	r24, r24
    731c:	20 f0       	brcs	.+8      	; 0x7326 <sqrt+0x62>
    731e:	26 17       	cp	r18, r22
    7320:	37 07       	cpc	r19, r23
    7322:	48 07       	cpc	r20, r24
    7324:	30 f4       	brcc	.+12     	; 0x7332 <sqrt+0x6e>
    7326:	62 0b       	sbc	r22, r18
    7328:	73 0b       	sbc	r23, r19
    732a:	84 0b       	sbc	r24, r20
    732c:	20 0d       	add	r18, r0
    732e:	31 1d       	adc	r19, r1
    7330:	41 1d       	adc	r20, r1
    7332:	a0 95       	com	r26
    7334:	81 f7       	brne	.-32     	; 0x7316 <sqrt+0x52>
    7336:	b9 01       	movw	r22, r18
    7338:	84 2f       	mov	r24, r20
    733a:	91 58       	subi	r25, 0x81	; 129
    733c:	88 0f       	add	r24, r24
    733e:	96 95       	lsr	r25
    7340:	87 95       	ror	r24
    7342:	08 95       	ret

00007344 <__unordsf2>:
    7344:	0e 94 25 38 	call	0x704a	; 0x704a <__fp_cmp>
    7348:	88 0b       	sbc	r24, r24
    734a:	99 0b       	sbc	r25, r25
    734c:	08 95       	ret

0000734e <__fp_mpack>:
    734e:	9f 3f       	cpi	r25, 0xFF	; 255
__fp_mpack():
    7350:	31 f0       	breq	.+12     	; 0x735e <__fp_mpack_finite+0xc>

00007352 <__fp_mpack_finite>:
    7352:	91 50       	subi	r25, 0x01	; 1
    7354:	20 f4       	brcc	.+8      	; 0x735e <__fp_mpack_finite+0xc>
    7356:	87 95       	ror	r24
    7358:	77 95       	ror	r23
    735a:	67 95       	ror	r22
    735c:	b7 95       	ror	r27
    735e:	88 0f       	add	r24, r24
    7360:	91 1d       	adc	r25, r1
    7362:	96 95       	lsr	r25
    7364:	87 95       	ror	r24
    7366:	97 f9       	bld	r25, 7
    7368:	08 95       	ret

0000736a <__fp_norm2>:
__fp_norm2():
    736a:	91 50       	subi	r25, 0x01	; 1
    736c:	50 40       	sbci	r21, 0x00	; 0
    736e:	66 0f       	add	r22, r22
    7370:	77 1f       	adc	r23, r23
    7372:	88 1f       	adc	r24, r24
    7374:	d2 f7       	brpl	.-12     	; 0x736a <__fp_norm2>
    7376:	08 95       	ret

00007378 <__fp_powser>:
__fp_powser():
    7378:	df 93       	push	r29
    737a:	cf 93       	push	r28
    737c:	1f 93       	push	r17
    737e:	0f 93       	push	r16
    7380:	ff 92       	push	r15
    7382:	ef 92       	push	r14
    7384:	df 92       	push	r13
    7386:	7b 01       	movw	r14, r22
    7388:	8c 01       	movw	r16, r24
    738a:	68 94       	set
    738c:	06 c0       	rjmp	.+12     	; 0x739a <__fp_powser+0x22>
    738e:	da 2e       	mov	r13, r26
    7390:	ef 01       	movw	r28, r30
    7392:	0e 94 02 39 	call	0x7204	; 0x7204 <__mulsf3x>
    7396:	fe 01       	movw	r30, r28
    7398:	e8 94       	clt
    739a:	a5 91       	lpm	r26, Z+
    739c:	25 91       	lpm	r18, Z+
    739e:	35 91       	lpm	r19, Z+
    73a0:	45 91       	lpm	r20, Z+
    73a2:	55 91       	lpm	r21, Z+
    73a4:	a6 f3       	brts	.-24     	; 0x738e <__fp_powser+0x16>
    73a6:	ef 01       	movw	r28, r30
    73a8:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <__addsf3x>
    73ac:	fe 01       	movw	r30, r28
    73ae:	97 01       	movw	r18, r14
    73b0:	a8 01       	movw	r20, r16
    73b2:	da 94       	dec	r13
    73b4:	69 f7       	brne	.-38     	; 0x7390 <__fp_powser+0x18>
    73b6:	df 90       	pop	r13
    73b8:	ef 90       	pop	r14
    73ba:	ff 90       	pop	r15
    73bc:	0f 91       	pop	r16
    73be:	1f 91       	pop	r17
    73c0:	cf 91       	pop	r28
    73c2:	df 91       	pop	r29
    73c4:	08 95       	ret

000073c6 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    73c6:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    73c8:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    73ca:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    73cc:	0e 94 78 3a 	call	0x74f0	; 0x74f0 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    73d0:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    73d2:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    73d4:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    73d6:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    73d8:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    73da:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    73dc:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    73de:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    73e0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    73e2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    73e4:	08 95       	ret

000073e6 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    73e6:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    73e8:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    73ea:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    73ec:	07 c0       	rjmp	.+14     	; 0x73fc <__udivmodhi4_ep>

000073ee <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    73ee:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    73f0:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    73f2:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    73f4:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    73f6:	10 f0       	brcs	.+4      	; 0x73fc <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    73f8:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    73fa:	b7 0b       	sbc	r27, r23

000073fc <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    73fc:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    73fe:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    7400:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    7402:	a9 f7       	brne	.-22     	; 0x73ee <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    7404:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    7406:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    7408:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    740a:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    740c:	08 95       	ret

0000740e <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    740e:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    7410:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    7412:	16 f4       	brtc	.+4      	; 0x7418 <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    7414:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    7416:	07 d0       	rcall	.+14     	; 0x7426 <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    7418:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    741a:	09 d0       	rcall	.+18     	; 0x742e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    741c:	0e 94 f3 39 	call	0x73e6	; 0x73e6 <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    7420:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    7422:	05 d0       	rcall	.+10     	; 0x742e <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    7424:	3e f4       	brtc	.+14     	; 0x7434 <__divmodhi4_exit>

00007426 <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    7426:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    7428:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    742a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    742c:	08 95       	ret

0000742e <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    742e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    7430:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    7432:	7f 4f       	sbci	r23, 0xFF	; 255

00007434 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    7434:	08 95       	ret

00007436 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    7436:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    7438:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    743a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    743c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    743e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    7440:	0d c0       	rjmp	.+26     	; 0x745c <__udivmodsi4_ep>

00007442 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    7442:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    7444:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    7446:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    7448:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    744a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    744c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    744e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    7450:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    7452:	20 f0       	brcs	.+8      	; 0x745c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    7454:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    7456:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    7458:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    745a:	f5 0b       	sbc	r31, r21

0000745c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    745c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    745e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    7460:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    7462:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    7464:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    7466:	69 f7       	brne	.-38     	; 0x7442 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    7468:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    746a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    746c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    746e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    7470:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    7472:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    7474:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    7476:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    7478:	08 95       	ret

0000747a <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    747a:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    747c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    747e:	1e f4       	brtc	.+6      	; 0x7486 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    7480:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    7482:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    7486:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    7488:	07 d0       	rcall	.+14     	; 0x7498 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    748a:	0e 94 1b 3a 	call	0x7436	; 0x7436 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    748e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    7490:	03 d0       	rcall	.+6      	; 0x7498 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    7492:	4e f4       	brtc	.+18     	; 0x74a6 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    7494:	0c 94 54 3a 	jmp	0x74a8	; 0x74a8 <__negsi2>

00007498 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    7498:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    749a:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    749c:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    749e:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    74a0:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    74a2:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    74a4:	5f 4f       	sbci	r21, 0xFF	; 255

000074a6 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    74a6:	08 95       	ret

000074a8 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    74a8:	90 95       	com	r25
    74aa:	80 95       	com	r24
    74ac:	70 95       	com	r23
    74ae:	61 95       	neg	r22
    74b0:	7f 4f       	sbci	r23, 0xFF	; 255
    74b2:	8f 4f       	sbci	r24, 0xFF	; 255
    74b4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    74b6:	08 95       	ret

000074b8 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    74b8:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    74ba:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    74bc:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    74be:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    74c0:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    74c2:	09 94       	ijmp

000074c4 <__bswapsi2>:
__bswapsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3092
    74c4:	69 27       	eor	r22, r25
    74c6:	96 27       	eor	r25, r22
    74c8:	69 27       	eor	r22, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3093
    74ca:	78 27       	eor	r23, r24
    74cc:	87 27       	eor	r24, r23
    74ce:	78 27       	eor	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3094
    74d0:	08 95       	ret

000074d2 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    74d2:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    74d4:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    74d6:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    74d8:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    74da:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    74dc:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    74de:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    74e0:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    74e2:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    74e4:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    74e6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    74e8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    74ea:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    74ec:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    74ee:	08 95       	ret

000074f0 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    74f0:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    74f4:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    74f6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    74f8:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    74fa:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    74fc:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    74fe:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    7500:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    7502:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    7504:	08 95       	ret

00007506 <__ashldi3>:
__ashldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    7506:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    7508:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    750a:	90 f0       	brcs	.+36     	; 0x7530 <__ashldi3+0x2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    750c:	98 2f       	mov	r25, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    750e:	87 2f       	mov	r24, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    7510:	76 2f       	mov	r23, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    7512:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    7514:	54 2f       	mov	r21, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    7516:	43 2f       	mov	r20, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    7518:	32 2f       	mov	r19, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    751a:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    751c:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    751e:	f4 cf       	rjmp	.-24     	; 0x7508 <__ashldi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    7520:	22 0f       	add	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    7522:	33 1f       	adc	r19, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    7524:	44 1f       	adc	r20, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    7526:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    7528:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    752a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    752c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    752e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    7530:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    7532:	b2 f7       	brpl	.-20     	; 0x7520 <__ashldi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    7534:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    7536:	08 95       	ret

00007538 <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    7538:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    753a:	10 94       	com	r1

0000753c <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    753c:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    753e:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    7540:	98 f0       	brcs	.+38     	; 0x7568 <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    7542:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    7544:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    7546:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    7548:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    754a:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    754c:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    754e:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    7550:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    7552:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    7554:	f4 cf       	rjmp	.-24     	; 0x753e <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    7556:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    7558:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    755a:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    755c:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    755e:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    7560:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    7562:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    7564:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    7566:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    7568:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    756a:	aa f7       	brpl	.-22     	; 0x7556 <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    756c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    756e:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    7570:	08 95       	ret

00007572 <malloc>:
malloc():
    7572:	0f 93       	push	r16
    7574:	1f 93       	push	r17
    7576:	cf 93       	push	r28
    7578:	df 93       	push	r29
    757a:	82 30       	cpi	r24, 0x02	; 2
    757c:	91 05       	cpc	r25, r1
    757e:	10 f4       	brcc	.+4      	; 0x7584 <malloc+0x12>
    7580:	82 e0       	ldi	r24, 0x02	; 2
    7582:	90 e0       	ldi	r25, 0x00	; 0
    7584:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <__flp>
    7588:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <__flp+0x1>
    758c:	30 e0       	ldi	r19, 0x00	; 0
    758e:	20 e0       	ldi	r18, 0x00	; 0
    7590:	b0 e0       	ldi	r27, 0x00	; 0
    7592:	a0 e0       	ldi	r26, 0x00	; 0
    7594:	30 97       	sbiw	r30, 0x00	; 0
    7596:	99 f4       	brne	.+38     	; 0x75be <malloc+0x4c>
    7598:	21 15       	cp	r18, r1
    759a:	31 05       	cpc	r19, r1
    759c:	09 f4       	brne	.+2      	; 0x75a0 <malloc+0x2e>
    759e:	4a c0       	rjmp	.+148    	; 0x7634 <malloc+0xc2>
    75a0:	28 1b       	sub	r18, r24
    75a2:	39 0b       	sbc	r19, r25
    75a4:	24 30       	cpi	r18, 0x04	; 4
    75a6:	31 05       	cpc	r19, r1
    75a8:	d8 f5       	brcc	.+118    	; 0x7620 <malloc+0xae>
    75aa:	8a 81       	ldd	r24, Y+2	; 0x02
    75ac:	9b 81       	ldd	r25, Y+3	; 0x03
    75ae:	61 15       	cp	r22, r1
    75b0:	71 05       	cpc	r23, r1
    75b2:	89 f1       	breq	.+98     	; 0x7616 <malloc+0xa4>
    75b4:	fb 01       	movw	r30, r22
    75b6:	93 83       	std	Z+3, r25	; 0x03
    75b8:	82 83       	std	Z+2, r24	; 0x02
    75ba:	fe 01       	movw	r30, r28
    75bc:	11 c0       	rjmp	.+34     	; 0x75e0 <malloc+0x6e>
    75be:	40 81       	ld	r20, Z
    75c0:	51 81       	ldd	r21, Z+1	; 0x01
    75c2:	02 81       	ldd	r16, Z+2	; 0x02
    75c4:	13 81       	ldd	r17, Z+3	; 0x03
    75c6:	48 17       	cp	r20, r24
    75c8:	59 07       	cpc	r21, r25
    75ca:	e0 f0       	brcs	.+56     	; 0x7604 <malloc+0x92>
    75cc:	48 17       	cp	r20, r24
    75ce:	59 07       	cpc	r21, r25
    75d0:	99 f4       	brne	.+38     	; 0x75f8 <malloc+0x86>
    75d2:	10 97       	sbiw	r26, 0x00	; 0
    75d4:	61 f0       	breq	.+24     	; 0x75ee <malloc+0x7c>
    75d6:	12 96       	adiw	r26, 0x02	; 2
    75d8:	0c 93       	st	X, r16
    75da:	12 97       	sbiw	r26, 0x02	; 2
    75dc:	13 96       	adiw	r26, 0x03	; 3
    75de:	1c 93       	st	X, r17
    75e0:	32 96       	adiw	r30, 0x02	; 2
    75e2:	cf 01       	movw	r24, r30
    75e4:	df 91       	pop	r29
    75e6:	cf 91       	pop	r28
    75e8:	1f 91       	pop	r17
    75ea:	0f 91       	pop	r16
    75ec:	08 95       	ret
    75ee:	00 93 fe 05 	sts	0x05FE, r16	; 0x8005fe <__flp>
    75f2:	10 93 ff 05 	sts	0x05FF, r17	; 0x8005ff <__flp+0x1>
    75f6:	f4 cf       	rjmp	.-24     	; 0x75e0 <malloc+0x6e>
    75f8:	21 15       	cp	r18, r1
    75fa:	31 05       	cpc	r19, r1
    75fc:	51 f0       	breq	.+20     	; 0x7612 <malloc+0xa0>
    75fe:	42 17       	cp	r20, r18
    7600:	53 07       	cpc	r21, r19
    7602:	38 f0       	brcs	.+14     	; 0x7612 <malloc+0xa0>
    7604:	a9 01       	movw	r20, r18
    7606:	db 01       	movw	r26, r22
    7608:	9a 01       	movw	r18, r20
    760a:	bd 01       	movw	r22, r26
    760c:	df 01       	movw	r26, r30
    760e:	f8 01       	movw	r30, r16
    7610:	c1 cf       	rjmp	.-126    	; 0x7594 <malloc+0x22>
    7612:	ef 01       	movw	r28, r30
    7614:	f9 cf       	rjmp	.-14     	; 0x7608 <malloc+0x96>
    7616:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <__flp+0x1>
    761a:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <__flp>
    761e:	cd cf       	rjmp	.-102    	; 0x75ba <malloc+0x48>
    7620:	fe 01       	movw	r30, r28
    7622:	e2 0f       	add	r30, r18
    7624:	f3 1f       	adc	r31, r19
    7626:	81 93       	st	Z+, r24
    7628:	91 93       	st	Z+, r25
    762a:	22 50       	subi	r18, 0x02	; 2
    762c:	31 09       	sbc	r19, r1
    762e:	39 83       	std	Y+1, r19	; 0x01
    7630:	28 83       	st	Y, r18
    7632:	d7 cf       	rjmp	.-82     	; 0x75e2 <malloc+0x70>
    7634:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    7638:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    763c:	23 2b       	or	r18, r19
    763e:	41 f4       	brne	.+16     	; 0x7650 <malloc+0xde>
    7640:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    7644:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    7648:	30 93 fd 05 	sts	0x05FD, r19	; 0x8005fd <__brkval+0x1>
    764c:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <__brkval>
    7650:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7654:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7658:	21 15       	cp	r18, r1
    765a:	31 05       	cpc	r19, r1
    765c:	41 f4       	brne	.+16     	; 0x766e <malloc+0xfc>
    765e:	2d b7       	in	r18, 0x3d	; 61
    7660:	3e b7       	in	r19, 0x3e	; 62
    7662:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7666:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    766a:	24 1b       	sub	r18, r20
    766c:	35 0b       	sbc	r19, r21
    766e:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <__brkval>
    7672:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <__brkval+0x1>
    7676:	e2 17       	cp	r30, r18
    7678:	f3 07       	cpc	r31, r19
    767a:	a0 f4       	brcc	.+40     	; 0x76a4 <malloc+0x132>
    767c:	2e 1b       	sub	r18, r30
    767e:	3f 0b       	sbc	r19, r31
    7680:	28 17       	cp	r18, r24
    7682:	39 07       	cpc	r19, r25
    7684:	78 f0       	brcs	.+30     	; 0x76a4 <malloc+0x132>
    7686:	ac 01       	movw	r20, r24
    7688:	4e 5f       	subi	r20, 0xFE	; 254
    768a:	5f 4f       	sbci	r21, 0xFF	; 255
    768c:	24 17       	cp	r18, r20
    768e:	35 07       	cpc	r19, r21
    7690:	48 f0       	brcs	.+18     	; 0x76a4 <malloc+0x132>
    7692:	4e 0f       	add	r20, r30
    7694:	5f 1f       	adc	r21, r31
    7696:	50 93 fd 05 	sts	0x05FD, r21	; 0x8005fd <__brkval+0x1>
    769a:	40 93 fc 05 	sts	0x05FC, r20	; 0x8005fc <__brkval>
    769e:	81 93       	st	Z+, r24
    76a0:	91 93       	st	Z+, r25
    76a2:	9f cf       	rjmp	.-194    	; 0x75e2 <malloc+0x70>
    76a4:	f0 e0       	ldi	r31, 0x00	; 0
    76a6:	e0 e0       	ldi	r30, 0x00	; 0
    76a8:	9c cf       	rjmp	.-200    	; 0x75e2 <malloc+0x70>

000076aa <free>:
free():
    76aa:	cf 93       	push	r28
    76ac:	df 93       	push	r29
    76ae:	00 97       	sbiw	r24, 0x00	; 0
    76b0:	e9 f0       	breq	.+58     	; 0x76ec <free+0x42>
    76b2:	fc 01       	movw	r30, r24
    76b4:	32 97       	sbiw	r30, 0x02	; 2
    76b6:	13 82       	std	Z+3, r1	; 0x03
    76b8:	12 82       	std	Z+2, r1	; 0x02
    76ba:	a0 91 fe 05 	lds	r26, 0x05FE	; 0x8005fe <__flp>
    76be:	b0 91 ff 05 	lds	r27, 0x05FF	; 0x8005ff <__flp+0x1>
    76c2:	ed 01       	movw	r28, r26
    76c4:	30 e0       	ldi	r19, 0x00	; 0
    76c6:	20 e0       	ldi	r18, 0x00	; 0
    76c8:	10 97       	sbiw	r26, 0x00	; 0
    76ca:	a1 f4       	brne	.+40     	; 0x76f4 <free+0x4a>
    76cc:	20 81       	ld	r18, Z
    76ce:	31 81       	ldd	r19, Z+1	; 0x01
    76d0:	82 0f       	add	r24, r18
    76d2:	93 1f       	adc	r25, r19
    76d4:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    76d8:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    76dc:	28 17       	cp	r18, r24
    76de:	39 07       	cpc	r19, r25
    76e0:	09 f0       	breq	.+2      	; 0x76e4 <free+0x3a>
    76e2:	61 c0       	rjmp	.+194    	; 0x77a6 <free+0xfc>
    76e4:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__brkval+0x1>
    76e8:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__brkval>
    76ec:	df 91       	pop	r29
    76ee:	cf 91       	pop	r28
    76f0:	08 95       	ret
    76f2:	ea 01       	movw	r28, r20
    76f4:	ce 17       	cp	r28, r30
    76f6:	df 07       	cpc	r29, r31
    76f8:	e8 f5       	brcc	.+122    	; 0x7774 <free+0xca>
    76fa:	4a 81       	ldd	r20, Y+2	; 0x02
    76fc:	5b 81       	ldd	r21, Y+3	; 0x03
    76fe:	9e 01       	movw	r18, r28
    7700:	41 15       	cp	r20, r1
    7702:	51 05       	cpc	r21, r1
    7704:	b1 f7       	brne	.-20     	; 0x76f2 <free+0x48>
    7706:	e9 01       	movw	r28, r18
    7708:	fb 83       	std	Y+3, r31	; 0x03
    770a:	ea 83       	std	Y+2, r30	; 0x02
    770c:	49 91       	ld	r20, Y+
    770e:	59 91       	ld	r21, Y+
    7710:	c4 0f       	add	r28, r20
    7712:	d5 1f       	adc	r29, r21
    7714:	ec 17       	cp	r30, r28
    7716:	fd 07       	cpc	r31, r29
    7718:	61 f4       	brne	.+24     	; 0x7732 <free+0x88>
    771a:	80 81       	ld	r24, Z
    771c:	91 81       	ldd	r25, Z+1	; 0x01
    771e:	02 96       	adiw	r24, 0x02	; 2
    7720:	84 0f       	add	r24, r20
    7722:	95 1f       	adc	r25, r21
    7724:	e9 01       	movw	r28, r18
    7726:	99 83       	std	Y+1, r25	; 0x01
    7728:	88 83       	st	Y, r24
    772a:	82 81       	ldd	r24, Z+2	; 0x02
    772c:	93 81       	ldd	r25, Z+3	; 0x03
    772e:	9b 83       	std	Y+3, r25	; 0x03
    7730:	8a 83       	std	Y+2, r24	; 0x02
    7732:	f0 e0       	ldi	r31, 0x00	; 0
    7734:	e0 e0       	ldi	r30, 0x00	; 0
    7736:	12 96       	adiw	r26, 0x02	; 2
    7738:	8d 91       	ld	r24, X+
    773a:	9c 91       	ld	r25, X
    773c:	13 97       	sbiw	r26, 0x03	; 3
    773e:	00 97       	sbiw	r24, 0x00	; 0
    7740:	b9 f5       	brne	.+110    	; 0x77b0 <free+0x106>
    7742:	2d 91       	ld	r18, X+
    7744:	3c 91       	ld	r19, X
    7746:	11 97       	sbiw	r26, 0x01	; 1
    7748:	cd 01       	movw	r24, r26
    774a:	02 96       	adiw	r24, 0x02	; 2
    774c:	82 0f       	add	r24, r18
    774e:	93 1f       	adc	r25, r19
    7750:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    7754:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    7758:	28 17       	cp	r18, r24
    775a:	39 07       	cpc	r19, r25
    775c:	39 f6       	brne	.-114    	; 0x76ec <free+0x42>
    775e:	30 97       	sbiw	r30, 0x00	; 0
    7760:	51 f5       	brne	.+84     	; 0x77b6 <free+0x10c>
    7762:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <__flp+0x1>
    7766:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <__flp>
    776a:	b0 93 fd 05 	sts	0x05FD, r27	; 0x8005fd <__brkval+0x1>
    776e:	a0 93 fc 05 	sts	0x05FC, r26	; 0x8005fc <__brkval>
    7772:	bc cf       	rjmp	.-136    	; 0x76ec <free+0x42>
    7774:	d3 83       	std	Z+3, r29	; 0x03
    7776:	c2 83       	std	Z+2, r28	; 0x02
    7778:	40 81       	ld	r20, Z
    777a:	51 81       	ldd	r21, Z+1	; 0x01
    777c:	84 0f       	add	r24, r20
    777e:	95 1f       	adc	r25, r21
    7780:	c8 17       	cp	r28, r24
    7782:	d9 07       	cpc	r29, r25
    7784:	61 f4       	brne	.+24     	; 0x779e <free+0xf4>
    7786:	4e 5f       	subi	r20, 0xFE	; 254
    7788:	5f 4f       	sbci	r21, 0xFF	; 255
    778a:	88 81       	ld	r24, Y
    778c:	99 81       	ldd	r25, Y+1	; 0x01
    778e:	48 0f       	add	r20, r24
    7790:	59 1f       	adc	r21, r25
    7792:	51 83       	std	Z+1, r21	; 0x01
    7794:	40 83       	st	Z, r20
    7796:	8a 81       	ldd	r24, Y+2	; 0x02
    7798:	9b 81       	ldd	r25, Y+3	; 0x03
    779a:	93 83       	std	Z+3, r25	; 0x03
    779c:	82 83       	std	Z+2, r24	; 0x02
    779e:	21 15       	cp	r18, r1
    77a0:	31 05       	cpc	r19, r1
    77a2:	09 f0       	breq	.+2      	; 0x77a6 <free+0xfc>
    77a4:	b0 cf       	rjmp	.-160    	; 0x7706 <free+0x5c>
    77a6:	f0 93 ff 05 	sts	0x05FF, r31	; 0x8005ff <__flp+0x1>
    77aa:	e0 93 fe 05 	sts	0x05FE, r30	; 0x8005fe <__flp>
    77ae:	9e cf       	rjmp	.-196    	; 0x76ec <free+0x42>
    77b0:	fd 01       	movw	r30, r26
    77b2:	dc 01       	movw	r26, r24
    77b4:	c0 cf       	rjmp	.-128    	; 0x7736 <free+0x8c>
    77b6:	13 82       	std	Z+3, r1	; 0x03
    77b8:	12 82       	std	Z+2, r1	; 0x02
    77ba:	d7 cf       	rjmp	.-82     	; 0x776a <free+0xc0>

000077bc <memset>:
memset():
    77bc:	dc 01       	movw	r26, r24
    77be:	01 c0       	rjmp	.+2      	; 0x77c2 <memset+0x6>
    77c0:	6d 93       	st	X+, r22
    77c2:	41 50       	subi	r20, 0x01	; 1
    77c4:	50 40       	sbci	r21, 0x00	; 0
    77c6:	e0 f7       	brcc	.-8      	; 0x77c0 <memset+0x4>
    77c8:	08 95       	ret

000077ca <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:91
    77ca:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:92
    77cc:	fe cf       	rjmp	.-4      	; 0x77ca <eeprom_read_byte>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:95
    77ce:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:101
    77d0:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:102
    77d2:	f8 9a       	sbi	0x1f, 0	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:103
    77d4:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:104
    77d6:	80 b5       	in	r24, 0x20	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:105
    77d8:	08 95       	ret

000077da <eeprom_write_byte>:
eeprom_write_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:42
    77da:	26 2f       	mov	r18, r22

000077dc <eeprom_write_r18>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:162
    77dc:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:163
    77de:	fe cf       	rjmp	.-4      	; 0x77dc <eeprom_write_r18>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:167
    77e0:	1f ba       	out	0x1f, r1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:174
    77e2:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:180
    77e4:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:181
    77e6:	20 bd       	out	0x20, r18	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:182
    77e8:	0f b6       	in	r0, 0x3f	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:183
    77ea:	f8 94       	cli
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:184
    77ec:	fa 9a       	sbi	0x1f, 2	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:185
    77ee:	f9 9a       	sbi	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:186
    77f0:	0f be       	out	0x3f, r0	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:187
    77f2:	01 96       	adiw	r24, 0x01	; 1
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:188
    77f4:	08 95       	ret

000077f6 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    77f6:	18 e0       	ldi	r17, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    77f8:	c5 ee       	ldi	r28, 0xE5	; 229
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    77fa:	d8 e0       	ldi	r29, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    77fc:	04 c0       	rjmp	.+8      	; 0x7806 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    77fe:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    7800:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    7804:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    7806:	c7 3e       	cpi	r28, 0xE7	; 231
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    7808:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    780a:	c9 f7       	brne	.-14     	; 0x77fe <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    780c:	f8 94       	cli

0000780e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    780e:	ff cf       	rjmp	.-2      	; 0x780e <__stop_program>
