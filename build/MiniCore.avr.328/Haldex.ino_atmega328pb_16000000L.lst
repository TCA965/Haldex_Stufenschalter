
C:\Users\Thaddaeus\AppData\Local\Temp\arduino\sketches\0C29A4A116893CE3714159F044EB4C67/Haldex.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
../../../../crt1/gcrt1.S:65
       0:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <__vector_3>
../../../../crt1/gcrt1.S:70
      10:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 57 33 	jmp	0x66ae	; 0x66ae <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 7e 30 	jmp	0x60fc	; 0x60fc <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 13 2e 	jmp	0x5c26	; 0x5c26 <__vector_40>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__trampolines_end>:
__trampolines_end():
     10e:	42 20       	and	r4, r2
     110:	4b 75       	andi	r20, 0x5B	; 91
     112:	72 7a       	andi	r23, 0xA2	; 162
     114:	73 63       	ori	r23, 0x33	; 51
     116:	68 6c       	ori	r22, 0xC8	; 200
     118:	75 73       	andi	r23, 0x35	; 53
     11a:	73 00       	.word	0x0073	; ????

0000011c <LeseTMCStatus()::__c>:
     11c:	41 20 4b 75 72 7a 73 63 68 6c 75 73 73 00           A Kurzschluss.

0000012a <LeseTMCStatus()::__c>:
     12a:	42 20 4b 75 72 7a 73 63 68 6c 75 73 73 20 6e 61     B Kurzschluss na
     13a:	63 68 20 4d 61 73 73 65 00                          ch Masse.

00000143 <LeseTMCStatus()::__c>:
     143:	41 20 4b 75 72 7a 73 63 68 6c 75 73 73 20 6e 61     A Kurzschluss na
     153:	63 68 20 4d 61 73 73 65 00                          ch Masse.

0000015c <LeseTMCStatus()::__c>:
     15c:	c3 9c 62 65 72 74 65 6d 70 65 72 61 74 75 72 00     ..bertemperatur.

0000016c <LeseTMCStatus()::__c>:
     16c:	56 6f 72 77 61 72 6e 75 6e 67 20 c3 9c 62 65 72     Vorwarnung ..ber
     17c:	74 65 6d 70 65 72 61 74 75 72 00                    temperatur.

00000187 <_ZZ15SchreibeDisplayvE3__c__10_>:
     187:	43 00                                               C.

00000189 <SchreibeDisplay()::__c>:
     189:	20 00                                                .

0000018b <SchreibeDisplay()::__c>:
     18b:	6c 74 65 6d 70 2e 20 00                             ltemp. .

00000193 <SchreibeDisplay()::__c>:
     193:	62 65 72 74 65 6d 70 65 72 61 74 75 72 00           bertemperatur.

000001a1 <SchreibeDisplay()::__c>:
     1a1:	48 61 75 70 74 73 63 68 61 6c 74 65 72 20 61 75     Hauptschalter au
     1b1:	73 00                                               s.

000001b3 <SchreibeDisplay()::__c>:
     1b3:	74 69 67 74 00                                      tigt.

000001b8 <SchreibeDisplay()::__c>:
     1b8:	42 72 65 6d 73 65 20 62 65 74 00                    Bremse bet.

000001c3 <SchreibeDisplay()::__c>:
     1c3:	74 69 67 74 00                                      tigt.

000001c8 <SchreibeDisplay()::__c>:
     1c8:	48 61 6e 64 62 72 65 6d 73 65 20 62 65 74 00        Handbremse bet.

000001d7 <SchreibeDisplay()::__c>:
     1d7:	20 25 00                                             %.

000001da <SchreibeDisplay()::__c>:
     1da:	53 70 65 72 72 67 72 61 64 20 00                    Sperrgrad .

000001e5 <SchreibeDisplay()::__c>:
     1e5:	48 61 6c 64 65 78 20 43 6f 6e 74 72 6f 6c 6c 65     Haldex Controlle
     1f5:	72 00                                               r.

000001f7 <loop::__c>:
     1f7:	4b 75 72 7a 73 63 68 6c 75 73 73 20 56 6f 72 6c     Kurzschluss Vorl
     207:	61 64 65 70 75 6d 70 65 00                          adepumpe.

00000210 <setup::__c>:
     210:	61 6c 6c 72 61 64 62 75 73 2e 63 6f 6d 00           allradbus.com.

0000021e <setup::__c>:
     21e:	54 43 41 39 36 35 00                                TCA965.

00000225 <setup::__c>:
     225:	48 61 6c 64 65 78 20 43 6f 6e 74 72 6f 6c 6c 65     Haldex Controlle
     235:	72 00                                               r.

00000237 <u8g2_font_helvR08_tf>:
     237:	bf 00 03 02 04 04 02 04 05 0b 0d ff fe 08 fe 08     ................
     247:	fe 01 53 02 bd 08 67 20 05 00 e6 04 21 06 81 e3     ..S...g ....!...
     257:	c4 25 22 07 23 3b 45 a2 04 23 10 76 a2 55 92 25     .%".#;E..#.v.U.%
     267:	d1 20 25 c9 20 25 59 12 01 24 10 a5 9e 55 b6 54     . %. %Y..$...U.T
     277:	94 6c 4b a2 44 a9 6c 11 00 25 10 88 62 8e d4 92     .lK.D.l..%..b...
     287:	29 79 9c 27 5a 12 95 14 00 26 0d 86 23 8e 16 b5     )y.'Z....&..#...
     297:	69 51 a2 25 91 29 27 06 21 ba 84 00 28 0b a3 1a     iQ.%.)'.!...(...
     2a7:	55 12 25 51 5b 94 05 29 0c a3 1b 45 16 65 51 4b     U.%Q[..)...E.eQK
     2b7:	94 44 00 2a 07 33 36 45 d2 01 2b 0a 55 a6 55 18     .D.*.36E..+.U.U.
     2c7:	0d 52 18 01 2c 07 32 da 4c a2 00 2d 06 13 2e c5     .R..,.2.L..-....
     2d7:	00 2e 06 11 e3 44 00 2f 0a 83 e2 54 25 6a 89 22     .....D./...T%j."
     2e7:	00 30 0a 85 a2 cd 92 f9 96 2c 00 31 07 82 a3 cd     .0.......,.1....
     2f7:	d2 07 32 0c 85 a2 cd 92 85 25 29 0b 07 01 33 0c     ..2......%)...3.
     307:	85 a2 cd 92 85 91 1a 6a c9 02 34 0e 85 a2 5d 26     .......j..4...]&
     317:	25 51 52 4a 06 2d 4c 00 35 0c 85 a2 cd 90 84 e1     %QRJ.-L.5.......
     327:	1a 6a c9 02 36 0c 85 a2 cd 92 89 43 92 d9 92 05     .j..6......C....
     337:	37 0b 85 a2 c5 20 66 c5 2c ac 01 38 0c 85 a2 cd     7.... f.,..8....
     347:	92 69 c9 92 d9 92 05 39 0c 85 a2 cd 92 d9 92 21     .i.....9.......!
     357:	d4 92 05 3a 06 61 e3 44 18 3b 09 82 da 4c 0e 25     ...:.a.D.;...L.%
     367:	0a 00 3c 07 53 a7 55 52 2b 3d 08 34 6a c5 10 0e     ..<.S.UR+=.4j...
     377:	01 3e 08 53 a7 45 56 29 01 3f 0b 84 a3 8d 12 65     .>.S.EV).?.....e
     387:	51 2d 8f 00 40 16 9a de de 20 a6 51 a4 24 52 49     Q-..@.... .Q.$RI
     397:	c9 22 25 aa 44 8a 96 63 83 06 41 0e 87 e2 5d 9c     ."%.D..c..A...].
     3a7:	26 61 92 95 06 25 55 03 42 0d 85 e3 c5 90 64 da     &a...%U.B.....d.
     3b7:	a0 64 b6 41 01 43 0c 86 23 ce 90 84 6a c7 64 48     .d.A.C..#...j.dH
     3c7:	00 44 0d 86 23 c6 10 65 49 e8 2d 19 22 00 45 0a     .D..#..eI.-.".E.
     3d7:	85 e3 c5 31 1c c6 e2 20 46 0a 85 a3 c5 31 1c 92     ...1... F....1..
     3e7:	b0 11 47 0c 86 23 ce 90 84 6a 6d 14 93 41 48 0a     ..G..#...jm..AH.
     3f7:	86 23 46 68 1c 06 d1 31 49 06 81 e3 c4 41 4a 09     .#Fh...1I....AJ.
     407:	84 62 5d 6f 52 a2 00 4b 0d 85 e3 45 26 25 a5 a9     .b]oR..K...E&%..
     417:	12 25 99 16 4c 08 84 a3 45 d6 b7 21 4d 10 87 63     .%..L...E..!M..c
     427:	46 ba 0d d9 52 51 2a 52 24 45 52 01 4e 0f 86 23     F...RQ*R$ER.N..#
     437:	86 b6 29 91 12 49 89 94 68 9b 00 4f 0b 86 23 ce     ..)..I..h..O..#.
     447:	90 84 3e 26 43 02 50 0c 85 e3 c5 90 64 da a0 84     ..>&C.P.....d...
     457:	8d 00 51 12 97 1f ce 10 85 49 98 84 49 98 44 49     ..Q......I..I.DI
     467:	4d 1a f4 00 52 0c 85 e3 c5 90 64 da a0 64 6e 01     M...R.....d..dn.
     477:	53 0c 85 e3 cd 92 a9 ab a6 25 0b 00 54 09 85 62     S........%..T..b
     487:	c5 20 85 7d 02 55 0a 86 23 46 e8 c7 64 48 00 56     . .}.U..#F..dH.V
     497:	0f 87 e2 45 aa 26 59 94 45 59 25 4c d2 0c 57 10     ...E.&Y.EY%L..W.
     4a7:	89 62 46 96 69 95 a8 2f 6d c5 2c cc 22 00 58 0d     .bF.i../m.,.".X.
     4b7:	85 e3 45 a6 25 b5 4a 94 d4 b4 00 59 0e 87 e2 45     ..E.%.J....Y...E
     4c7:	9a 64 51 56 09 93 34 ae 01 5a 0b 85 e3 c5 20 66     .dQV..4..Z.... f
     4d7:	c5 ac 38 08 5b 08 a2 db c4 d2 2f 02 5c 0a 83 e2     ..8.[...../.\...
     4e7:	44 94 45 6d 51 00 5d 08 a2 da 84 d2 2f 03 5e 0a     D.EmQ.]...../.^.
     4f7:	55 ae 55 98 25 51 52 0b 5f 06 16 9a c5 01 60 06     U.U.%QR._.....`.
     507:	22 fe 44 14 61 0c 65 62 c5 1a 2d 51 12 45 4a 00     ".D.a.eb..-Q.EJ.
     517:	62 0c 85 a2 45 58 31 69 da a4 28 00 63 0a 64 62     b...EX1i..(.c.db
     527:	8d 12 69 a5 44 01 64 0a 85 a2 65 c5 b4 99 14 25     ..i.D.d...e....%
     537:	65 0b 64 62 8d 12 0d 5b 94 28 00 66 0a 84 22 95     e.db...[.(.f..".
     547:	12 4d 59 27 00 67 0c 85 9a 8d 69 33 29 4a 98 2c     .MY'.g....i3)J.,
     557:	00 68 0a 85 a2 45 58 31 69 6e 01 69 07 81 a2 44     .h...EX1in.i...D
     567:	32 0c 6a 09 a2 99 4c 96 f4 a2 00 6b 0c 84 62 45     2.j...L....k..bE
     577:	56 52 12 29 29 49 01 6c 06 81 a2 c4 41 6d 0e 67     VR.))I.l....Am.g
     587:	22 c6 a2 44 91 14 49 91 14 49 05 6e 09 65 a2 45     "..D..I..I.n.e.E
     597:	62 d2 dc 02 6f 0a 65 a2 cd 92 b9 25 0b 00 70 0c     b...o.e....%..p.
     5a7:	85 9a 45 62 d2 b4 49 51 c2 10 71 0a 85 9a 8d 69     ..Eb..IQ..q....i
     5b7:	33 29 4a 58 72 09 63 22 45 b2 44 4d 00 73 0b 64     3)JXr.c"E.DM.s.d
     5c7:	62 8d 12 25 a2 94 28 00 74 0a 83 22 4d 94 2c 51     b..%..(.t.."M.,Q
     5d7:	93 00 75 08 64 62 45 e4 29 19 76 0c 65 a2 45 a6     ..u.dbE.).v.e.E.
     5e7:	25 a5 24 0b 23 00 77 0e 67 22 46 14 49 95 a6 a4     %.$.#.w.g"F.I...
     5f7:	96 84 49 04 78 0a 65 a2 45 96 d4 2a 35 2d 79 0e     ..I.x.e.E..*5-y.
     607:	85 59 4d 94 44 49 29 c9 b4 30 d2 00 7a 0a 64 62     .YM.DI)..0..z.db
     617:	c5 90 45 6d 43 00 7b 0a a3 da 54 12 55 b2 a8 2d     ..EmC.{...T.U..-
     627:	7c 07 a1 db c4 43 00 7d 0b a3 da 44 16 d5 92 a8     |....C.}...D....
     637:	25 02 7e 07 26 ee 8d 64 01 a0 05 00 e6 04 a1 07     %.~.&..d........
     647:	81 db 44 32 0c a2 0e 85 9f 5d b4 54 94 28 89 92     ..D2.....].T.(..
     657:	ca 94 01 a3 0c 85 a2 95 54 c9 b6 b0 a4 28 00 a4     ........T....(..
     667:	0c 64 66 45 94 28 91 94 28 51 00 a5 0d 85 a2 45     .dfE.(..(Q.....E
     677:	66 4b 2a 83 14 0d 52 04 a6 08 a1 db c4 10 0d 01     fK*...R.........
     687:	a7 0f a5 9a cd 92 8d 4b 34 44 c9 b8 25 0b 00 a8     .......K4D..%...
     697:	06 13 fe 44 12 a9 0e 77 63 d6 56 89 14 25 93 94     ...D...wc.V..%..
     6a7:	5a 36 01 aa 08 53 2e c5 a4 64 03 ab 0a 55 a2 55     Z6...S...d...U.U
     6b7:	d2 5b 92 25 01 ac 07 35 eb c5 20 16 ad 06 13 2e     .[.%...5.. .....
     6c7:	c5 00 ae 0d 77 63 d6 56 49 16 93 d2 2d 9b 00 af     ....wc.VI...-...
     6d7:	06 13 fe c4 00 b0 09 44 32 8d 12 49 89 02 b1 0b     .......D2..I....
     6e7:	75 a2 55 18 0d 52 98 0f 02 b2 07 43 f2 cc 52 19     u.U..R.....C..R.
     6f7:	b3 08 43 f2 c4 92 2d 00 b4 06 22 fe 8c 02 b5 0a     ..C...-...".....
     707:	84 5a 45 e4 69 d8 32 00 b6 15 a6 9a cd 30 28 c9     .ZE.i.2......0(.
     717:	92 2c 91 92 25 59 92 25 59 92 25 09 00 b7 06 12     .,..%Y.%Y.%.....
     727:	ee 84 00 b8 06 22 da cc 00 b9 06 42 f2 cc 52 ba     .....".....B..R.
     737:	09 53 2e c5 90 0c d9 00 bb 0b 55 a2 45 92 25 59     .S........U.E.%Y
     747:	d2 13 00 bc 12 89 62 4e 96 69 61 94 46 79 16 46     ......bN.ia.Fy.F
     757:	5a 34 44 61 02 bd 10 88 62 4e 16 69 a5 30 8a 23     Z4Da....bN.i.0.#
     767:	2d 29 65 a5 01 be 12 89 62 c6 9e a5 51 26 e5 48     -)e.....b...Q&.H
     777:	14 46 62 32 44 61 02 bf 0b 84 9b 55 9e 45 b5 28     .Fb2Da.....U.E.(
     787:	51 00 c0 10 b7 e2 55 9e c3 d5 24 4c b2 d2 a0 a4     Q.....U...$L....
     797:	6a 00 c1 10 b7 e2 65 9a c3 d5 24 4c b2 d2 a0 a4     j.....e...$L....
     7a7:	6a 00 c2 11 b7 e2 5d 9a e4 68 9c 26 61 92 95 06     j.....]..h.&a...
     7b7:	25 55 03 c3 12 b7 e2 5d 92 25 39 1a a7 49 98 64     %U.....].%9..I.d
     7c7:	a5 41 49 d5 00 c4 10 a7 e2 55 92 a3 71 9a 84 49     .AI......U..q..I
     7d7:	56 1a 94 54 0d c5 10 b7 e2 5d 9a a4 71 35 09 93     V..T.....]..q5..
     7e7:	ac 34 28 a9 1a c6 12 89 a2 de b0 c9 49 9c 0c 4a     .4(.........I..J
     7f7:	94 0e 61 16 66 83 00 c7 0d a6 1b ce 90 84 6a c7     ..a.f.........j.
     807:	64 08 43 09 c8 0c b5 e3 4d 9a 0f 63 38 8c c5 41     d.C.....M..c8..A
     817:	c9 0c b5 e3 5d 7d 18 c3 61 2c 0e 02 ca 0d b5 e3     ....]}..a,......
     827:	55 96 c4 c3 18 0e 63 71 10 cb 0c a5 e3 4d 79 18     U.....cq.....My.
     837:	c3 61 2c 0e 02 cc 09 b2 e2 44 94 25 fd 00 cd 09     .a,......D.%....
     847:	b2 e3 8c 96 f4 0b 00 ce 09 b3 e2 4c 63 d4 2f 00     ...........Lc./.
     857:	cf 09 a3 e2 44 12 46 fd 02 d0 11 87 22 ce 90 95     ....D.F....."...
     867:	c2 41 4a c2 24 4c b2 68 88 00 d1 12 b6 23 56 12     .AJ.$L.h.....#V.
     877:	25 39 a2 6d 4a a4 44 52 22 25 da 26 d2 0e b6 23     %9.mJ.DR"%.&...#
     887:	56 9c 43 43 12 fa 98 0c 09 00 d3 0d b6 23 66 1d     V.CC.........#f.
     897:	1a 92 d0 c7 64 48 00 d4 0e b6 23 56 98 e4 d0 90     ....dH....#V....
     8a7:	84 3e 26 43 02 d5 0f b6 23 56 12 25 39 34 24 a1     .>&C....#V.%94$.
     8b7:	8f c9 90 00 d6 0e a6 23 4e 94 23 43 12 fa 98 0c     .......#N.#C....
     8c7:	09 00 d7 0a 55 a6 45 96 d4 2a b5 00 d8 12 a6 1f     ....U.E..*......
     8d7:	6e 32 24 d9 94 48 89 12 29 d1 96 0c 49 0a d9 0c     n2$..H..)...I...
     8e7:	b6 23 56 9c 23 a1 1f 93 21 01 da 0c b6 23 66 1d     .#V.#...!....#f.
     8f7:	09 fd 98 0c 09 00 db 0d b6 23 56 98 e4 48 e8 c7     .........#V..H..
     907:	64 48 00 dc 0b a6 23 4e 94 87 7e 4c 86 04 dd 10     dH....#N..~L....
     917:	b7 e2 65 9a 63 69 92 45 59 25 4c d2 b8 06 de 0d     ..e.ci.EY%L.....
     927:	85 e3 45 18 0e 49 a6 0d 4a 18 02 df 0b 84 62 8d     ..E..I..J.....b.
     937:	12 59 4a 2e 09 00 e0 0d 95 62 4d 9a af d1 12 25     .YJ......bM....%
     947:	51 a4 04 e1 0e 95 62 55 96 23 6b b4 44 49 14 29     Q.....bU.#k.DI.)
     957:	01 e2 0e 95 62 55 96 c4 6b b4 44 49 14 29 01 e3     ....bU..k.DI.)..
     967:	0d 95 62 4d f7 35 5a a2 24 8a 94 00 e4 0c 85 62     ..bM.5Z.$......b
     977:	4d 79 8d 96 28 89 22 25 e5 0f 95 62 55 96 64 d1     My..(."%...bU.d.
     987:	1a 2d 51 12 45 4a 00 e6 0e 67 22 c6 22 46 c9 30     .-Q.EJ...g"."F.0
     997:	44 59 54 b1 00 e7 0c 84 5a 8d 12 69 a5 44 8b 14     DYT.....Z..i.D..
     9a7:	00 e8 0c 94 62 4d 18 2b d1 b0 45 89 02 e9 0c 94     ....bM.+..E.....
     9b7:	62 55 5d 89 86 2d 4a 14 00 ea 0d 94 62 4d 94 c4     bU]..-J.....bM..
     9c7:	4a 34 6c 51 a2 00 eb 0c 84 62 45 12 2b d1 b0 45     J4lQ.....bE.+..E
     9d7:	89 02 ec 08 92 a1 44 94 25 3d ed 08 92 a2 8c 96     ......D.%=......
     9e7:	f4 02 ee 09 93 a1 4c 63 d4 0b 00 ef 09 83 a1 44     ......Lc.......D
     9f7:	12 46 bd 00 f0 0d 95 a2 4d 38 48 d1 a0 b9 25 0b     .F......M8H...%.
     a07:	00 f1 0a 94 62 4d a2 a4 4b e4 29 f2 0c 95 a2 4d     ....bM..K.)....M
     a17:	9a 23 4b e6 96 2c 00 f3 0b 95 a2 5d 1d 59 32 b7     .#K..,.....].Y2.
     a27:	64 01 f4 0c 95 a2 55 96 e4 4b e6 96 2c 00 f5 0b     d.....U..K..,...
     a37:	95 a2 55 d2 be 64 6e c9 02 f6 0a 85 a2 4d 7d c9     ..U..dn......M}.
     a47:	dc 92 05 f7 09 55 a6 55 3e e8 11 00 f8 0d 67 a1     .....U.U>.....g.
     a57:	d5 52 92 92 92 54 4b 92 09 f9 0a 94 62 4d 98 46     .R...TK.....bM.F
     a67:	9e 92 01 fa 0a 94 62 5d 94 46 9e 92 01 fb 0a 94     ......b].F......
     a77:	62 4d 94 a4 91 a7 64 fc 0a 84 62 45 92 46 9e 92     bM....d...bE.F..
     a87:	01 fd 0f b5 59 65 96 47 49 94 94 92 4c 0b 23 0d     ....Ye.GI...L.#.
     a97:	fe 0d a5 9a 45 58 31 69 da a4 28 61 08 ff 0f a5     ....EX1i..(a....
     aa7:	59 4d 3d 4a a2 a4 94 64 5a 18 69 00 00 00 00 04     YM=J...dZ.i.....
     ab7:	ff ff 00 00                                         ....

00000abb <u8g2_font_helvB18_tr>:
     abb:	5f 00 04 03 05 05 03 05 06 17 18 00 fb 13 fb 13     _...............
     acb:	fb 02 ea 06 24 08 af 20 06 00 30 9a 00 21 0a 63     ....$.. ..0..!.c
     adb:	1a 9e f0 17 ea 0e 04 22 0b c5 b8 a7 20 c1 8b 91     .......".... ...
     aeb:	08 00 23 2a 4c 16 ba 24 22 26 22 26 22 26 22 26     ..#*L..$"&"&"&"&
     afb:	22 73 40 71 40 23 22 26 22 26 22 26 22 73 40 71     "s@q@#"&"&"&"s@q
     b0b:	40 23 22 26 22 26 22 26 22 26 22 04 24 27 ac d2     @#"&"&"&"&".$'..
     b1b:	b5 25 77 74 30 41 21 b1 44 c4 44 e4 42 cc ae 92     .%wt0A!.D.D.B...
     b2b:	b2 ce 4c e2 44 c4 44 c4 44 e4 42 82 e2 60 e8 4e     ..L.D.D.D.B..`.N
     b3b:	54 0a 00 25 31 55 12 da 3d 57 36 76 34 36 b3 4c     T..%1U..=W6v46.L
     b4b:	4a 64 4e 4a 64 6e 66 62 f2 64 b4 64 1e 66 1e 64     JdNJdnfb.d.d.f.d
     b5b:	a6 74 e4 70 64 66 6e 44 4a 6c 46 4a 6c 66 d5 d4     .t.pdfnDJlFJlf..
     b6b:	d9 58 09 00 26 26 50 16 ca 54 7a 48 41 37 33 37     .X..&&P..TzHA737
     b7b:	33 37 33 38 31 da f4 64 86 82 62 66 e6 64 aa 66     37381..d..bf.d.f
     b8b:	6c 68 aa 86 e6 81 c8 90 d1 00 27 08 c2 b8 9b 70     lh........'....p
     b9b:	40 01 28 16 06 77 a1 24 33 32 33 32 33 23 b3 ff     @.(..w.$32323#..
     bab:	48 68 66 68 66 68 48 00 29 16 06 77 a1 20 b4 66     HhfhfhH.)..w. .f
     bbb:	68 66 48 68 66 ff 46 66 c9 cc c8 8c 10 00 2a 10     hfHhf.Ff......*.
     bcb:	e8 94 ab 23 26 23 21 71 30 42 23 a2 05 00 2b 0e     ...#&#!q0B#...+.
     bdb:	8c 35 be 25 aa ab 83 07 53 a2 ba 02 2c 0a c3 b8     .5.%....S...,...
     beb:	9d 70 20 21 41 01 2d 07 67 d0 a2 f0 01 2e 07 63     .p !A.-.g......c
     bfb:	18 9e 70 20 2f 12 67 16 a2 a5 91 94 22 29 8d a4     ..p /.g.....")..
     c0b:	14 49 29 92 52 05 30 1b 4c 12 b6 63 75 10 43 42     .I).R.0.L..cu.CB
     c1b:	32 34 32 34 31 e6 9f 4d 0c 8d 0c 8d b0 39 88 b2     24241..M.....9..
     c2b:	01 31 0c 47 1a b6 b4 e6 e0 80 68 ff 0f 32 1b 4c     .1.G......h..2.L
     c3b:	12 b6 53 75 20 33 43 31 35 31 66 36 39 38 48 c7     ..Su 3C151f698H.
     c4b:	ac 8c 8e e1 e4 c1 83 01 33 1f 4c 12 b6 53 75 20     ........3.L..Su 
     c5b:	b3 64 6a 62 6a 62 6a 72 70 ac ee 72 74 d2 cc 8a     .djbjbjrp..rt...
     c6b:	62 86 e4 60 c8 06 00 34 1b 4c 12 b6 37 c8 ae 99     b..`...4.L..7...
     c7b:	c4 d4 c4 94 c8 90 cc 36 42 23 43 23 07 0f e6 26     .......6B#C#...&
     c8b:	37 01 35 1e 4c 12 b6 71 30 72 30 32 b9 e5 41 d0     7.5.L..q0r02..A.
     c9b:	81 cc 0c e5 e8 e4 a4 99 d5 41 0c c9 81 94 0d 00     .........A......
     cab:	36 20 4c 12 b6 54 75 20 42 33 32 65 66 b9 82 e8     6 L..Tu B32ef...
     cbb:	60 a4 84 82 68 62 cc d9 c4 d0 08 9b 83 28 1b 00     `...hb.......(..
     ccb:	37 18 4c 12 b6 f0 c1 20 e1 ca c1 c9 c1 c9 c1 c9     7.L.... ........
     cdb:	41 c2 c9 41 c2 c9 39 00 38 23 4c 12 b6 44 76 10     A..A..9.8#L..Dv.
     ceb:	34 32 33 34 32 34 32 34 32 34 33 32 65 75 10 33     423424242432eu.3
     cfb:	34 31 e6 d9 c4 d0 c8 c1 90 0d 00 39 20 4c 12 b6     41.........9 L..
     d0b:	63 74 20 43 42 41 34 31 e6 d9 11 05 49 c5 01 4d     ct CBA41....I..M
     d1b:	c5 e4 a4 d5 04 49 c9 81 54 11 00 3a 0a c3 19 9e     .....I..T..:....
     d2b:	70 20 0f 79 20 3b 0d 23 ba 9d 70 20 0f 79 20 21     p .y ;.#..p .y !
     d3b:	41 01 3c 0e 8d 31 be 3a 58 d6 19 25 6d 69 a7 03     A.<..1.:X..%mi..
     d4b:	3d 0b aa b8 ba f0 c0 f4 e0 c0 00 3e 0d 8d 35 ba     =..........>..5.
     d5b:	30 da 5b 4a b2 1e 8e 02 3f 18 6b 1a be 63 73 20     0.[J....?.k..cs 
     d6b:	42 72 10 64 65 44 37 47 46 b7 70 7b f8 c1 45 00     Br.deD7GF.p{..E.
     d7b:	40 41 d6 96 e1 77 20 7b 60 58 56 45 4a 43 3c 42     @A...w {`XVEJC<B
     d8b:	54 21 32 31 74 20 72 b3 c6 66 68 c6 46 68 c8 64     T!21t r..fh.Fh.d
     d9b:	68 66 62 64 48 68 62 64 66 c9 9a 25 33 23 13 34     hfbdHhbdf..%3#.4
     dab:	24 07 55 33 15 73 f4 40 f4 40 55 a3 07 c5 07 81     $.U3.s.@.@U.....
     dbb:	00 41 25 70 16 ca 46 4c 6b 6a 39 22 39 32 38 32     .A%p..FLkj9"9282
     dcb:	37 34 36 34 36 34 35 36 34 36 74 50 73 70 32 38     7464645646tPsp28
     ddb:	32 38 31 ea 74 00 42 25 6f 1a ca 70 40 74 60 32     281.t.B%o..p@t`2
     deb:	46 32 38 31 38 31 38 31 38 31 37 72 50 73 60 32     F2818181817rPs`2
     dfb:	38 31 e9 c3 b3 8a 03 93 03 22 00 43 1d 70 16 ca     81.......".C.p..
     e0b:	75 77 40 54 53 42 47 31 79 3c bd af 29 27 26 27     uw@TSBG1y<..)'&'
     e1b:	e8 48 6a 8a 0e e8 8e 00 44 1e 70 1a ce 70 40 75     .Hj.....D.p..p@u
     e2b:	60 33 56 32 48 31 39 31 79 ea 5f 5e 4e 0c 52 8c     `3V2H191y._^N.R.
     e3b:	95 1c d8 1c 50 01 45 16 6d 1a c2 70 50 71 50 31     ....P.E.m..pPqP1
     e4b:	ba a7 07 24 07 24 a3 fb f4 e0 41 01 46 11 6c 1a     ...$.$....A.F.l.
     e5b:	be f0 81 e5 5e 1e 50 1c 50 4c ee 2f 01 47 23 71     ....^.P.PL./.G#q
     e6b:	16 ce 75 78 40 55 53 43 47 32 39 41 3d be d9 01     ..ux@USCG29A=...
     e7b:	d9 01 ad ed e9 c4 24 05 5d 49 cd 83 89 a9 93 01     ......$.]I......
     e8b:	48 0e 6f 1a ce 30 e9 5f 1e fc 20 d2 7f 39 49 08     H.o..0._.. ..9I.
     e9b:	63 1a 9e f0 3f 08 4a 11 6b 16 ba b8 ff a1 95 57     c...?.J.k......W
     eab:	13 33 14 07 32 27 00 4b 27 6e 1a ca 30 77 46 31     .3..2'.K'n..0wF1
     ebb:	45 32 44 33 43 34 42 35 41 76 f7 20 8c 82 6a 66     E2D3C4B5Av. ..jf
     ecb:	6a 68 11 cd d4 cc d8 c8 18 c5 dc c4 1c 01 4c 0c     jh............L.
     edb:	6c 1a be 30 b9 ff bf 3c 78 30 4d 32 73 1a de 30     l..0...<x0M2s..0
     eeb:	7d 7b 10 7b 20 79 30 79 40 77 20 21 27 61 31 35     }{.{ y0y@w !'a15
     efb:	61 22 25 62 32 33 62 32 33 62 a3 c6 66 62 c6 66     a"%b23b23b..fb.f
     f0b:	62 c6 a8 c8 a8 c8 6a ca 6a ca 6a 01 4e 27 6f 1a     b.....j.j.j.N'o.
     f1b:	ce 30 79 f8 20 ee 20 ee 40 cc 62 ca 62 ca 64 c8     .0y. . .@.b.b.d.
     f2b:	66 c6 66 c6 68 c4 4a c4 6a c2 ec 40 ee 20 ee 20     f.f.h.J.j..@. . 
     f3b:	f0 72 00 4f 1d 71 16 ce 75 78 40 55 53 43 47 32     .r.O.q..ux@USCG2
     f4b:	39 41 79 eb 6f 2f 29 26 47 e8 68 5a 1d 10 5e 01     9Ay.o/)&G.hZ..^.
     f5b:	50 17 6e 1a c6 70 40 73 60 31 37 31 e8 bb 89 03     P.n..p@s`171....
     f6b:	8b 83 92 d9 fd 2d 00 51 22 91 f6 cd 75 78 40 55     .....-.Q"...ux@U
     f7b:	53 43 47 32 39 41 79 eb 6f cf 42 28 a6 26 46 a8     SCG29Ay.o.B(.&F.
     f8b:	6c 8a a8 0e ea 2e e6 43 00 52 1a 6e 1a c6 70 40     l......C.R.n..p@
     f9b:	73 60 31 37 31 e8 bb 89 03 8b 83 92 31 8a b9 89     s`171.......1...
     fab:	41 7f 38 53 20 6e 1a c6 64 76 30 43 53 41 36 31     A.8S n..dv0CSA61
     fbb:	37 31 4b 5b 7a 10 79 5a 4b 6b e8 ee 40 a6 e4 80     71K[z.yZKk..@...
     fcb:	ea 08 00 54 0d 6f 12 be f0 03 b1 e1 fd ff 19 00     ...T.o..........
     fdb:	55 13 6f 1a ce 30 e9 ff 97 77 14 73 23 35 35 07     U.o..0...w.s#55.
     feb:	64 47 00 56 24 70 16 ca 30 6a 7a 48 31 38 42 46     dG.V$p..0jzH18BF
     ffb:	33 36 34 36 c4 6a 68 6c 68 8c 84 6e 64 70 64 70     3646.jhlh..ndpdp
    100b:	64 d2 d4 96 98 19 00 57 3e 75 16 de 30 36 66 36     d......W>u..06f6
    101b:	66 36 66 b6 62 a8 68 64 a8 68 64 48 42 68 64 66     f6f.b.hd.hdHBhdf
    102b:	62 66 46 66 62 46 68 64 62 64 68 44 46 64 68 62     bfFfbFhdbdhDFdhb
    103b:	66 62 4a 62 66 42 4c 62 66 42 ac aa ac aa 6e e1     fbJbfBLbfB....n.
    104b:	dc e0 dc 10 00 58 25 70 16 ca 30 7a 48 41 46 33     .....X%p..0zHAF3
    105b:	36 35 34 37 32 78 10 69 4b 4c 6b 79 10 38 32 37     65472x.iKLky.827
    106b:	34 45 44 34 36 33 38 41 78 3a 59 1e 6f 16 c6 30     4ED4638Ax:Y.o..0
    107b:	79 38 31 37 42 36 33 35 44 34 35 33 36 33 37 31     y817B635D4536371
    108b:	38 31 59 5a 3b bc cf 00 5a 15 6e 16 c2 f0 53 4a     81YZ;...Z.n...SJ
    109b:	4e 29 99 52 32 a5 24 1d a5 24 3d f8 00 5b 0d 05     N).R2.$..$=..[..
    10ab:	77 a1 70 60 b2 ff ff c9 c1 00 5c 12 67 12 a2 20     w.p`......\.g.. 
    10bb:	a5 4c 4a 99 94 66 52 ca a4 94 49 29 5d 0d 05 7b     .LJ..fR...I)]..{
    10cb:	a1 70 30 b2 ff ff c9 81 01 5e 13 2b 55 bb 34 38     .p0......^.+U.48
    10db:	57 26 21 35 31 b3 64 66 62 ca 6a 00 5f 07 4e 70     W&!51.dfb.j._.Np
    10eb:	b9 f0 03 60 08 86 f4 a3 30 b4 01 61 1e cc 15 ba     ...`....0..a....
    10fb:	63 75 10 33 43 32 34 39 66 73 20 52 32 41 34 31     cu.3C249fs R2A41
    110b:	35 31 44 41 52 72 40 52 32 62 1a 6c 1a be 30 b9     51DARr@R2b.l..0.
    111b:	17 35 07 23 25 14 44 13 63 7e 76 34 51 42 71 30     .5.#%.D.c~v4QBq0
    112b:	32 51 03 63 15 cb 15 b6 63 74 10 c2 62 c8 70 2f     2Q.c....ct..b.p/
    113b:	87 26 48 48 0e 82 4c 00 64 19 6c 16 be b9 37 15     .&HH..L.d.l...7.
    114b:	23 07 13 24 15 43 67 7e 36 31 44 41 52 72 30 53     #..$.Cg~61DARr0S
    115b:	31 65 1b cc 15 ba 44 76 10 43 42 32 34 31 66 76     1e....Dv.CB241fv
    116b:	f0 81 e4 e8 d4 04 0d c9 81 54 0d 00 66 10 67 16     .........T..f.g.
    117b:	a6 43 52 32 b4 e4 e0 64 68 ff 13 00 67 1f 6c 76     .CR2...dh...g.lv
    118b:	bd 53 31 72 30 41 52 31 74 e6 67 13 43 14 24 25     .S1r0AR1t.g.C.$%
    119b:	07 33 15 93 66 47 23 07 43 36 00 68 11 6b 1a be     .3..fG#.C6.h.k..
    11ab:	30 b8 17 34 07 13 34 13 53 fe af 06 69 0a 63 1a     0..4..4.S...i.c.
    11bb:	9e 70 20 76 f0 07 6a 0d 05 73 9d b2 f1 c8 fe 7f     .p v..j..s......
    11cb:	72 50 01 6b 1f 6b 1a ba 30 b8 47 13 33 14 23 24     rP.k.k..0.G.3.#$
    11db:	13 34 47 56 47 13 34 23 33 23 24 33 14 43 13 43     .4GVG.4#3#$3.C.C
    11eb:	57 03 6c 08 63 1a 9e f0 3f 08 6d 24 d1 19 d6 30     W.l.c...?.m$...0
    11fb:	41 52 72 70 20 41 52 72 34 64 34 64 34 64 34 64     ARrp ARr4d4d4d4d
    120b:	34 64 34 64 34 64 34 64 34 64 34 64 b4 00 6e 10     4d4d4d4d4d4d..n.
    121b:	cb 19 be 30 51 72 30 41 33 31 e5 ff 6a 00 6f 17     ...0Qr0A31..j.o.
    122b:	cc 15 ba 44 76 10 43 42 32 34 31 e6 67 13 43 23     ...Dv.CB241.g.C#
    123b:	6c 0e c2 88 00 70 1b 6c 7a bd 30 51 73 30 52 42     l....p.lz.0Qs0RB
    124b:	41 34 31 e6 67 47 13 25 14 07 23 13 35 93 bb 04     A41.gG.%..#.5...
    125b:	71 19 6c 76 bd 53 31 72 30 41 52 31 74 e6 67 13     q.lv.S1r0AR1t.g.
    126b:	43 14 24 25 07 33 15 93 7b 72 0d c7 19 aa 30 71     C.$%.3..{r....0q
    127b:	f0 66 68 ff 08 00 73 19 cb 15 b6 62 74 10 c2 62     .fh...s....bt..b
    128b:	68 62 d0 ec 20 cc f0 ca ea 86 e2 40 e6 04 00 74     hb.. ......@...t
    129b:	0f 47 16 a6 32 b4 c9 c1 c9 d0 fe 51 0d 01 75 10     .G..2......Q..u.
    12ab:	cb 19 be 30 e5 ff 88 62 a4 c2 62 66 64 00 76 1a     ...0...b..bfd.v.
    12bb:	cc 15 ba 30 e6 6c 62 68 64 68 64 68 66 64 68 64     ...0.lbhdhdhfdhd
    12cb:	68 64 ca cc 8e 90 11 00 77 2b d3 11 ce 30 35 65     hd......w+...05e
    12db:	b5 42 6a 4a 64 a6 66 64 a6 66 46 85 8c 90 c8 c4     .BjJd.fd.fF.....
    12eb:	88 d0 c4 56 12 32 12 62 35 65 35 75 53 83 53 83     ...V.2.b5e5uS.S.
    12fb:	53 43 00 78 1a cb 15 b6 30 75 43 31 b3 62 e8 aa     SC.x....0uC1.b..
    130b:	6e ae ac 6a 62 86 82 64 66 82 e6 6a 00 79 20 6d     n..jb..df..j.y m
    131b:	76 bd 30 67 37 31 36 41 34 33 34 43 42 34 32 35     v.0g716A434CB425
    132b:	32 66 67 58 48 ba 72 74 72 b0 90 0e 00 7a 13 cb     2fgXH.rtr....z..
    133b:	15 b6 f0 41 dc 3a 32 ba 39 32 ba 75 74 07 0f 02     ...A.:2.92.ut...
    134b:	7b 0f 07 77 a9 34 b3 68 bf 59 34 b5 68 bf 5a 7c     {..w.4.h.Y4.h.Z|
    135b:	08 02 7f 9d f0 0f 0c 7d 10 07 7b a9 30 b5 68 bf     .......}..{.0.h.
    136b:	5a 34 b3 68 bf 59 04 7e 0d 8b b4 ba 41 73 30 61     Z4.h.Y.~....As0a
    137b:	71 30 43 01 00 00 00 04 ff ff 00 00                 q0C.........

00001387 <digital_pin_to_timer_PGM>:
    1387:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000013a2 <digital_pin_to_bit_mask_PGM>:
    13a2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    13b2:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

000013bd <digital_pin_to_port_PGM>:
    13bd:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    13cd:	03 03 03 03 02 02 03 05 05 05 05                    ...........

000013d8 <port_to_input_PGM>:
    13d8:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

000013e4 <port_to_output_PGM>:
    13e4:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

000013f0 <port_to_mode_PGM>:
    13f0:	00 00 00 00 24 00 27 00 2a 00 2d 00                 ....$.'.*.-.

000013fc <__ctors_start>:
__ctors_start():
    13fc:	8a 13       	cpse	r24, r26
    13fe:	e3 29       	or	r30, r3
    1400:	90 2c       	mov	r9, r0
    1402:	e0 30       	cpi	r30, 0x00	; 0

00001404 <__ctors_end>:
__ctors_end():
    1404:	38 2a       	or	r3, r24
    1406:	e5 2c       	mov	r14, r5

00001408 <__dtors_end>:
__init():
../../../../crt1/gcrt1.S:230
    1408:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
    140a:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
    140c:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
    140e:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
    1410:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
    1412:	cd bf       	out	0x3d, r28	; 61

00001414 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
    1414:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
    1416:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
    1418:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
    141a:	e4 ec       	ldi	r30, 0xC4	; 196
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
    141c:	f4 e7       	ldi	r31, 0x74	; 116
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
    1420:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
    1422:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
    1424:	ac 3e       	cpi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
    1426:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
    1428:	d9 f7       	brne	.-10     	; 0x1420 <__do_copy_data+0xc>

0000142a <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    142a:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    142c:	ac ee       	ldi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    142e:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <.do_clear_bss_start>

00001432 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    1432:	1d 92       	st	X+, r1

00001434 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    1434:	a0 30       	cpi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    1436:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    1438:	e1 f7       	brne	.-8      	; 0x1432 <.do_clear_bss_loop>

0000143a <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    143a:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    143c:	c2 e0       	ldi	r28, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    143e:	da e0       	ldi	r29, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    1440:	04 c0       	rjmp	.+8      	; 0x144a <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    1442:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    1444:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    1446:	0e 94 b6 38 	call	0x716c	; 0x716c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    144a:	ce 3f       	cpi	r28, 0xFE	; 254
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    144c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    144e:	c9 f7       	brne	.-14     	; 0x1442 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
    1450:	0e 94 44 33 	call	0x6688	; 0x6688 <main>
../../../../crt1/gcrt1.S:315
    1454:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__do_global_dtors>

00001458 <__bad_interrupt>:
__vector_30():
../../../../crt1/gcrt1.S:209
    1458:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000145c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	08 95       	ret

00001462 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1462:	08 95       	ret

00001464 <U8G2::write(unsigned char const*, unsigned int)>:
_ZN4U8G25writeEPKhj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:356
	
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	6c 01       	movw	r12, r24
    1476:	eb 01       	movw	r28, r22
    1478:	7b 01       	movw	r14, r22
    147a:	e4 0e       	add	r14, r20
    147c:	f5 1e       	adc	r15, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:357
      size_t cnt = 0;
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:358
      while( size > 0 ) {
    1482:	ce 15       	cp	r28, r14
    1484:	df 05       	cpc	r29, r15
    1486:	61 f0       	breq	.+24     	; 0x14a0 <U8G2::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:359
	cnt += write(*buffer++); 
    1488:	69 91       	ld	r22, Y+
    148a:	d6 01       	movw	r26, r12
    148c:	ed 91       	ld	r30, X+
    148e:	fc 91       	ld	r31, X
    1490:	01 90       	ld	r0, Z+
    1492:	f0 81       	ld	r31, Z
    1494:	e0 2d       	mov	r30, r0
    1496:	c6 01       	movw	r24, r12
    1498:	09 95       	icall
    149a:	08 0f       	add	r16, r24
    149c:	19 1f       	adc	r17, r25
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:358
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
    149e:	f1 cf       	rjmp	.-30     	; 0x1482 <U8G2::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:363
	cnt += write(*buffer++); 
	size--;
      }
      return cnt;
    }
    14a0:	c8 01       	movw	r24, r16
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	df 90       	pop	r13
    14b0:	cf 90       	pop	r12
    14b2:	08 95       	ret

000014b4 <U8G2::write(unsigned char)>:
_ZN4U8G25writeEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:318
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);
#endif

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:319
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
    14c6:	6c 01       	movw	r12, r24
    14c8:	24 e0       	ldi	r18, 0x04	; 4
    14ca:	c2 0e       	add	r12, r18
    14cc:	d1 1c       	adc	r13, r1
    14ce:	fc 01       	movw	r30, r24
    14d0:	e0 57       	subi	r30, 0x70	; 112
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	01 90       	ld	r0, Z+
    14d6:	f0 81       	ld	r31, Z
    14d8:	e0 2d       	mov	r30, r0
    14da:	c6 01       	movw	r24, r12
    14dc:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:321
      
      if ( e < 0x0fffe )
    14de:	8e 3f       	cpi	r24, 0xFE	; 254
    14e0:	ef ef       	ldi	r30, 0xFF	; 255
    14e2:	9e 07       	cpc	r25, r30
    14e4:	d8 f4       	brcc	.+54     	; 0x151c <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:323
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
    14e6:	8e 01       	movw	r16, r28
    14e8:	0c 56       	subi	r16, 0x6C	; 108
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	f8 01       	movw	r30, r16
    14ee:	40 81       	ld	r20, Z
    14f0:	51 81       	ldd	r21, Z+1	; 0x01
    14f2:	7e 01       	movw	r14, r28
    14f4:	f2 e9       	ldi	r31, 0x92	; 146
    14f6:	ef 0e       	add	r14, r31
    14f8:	f1 1c       	adc	r15, r1
    14fa:	f7 01       	movw	r30, r14
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	9c 01       	movw	r18, r24
    1502:	c6 01       	movw	r24, r12
    1504:	0e 94 28 22 	call	0x4450	; 0x4450 <u8g2_DrawGlyph>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:326
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
    1508:	c0 59       	subi	r28, 0x90	; 144
    150a:	df 4f       	sbci	r29, 0xFF	; 255
    150c:	28 81       	ld	r18, Y
    150e:	21 30       	cpi	r18, 0x01	; 1
    1510:	c1 f0       	breq	.+48     	; 0x1542 <U8G2::write(unsigned char)+0x8e>
    1512:	78 f0       	brcs	.+30     	; 0x1532 <U8G2::write(unsigned char)+0x7e>
    1514:	22 30       	cpi	r18, 0x02	; 2
    1516:	b9 f0       	breq	.+46     	; 0x1546 <U8G2::write(unsigned char)+0x92>
    1518:	23 30       	cpi	r18, 0x03	; 3
    151a:	e9 f0       	breq	.+58     	; 0x1556 <U8G2::write(unsigned char)+0xa2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:354
	
	
	
      }
      return 1;
     }
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:329
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
    1532:	f7 01       	movw	r30, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:332
	    break;
	  case 1:
	    ty += delta;
    1534:	20 81       	ld	r18, Z
    1536:	31 81       	ldd	r19, Z+1	; 0x01
    1538:	82 0f       	add	r24, r18
    153a:	93 1f       	adc	r25, r19
    153c:	91 83       	std	Z+1, r25	; 0x01
    153e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:333
	    break;
    1540:	ed cf       	rjmp	.-38     	; 0x151c <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:332
	{
	  case 0:
	    tx += delta;
	    break;
	  case 1:
	    ty += delta;
    1542:	f8 01       	movw	r30, r16
    1544:	f7 cf       	rjmp	.-18     	; 0x1534 <U8G2::write(unsigned char)+0x80>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:335
	    break;
	  case 2:
	    tx -= delta;
    1546:	f7 01       	movw	r30, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 3:
	    ty -= delta;
    1548:	20 81       	ld	r18, Z
    154a:	31 81       	ldd	r19, Z+1	; 0x01
    154c:	28 1b       	sub	r18, r24
    154e:	39 0b       	sbc	r19, r25
    1550:	31 83       	std	Z+1, r19	; 0x01
    1552:	20 83       	st	Z, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:339
	    break;
    1554:	e3 cf       	rjmp	.-58     	; 0x151c <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
    1556:	f8 01       	movw	r30, r16
    1558:	f7 cf       	rjmp	.-18     	; 0x1548 <U8G2::write(unsigned char)+0x94>

0000155a <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ec 01       	movw	r28, r24
    1566:	f6 2e       	mov	r15, r22
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1568:	08 81       	ld	r16, Y
    156a:	19 81       	ldd	r17, Y+1	; 0x01
    156c:	c8 01       	movw	r24, r16
    156e:	0e 94 3f 3a 	call	0x747e	; 0x747e <eeprom_read_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1572:	f8 16       	cp	r15, r24
    1574:	21 f0       	breq	.+8      	; 0x157e <EERef::update(unsigned char)+0x24>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1576:	6f 2d       	mov	r22, r15
    1578:	c8 01       	movw	r24, r16
    157a:	0e 94 47 3a 	call	0x748e	; 0x748e <eeprom_write_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59 (discriminator 4)
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    157e:	ce 01       	movw	r24, r28
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	08 95       	ret

0000158c <__vector_3>:
__vector_3():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:82
bool TMCFehler = false;
bool PumpeFehler = false;

// Interrupt-Routine
// Interrupt Vector für Port B (PCINT0_vect)
ISR(PCINT0_vect) {
    158c:	1f 92       	push	r1
    158e:	0f 92       	push	r0
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	0f 92       	push	r0
    1594:	11 24       	eor	r1, r1
    1596:	2f 93       	push	r18
    1598:	3f 93       	push	r19
    159a:	4f 93       	push	r20
    159c:	5f 93       	push	r21
    159e:	6f 93       	push	r22
    15a0:	7f 93       	push	r23
    15a2:	8f 93       	push	r24
    15a4:	9f 93       	push	r25
    15a6:	af 93       	push	r26
    15a8:	bf 93       	push	r27
    15aa:	ef 93       	push	r30
    15ac:	ff 93       	push	r31
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:84
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    15ae:	8c e0       	ldi	r24, 0x0C	; 12
    15b0:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    15b4:	89 2b       	or	r24, r25
    15b6:	b1 f1       	breq	.+108    	; 0x1624 <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:84 (discriminator 1)
    15b8:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    15bc:	81 11       	cpse	r24, r1
    15be:	32 c0       	rjmp	.+100    	; 0x1624 <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:86
    DEBUG_PRINTLN(F("Bremse betätigt"));
    ZustandBremse = true;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:91
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    DEBUG_PRINTLN(F("Bremse gelöst"));
    ZustandBremse = false;
    ZustandBearbeitet = false;
    15c6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:95
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    15ca:	8b e0       	ldi	r24, 0x0B	; 11
    15cc:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    15d0:	89 2b       	or	r24, r25
    15d2:	21 f4       	brne	.+8      	; 0x15dc <__vector_3+0x50>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:95 (discriminator 1)
    15d4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    15d8:	88 23       	and	r24, r24
    15da:	81 f1       	breq	.+96     	; 0x163c <__vector_3+0xb0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:99
    DEBUG_PRINTLN(F("Handbremse betätigt"));
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    15dc:	8b e0       	ldi	r24, 0x0B	; 11
    15de:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    15e2:	89 2b       	or	r24, r25
    15e4:	89 f5       	brne	.+98     	; 0x1648 <__vector_3+0xbc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:105
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    15ec:	89 2b       	or	r24, r25
    15ee:	21 f4       	brne	.+8      	; 0x15f8 <__vector_3+0x6c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:105 (discriminator 1)
    15f0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    15f4:	88 23       	and	r24, r24
    15f6:	79 f1       	breq	.+94     	; 0x1656 <__vector_3+0xca>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:109
    DEBUG_PRINTLN(F("Hauptschalter aus"));
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    15f8:	8a e0       	ldi	r24, 0x0A	; 10
    15fa:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    15fe:	89 2b       	or	r24, r25
    1600:	81 f5       	brne	.+96     	; 0x1662 <__vector_3+0xd6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:114
    DEBUG_PRINTLN(F("Hauptschalter an"));
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}
    1602:	ff 91       	pop	r31
    1604:	ef 91       	pop	r30
    1606:	bf 91       	pop	r27
    1608:	af 91       	pop	r26
    160a:	9f 91       	pop	r25
    160c:	8f 91       	pop	r24
    160e:	7f 91       	pop	r23
    1610:	6f 91       	pop	r22
    1612:	5f 91       	pop	r21
    1614:	4f 91       	pop	r20
    1616:	3f 91       	pop	r19
    1618:	2f 91       	pop	r18
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:88
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    DEBUG_PRINTLN(F("Bremse betätigt"));
    ZustandBremse = true;
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    1624:	8c e0       	ldi	r24, 0x0C	; 12
    1626:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    162a:	89 2b       	or	r24, r25
    162c:	71 f6       	brne	.-100    	; 0x15ca <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:88 (discriminator 1)
    162e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1632:	88 23       	and	r24, r24
    1634:	51 f2       	breq	.-108    	; 0x15ca <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:90
    DEBUG_PRINTLN(F("Bremse gelöst"));
    ZustandBremse = false;
    1636:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <ZustandBremse>
    163a:	c5 cf       	rjmp	.-118    	; 0x15c6 <__vector_3+0x3a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:97
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    DEBUG_PRINTLN(F("Handbremse betätigt"));
    ZustandHandbremse = true;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:101
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
    1642:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
    1646:	cf cf       	rjmp	.-98     	; 0x15e6 <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:99 (discriminator 1)
  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    DEBUG_PRINTLN(F("Handbremse betätigt"));
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    1648:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    164c:	88 23       	and	r24, r24
    164e:	59 f2       	breq	.-106    	; 0x15e6 <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:100
    ZustandHandbremse = false;
    1650:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <ZustandHandbremse>
    1654:	f6 cf       	rjmp	.-20     	; 0x1642 <__vector_3+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:107
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    DEBUG_PRINTLN(F("Hauptschalter aus"));
    ZustandHauptschalter = true;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:112
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    DEBUG_PRINTLN(F("Hauptschalter an"));
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
    165c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:114
  }
}
    1660:	d0 cf       	rjmp	.-96     	; 0x1602 <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:109 (discriminator 1)
  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    DEBUG_PRINTLN(F("Hauptschalter aus"));
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    1662:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    1666:	88 23       	and	r24, r24
    1668:	61 f2       	breq	.-104    	; 0x1602 <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:111
    DEBUG_PRINTLN(F("Hauptschalter an"));
    ZustandHauptschalter = false;
    166a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <ZustandHauptschalter>
    166e:	f6 cf       	rjmp	.-20     	; 0x165c <__vector_3+0xd0>

00001670 <SchreibeDisplay()>:
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:363
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}

void SchreibeDisplay() {
    1670:	5f 92       	push	r5
    1672:	6f 92       	push	r6
    1674:	7f 92       	push	r7
    1676:	8f 92       	push	r8
    1678:	9f 92       	push	r9
    167a:	af 92       	push	r10
    167c:	bf 92       	push	r11
    167e:	cf 92       	push	r12
    1680:	df 92       	push	r13
    1682:	ef 92       	push	r14
    1684:	ff 92       	push	r15
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:364
  if (!PumpeFehler && !TMCFehler) {
    168e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
    1692:	81 11       	cpse	r24, r1
    1694:	d7 c0       	rjmp	.+430    	; 0x1844 <SchreibeDisplay()+0x1d4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:364 (discriminator 1)
    1696:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    169a:	81 11       	cpse	r24, r1
    169c:	d3 c0       	rjmp	.+422    	; 0x1844 <SchreibeDisplay()+0x1d4>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    169e:	84 e1       	ldi	r24, 0x14	; 20
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    16a6:	8c e0       	ldi	r24, 0x0C	; 12
    16a8:	88 2e       	mov	r8, r24
    16aa:	91 2c       	mov	r9, r1
    16ac:	93 e2       	ldi	r25, 0x23	; 35
    16ae:	69 2e       	mov	r6, r25
    16b0:	71 2c       	mov	r7, r1
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:378

      if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur) {

        u8g2.print(F("Sperrgrad "));
        u8g2.setFont(u8g2_font_helvB18_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
    16b2:	24 e6       	ldi	r18, 0x64	; 100
    16b4:	52 2e       	mov	r5, r18
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    16b6:	cc e3       	ldi	r28, 0x3C	; 60
    16b8:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    16ba:	67 e3       	ldi	r22, 0x37	; 55
    16bc:	72 e0       	ldi	r23, 0x02	; 2
    16be:	84 e1       	ldi	r24, 0x14	; 20
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    16c6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    16ca:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    16ce:	90 92 a5 02 	sts	0x02A5, r9	; 0x8002a5 <u8g2+0x95>
    16d2:	80 92 a4 02 	sts	0x02A4, r8	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:369
  if (!PumpeFehler && !TMCFehler) {
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(0, 12);
      u8g2.print(F("Haldex Controller"));
    16d6:	65 ee       	ldi	r22, 0xE5	; 229
    16d8:	71 e0       	ldi	r23, 0x01	; 1
    16da:	80 e1       	ldi	r24, 0x10	; 16
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    16e2:	20 e8       	ldi	r18, 0x80	; 128
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4c e0       	ldi	r20, 0x0C	; 12
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	84 e1       	ldi	r24, 0x14	; 20
    16f0:	92 e0       	ldi	r25, 0x02	; 2
    16f2:	0e 94 af 23 	call	0x475e	; 0x475e <u8g2_DrawHLine>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    16f6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    16fa:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    16fe:	70 92 a5 02 	sts	0x02A5, r7	; 0x8002a5 <u8g2+0x95>
    1702:	60 92 a4 02 	sts	0x02A4, r6	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:374
      u8g2.drawHLine(0, 12, 128);

      u8g2.setCursor(0, 35);

      if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur) {
    1706:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    170a:	81 11       	cpse	r24, r1
    170c:	ab c0       	rjmp	.+342    	; 0x1864 <SchreibeDisplay()+0x1f4>
    170e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    1712:	81 11       	cpse	r24, r1
    1714:	a7 c0       	rjmp	.+334    	; 0x1864 <SchreibeDisplay()+0x1f4>
    1716:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    171a:	81 11       	cpse	r24, r1
    171c:	a3 c0       	rjmp	.+326    	; 0x1864 <SchreibeDisplay()+0x1f4>
    171e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1722:	81 11       	cpse	r24, r1
    1724:	9f c0       	rjmp	.+318    	; 0x1864 <SchreibeDisplay()+0x1f4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:376

        u8g2.print(F("Sperrgrad "));
    1726:	6a ed       	ldi	r22, 0xDA	; 218
    1728:	71 e0       	ldi	r23, 0x01	; 1
    172a:	80 e1       	ldi	r24, 0x10	; 16
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1732:	6b eb       	ldi	r22, 0xBB	; 187
    1734:	7a e0       	ldi	r23, 0x0A	; 10
    1736:	84 e1       	ldi	r24, 0x14	; 20
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:378
        u8g2.setFont(u8g2_font_helvB18_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
    173e:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1742:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1746:	0f 2c       	mov	r0, r15
    1748:	00 0c       	add	r0, r0
    174a:	00 0b       	sbc	r16, r16
    174c:	11 0b       	sbc	r17, r17
    174e:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1752:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1756:	03 2e       	mov	r0, r19
    1758:	00 0c       	add	r0, r0
    175a:	44 0b       	sbc	r20, r20
    175c:	55 0b       	sbc	r21, r21
    175e:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    1762:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    1766:	07 2e       	mov	r0, r23
    1768:	00 0c       	add	r0, r0
    176a:	88 0b       	sbc	r24, r24
    176c:	99 0b       	sbc	r25, r25
    176e:	1f 92       	push	r1
    1770:	1f 92       	push	r1
    1772:	1f 92       	push	r1
    1774:	5f 92       	push	r5
    1776:	a1 2c       	mov	r10, r1
    1778:	b1 2c       	mov	r11, r1
    177a:	65 01       	movw	r12, r10
    177c:	0e 94 01 33 	call	0x6602	; 0x6602 <map(long, long, long, long, long)>
    1780:	ab 01       	movw	r20, r22
    1782:	bc 01       	movw	r22, r24
    1784:	2a e0       	ldi	r18, 0x0A	; 10
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	80 e1       	ldi	r24, 0x10	; 16
    178a:	92 e0       	ldi	r25, 0x02	; 2
    178c:	0e 94 c0 31 	call	0x6380	; 0x6380 <Print::print(long, int)>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    1790:	67 e3       	ldi	r22, 0x37	; 55
    1792:	72 e0       	ldi	r23, 0x02	; 2
    1794:	84 e1       	ldi	r24, 0x14	; 20
    1796:	92 e0       	ldi	r25, 0x02	; 2
    1798:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:380
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
    179c:	67 ed       	ldi	r22, 0xD7	; 215
    179e:	71 e0       	ldi	r23, 0x01	; 1
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	92 e0       	ldi	r25, 0x02	; 2
    17a4:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    17b0:	67 e3       	ldi	r22, 0x37	; 55
    17b2:	72 e0       	ldi	r23, 0x02	; 2
    17b4:	84 e1       	ldi	r24, 0x14	; 20
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    17bc:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    17c0:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    17c4:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    17c8:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:403
        }
      }

      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(0, 60);
      u8g2.write(0xD6);
    17cc:	66 ed       	ldi	r22, 0xD6	; 214
    17ce:	80 e1       	ldi	r24, 0x10	; 16
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:404
      u8g2.print(F("ltemp. "));
    17d6:	6b e8       	ldi	r22, 0x8B	; 139
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	80 e1       	ldi	r24, 0x10	; 16
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    17e2:	6b eb       	ldi	r22, 0xBB	; 187
    17e4:	7a e0       	ldi	r23, 0x0A	; 10
    17e6:	84 e1       	ldi	r24, 0x14	; 20
    17e8:	92 e0       	ldi	r25, 0x02	; 2
    17ea:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:406
      u8g2.setFont(u8g2_font_helvB18_tr);
      u8g2.print(Temperatur, 0);
    17ee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <Temperatur>
    17f2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <Temperatur+0x1>
    17f6:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Temperatur+0x2>
    17fa:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <Temperatur+0x3>
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	80 e1       	ldi	r24, 0x10	; 16
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	0e 94 ff 32 	call	0x65fe	; 0x65fe <Print::print(double, int)>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    180a:	67 e3       	ldi	r22, 0x37	; 55
    180c:	72 e0       	ldi	r23, 0x02	; 2
    180e:	84 e1       	ldi	r24, 0x14	; 20
    1810:	92 e0       	ldi	r25, 0x02	; 2
    1812:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:408
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F(" "));
    1816:	69 e8       	ldi	r22, 0x89	; 137
    1818:	71 e0       	ldi	r23, 0x01	; 1
    181a:	80 e1       	ldi	r24, 0x10	; 16
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:409
      u8g2.write(0xB0);
    1822:	60 eb       	ldi	r22, 0xB0	; 176
    1824:	80 e1       	ldi	r24, 0x10	; 16
    1826:	92 e0       	ldi	r25, 0x02	; 2
    1828:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:410
      u8g2.print(F("C"));
    182c:	67 e8       	ldi	r22, 0x87	; 135
    182e:	71 e0       	ldi	r23, 0x01	; 1
    1830:	80 e1       	ldi	r24, 0x10	; 16
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1838:	84 e1       	ldi	r24, 0x14	; 20
    183a:	92 e0       	ldi	r25, 0x02	; 2
    183c:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:412

    } while (u8g2.nextPage());
    1840:	81 11       	cpse	r24, r1
    1842:	3b cf       	rjmp	.-394    	; 0x16ba <SchreibeDisplay()+0x4a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:414
  }
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	bf 90       	pop	r11
    1856:	af 90       	pop	r10
    1858:	9f 90       	pop	r9
    185a:	8f 90       	pop	r8
    185c:	7f 90       	pop	r7
    185e:	6f 90       	pop	r6
    1860:	5f 90       	pop	r5
    1862:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:382
        u8g2.setFont(u8g2_font_helvB18_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
      } else {
        if (ZustandHandbremse) {
    1864:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    1868:	88 23       	and	r24, r24
    186a:	89 f0       	breq	.+34     	; 0x188e <SchreibeDisplay()+0x21e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:383
          u8g2.print(F("Handbremse bet"));
    186c:	68 ec       	ldi	r22, 0xC8	; 200
    186e:	71 e0       	ldi	r23, 0x01	; 1
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:384
          u8g2.write(0xE4);
    1878:	64 ee       	ldi	r22, 0xE4	; 228
    187a:	80 e1       	ldi	r24, 0x10	; 16
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:385
          u8g2.print(F("tigt"));
    1882:	63 ec       	ldi	r22, 0xC3	; 195
    1884:	71 e0       	ldi	r23, 0x01	; 1
    1886:	80 e1       	ldi	r24, 0x10	; 16
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:387
        }
        if (ZustandBremse) {
    188e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1892:	88 23       	and	r24, r24
    1894:	89 f0       	breq	.+34     	; 0x18b8 <SchreibeDisplay()+0x248>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:388
          u8g2.print(F("Bremse bet"));
    1896:	68 eb       	ldi	r22, 0xB8	; 184
    1898:	71 e0       	ldi	r23, 0x01	; 1
    189a:	80 e1       	ldi	r24, 0x10	; 16
    189c:	92 e0       	ldi	r25, 0x02	; 2
    189e:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:389
          u8g2.write(0xE4);
    18a2:	64 ee       	ldi	r22, 0xE4	; 228
    18a4:	80 e1       	ldi	r24, 0x10	; 16
    18a6:	92 e0       	ldi	r25, 0x02	; 2
    18a8:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:390
          u8g2.print(F("tigt"));
    18ac:	63 eb       	ldi	r22, 0xB3	; 179
    18ae:	71 e0       	ldi	r23, 0x01	; 1
    18b0:	80 e1       	ldi	r24, 0x10	; 16
    18b2:	92 e0       	ldi	r25, 0x02	; 2
    18b4:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:392
        }
        if (ZustandHauptschalter) {
    18b8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    18bc:	88 23       	and	r24, r24
    18be:	31 f0       	breq	.+12     	; 0x18cc <SchreibeDisplay()+0x25c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:393
          u8g2.print(F("Hauptschalter aus"));
    18c0:	61 ea       	ldi	r22, 0xA1	; 161
    18c2:	71 e0       	ldi	r23, 0x01	; 1
    18c4:	80 e1       	ldi	r24, 0x10	; 16
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:395
        }
        if (ZustandTemperatur) {
    18cc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    18d0:	88 23       	and	r24, r24
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <SchreibeDisplay()+0x266>
    18d4:	6d cf       	rjmp	.-294    	; 0x17b0 <SchreibeDisplay()+0x140>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:396
          u8g2.write(0xDC);
    18d6:	6c ed       	ldi	r22, 0xDC	; 220
    18d8:	80 e1       	ldi	r24, 0x10	; 16
    18da:	92 e0       	ldi	r25, 0x02	; 2
    18dc:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:397
          u8g2.print(F("bertemperatur"));
    18e0:	63 e9       	ldi	r22, 0x93	; 147
    18e2:	71 e0       	ldi	r23, 0x01	; 1
    18e4:	80 e1       	ldi	r24, 0x10	; 16
    18e6:	92 e0       	ldi	r25, 0x02	; 2
    18e8:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
    18ec:	61 cf       	rjmp	.-318    	; 0x17b0 <SchreibeDisplay()+0x140>

000018ee <LeseTMCStatus()>:
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:436
    ZustandTemperatur = false;
  }
  LeseTMCStatus();
}

void LeseTMCStatus() {
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:437
  TMCStatus = stepper_driver.getStatus();
    18f2:	8a ef       	ldi	r24, 0xFA	; 250
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <TMC2209::getStatus()>
    18fa:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <TMCStatus>
    18fe:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <TMCStatus+0x1>
    1902:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <TMCStatus+0x2>
    1906:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <TMCStatus+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:438
  if (TMCStatus.over_temperature_warning == 1) {
    190a:	60 ff       	sbrs	r22, 0
    190c:	1d c0       	rjmp	.+58     	; 0x1948 <LeseTMCStatus()+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:439
    TMCFehler = true;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1914:	84 e1       	ldi	r24, 0x14	; 20
    1916:	92 e0       	ldi	r25, 0x02	; 2
    1918:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    191c:	cf e0       	ldi	r28, 0x0F	; 15
    191e:	d0 e0       	ldi	r29, 0x00	; 0
    1920:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1924:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1928:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    192c:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:444
    DEBUG_PRINTLN(F("Vorwarnung Übertemperatur"));
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 15);
      u8g2.print(F("Vorwarnung Übertemperatur"));
    1930:	6c e6       	ldi	r22, 0x6C	; 108
    1932:	71 e0       	ldi	r23, 0x01	; 1
    1934:	80 e1       	ldi	r24, 0x10	; 16
    1936:	92 e0       	ldi	r25, 0x02	; 2
    1938:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    193c:	84 e1       	ldi	r24, 0x14	; 20
    193e:	92 e0       	ldi	r25, 0x02	; 2
    1940:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:446

    } while (u8g2.nextPage());
    1944:	81 11       	cpse	r24, r1
    1946:	ec cf       	rjmp	.-40     	; 0x1920 <LeseTMCStatus()+0x32>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:449
  }

  if (TMCStatus.over_temperature_shutdown == 1) {
    1948:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    194c:	81 ff       	sbrs	r24, 1
    194e:	1d c0       	rjmp	.+58     	; 0x198a <LeseTMCStatus()+0x9c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:450
    TMCFehler = true;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1956:	84 e1       	ldi	r24, 0x14	; 20
    1958:	92 e0       	ldi	r25, 0x02	; 2
    195a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    195e:	c9 e1       	ldi	r28, 0x19	; 25
    1960:	d0 e0       	ldi	r29, 0x00	; 0
    1962:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1966:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    196a:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    196e:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:455
    DEBUG_PRINTLN(F("Warnung Übertemperatur"));
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 25);
      u8g2.print(F("Übertemperatur"));
    1972:	6c e5       	ldi	r22, 0x5C	; 92
    1974:	71 e0       	ldi	r23, 0x01	; 1
    1976:	80 e1       	ldi	r24, 0x10	; 16
    1978:	92 e0       	ldi	r25, 0x02	; 2
    197a:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    197e:	84 e1       	ldi	r24, 0x14	; 20
    1980:	92 e0       	ldi	r25, 0x02	; 2
    1982:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:457

    } while (u8g2.nextPage());
    1986:	81 11       	cpse	r24, r1
    1988:	ec cf       	rjmp	.-40     	; 0x1962 <LeseTMCStatus()+0x74>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:460
  }

  if (TMCStatus.short_to_ground_a == 1) {
    198a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    198e:	82 ff       	sbrs	r24, 2
    1990:	1d c0       	rjmp	.+58     	; 0x19cc <LeseTMCStatus()+0xde>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:461
    TMCFehler = true;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1998:	84 e1       	ldi	r24, 0x14	; 20
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19a0:	cf e0       	ldi	r28, 0x0F	; 15
    19a2:	d0 e0       	ldi	r29, 0x00	; 0
    19a4:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    19a8:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    19ac:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    19b0:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:466
    DEBUG_PRINTLN(F("A Kurzschluss nach Masse"));
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 15);
      u8g2.print(F("A Kurzschluss nach Masse"));
    19b4:	63 e4       	ldi	r22, 0x43	; 67
    19b6:	71 e0       	ldi	r23, 0x01	; 1
    19b8:	80 e1       	ldi	r24, 0x10	; 16
    19ba:	92 e0       	ldi	r25, 0x02	; 2
    19bc:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    19c0:	84 e1       	ldi	r24, 0x14	; 20
    19c2:	92 e0       	ldi	r25, 0x02	; 2
    19c4:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:468

    } while (u8g2.nextPage());
    19c8:	81 11       	cpse	r24, r1
    19ca:	ec cf       	rjmp	.-40     	; 0x19a4 <LeseTMCStatus()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:471
  }

  if (TMCStatus.short_to_ground_b == 1) {
    19cc:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    19d0:	83 ff       	sbrs	r24, 3
    19d2:	1d c0       	rjmp	.+58     	; 0x1a0e <LeseTMCStatus()+0x120>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:472
    TMCFehler = true;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    19da:	84 e1       	ldi	r24, 0x14	; 20
    19dc:	92 e0       	ldi	r25, 0x02	; 2
    19de:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19e2:	c9 e1       	ldi	r28, 0x19	; 25
    19e4:	d0 e0       	ldi	r29, 0x00	; 0
    19e6:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    19ea:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    19ee:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    19f2:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:477
    DEBUG_PRINTLN(F("B Kurzschluss nach Masse"));
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 25);
      u8g2.print(F("B Kurzschluss nach Masse"));
    19f6:	6a e2       	ldi	r22, 0x2A	; 42
    19f8:	71 e0       	ldi	r23, 0x01	; 1
    19fa:	80 e1       	ldi	r24, 0x10	; 16
    19fc:	92 e0       	ldi	r25, 0x02	; 2
    19fe:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a02:	84 e1       	ldi	r24, 0x14	; 20
    1a04:	92 e0       	ldi	r25, 0x02	; 2
    1a06:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:479

    } while (u8g2.nextPage());
    1a0a:	81 11       	cpse	r24, r1
    1a0c:	ec cf       	rjmp	.-40     	; 0x19e6 <LeseTMCStatus()+0xf8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:482
  }

  if (TMCStatus.low_side_short_a == 1) {
    1a0e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    1a12:	84 ff       	sbrs	r24, 4
    1a14:	1d c0       	rjmp	.+58     	; 0x1a50 <LeseTMCStatus()+0x162>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:483
    TMCFehler = true;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1a1c:	84 e1       	ldi	r24, 0x14	; 20
    1a1e:	92 e0       	ldi	r25, 0x02	; 2
    1a20:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a24:	cf e0       	ldi	r28, 0x0F	; 15
    1a26:	d0 e0       	ldi	r29, 0x00	; 0
    1a28:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1a2c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1a30:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    1a34:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:488
    DEBUG_PRINTLN(F("A Kurzschluss"));
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 15);
      u8g2.print(F("A Kurzschluss"));
    1a38:	6c e1       	ldi	r22, 0x1C	; 28
    1a3a:	71 e0       	ldi	r23, 0x01	; 1
    1a3c:	80 e1       	ldi	r24, 0x10	; 16
    1a3e:	92 e0       	ldi	r25, 0x02	; 2
    1a40:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a44:	84 e1       	ldi	r24, 0x14	; 20
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:490

    } while (u8g2.nextPage());
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	ec cf       	rjmp	.-40     	; 0x1a28 <LeseTMCStatus()+0x13a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:493
  }

  if (TMCStatus.low_side_short_b == 1) {
    1a50:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    1a54:	85 ff       	sbrs	r24, 5
    1a56:	1d c0       	rjmp	.+58     	; 0x1a92 <LeseTMCStatus()+0x1a4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:494
    TMCFehler = true;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1a5e:	84 e1       	ldi	r24, 0x14	; 20
    1a60:	92 e0       	ldi	r25, 0x02	; 2
    1a62:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a66:	c9 e1       	ldi	r28, 0x19	; 25
    1a68:	d0 e0       	ldi	r29, 0x00	; 0
    1a6a:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1a6e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1a72:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    1a76:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:499
    DEBUG_PRINTLN(F("B Kurzschluss"));
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 25);
      u8g2.print(F("B Kurzschluss"));
    1a7a:	6e e0       	ldi	r22, 0x0E	; 14
    1a7c:	71 e0       	ldi	r23, 0x01	; 1
    1a7e:	80 e1       	ldi	r24, 0x10	; 16
    1a80:	92 e0       	ldi	r25, 0x02	; 2
    1a82:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a86:	84 e1       	ldi	r24, 0x14	; 20
    1a88:	92 e0       	ldi	r25, 0x02	; 2
    1a8a:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
_Z13LeseTMCStatusv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:501

    } while (u8g2.nextPage());
    1a8e:	81 11       	cpse	r24, r1
    1a90:	ec cf       	rjmp	.-40     	; 0x1a6a <LeseTMCStatus()+0x17c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:530
              u8g2.print(F("B Unterbrechung"));

          } while (u8g2.nextPage());
      }
      */
}
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <BerechneTemperatur(int)>:
_Z18BerechneTemperaturi():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:532

void BerechneTemperatur(int temp) {
    1a98:	8f 92       	push	r8
    1a9a:	9f 92       	push	r9
    1a9c:	af 92       	push	r10
    1a9e:	bf 92       	push	r11
    1aa0:	cf 92       	push	r12
    1aa2:	df 92       	push	r13
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:533
  int Vo = map(temp, 0, 1023, 1023, 0);
    1aac:	bc 01       	movw	r22, r24
    1aae:	99 0f       	add	r25, r25
    1ab0:	88 0b       	sbc	r24, r24
    1ab2:	99 0b       	sbc	r25, r25
    1ab4:	1f 92       	push	r1
    1ab6:	1f 92       	push	r1
    1ab8:	1f 92       	push	r1
    1aba:	1f 92       	push	r1
    1abc:	aa 24       	eor	r10, r10
    1abe:	aa 94       	dec	r10
    1ac0:	23 e0       	ldi	r18, 0x03	; 3
    1ac2:	b2 2e       	mov	r11, r18
    1ac4:	c1 2c       	mov	r12, r1
    1ac6:	d1 2c       	mov	r13, r1
    1ac8:	ee 24       	eor	r14, r14
    1aca:	ea 94       	dec	r14
    1acc:	13 e0       	ldi	r17, 0x03	; 3
    1ace:	f1 2e       	mov	r15, r17
    1ad0:	00 e0       	ldi	r16, 0x00	; 0
    1ad2:	10 e0       	ldi	r17, 0x00	; 0
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	a9 01       	movw	r20, r18
    1ada:	0e 94 01 33 	call	0x6602	; 0x6602 <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:534
  R2 = R1 * (1023.0 / (float)Vo - 1.0);
    1ade:	07 2e       	mov	r0, r23
    1ae0:	00 0c       	add	r0, r0
    1ae2:	88 0b       	sbc	r24, r24
    1ae4:	99 0b       	sbc	r25, r25
    1ae6:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    1aea:	9b 01       	movw	r18, r22
    1aec:	ac 01       	movw	r20, r24
    1aee:	60 e0       	ldi	r22, 0x00	; 0
    1af0:	70 ec       	ldi	r23, 0xC0	; 192
    1af2:	8f e7       	ldi	r24, 0x7F	; 127
    1af4:	94 e4       	ldi	r25, 0x44	; 68
    1af6:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    1b06:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <R1>
    1b0a:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <R1+0x1>
    1b0e:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <R1+0x2>
    1b12:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <R1+0x3>
    1b16:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1b1a:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <R2>
    1b1e:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <R2+0x1>
    1b22:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <R2+0x2>
    1b26:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <R2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:535
  logR2 = log(R2);
    1b2a:	0e 94 29 37 	call	0x6e52	; 0x6e52 <log>
    1b2e:	6b 01       	movw	r12, r22
    1b30:	7c 01       	movw	r14, r24
    1b32:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <logR2>
    1b36:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <logR2+0x1>
    1b3a:	e0 92 0e 02 	sts	0x020E, r14	; 0x80020e <logR2+0x2>
    1b3e:	f0 92 0f 02 	sts	0x020F, r15	; 0x80020f <logR2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:536
  Temperatur = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
    1b42:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <c2>
    1b46:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <c2+0x1>
    1b4a:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <c2+0x2>
    1b4e:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <c2+0x3>
    1b52:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1b56:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <c1>
    1b5a:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <c1+0x1>
    1b5e:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <c1+0x2>
    1b62:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <c1+0x3>
    1b66:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    1b6a:	4b 01       	movw	r8, r22
    1b6c:	5c 01       	movw	r10, r24
    1b6e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <c3>
    1b72:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <c3+0x1>
    1b76:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <c3+0x2>
    1b7a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <c3+0x3>
    1b7e:	c7 01       	movw	r24, r14
    1b80:	b6 01       	movw	r22, r12
    1b82:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1b86:	a7 01       	movw	r20, r14
    1b88:	96 01       	movw	r18, r12
    1b8a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1b8e:	a7 01       	movw	r20, r14
    1b90:	96 01       	movw	r18, r12
    1b92:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1b96:	9b 01       	movw	r18, r22
    1b98:	ac 01       	movw	r20, r24
    1b9a:	c5 01       	movw	r24, r10
    1b9c:	b4 01       	movw	r22, r8
    1b9e:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    1ba2:	9b 01       	movw	r18, r22
    1ba4:	ac 01       	movw	r20, r24
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	80 e8       	ldi	r24, 0x80	; 128
    1bac:	9f e3       	ldi	r25, 0x3F	; 63
    1bae:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:537
  Temperatur = Temperatur - 273.15;
    1bb2:	23 e3       	ldi	r18, 0x33	; 51
    1bb4:	33 e9       	ldi	r19, 0x93	; 147
    1bb6:	48 e8       	ldi	r20, 0x88	; 136
    1bb8:	53 e4       	ldi	r21, 0x43	; 67
    1bba:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    1bbe:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <Temperatur>
    1bc2:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <Temperatur+0x1>
    1bc6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Temperatur+0x2>
    1bca:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Temperatur+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:538
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	df 90       	pop	r13
    1be0:	cf 90       	pop	r12
    1be2:	bf 90       	pop	r11
    1be4:	af 90       	pop	r10
    1be6:	9f 90       	pop	r9
    1be8:	8f 90       	pop	r8
    1bea:	08 95       	ret

00001bec <BerechneSperrgradPoti(int)>:
_Z21BerechneSperrgradPotii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:540

int BerechneSperrgradPoti(int poti) {
    1bec:	4f 92       	push	r4
    1bee:	5f 92       	push	r5
    1bf0:	6f 92       	push	r6
    1bf2:	7f 92       	push	r7
    1bf4:	8f 92       	push	r8
    1bf6:	9f 92       	push	r9
    1bf8:	af 92       	push	r10
    1bfa:	bf 92       	push	r11
    1bfc:	cf 92       	push	r12
    1bfe:	df 92       	push	r13
    1c00:	ef 92       	push	r14
    1c02:	ff 92       	push	r15
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:541
  float SperrgradRAW = map(poti, 0, 1020, 0, 100);
    1c08:	bc 01       	movw	r22, r24
    1c0a:	99 0f       	add	r25, r25
    1c0c:	88 0b       	sbc	r24, r24
    1c0e:	99 0b       	sbc	r25, r25
    1c10:	1f 92       	push	r1
    1c12:	1f 92       	push	r1
    1c14:	1f 92       	push	r1
    1c16:	24 e6       	ldi	r18, 0x64	; 100
    1c18:	2f 93       	push	r18
    1c1a:	a1 2c       	mov	r10, r1
    1c1c:	b1 2c       	mov	r11, r1
    1c1e:	65 01       	movw	r12, r10
    1c20:	1c ef       	ldi	r17, 0xFC	; 252
    1c22:	e1 2e       	mov	r14, r17
    1c24:	13 e0       	ldi	r17, 0x03	; 3
    1c26:	f1 2e       	mov	r15, r17
    1c28:	00 e0       	ldi	r16, 0x00	; 0
    1c2a:	10 e0       	ldi	r17, 0x00	; 0
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	a9 01       	movw	r20, r18
    1c32:	0e 94 01 33 	call	0x6602	; 0x6602 <map(long, long, long, long, long)>
    1c36:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:542
  SperrgradRAW = SperrgradRAW / 100;
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	48 ec       	ldi	r20, 0xC8	; 200
    1c40:	52 e4       	ldi	r21, 0x42	; 66
    1c42:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    1c46:	6b 01       	movw	r12, r22
    1c48:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:543
  float SperrgradRAWKorrigiert = 0.9 * (SperrgradRAW * SperrgradRAW * SperrgradRAW) - 1.3 * (SperrgradRAW * SperrgradRAW) + 1.35 * SperrgradRAW + 0.03;
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	9b 01       	movw	r18, r22
    1c4e:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1c52:	4b 01       	movw	r8, r22
    1c54:	5c 01       	movw	r10, r24
    1c56:	a7 01       	movw	r20, r14
    1c58:	96 01       	movw	r18, r12
    1c5a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1c5e:	26 e6       	ldi	r18, 0x66	; 102
    1c60:	36 e6       	ldi	r19, 0x66	; 102
    1c62:	46 e6       	ldi	r20, 0x66	; 102
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1c6a:	2b 01       	movw	r4, r22
    1c6c:	3c 01       	movw	r6, r24
    1c6e:	26 e6       	ldi	r18, 0x66	; 102
    1c70:	36 e6       	ldi	r19, 0x66	; 102
    1c72:	46 ea       	ldi	r20, 0xA6	; 166
    1c74:	5f e3       	ldi	r21, 0x3F	; 63
    1c76:	c5 01       	movw	r24, r10
    1c78:	b4 01       	movw	r22, r8
    1c7a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	c3 01       	movw	r24, r6
    1c84:	b2 01       	movw	r22, r4
    1c86:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    1c8a:	4b 01       	movw	r8, r22
    1c8c:	5c 01       	movw	r10, r24
    1c8e:	2d ec       	ldi	r18, 0xCD	; 205
    1c90:	3c ec       	ldi	r19, 0xCC	; 204
    1c92:	4c ea       	ldi	r20, 0xAC	; 172
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	c7 01       	movw	r24, r14
    1c98:	b6 01       	movw	r22, r12
    1c9a:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1c9e:	9b 01       	movw	r18, r22
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	c5 01       	movw	r24, r10
    1ca4:	b4 01       	movw	r22, r8
    1ca6:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    1caa:	2f e8       	ldi	r18, 0x8F	; 143
    1cac:	32 ec       	ldi	r19, 0xC2	; 194
    1cae:	45 ef       	ldi	r20, 0xF5	; 245
    1cb0:	5c e3       	ldi	r21, 0x3C	; 60
    1cb2:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:544
  SperrgradRAWKorrigiert = SperrgradRAWKorrigiert * 100;
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	48 ec       	ldi	r20, 0xC8	; 200
    1cbc:	52 e4       	ldi	r21, 0x42	; 66
    1cbe:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:545
  int temp = (int)SperrgradRAWKorrigiert;
    1cc2:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__fixsfsi>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:548
  if (temp < 0)
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
    1cc6:	a0 90 a6 02 	lds	r10, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1cca:	b0 90 a7 02 	lds	r11, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1cce:	0b 2c       	mov	r0, r11
    1cd0:	00 0c       	add	r0, r0
    1cd2:	cc 08       	sbc	r12, r12
    1cd4:	dd 08       	sbc	r13, r13
    1cd6:	77 ff       	sbrs	r23, 7
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <BerechneSperrgradPoti(int)+0xf2>
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	07 2e       	mov	r0, r23
    1ce0:	00 0c       	add	r0, r0
    1ce2:	88 0b       	sbc	r24, r24
    1ce4:	99 0b       	sbc	r25, r25
    1ce6:	00 91 ae 02 	lds	r16, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1cea:	10 91 af 02 	lds	r17, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1cee:	01 2e       	mov	r0, r17
    1cf0:	00 0c       	add	r0, r0
    1cf2:	22 0b       	sbc	r18, r18
    1cf4:	33 0b       	sbc	r19, r19
    1cf6:	3f 93       	push	r19
    1cf8:	2f 93       	push	r18
    1cfa:	1f 93       	push	r17
    1cfc:	0f 93       	push	r16
    1cfe:	12 e6       	ldi	r17, 0x62	; 98
    1d00:	e1 2e       	mov	r14, r17
    1d02:	f1 2c       	mov	r15, r1
    1d04:	00 e0       	ldi	r16, 0x00	; 0
    1d06:	10 e0       	ldi	r17, 0x00	; 0
    1d08:	23 e0       	ldi	r18, 0x03	; 3
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0e 94 01 33 	call	0x6602	; 0x6602 <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:549
  return temp;
    1d14:	2d b7       	in	r18, 0x3d	; 61
    1d16:	3e b7       	in	r19, 0x3e	; 62
    1d18:	28 5f       	subi	r18, 0xF8	; 248
    1d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	3e bf       	out	0x3e, r19	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	2d bf       	out	0x3d, r18	; 61
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:550
}
    1d26:	cb 01       	movw	r24, r22
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	ff 90       	pop	r15
    1d2e:	ef 90       	pop	r14
    1d30:	df 90       	pop	r13
    1d32:	cf 90       	pop	r12
    1d34:	bf 90       	pop	r11
    1d36:	af 90       	pop	r10
    1d38:	9f 90       	pop	r9
    1d3a:	8f 90       	pop	r8
    1d3c:	7f 90       	pop	r7
    1d3e:	6f 90       	pop	r6
    1d40:	5f 90       	pop	r5
    1d42:	4f 90       	pop	r4
    1d44:	08 95       	ret

00001d46 <LeseEingaenge()>:
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:416

    } while (u8g2.nextPage());
  }
}

void LeseEingaenge() {
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:418
  // Lese Eingaenge
  BerechneTemperatur(analogRead(IO_Temperatur));
    1d4e:	8e e0       	ldi	r24, 0x0E	; 14
    1d50:	0e 94 52 34 	call	0x68a4	; 0x68a4 <analogRead>
    1d54:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <BerechneTemperatur(int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:419
  Sperrgrad = BerechneSperrgradPoti(analogRead(IO_Eingabe_Poti));
    1d58:	8f e0       	ldi	r24, 0x0F	; 15
    1d5a:	0e 94 52 34 	call	0x68a4	; 0x68a4 <analogRead>
    1d5e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <BerechneSperrgradPoti(int)>
    1d62:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <Sperrgrad+0x1>
    1d66:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sperrgrad>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:423

  // Anpassung des Sperrgrades über die Öltemperatur:
  // Bei wärmer werdendem Öl, wird das Ventil weiter geschlossen
  TempOffset = (Temperatur - 20) / 4;
    1d6a:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <Temperatur>
    1d6e:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <Temperatur+0x1>
    1d72:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <Temperatur+0x2>
    1d76:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <Temperatur+0x3>
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 ea       	ldi	r20, 0xA0	; 160
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	c7 01       	movw	r24, r14
    1d84:	b6 01       	movw	r22, r12
    1d86:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e8       	ldi	r20, 0x80	; 128
    1d90:	5e e3       	ldi	r21, 0x3E	; 62
    1d92:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    1d96:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__fixsfsi>
    1d9a:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <TempOffset+0x1>
    1d9e:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <TempOffset>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:426

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	48 ec       	ldi	r20, 0xC8	; 200
    1da8:	52 e4       	ldi	r21, 0x42	; 66
    1daa:	c7 01       	movw	r24, r14
    1dac:	b6 01       	movw	r22, r12
    1dae:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <__gesf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	7c f4       	brge	.+30     	; 0x1dd4 <LeseEingaenge()+0x8e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:426 (discriminator 1)
    1db6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1dba:	81 11       	cpse	r24, r1
    1dbc:	0b c0       	rjmp	.+22     	; 0x1dd4 <LeseEingaenge()+0x8e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:428
    DEBUG_PRINTLN(F("Übertemperatur"));
    ZustandTemperatur = true;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ZustandTemperatur>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:429
    ZustandBearbeitet = false;
    1dc4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:434
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    ZustandTemperatur = false;
  }
  LeseTMCStatus();
}
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	df 90       	pop	r13
    1dce:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:433
    ZustandTemperatur = true;
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    ZustandTemperatur = false;
  }
  LeseTMCStatus();
    1dd0:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <LeseTMCStatus()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:430
  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    DEBUG_PRINTLN(F("Übertemperatur"));
    ZustandTemperatur = true;
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4e eb       	ldi	r20, 0xBE	; 190
    1dda:	52 e4       	ldi	r21, 0x42	; 66
    1ddc:	c7 01       	movw	r24, r14
    1dde:	b6 01       	movw	r22, r12
    1de0:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    1de4:	18 16       	cp	r1, r24
    1de6:	84 f3       	brlt	.-32     	; 0x1dc8 <LeseEingaenge()+0x82>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:430 (discriminator 1)
    1de8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1dec:	88 23       	and	r24, r24
    1dee:	61 f3       	breq	.-40     	; 0x1dc8 <LeseEingaenge()+0x82>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:431
    ZustandTemperatur = false;
    1df0:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <ZustandTemperatur>
    1df4:	e9 cf       	rjmp	.-46     	; 0x1dc8 <LeseEingaenge()+0x82>

00001df6 <loop>:
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:252
  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
}

void loop() {
    1df6:	af 92       	push	r10
    1df8:	bf 92       	push	r11
    1dfa:	cf 92       	push	r12
    1dfc:	df 92       	push	r13
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:254
  // Lese Eingänge alle 100 ms
  if (millis() - MillisLeseEingaenge >= IntervalLeseEingaenge) {
    1e06:	0e 94 a1 33 	call	0x6742	; 0x6742 <millis>
    1e0a:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <MillisLeseEingaenge>
    1e0e:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <MillisLeseEingaenge+0x1>
    1e12:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <MillisLeseEingaenge+0x2>
    1e16:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <MillisLeseEingaenge+0x3>
    1e1a:	60 1b       	sub	r22, r16
    1e1c:	71 0b       	sbc	r23, r17
    1e1e:	82 0b       	sbc	r24, r18
    1e20:	93 0b       	sbc	r25, r19
    1e22:	62 33       	cpi	r22, 0x32	; 50
    1e24:	71 05       	cpc	r23, r1
    1e26:	81 05       	cpc	r24, r1
    1e28:	91 05       	cpc	r25, r1
    1e2a:	60 f0       	brcs	.+24     	; 0x1e44 <loop+0x4e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:255
    MillisLeseEingaenge = millis();
    1e2c:	0e 94 a1 33 	call	0x6742	; 0x6742 <millis>
    1e30:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <MillisLeseEingaenge>
    1e34:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <MillisLeseEingaenge+0x1>
    1e38:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <MillisLeseEingaenge+0x2>
    1e3c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <MillisLeseEingaenge+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:256
    LeseEingaenge();
    1e40:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <LeseEingaenge()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:260
  }

  // Lese Eingänge alle 250 ms
  if (millis() - MillisSchreibe >= IntervalSchreibe) {
    1e44:	0e 94 a1 33 	call	0x6742	; 0x6742 <millis>
    1e48:	00 91 fc 01 	lds	r16, 0x01FC	; 0x8001fc <MillisSchreibe>
    1e4c:	10 91 fd 01 	lds	r17, 0x01FD	; 0x8001fd <MillisSchreibe+0x1>
    1e50:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <MillisSchreibe+0x2>
    1e54:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <MillisSchreibe+0x3>
    1e58:	60 1b       	sub	r22, r16
    1e5a:	71 0b       	sbc	r23, r17
    1e5c:	82 0b       	sbc	r24, r18
    1e5e:	93 0b       	sbc	r25, r19
    1e60:	64 36       	cpi	r22, 0x64	; 100
    1e62:	71 05       	cpc	r23, r1
    1e64:	81 05       	cpc	r24, r1
    1e66:	91 05       	cpc	r25, r1
    1e68:	f8 f0       	brcs	.+62     	; 0x1ea8 <loop+0xb2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:261
    MillisSchreibe = millis();
    1e6a:	0e 94 a1 33 	call	0x6742	; 0x6742 <millis>
    1e6e:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <MillisSchreibe>
    1e72:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <MillisSchreibe+0x1>
    1e76:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <MillisSchreibe+0x2>
    1e7a:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <MillisSchreibe+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:262
    if ((stepper.distanceToGo() * stepper.distanceToGo()) < 4) {
    1e7e:	82 eb       	ldi	r24, 0xB2	; 178
    1e80:	92 e0       	ldi	r25, 0x02	; 2
    1e82:	0e 94 1f 1c 	call	0x383e	; 0x383e <AccelStepper::distanceToGo()>
    1e86:	6b 01       	movw	r12, r22
    1e88:	7c 01       	movw	r14, r24
    1e8a:	82 eb       	ldi	r24, 0xB2	; 178
    1e8c:	92 e0       	ldi	r25, 0x02	; 2
    1e8e:	0e 94 1f 1c 	call	0x383e	; 0x383e <AccelStepper::distanceToGo()>
    1e92:	a7 01       	movw	r20, r14
    1e94:	96 01       	movw	r18, r12
    1e96:	0e 94 65 38 	call	0x70ca	; 0x70ca <__mulsi3>
    1e9a:	64 30       	cpi	r22, 0x04	; 4
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	81 05       	cpc	r24, r1
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	14 f4       	brge	.+4      	; 0x1ea8 <loop+0xb2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:263
      SchreibeDisplay();
    1ea4:	0e 94 38 0b 	call	0x1670	; 0x1670 <SchreibeDisplay()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:268
    }
  }

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    1ea8:	0e 94 a1 33 	call	0x6742	; 0x6742 <millis>
    1eac:	00 91 f8 01 	lds	r16, 0x01F8	; 0x8001f8 <MillisLED>
    1eb0:	10 91 f9 01 	lds	r17, 0x01F9	; 0x8001f9 <MillisLED+0x1>
    1eb4:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <MillisLED+0x2>
    1eb8:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <MillisLED+0x3>
    1ebc:	60 1b       	sub	r22, r16
    1ebe:	71 0b       	sbc	r23, r17
    1ec0:	82 0b       	sbc	r24, r18
    1ec2:	93 0b       	sbc	r25, r19
    1ec4:	64 3f       	cpi	r22, 0xF4	; 244
    1ec6:	71 40       	sbci	r23, 0x01	; 1
    1ec8:	81 05       	cpc	r24, r1
    1eca:	91 05       	cpc	r25, r1
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <loop+0xda>
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <loop+0x158>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:269
    MillisLED = millis();
    1ed0:	0e 94 a1 33 	call	0x6742	; 0x6742 <millis>
    1ed4:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <MillisLED>
    1ed8:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <MillisLED+0x1>
    1edc:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <MillisLED+0x2>
    1ee0:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <MillisLED+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:270
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) > 50) {
    1ee4:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1ee8:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1eec:	0f 2c       	mov	r0, r15
    1eee:	00 0c       	add	r0, r0
    1ef0:	00 0b       	sbc	r16, r16
    1ef2:	11 0b       	sbc	r17, r17
    1ef4:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1ef8:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1efc:	03 2e       	mov	r0, r19
    1efe:	00 0c       	add	r0, r0
    1f00:	44 0b       	sbc	r20, r20
    1f02:	55 0b       	sbc	r21, r21
    1f04:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    1f08:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    1f0c:	07 2e       	mov	r0, r23
    1f0e:	00 0c       	add	r0, r0
    1f10:	88 0b       	sbc	r24, r24
    1f12:	99 0b       	sbc	r25, r25
    1f14:	1f 92       	push	r1
    1f16:	1f 92       	push	r1
    1f18:	1f 92       	push	r1
    1f1a:	e4 e6       	ldi	r30, 0x64	; 100
    1f1c:	ef 93       	push	r30
    1f1e:	a1 2c       	mov	r10, r1
    1f20:	b1 2c       	mov	r11, r1
    1f22:	65 01       	movw	r12, r10
    1f24:	0e 94 01 33 	call	0x6602	; 0x6602 <map(long, long, long, long, long)>
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	63 33       	cpi	r22, 0x33	; 51
    1f32:	71 05       	cpc	r23, r1
    1f34:	81 05       	cpc	r24, r1
    1f36:	91 05       	cpc	r25, r1
    1f38:	34 f0       	brlt	.+12     	; 0x1f46 <loop+0x150>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:271
      if (digitalRead(IO_LED_Sperrgrad)) digitalWrite(IO_LED_Sperrgrad, LOW);
    1f3a:	8d e0       	ldi	r24, 0x0D	; 13
    1f3c:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:272
      else digitalWrite(IO_LED_Sperrgrad, HIGH);
    1f40:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:271

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    MillisLED = millis();
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) > 50) {
      if (digitalRead(IO_LED_Sperrgrad)) digitalWrite(IO_LED_Sperrgrad, LOW);
    1f42:	89 2b       	or	r24, r25
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <loop+0x152>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:271 (discriminator 1)
    1f46:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:272
      else digitalWrite(IO_LED_Sperrgrad, HIGH);
    1f48:	8d e0       	ldi	r24, 0x0D	; 13
    1f4a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:279
      digitalWrite(IO_LED_Sperrgrad, LOW);
    }
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    1f4e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1f52:	81 11       	cpse	r24, r1
    1f54:	2c c0       	rjmp	.+88     	; 0x1fae <loop+0x1b8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:279 (discriminator 2)
    1f56:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	28 c0       	rjmp	.+80     	; 0x1fae <loop+0x1b8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:279 (discriminator 4)
    1f5e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1f62:	81 11       	cpse	r24, r1
    1f64:	24 c0       	rjmp	.+72     	; 0x1fae <loop+0x1b8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:288
    if (!ZustandBearbeitet) {
      DEBUG_PRINTLN(F("Stepper zurücksetzen"));
      ZustandBearbeitet = true;
      stepper.setCurrentPosition(0);
    }
  } else if (ZustandHauptschalter) {
    1f66:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    1f6a:	88 23       	and	r24, r24
    1f6c:	09 f4       	brne	.+2      	; 0x1f70 <loop+0x17a>
    1f6e:	6d c0       	rjmp	.+218    	; 0x204a <loop+0x254>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:290
    // Wenn der Hauptschalter aus ist, Stepper und Pumpe stromlos machen
    digitalWrite(IO_Enable, HIGH);
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	84 e0       	ldi	r24, 0x04	; 4
    1f74:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:291
    digitalWrite(IO_Pumpe, LOW);
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	87 e1       	ldi	r24, 0x17	; 23
    1f7c:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:293
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    1f80:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    1f84:	81 11       	cpse	r24, r1
    1f86:	25 c0       	rjmp	.+74     	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:295
      DEBUG_PRINTLN(F("Stepper zurücksetzen"));
      ZustandBearbeitet = true;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:296
      stepper.setCurrentPosition(0);
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	ba 01       	movw	r22, r20
    1f94:	82 eb       	ldi	r24, 0xB2	; 178
    1f96:	92 e0       	ldi	r25, 0x02	; 2
    1f98:	0e 94 37 1c 	call	0x386e	; 0x386e <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:297
      stepper.setSpeed(1000);
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	6a e7       	ldi	r22, 0x7A	; 122
    1fa2:	74 e4       	ldi	r23, 0x44	; 68
    1fa4:	82 eb       	ldi	r24, 0xB2	; 178
    1fa6:	92 e0       	ldi	r25, 0x02	; 2
    1fa8:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <AccelStepper::setSpeed(float)>
    1fac:	12 c0       	rjmp	.+36     	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:281
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    // Wenn Bremse, Handbremse oder Übertemperatur vorhanden sind, Stepper stromlos machen
    digitalWrite(IO_Enable, HIGH);
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	84 e0       	ldi	r24, 0x04	; 4
    1fb2:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:283
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    1fb6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    1fba:	81 11       	cpse	r24, r1
    1fbc:	0a c0       	rjmp	.+20     	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:285
      DEBUG_PRINTLN(F("Stepper zurücksetzen"));
      ZustandBearbeitet = true;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:286
      stepper.setCurrentPosition(0);
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	ba 01       	movw	r22, r20
    1fca:	82 eb       	ldi	r24, 0xB2	; 178
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	0e 94 37 1c 	call	0x386e	; 0x386e <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:325
    }
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    1fd2:	89 e0       	ldi	r24, 0x09	; 9
    1fd4:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    1fd8:	89 2b       	or	r24, r25
    1fda:	09 f4       	brne	.+2      	; 0x1fde <loop+0x1e8>
    1fdc:	a7 c0       	rjmp	.+334    	; 0x212c <loop+0x336>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:338
      u8g2.setCursor(0, 15);
      u8g2.print(F("Kurzschluss Vorladepumpe"));

    } while (u8g2.nextPage());
  } else {
    PumpeFehler = false;
    1fde:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:342
  }

  // Fehler im Treiber des Schrittmotors
  if (TMCFehler) {
    1fe2:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    1fe6:	88 23       	and	r24, r24
    1fe8:	41 f0       	breq	.+16     	; 0x1ffa <loop+0x204>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:344
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	84 e0       	ldi	r24, 0x04	; 4
    1fee:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:345
    digitalWrite(IO_Pumpe, LOW);
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	87 e1       	ldi	r24, 0x17	; 23
    1ff6:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
    1ffa:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <Sperrgrad>
    1ffe:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    2002:	40 91 f2 01 	lds	r20, 0x01F2	; 0x8001f2 <TempOffset>
    2006:	50 91 f3 01 	lds	r21, 0x01F3	; 0x8001f3 <TempOffset+0x1>
    200a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    200e:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:352



  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    2012:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    2016:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    201a:	77 ff       	sbrs	r23, 7
    201c:	b9 c0       	rjmp	.+370    	; 0x2190 <loop+0x39a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:353
    SperrgradKompensiert = Sperrgrad - TempOffset;
    201e:	24 1b       	sub	r18, r20
    2020:	35 0b       	sbc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:354
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
    2022:	ac 01       	movw	r20, r24
    2024:	4c 5f       	subi	r20, 0xFC	; 252
    2026:	5f 4f       	sbci	r21, 0xFF	; 255
    2028:	42 17       	cp	r20, r18
    202a:	53 07       	cpc	r21, r19
    202c:	0c f0       	brlt	.+2      	; 0x2030 <loop+0x23a>
    202e:	aa c0       	rjmp	.+340    	; 0x2184 <loop+0x38e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:357
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    2030:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <SperrgradKompensiert+0x1>
    2034:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:361
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}
    2038:	1f 91       	pop	r17
    203a:	0f 91       	pop	r16
    203c:	ff 90       	pop	r15
    203e:	ef 90       	pop	r14
    2040:	df 90       	pop	r13
    2042:	cf 90       	pop	r12
    2044:	bf 90       	pop	r11
    2046:	af 90       	pop	r10
    2048:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:302
      stepper.setSpeed(1000);
    }
  }
  // Kein Abschaltgrund liegt vor
  // Stepper aktivieren, Vorladepumpe einschalten
  else if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur) {
    204a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    204e:	81 11       	cpse	r24, r1
    2050:	c0 cf       	rjmp	.-128    	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:302 (discriminator 1)
    2052:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    2056:	81 11       	cpse	r24, r1
    2058:	bc cf       	rjmp	.-136    	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:302 (discriminator 3)
    205a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    205e:	81 11       	cpse	r24, r1
    2060:	b8 cf       	rjmp	.-144    	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:302 (discriminator 5)
    2062:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    2066:	81 11       	cpse	r24, r1
    2068:	b4 cf       	rjmp	.-152    	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:303
    digitalWrite(IO_Enable, LOW);
    206a:	60 e0       	ldi	r22, 0x00	; 0
    206c:	84 e0       	ldi	r24, 0x04	; 4
    206e:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:304
    digitalWrite(IO_Pumpe, HIGH);
    2072:	61 e0       	ldi	r22, 0x01	; 1
    2074:	87 e1       	ldi	r24, 0x17	; 23
    2076:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:305
    stepper.moveTo(SperrgradKompensiert);
    207a:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    207e:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    2082:	05 2e       	mov	r0, r21
    2084:	00 0c       	add	r0, r0
    2086:	66 0b       	sbc	r22, r22
    2088:	77 0b       	sbc	r23, r23
    208a:	82 eb       	ldi	r24, 0xB2	; 178
    208c:	92 e0       	ldi	r25, 0x02	; 2
    208e:	0e 94 ae 1b 	call	0x375c	; 0x375c <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:306
    stepper.setSpeed(1000);
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	6a e7       	ldi	r22, 0x7A	; 122
    2098:	74 e4       	ldi	r23, 0x44	; 68
    209a:	82 eb       	ldi	r24, 0xB2	; 178
    209c:	92 e0       	ldi	r25, 0x02	; 2
    209e:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:307
    stepper.runSpeedToPosition();
    20a2:	82 eb       	ldi	r24, 0xB2	; 178
    20a4:	92 e0       	ldi	r25, 0x02	; 2
    20a6:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:310

    // Sofern der Zustand gewechselt hat, Stepper aktivieren und zur alten Position fahren
    if (!ZustandBearbeitet) {
    20aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    20ae:	81 11       	cpse	r24, r1
    20b0:	90 cf       	rjmp	.-224    	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:312
      DEBUG_PRINTLN(F("Stepper aktivieren"));
      stepper.setCurrentPosition(0);
    20b2:	40 e0       	ldi	r20, 0x00	; 0
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	ba 01       	movw	r22, r20
    20b8:	82 eb       	ldi	r24, 0xB2	; 178
    20ba:	92 e0       	ldi	r25, 0x02	; 2
    20bc:	0e 94 37 1c 	call	0x386e	; 0x386e <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:313
      stepper.setSpeed(1000);
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	6a e7       	ldi	r22, 0x7A	; 122
    20c6:	74 e4       	ldi	r23, 0x44	; 68
    20c8:	82 eb       	ldi	r24, 0xB2	; 178
    20ca:	92 e0       	ldi	r25, 0x02	; 2
    20cc:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:314
      ZustandBearbeitet = true;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:315
      stepper.moveTo(SperrgradKompensiert);
    20d6:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    20da:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    20de:	05 2e       	mov	r0, r21
    20e0:	00 0c       	add	r0, r0
    20e2:	66 0b       	sbc	r22, r22
    20e4:	77 0b       	sbc	r23, r23
    20e6:	82 eb       	ldi	r24, 0xB2	; 178
    20e8:	92 e0       	ldi	r25, 0x02	; 2
    20ea:	0e 94 ae 1b 	call	0x375c	; 0x375c <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:316
      stepper.setSpeed(1000);
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	6a e7       	ldi	r22, 0x7A	; 122
    20f4:	74 e4       	ldi	r23, 0x44	; 68
    20f6:	82 eb       	ldi	r24, 0xB2	; 178
    20f8:	92 e0       	ldi	r25, 0x02	; 2
    20fa:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:317
      while (stepper.currentPosition() != SperrgradKompensiert) {
    20fe:	82 eb       	ldi	r24, 0xB2	; 178
    2100:	92 e0       	ldi	r25, 0x02	; 2
    2102:	0e 94 31 1c 	call	0x3862	; 0x3862 <AccelStepper::currentPosition()>
    2106:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    210a:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    210e:	89 01       	movw	r16, r18
    2110:	33 0f       	add	r19, r19
    2112:	22 0b       	sbc	r18, r18
    2114:	33 0b       	sbc	r19, r19
    2116:	60 17       	cp	r22, r16
    2118:	71 07       	cpc	r23, r17
    211a:	82 07       	cpc	r24, r18
    211c:	93 07       	cpc	r25, r19
    211e:	09 f4       	brne	.+2      	; 0x2122 <loop+0x32c>
    2120:	58 cf       	rjmp	.-336    	; 0x1fd2 <loop+0x1dc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:318
        stepper.runSpeedToPosition();
    2122:	82 eb       	ldi	r24, 0xB2	; 178
    2124:	92 e0       	ldi	r25, 0x02	; 2
    2126:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:317
      stepper.setCurrentPosition(0);
      stepper.setSpeed(1000);
      ZustandBearbeitet = true;
      stepper.moveTo(SperrgradKompensiert);
      stepper.setSpeed(1000);
      while (stepper.currentPosition() != SperrgradKompensiert) {
    212a:	e9 cf       	rjmp	.-46     	; 0x20fe <loop+0x308>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:325 (discriminator 1)
    }
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    212c:	87 e1       	ldi	r24, 0x17	; 23
    212e:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    2132:	89 2b       	or	r24, r25
    2134:	09 f4       	brne	.+2      	; 0x2138 <loop+0x342>
    2136:	53 cf       	rjmp	.-346    	; 0x1fde <loop+0x1e8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:326
    PumpeFehler = true;
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:329
    // Pumpe und Stepper abschalten
    DEBUG_PRINTLN(F("Fehler an Vorladepumpe"));
    digitalWrite(IO_Enable, HIGH);
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:330
    digitalWrite(IO_Pumpe, LOW);
    2146:	60 e0       	ldi	r22, 0x00	; 0
    2148:	87 e1       	ldi	r24, 0x17	; 23
    214a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    214e:	84 e1       	ldi	r24, 0x14	; 20
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2156:	0f e0       	ldi	r16, 0x0F	; 15
    2158:	10 e0       	ldi	r17, 0x00	; 0
    215a:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    215e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    2162:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    2166:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:334
    u8g2.firstPage();
    do {
      u8g2.setCursor(0, 15);
      u8g2.print(F("Kurzschluss Vorladepumpe"));
    216a:	67 ef       	ldi	r22, 0xF7	; 247
    216c:	71 e0       	ldi	r23, 0x01	; 1
    216e:	80 e1       	ldi	r24, 0x10	; 16
    2170:	92 e0       	ldi	r25, 0x02	; 2
    2172:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2176:	84 e1       	ldi	r24, 0x14	; 20
    2178:	92 e0       	ldi	r25, 0x02	; 2
    217a:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:336

    } while (u8g2.nextPage());
    217e:	81 11       	cpse	r24, r1
    2180:	ec cf       	rjmp	.-40     	; 0x215a <loop+0x364>
    2182:	2f cf       	rjmp	.-418    	; 0x1fe2 <loop+0x1ec>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:355
  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
    2184:	05 96       	adiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:359
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    2186:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <SperrgradKompensiert+0x1>
    218a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:361
  }
}
    218e:	54 cf       	rjmp	.-344    	; 0x2038 <loop+0x242>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:357
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    2190:	24 0f       	add	r18, r20
    2192:	35 1f       	adc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:358
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    2194:	ac 01       	movw	r20, r24
    2196:	44 50       	subi	r20, 0x04	; 4
    2198:	51 09       	sbc	r21, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:359
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    219a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:358
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    219c:	24 17       	cp	r18, r20
    219e:	35 07       	cpc	r19, r21
    21a0:	94 f7       	brge	.-28     	; 0x2186 <loop+0x390>
    21a2:	46 cf       	rjmp	.-372    	; 0x2030 <loop+0x23a>

000021a4 <autoHome(int)>:
_Z8autoHomei():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:552
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
  return temp;
}

int autoHome(int pos) {
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	6c 01       	movw	r12, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:553
  digitalWrite(IO_Enable, LOW);
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	84 e0       	ldi	r24, 0x04	; 4
    21ba:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:555
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
    21be:	0d 2c       	mov	r0, r13
    21c0:	00 0c       	add	r0, r0
    21c2:	ee 08       	sbc	r14, r14
    21c4:	ff 08       	sbc	r15, r15
    21c6:	b7 01       	movw	r22, r14
    21c8:	a6 01       	movw	r20, r12
    21ca:	82 eb       	ldi	r24, 0xB2	; 178
    21cc:	92 e0       	ldi	r25, 0x02	; 2
    21ce:	0e 94 ae 1b 	call	0x375c	; 0x375c <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:557
  // Fahre langsam
  stepper.setSpeed(400);
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	68 ec       	ldi	r22, 0xC8	; 200
    21d8:	73 e4       	ldi	r23, 0x43	; 67
    21da:	82 eb       	ldi	r24, 0xB2	; 178
    21dc:	92 e0       	ldi	r25, 0x02	; 2
    21de:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:559
  // Die ersten Schritte ohne StallGuard
  while (stepper.currentPosition() != (pos * 0.1)) {
    21e2:	82 eb       	ldi	r24, 0xB2	; 178
    21e4:	92 e0       	ldi	r25, 0x02	; 2
    21e6:	0e 94 31 1c 	call	0x3862	; 0x3862 <AccelStepper::currentPosition()>
    21ea:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    21ee:	4b 01       	movw	r8, r22
    21f0:	5c 01       	movw	r10, r24
    21f2:	c7 01       	movw	r24, r14
    21f4:	b6 01       	movw	r22, r12
    21f6:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    21fa:	2d ec       	ldi	r18, 0xCD	; 205
    21fc:	3c ec       	ldi	r19, 0xCC	; 204
    21fe:	4c ec       	ldi	r20, 0xCC	; 204
    2200:	5d e3       	ldi	r21, 0x3D	; 61
    2202:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    2206:	9b 01       	movw	r18, r22
    2208:	ac 01       	movw	r20, r24
    220a:	c5 01       	movw	r24, r10
    220c:	b4 01       	movw	r22, r8
    220e:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    2212:	88 23       	and	r24, r24
    2214:	29 f0       	breq	.+10     	; 0x2220 <autoHome(int)+0x7c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:560
    stepper.runSpeedToPosition();
    2216:	82 eb       	ldi	r24, 0xB2	; 178
    2218:	92 e0       	ldi	r25, 0x02	; 2
    221a:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:559
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
  // Fahre langsam
  stepper.setSpeed(400);
  // Die ersten Schritte ohne StallGuard
  while (stepper.currentPosition() != (pos * 0.1)) {
    221e:	e1 cf       	rjmp	.-62     	; 0x21e2 <autoHome(int)+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:563
    stepper.runSpeedToPosition();
  }
  // Wenn der Stepper in Bewegung ist, StallGuard laufend auslesen
  while (stepper.currentPosition() != pos) {
    2220:	82 eb       	ldi	r24, 0xB2	; 178
    2222:	92 e0       	ldi	r25, 0x02	; 2
    2224:	0e 94 31 1c 	call	0x3862	; 0x3862 <AccelStepper::currentPosition()>
    2228:	c6 16       	cp	r12, r22
    222a:	d7 06       	cpc	r13, r23
    222c:	e8 06       	cpc	r14, r24
    222e:	f9 06       	cpc	r15, r25
    2230:	c1 f0       	breq	.+48     	; 0x2262 <autoHome(int)+0xbe>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:564
    stepper.runSpeedToPosition();
    2232:	82 eb       	ldi	r24, 0xB2	; 178
    2234:	92 e0       	ldi	r25, 0x02	; 2
    2236:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:565
    int stall_guard_result = stepper_driver.getStallGuardResult();
    223a:	8a ef       	ldi	r24, 0xFA	; 250
    223c:	92 e0       	ldi	r25, 0x02	; 2
    223e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <TMC2209::getStallGuardResult()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:567
    // Wenn der Rückgabewert des Stallguards höher als die Schwelle ist, blockiert der Motor
    if ((stall_guard_result < (STALL_GUARD_THRESHOLD * 2))) {
    2242:	0a 97       	sbiw	r24, 0x0a	; 10
    2244:	6c f7       	brge	.-38     	; 0x2220 <autoHome(int)+0x7c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:570
      // Ermittelten Wert nach oben geben
      DEBUG_PRINTLN(stepper.currentPosition());
      return stepper.currentPosition();
    2246:	82 eb       	ldi	r24, 0xB2	; 178
    2248:	92 e0       	ldi	r25, 0x02	; 2
    224a:	0e 94 31 1c 	call	0x3862	; 0x3862 <AccelStepper::currentPosition()>
    224e:	cb 01       	movw	r24, r22
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:573
    }
  }
}
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	8f 90       	pop	r8
    2260:	08 95       	ret
    2262:	f6 cf       	rjmp	.-20     	; 0x2250 <autoHome(int)+0xac>

00002264 <eepromWriteInt(int, int)>:
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:575

void eepromWriteInt(int adr, int wert) {
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	00 d0       	rcall	.+0      	; 0x2270 <eepromWriteInt(int, int)+0xc>
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	8c 01       	movw	r16, r24
    2276:	f7 2e       	mov	r15, r23
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    2278:	9a 83       	std	Y+2, r25	; 0x02
    227a:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    227c:	ce 01       	movw	r24, r28
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	0e 94 ad 0a 	call	0x155a	; 0x155a <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:580
  byte low, high;
  low = wert & 0xFF;
  high = (wert >> 8) & 0xFF;
  EEPROM.update(adr, low);
  EEPROM.update(adr + 1, high);
    2284:	0f 5f       	subi	r16, 0xFF	; 255
    2286:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    2288:	1a 83       	std	Y+2, r17	; 0x02
    228a:	09 83       	std	Y+1, r16	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    228c:	6f 2d       	mov	r22, r15
    228e:	ce 01       	movw	r24, r28
    2290:	01 96       	adiw	r24, 0x01	; 1
    2292:	0e 94 ad 0a 	call	0x155a	; 0x155a <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:582
  return;
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	08 95       	ret

000022a6 <eepromReadInt(int)>:
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:584

int eepromReadInt(int adr) {
    22a6:	1f 93       	push	r17
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	ec 01       	movw	r28, r24
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    22ae:	0e 94 3f 3a 	call	0x747e	; 0x747e <eeprom_read_byte>
    22b2:	18 2f       	mov	r17, r24
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	0e 94 3f 3a 	call	0x747e	; 0x747e <eeprom_read_byte>
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:588
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	98 2f       	mov	r25, r24
    22c0:	88 27       	eor	r24, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:589
    22c2:	81 0f       	add	r24, r17
    22c4:	91 1d       	adc	r25, r1
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	1f 91       	pop	r17
    22cc:	08 95       	ret

000022ce <setup>:
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:116
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}

void setup() {
    22ce:	ef 92       	push	r14
    22d0:	ff 92       	push	r15
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
_ZN4U8G211initDisplayEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:119
    /* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
    /* U8X8_MSG_GPIO_MENU_HOME */
    uint8_t getMenuEvent(void) { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

    void initDisplay(void) {
      u8g2_InitDisplay(&u8g2); }
    22da:	84 e1       	ldi	r24, 0x14	; 20
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <u8x8_InitDisplay>
_ZN4U8G212clearDisplayEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:127
    /* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */       
    void initInterface(void) {          
      u8g2_InitInterface(&u8g2); }
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    22e2:	84 e1       	ldi	r24, 0x14	; 20
    22e4:	92 e0       	ldi	r25, 0x02	; 2
    22e6:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <u8g2_ClearDisplay>
_ZN4U8G212setPowerSaveEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:130
      
    void setPowerSave(uint8_t is_enable) {
      u8g2_SetPowerSave(&u8g2, is_enable); }
    22ea:	60 e0       	ldi	r22, 0x00	; 0
    22ec:	84 e1       	ldi	r24, 0x14	; 20
    22ee:	92 e0       	ldi	r25, 0x02	; 2
    22f0:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <u8x8_SetPowerSave>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    22f4:	67 e3       	ldi	r22, 0x37	; 55
    22f6:	72 e0       	ldi	r23, 0x02	; 2
    22f8:	84 e1       	ldi	r24, 0x14	; 20
    22fa:	92 e0       	ldi	r25, 0x02	; 2
    22fc:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    2300:	84 e1       	ldi	r24, 0x14	; 20
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2308:	bc e0       	ldi	r27, 0x0C	; 12
    230a:	eb 2e       	mov	r14, r27
    230c:	f1 2c       	mov	r15, r1
    230e:	08 e2       	ldi	r16, 0x28	; 40
    2310:	10 e0       	ldi	r17, 0x00	; 0
    2312:	cc e3       	ldi	r28, 0x3C	; 60
    2314:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    2316:	67 e3       	ldi	r22, 0x37	; 55
    2318:	72 e0       	ldi	r23, 0x02	; 2
    231a:	84 e1       	ldi	r24, 0x14	; 20
    231c:	92 e0       	ldi	r25, 0x02	; 2
    231e:	0e 94 db 22 	call	0x45b6	; 0x45b6 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2322:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2326:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    232a:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    232e:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:129
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.setCursor(0, 12);
    u8g2.print(F("Haldex Controller"));
    2332:	65 e2       	ldi	r22, 0x25	; 37
    2334:	72 e0       	ldi	r23, 0x02	; 2
    2336:	80 e1       	ldi	r24, 0x10	; 16
    2338:	92 e0       	ldi	r25, 0x02	; 2
    233a:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    233e:	20 e8       	ldi	r18, 0x80	; 128
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4c e0       	ldi	r20, 0x0C	; 12
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	84 e1       	ldi	r24, 0x14	; 20
    234c:	92 e0       	ldi	r25, 0x02	; 2
    234e:	0e 94 af 23 	call	0x475e	; 0x475e <u8g2_DrawHLine>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2352:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2356:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    235a:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    235e:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:132
    u8g2.drawHLine(0, 12, 128);
    u8g2.setCursor(0, 40);
    u8g2.print(F("TCA965"));
    2362:	6e e1       	ldi	r22, 0x1E	; 30
    2364:	72 e0       	ldi	r23, 0x02	; 2
    2366:	80 e1       	ldi	r24, 0x10	; 16
    2368:	92 e0       	ldi	r25, 0x02	; 2
    236a:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    236e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2372:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    2376:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    237a:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:134
    u8g2.setCursor(0, 60);
    u8g2.print(F("allradbus.com"));
    237e:	60 e1       	ldi	r22, 0x10	; 16
    2380:	72 e0       	ldi	r23, 0x02	; 2
    2382:	80 e1       	ldi	r24, 0x10	; 16
    2384:	92 e0       	ldi	r25, 0x02	; 2
    2386:	0e 94 49 31 	call	0x6292	; 0x6292 <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    238a:	84 e1       	ldi	r24, 0x14	; 20
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:136

  } while (u8g2.nextPage());
    2392:	81 11       	cpse	r24, r1
    2394:	c0 cf       	rjmp	.-128    	; 0x2316 <setup+0x48>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:139

  // Konfiguriere Stepper
  stepper_driver.setup(serial_stream);
    2396:	10 e0       	ldi	r17, 0x00	; 0
    2398:	00 e0       	ldi	r16, 0x00	; 0
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	32 ec       	ldi	r19, 0xC2	; 194
    239e:	41 e0       	ldi	r20, 0x01	; 1
    23a0:	50 e0       	ldi	r21, 0x00	; 0
    23a2:	66 e5       	ldi	r22, 0x56	; 86
    23a4:	75 e0       	ldi	r23, 0x05	; 5
    23a6:	8a ef       	ldi	r24, 0xFA	; 250
    23a8:	92 e0       	ldi	r25, 0x02	; 2
    23aa:	0e 94 99 17 	call	0x2f32	; 0x2f32 <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:140
  stepper_driver.setRunCurrent(40);
    23ae:	68 e2       	ldi	r22, 0x28	; 40
    23b0:	8a ef       	ldi	r24, 0xFA	; 250
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:141
  stepper_driver.setHoldCurrent(40);
    23b8:	68 e2       	ldi	r22, 0x28	; 40
    23ba:	8a ef       	ldi	r24, 0xFA	; 250
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:142
  stepper_driver.enableAutomaticCurrentScaling();
    23c2:	8a ef       	ldi	r24, 0xFA	; 250
    23c4:	92 e0       	ldi	r25, 0x02	; 2
    23c6:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <TMC2209::enableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:143
  stepper_driver.enableAutomaticGradientAdaptation();
    23ca:	8a ef       	ldi	r24, 0xFA	; 250
    23cc:	92 e0       	ldi	r25, 0x02	; 2
    23ce:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <TMC2209::enableAutomaticGradientAdaptation()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:144
  stepper_driver.setStallGuardThreshold(STALL_GUARD_THRESHOLD);
    23d2:	65 e0       	ldi	r22, 0x05	; 5
    23d4:	8a ef       	ldi	r24, 0xFA	; 250
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	0e 94 b3 14 	call	0x2966	; 0x2966 <TMC2209::setStallGuardThreshold(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:145
  stepper_driver.setMicrostepsPerStep(4);
    23dc:	64 e0       	ldi	r22, 0x04	; 4
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	8a ef       	ldi	r24, 0xFA	; 250
    23e2:	92 e0       	ldi	r25, 0x02	; 2
    23e4:	0e 94 43 17 	call	0x2e86	; 0x2e86 <TMC2209::setMicrostepsPerStep(unsigned int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:146
  stepper_driver.setStandstillMode(TMC2209::BRAKING);
    23e8:	63 e0       	ldi	r22, 0x03	; 3
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	8a ef       	ldi	r24, 0xFA	; 250
    23ee:	92 e0       	ldi	r25, 0x02	; 2
    23f0:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <TMC2209::setStandstillMode(TMC2209::StandstillMode)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:147
  stepper_driver.setCoolStepDurationThreshold(COOL_STEP_DURATION_THRESHOLD);
    23f4:	40 ed       	ldi	r20, 0xD0	; 208
    23f6:	57 e0       	ldi	r21, 0x07	; 7
    23f8:	60 e0       	ldi	r22, 0x00	; 0
    23fa:	70 e0       	ldi	r23, 0x00	; 0
    23fc:	8a ef       	ldi	r24, 0xFA	; 250
    23fe:	92 e0       	ldi	r25, 0x02	; 2
    2400:	0e 94 ae 14 	call	0x295c	; 0x295c <TMC2209::setCoolStepDurationThreshold(unsigned long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:148
  stepper.setMaxSpeed(4000);
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	6a e7       	ldi	r22, 0x7A	; 122
    240a:	75 e4       	ldi	r23, 0x45	; 69
    240c:	82 eb       	ldi	r24, 0xB2	; 178
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	0e 94 4d 1c 	call	0x389a	; 0x389a <AccelStepper::setMaxSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:149
  stepper.setAcceleration(4000);
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	6a e7       	ldi	r22, 0x7A	; 122
    241a:	75 e4       	ldi	r23, 0x45	; 69
    241c:	82 eb       	ldi	r24, 0xB2	; 178
    241e:	92 e0       	ldi	r25, 0x02	; 2
    2420:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <AccelStepper::setAcceleration(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:152

  // Konfiguriere I/O
  pinMode(IO_Enable, OUTPUT);
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	84 e0       	ldi	r24, 0x04	; 4
    2428:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:153
  pinMode(IO_Step, OUTPUT);
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:154
  pinMode(IO_Direction, OUTPUT);
    2434:	61 e0       	ldi	r22, 0x01	; 1
    2436:	85 e0       	ldi	r24, 0x05	; 5
    2438:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:155
  pinMode(IO_Eingabe_Poti, INPUT);
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	8f e0       	ldi	r24, 0x0F	; 15
    2440:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:156
  pinMode(IO_Temperatur, INPUT);
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	8e e0       	ldi	r24, 0x0E	; 14
    2448:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:157
  pinMode(IO_Bremse, INPUT);
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	8c e0       	ldi	r24, 0x0C	; 12
    2450:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:158
  pinMode(IO_Handbremse, INPUT_PULLUP);
    2454:	62 e0       	ldi	r22, 0x02	; 2
    2456:	8b e0       	ldi	r24, 0x0B	; 11
    2458:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:159
  pinMode(IO_Hauptschalter, INPUT);
    245c:	60 e0       	ldi	r22, 0x00	; 0
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:160
  pinMode(IO_Diagnose_Pumpe, INPUT);
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	89 e0       	ldi	r24, 0x09	; 9
    2468:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:161
  pinMode(IO_Pumpe, OUTPUT);
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	87 e1       	ldi	r24, 0x17	; 23
    2470:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:162
  pinMode(IO_LED_Sperrgrad, OUTPUT);
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	8d e0       	ldi	r24, 0x0D	; 13
    2478:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:164

  if (digitalRead(IO_Bremse))
    247c:	8c e0       	ldi	r24, 0x0C	; 12
    247e:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    2482:	89 2b       	or	r24, r25
    2484:	19 f0       	breq	.+6      	; 0x248c <setup+0x1be>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:165
    ZustandBremse = true;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:166
  if (!digitalRead(IO_Handbremse))
    248c:	8b e0       	ldi	r24, 0x0B	; 11
    248e:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    2492:	89 2b       	or	r24, r25
    2494:	19 f4       	brne	.+6      	; 0x249c <setup+0x1ce>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:167
    ZustandHandbremse = true;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:168
  if (!digitalRead(IO_Hauptschalter))
    249c:	8a e0       	ldi	r24, 0x0A	; 10
    249e:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    24a2:	89 2b       	or	r24, r25
    24a4:	19 f4       	brne	.+6      	; 0x24ac <setup+0x1de>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:169
    ZustandHauptschalter = true;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:172

  // PinChange Interrupt konfigurieren
  PCICR = (1 << PCIE0);                                    // enable PCINT[23:16] interrupts
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:173
  PCMSK0 = (1 << PCINT4) | (1 << PCINT3) | (1 << PCINT2);  // PB4 = PCINT4 | PB2 = PCINT2
    24b2:	8c e1       	ldi	r24, 0x1C	; 28
    24b4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:176

  // Aktiviere Endstufen in TMC2209
  digitalWrite(IO_Enable, LOW);
    24b8:	60 e0       	ldi	r22, 0x00	; 0
    24ba:	84 e0       	ldi	r24, 0x04	; 4
    24bc:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:178
  // Aktiviere TMC2209
  stepper_driver.enable();
    24c0:	8a ef       	ldi	r24, 0xFA	; 250
    24c2:	92 e0       	ldi	r25, 0x02	; 2
    24c4:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <TMC2209::enable()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:180

  delay(250);
    24c8:	6a ef       	ldi	r22, 0xFA	; 250
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:181
  LeseTMCStatus();
    24d4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <LeseTMCStatus()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:182
  delay(250);
    24d8:	6a ef       	ldi	r22, 0xFA	; 250
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <delay>
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	0e 94 3f 3a 	call	0x747e	; 0x747e <eeprom_read_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:185

  // Prüfe, ob AutoTune durchgeführt werden soll
  if (EEPROM.read(0) != 123) {
    24ec:	8b 37       	cpi	r24, 0x7B	; 123
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <setup+0x224>
    24f0:	e0 c0       	rjmp	.+448    	; 0x26b2 <setup+0x3e4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:188
    DEBUG_PRINTLN(F("Haldex Autotuning..."));
    // Lasse Stepper 400 Steps in Positive Richtung laufen und erwarte Rückgabewert
    SchrittzahlMaximum = autoHome(400);
    24f2:	80 e9       	ldi	r24, 0x90	; 144
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <autoHome(int)>
    24fa:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    24fe:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:192
    DEBUG_PRINTLN(SchrittzahlMaximum);

    // Wenn der Rückgabewert kleiner als 50 Steps ist, scheint die Drehrichtung falsch zu sein
    if (SchrittzahlMaximum < 50) {
    2502:	c2 97       	sbiw	r24, 0x32	; 50
    2504:	44 f4       	brge	.+16     	; 0x2516 <setup+0x248>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:194
      // Lasse den Stepper nun also 400 Steps in negative Richtung laufen
      SchrittzahlMaximum = autoHome(-400);
    2506:	80 e7       	ldi	r24, 0x70	; 112
    2508:	9e ef       	ldi	r25, 0xFE	; 254
    250a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <autoHome(int)>
    250e:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    2512:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:198
    }
    DEBUG_PRINT(SchrittzahlMaximum);
    DEBUG_PRINTLN(F(" steps Maximalweg ermittelt"));
    if (SchrittzahlMaximum < -50) {
    2516:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    251a:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    251e:	8e 3c       	cpi	r24, 0xCE	; 206
    2520:	2f ef       	ldi	r18, 0xFF	; 255
    2522:	92 07       	cpc	r25, r18
    2524:	0c f0       	brlt	.+2      	; 0x2528 <setup+0x25a>
    2526:	8e c0       	rjmp	.+284    	; 0x2644 <setup+0x376>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:199
      Schrittzahl0Prozent = -100;
    2528:	2c e9       	ldi	r18, 0x9C	; 156
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2530:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:200
      Schrittzahl100Prozent = SchrittzahlMaximum + 40;
    2534:	9c 01       	movw	r18, r24
    2536:	28 5d       	subi	r18, 0xD8	; 216
    2538:	3f 4f       	sbci	r19, 0xFF	; 255
    253a:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <Schrittzahl100Prozent+0x1>
    253e:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:201
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2542:	84 57       	subi	r24, 0x74	; 116
    2544:	9f 4f       	sbci	r25, 0xFF	; 255
    2546:	ac 01       	movw	r20, r24
    2548:	97 ff       	sbrs	r25, 7
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <setup+0x282>
    254c:	4f 5f       	subi	r20, 0xFF	; 255
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    2550:	55 95       	asr	r21
    2552:	47 95       	ror	r20
    2554:	44 56       	subi	r20, 0x64	; 100
    2556:	51 09       	sbc	r21, r1
    2558:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <Schrittzahl50Prozent+0x1>
    255c:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:202
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    2560:	24 1b       	sub	r18, r20
    2562:	35 0b       	sbc	r19, r21
    2564:	37 ff       	sbrs	r19, 7
    2566:	02 c0       	rjmp	.+4      	; 0x256c <setup+0x29e>
    2568:	2f 5f       	subi	r18, 0xFF	; 255
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	35 95       	asr	r19
    256e:	27 95       	ror	r18
    2570:	24 0f       	add	r18, r20
    2572:	35 1f       	adc	r19, r21
    2574:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <Schrittzahl75Prozent+0x1>
    2578:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:203
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    257c:	97 fd       	sbrc	r25, 7
    257e:	03 96       	adiw	r24, 0x03	; 3
    2580:	95 95       	asr	r25
    2582:	87 95       	ror	r24
    2584:	95 95       	asr	r25
    2586:	87 95       	ror	r24
    2588:	84 56       	subi	r24, 0x64	; 100
    258a:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:210
    } else if (SchrittzahlMaximum > 50) {
      Schrittzahl0Prozent = 100;
      Schrittzahl100Prozent = SchrittzahlMaximum - 40;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    258c:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    2590:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <Schrittzahl25Prozent>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    2594:	6b e7       	ldi	r22, 0x7B	; 123
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	0e 94 47 3a 	call	0x748e	; 0x748e <eeprom_write_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:215
      EEPROM.write(0, 123);
    } else {
      DEBUG_PRINTLN(F("Schrittzahlen zu gering, Fehler im Ventil"));
    }
    eepromWriteInt(2, Schrittzahl0Prozent);
    259e:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    25a2:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    25a6:	82 e0       	ldi	r24, 0x02	; 2
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 32 11 	call	0x2264	; 0x2264 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:216
    eepromWriteInt(4, Schrittzahl25Prozent);
    25ae:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <Schrittzahl25Prozent>
    25b2:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    25b6:	84 e0       	ldi	r24, 0x04	; 4
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	0e 94 32 11 	call	0x2264	; 0x2264 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:217
    eepromWriteInt(6, Schrittzahl50Prozent);
    25be:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <Schrittzahl50Prozent>
    25c2:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <Schrittzahl50Prozent+0x1>
    25c6:	86 e0       	ldi	r24, 0x06	; 6
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 32 11 	call	0x2264	; 0x2264 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:218
    eepromWriteInt(8, Schrittzahl75Prozent);
    25ce:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <Schrittzahl75Prozent>
    25d2:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <Schrittzahl75Prozent+0x1>
    25d6:	88 e0       	ldi	r24, 0x08	; 8
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 32 11 	call	0x2264	; 0x2264 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:219
    eepromWriteInt(10, Schrittzahl100Prozent);
    25de:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    25e2:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    25e6:	8a e0       	ldi	r24, 0x0A	; 10
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	0e 94 32 11 	call	0x2264	; 0x2264 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:220
    eepromWriteInt(12, SchrittzahlMaximum);
    25ee:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    25f2:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    25f6:	8c e0       	ldi	r24, 0x0C	; 12
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	0e 94 32 11 	call	0x2264	; 0x2264 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:243
  DEBUG_PRINT(F("75%: "));
  DEBUG_PRINTLN(Schrittzahl75Prozent);
  DEBUG_PRINT(F("100%: "));
  DEBUG_PRINTLN(Schrittzahl100Prozent);

  digitalWrite(IO_Enable, HIGH);
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	84 e0       	ldi	r24, 0x04	; 4
    2602:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:244
  stepper.setCurrentPosition(0);
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	ba 01       	movw	r22, r20
    260c:	82 eb       	ldi	r24, 0xB2	; 178
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	0e 94 37 1c 	call	0x386e	; 0x386e <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:245
  stepper.setSpeed(1000);
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	6a e7       	ldi	r22, 0x7A	; 122
    261a:	74 e4       	ldi	r23, 0x44	; 68
    261c:	82 eb       	ldi	r24, 0xB2	; 178
    261e:	92 e0       	ldi	r25, 0x02	; 2
    2620:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:248

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
    2624:	6c e3       	ldi	r22, 0x3C	; 60
    2626:	8a ef       	ldi	r24, 0xFA	; 250
    2628:	92 e0       	ldi	r25, 0x02	; 2
    262a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:249
  stepper_driver.setHoldCurrent(40);
    262e:	68 e2       	ldi	r22, 0x28	; 40
    2630:	8a ef       	ldi	r24, 0xFA	; 250
    2632:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:250
}
    2634:	df 91       	pop	r29
    2636:	cf 91       	pop	r28
    2638:	1f 91       	pop	r17
    263a:	0f 91       	pop	r16
    263c:	ff 90       	pop	r15
    263e:	ef 90       	pop	r14
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:249
  stepper.setCurrentPosition(0);
  stepper.setSpeed(1000);

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
    2640:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:205
      Schrittzahl100Prozent = SchrittzahlMaximum + 40;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      EEPROM.write(0, 123);
    } else if (SchrittzahlMaximum > 50) {
    2644:	83 33       	cpi	r24, 0x33	; 51
    2646:	91 05       	cpc	r25, r1
    2648:	0c f4       	brge	.+2      	; 0x264c <setup+0x37e>
    264a:	a9 cf       	rjmp	.-174    	; 0x259e <setup+0x2d0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:206
      Schrittzahl0Prozent = 100;
    264c:	24 e6       	ldi	r18, 0x64	; 100
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2654:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:207
      Schrittzahl100Prozent = SchrittzahlMaximum - 40;
    2658:	9c 01       	movw	r18, r24
    265a:	28 52       	subi	r18, 0x28	; 40
    265c:	31 09       	sbc	r19, r1
    265e:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <Schrittzahl100Prozent+0x1>
    2662:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:208
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2666:	8c 58       	subi	r24, 0x8C	; 140
    2668:	91 09       	sbc	r25, r1
    266a:	ac 01       	movw	r20, r24
    266c:	97 ff       	sbrs	r25, 7
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <setup+0x3a6>
    2670:	4f 5f       	subi	r20, 0xFF	; 255
    2672:	5f 4f       	sbci	r21, 0xFF	; 255
    2674:	55 95       	asr	r21
    2676:	47 95       	ror	r20
    2678:	4c 59       	subi	r20, 0x9C	; 156
    267a:	5f 4f       	sbci	r21, 0xFF	; 255
    267c:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <Schrittzahl50Prozent+0x1>
    2680:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:209
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    2684:	24 1b       	sub	r18, r20
    2686:	35 0b       	sbc	r19, r21
    2688:	37 ff       	sbrs	r19, 7
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <setup+0x3c2>
    268c:	2f 5f       	subi	r18, 0xFF	; 255
    268e:	3f 4f       	sbci	r19, 0xFF	; 255
    2690:	35 95       	asr	r19
    2692:	27 95       	ror	r18
    2694:	24 0f       	add	r18, r20
    2696:	35 1f       	adc	r19, r21
    2698:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <Schrittzahl75Prozent+0x1>
    269c:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:210
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    26a0:	97 fd       	sbrc	r25, 7
    26a2:	03 96       	adiw	r24, 0x03	; 3
    26a4:	95 95       	asr	r25
    26a6:	87 95       	ror	r24
    26a8:	95 95       	asr	r25
    26aa:	87 95       	ror	r24
    26ac:	8c 59       	subi	r24, 0x9C	; 156
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	6d cf       	rjmp	.-294    	; 0x258c <setup+0x2be>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:223
    eepromWriteInt(8, Schrittzahl75Prozent);
    eepromWriteInt(10, Schrittzahl100Prozent);
    eepromWriteInt(12, SchrittzahlMaximum);
  } else {
    // Wenn nicht, nehme Werte aus dem EEPROM
    Schrittzahl0Prozent = eepromReadInt(2);
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <eepromReadInt(int)>
    26ba:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    26be:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:224
    Schrittzahl25Prozent = eepromReadInt(4);
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <eepromReadInt(int)>
    26ca:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    26ce:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <Schrittzahl25Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:225
    Schrittzahl50Prozent = eepromReadInt(6);
    26d2:	86 e0       	ldi	r24, 0x06	; 6
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <eepromReadInt(int)>
    26da:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <Schrittzahl50Prozent+0x1>
    26de:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:226
    Schrittzahl75Prozent = eepromReadInt(8);
    26e2:	88 e0       	ldi	r24, 0x08	; 8
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <eepromReadInt(int)>
    26ea:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <Schrittzahl75Prozent+0x1>
    26ee:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:227
    Schrittzahl100Prozent = eepromReadInt(10);
    26f2:	8a e0       	ldi	r24, 0x0A	; 10
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <eepromReadInt(int)>
    26fa:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <Schrittzahl100Prozent+0x1>
    26fe:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:228
    SchrittzahlMaximum = eepromReadInt(12);
    2702:	8c e0       	ldi	r24, 0x0C	; 12
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	0e 94 53 11 	call	0x22a6	; 0x22a6 <eepromReadInt(int)>
    270a:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    270e:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
    2712:	75 cf       	rjmp	.-278    	; 0x25fe <setup+0x330>

00002714 <_GLOBAL__sub_I_serial_stream>:
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:589
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2714:	cf 92       	push	r12
    2716:	ef 92       	push	r14
    2718:	0f 93       	push	r16
    271a:	cf 93       	push	r28
    271c:	df 93       	push	r29
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:39
#define IO_LED_Sperrgrad 13
#define IO_Pumpe 23

// TMC2209
HardwareSerial &serial_stream = Serial;
TMC2209 stepper_driver;
    271e:	8a ef       	ldi	r24, 0xFA	; 250
    2720:	92 e0       	ldi	r25, 0x02	; 2
    2722:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <TMC2209::TMC2209()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:42
TMC2209::Status TMCStatus;

AccelStepper stepper(1, IO_Step, IO_Direction);
    2726:	cc 24       	eor	r12, r12
    2728:	c3 94       	inc	r12
    272a:	85 e0       	ldi	r24, 0x05	; 5
    272c:	e8 2e       	mov	r14, r24
    272e:	04 e0       	ldi	r16, 0x04	; 4
    2730:	25 e0       	ldi	r18, 0x05	; 5
    2732:	46 e0       	ldi	r20, 0x06	; 6
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	82 eb       	ldi	r24, 0xB2	; 178
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	0e 94 c3 1c 	call	0x3986	; 0x3986 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    273e:	c0 e1       	ldi	r28, 0x10	; 16
    2740:	d2 e0       	ldi	r29, 0x02	; 2
    2742:	1b 82       	std	Y+3, r1	; 0x03
    2744:	1a 82       	std	Y+2, r1	; 0x02
_ZN4U8G2C4Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:68
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    2746:	8c e1       	ldi	r24, 0x1C	; 28
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	99 83       	std	Y+1, r25	; 0x01
    274c:	88 83       	st	Y, r24
    274e:	8f e9       	ldi	r24, 0x9F	; 159
    2750:	95 e2       	ldi	r25, 0x25	; 37
    2752:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <u8g2+0x91>
    2756:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <u8g2+0x90>
_ZN4U8G24homeEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:382
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    275a:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    275e:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    2762:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <u8g2+0x95>
    2766:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <u8g2+0x94>
    276a:	84 e1       	ldi	r24, 0x14	; 20
    276c:	92 e0       	ldi	r25, 0x02	; 2
    276e:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <u8x8_utf8_init>
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2893
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_sw_i2c, u8x8_gpio_and_delay_arduino);
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SH1106_128X64_NONAME_2_HW_I2C : public U8G2 {
  public: U8G2_SH1106_128X64_NONAME_2_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    2772:	88 e2       	ldi	r24, 0x28	; 40
    2774:	91 e0       	ldi	r25, 0x01	; 1
    2776:	99 83       	std	Y+1, r25	; 0x01
    2778:	88 83       	st	Y, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2894
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_hw_i2c, u8x8_gpio_and_delay_arduino);
    277a:	27 ee       	ldi	r18, 0xE7	; 231
    277c:	3d e1       	ldi	r19, 0x1D	; 29
    277e:	48 e5       	ldi	r20, 0x58	; 88
    2780:	5e e1       	ldi	r21, 0x1E	; 30
    2782:	60 e5       	ldi	r22, 0x50	; 80
    2784:	71 e0       	ldi	r23, 0x01	; 1
    2786:	84 e1       	ldi	r24, 0x14	; 20
    2788:	92 e0       	ldi	r25, 0x02	; 2
    278a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <u8g2_Setup_sh1106_i2c_128x64_noname_2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    u8x8_SetPin_HW_I2C(getU8x8(), reset, clock, data);
    278e:	2f ef       	ldi	r18, 0xFF	; 255
    2790:	4f ef       	ldi	r20, 0xFF	; 255
    2792:	6f ef       	ldi	r22, 0xFF	; 255
    2794:	84 e1       	ldi	r24, 0x14	; 20
    2796:	92 e0       	ldi	r25, 0x02	; 2
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex/Haldex.ino:589
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	0f 91       	pop	r16
    279e:	ef 90       	pop	r14
    27a0:	cf 90       	pop	r12
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    27a2:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>

000027a6 <TMC2209::TMC2209()>:
_ZN7TMC2209C2Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:956
  write(ADDRESS_CHOPCONF, chopper_config_.bytes);
}

uint32_t TMC2209::readChopperConfigBytes()
{
  return read(ADDRESS_CHOPCONF);
    27a6:	fc 01       	movw	r30, r24
    27a8:	83 e0       	ldi	r24, 0x03	; 3
    27aa:	82 8f       	std	Z+26, r24	; 0x1a
    27ac:	11 82       	std	Z+1, r1	; 0x01
    27ae:	10 82       	st	Z, r1
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	92 ec       	ldi	r25, 0xC2	; 194
    27b4:	a1 e0       	ldi	r26, 0x01	; 1
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	82 83       	std	Z+2, r24	; 0x02
    27ba:	93 83       	std	Z+3, r25	; 0x03
    27bc:	a4 83       	std	Z+4, r26	; 0x04
    27be:	b5 83       	std	Z+5, r27	; 0x05
    27c0:	16 82       	std	Z+6, r1	; 0x06
    27c2:	8f ef       	ldi	r24, 0xFF	; 255
    27c4:	9f ef       	ldi	r25, 0xFF	; 255
    27c6:	90 87       	std	Z+8, r25	; 0x08
    27c8:	87 83       	std	Z+7, r24	; 0x07
    27ca:	15 8a       	std	Z+21, r1	; 0x15
    27cc:	08 95       	ret

000027ce <TMC2209::serialAvailable()>:
_ZN7TMC220915serialAvailableEv():
    27ce:	dc 01       	movw	r26, r24
    27d0:	8d 91       	ld	r24, X+
    27d2:	9c 91       	ld	r25, X
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	39 f0       	breq	.+14     	; 0x27e6 <TMC2209::serialAvailable()+0x18>
    27d8:	dc 01       	movw	r26, r24
    27da:	ed 91       	ld	r30, X+
    27dc:	fc 91       	ld	r31, X
    27de:	00 84       	ldd	r0, Z+8	; 0x08
    27e0:	f1 85       	ldd	r31, Z+9	; 0x09
    27e2:	e0 2d       	mov	r30, r0
    27e4:	09 94       	ijmp
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	08 95       	ret

000027ec <TMC2209::serialWrite(unsigned char)>:
_ZN7TMC220911serialWriteEh():
    27ec:	dc 01       	movw	r26, r24
    27ee:	8d 91       	ld	r24, X+
    27f0:	9c 91       	ld	r25, X
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	39 f0       	breq	.+14     	; 0x2804 <TMC2209::serialWrite(unsigned char)+0x18>
    27f6:	dc 01       	movw	r26, r24
    27f8:	ed 91       	ld	r30, X+
    27fa:	fc 91       	ld	r31, X
    27fc:	01 90       	ld	r0, Z+
    27fe:	f0 81       	ld	r31, Z
    2800:	e0 2d       	mov	r30, r0
    2802:	09 94       	ijmp
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	08 95       	ret

0000280a <TMC2209::serialRead()>:
_ZN7TMC220910serialReadEv():
    280a:	dc 01       	movw	r26, r24
    280c:	8d 91       	ld	r24, X+
    280e:	9c 91       	ld	r25, X
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	39 f0       	breq	.+14     	; 0x2822 <TMC2209::serialRead()+0x18>
    2814:	dc 01       	movw	r26, r24
    2816:	ed 91       	ld	r30, X+
    2818:	fc 91       	ld	r31, X
    281a:	02 84       	ldd	r0, Z+10	; 0x0a
    281c:	f3 85       	ldd	r31, Z+11	; 0x0b
    281e:	e0 2d       	mov	r30, r0
    2820:	09 94       	ijmp
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	08 95       	ret

00002828 <TMC2209::serialFlush()>:
_ZN7TMC220911serialFlushEv():
    2828:	dc 01       	movw	r26, r24
    282a:	8d 91       	ld	r24, X+
    282c:	9c 91       	ld	r25, X
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	39 f0       	breq	.+14     	; 0x2840 <TMC2209::serialFlush()+0x18>
    2832:	dc 01       	movw	r26, r24
    2834:	ed 91       	ld	r30, X+
    2836:	fc 91       	ld	r31, X
    2838:	06 80       	ldd	r0, Z+6	; 0x06
    283a:	f7 81       	ldd	r31, Z+7	; 0x07
    283c:	e0 2d       	mov	r30, r0
    283e:	09 94       	ijmp
    2840:	08 95       	ret

00002842 <TMC2209::reverseData(unsigned long)>:
_ZN7TMC220911reverseDataEm():
    2842:	cb 01       	movw	r24, r22
    2844:	ba 01       	movw	r22, r20
    2846:	0e 94 bc 38 	call	0x7178	; 0x7178 <__bswapsi2>
    284a:	08 95       	ret

0000284c <TMC2209::write(unsigned char, unsigned long)>:
_ZN7TMC22095writeEhm():
    284c:	7f 92       	push	r7
    284e:	8f 92       	push	r8
    2850:	9f 92       	push	r9
    2852:	af 92       	push	r10
    2854:	bf 92       	push	r11
    2856:	cf 92       	push	r12
    2858:	df 92       	push	r13
    285a:	ef 92       	push	r14
    285c:	ff 92       	push	r15
    285e:	0f 93       	push	r16
    2860:	1f 93       	push	r17
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
    286a:	28 97       	sbiw	r28, 0x08	; 8
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	7c 01       	movw	r14, r24
    2878:	16 2f       	mov	r17, r22
    287a:	ba 01       	movw	r22, r20
    287c:	a9 01       	movw	r20, r18
    287e:	85 e0       	ldi	r24, 0x05	; 5
    2880:	89 83       	std	Y+1, r24	; 0x01
    2882:	f7 01       	movw	r30, r14
    2884:	b6 80       	ldd	r11, Z+6	; 0x06
    2886:	ba 82       	std	Y+2, r11	; 0x02
    2888:	1f 77       	andi	r17, 0x7F	; 127
    288a:	10 68       	ori	r17, 0x80	; 128
    288c:	1b 83       	std	Y+3, r17	; 0x03
    288e:	c7 01       	movw	r24, r14
    2890:	0e 94 21 14 	call	0x2842	; 0x2842 <TMC2209::reverseData(unsigned long)>
    2894:	6c 83       	std	Y+4, r22	; 0x04
    2896:	7d 83       	std	Y+5, r23	; 0x05
    2898:	8e 83       	std	Y+6, r24	; 0x06
    289a:	9f 83       	std	Y+7, r25	; 0x07
_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h():
    289c:	f6 2f       	mov	r31, r22
    289e:	a7 2e       	mov	r10, r23
    28a0:	98 2e       	mov	r9, r24
    28a2:	89 2e       	mov	r8, r25
    28a4:	e0 e0       	ldi	r30, 0x00	; 0
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	a0 e0       	ldi	r26, 0x00	; 0
    28aa:	87 e0       	ldi	r24, 0x07	; 7
    28ac:	78 2e       	mov	r7, r24
    28ae:	25 e0       	ldi	r18, 0x05	; 5
    28b0:	3b 2d       	mov	r19, r11
    28b2:	41 2f       	mov	r20, r17
    28b4:	5f 2f       	mov	r21, r31
    28b6:	6a 2d       	mov	r22, r10
    28b8:	79 2d       	mov	r23, r9
    28ba:	88 2d       	mov	r24, r8
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	0a 2f       	mov	r16, r26
    28c0:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__lshrdi3>
    28c4:	38 e0       	ldi	r19, 0x08	; 8
    28c6:	8e 2f       	mov	r24, r30
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	42 2f       	mov	r20, r18
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	bc 01       	movw	r22, r24
    28d0:	66 0f       	add	r22, r22
    28d2:	67 2f       	mov	r22, r23
    28d4:	66 1f       	adc	r22, r22
    28d6:	77 0b       	sbc	r23, r23
    28d8:	20 fb       	bst	r18, 0
    28da:	cc 24       	eor	r12, r12
    28dc:	c0 f8       	bld	r12, 0
    28de:	d1 2c       	mov	r13, r1
    28e0:	ee 0f       	add	r30, r30
    28e2:	6c 15       	cp	r22, r12
    28e4:	7d 05       	cpc	r23, r13
    28e6:	21 f0       	breq	.+8      	; 0x28f0 <TMC2209::write(unsigned char, unsigned long)+0xa4>
    28e8:	88 0f       	add	r24, r24
    28ea:	99 1f       	adc	r25, r25
    28ec:	e8 2f       	mov	r30, r24
    28ee:	e7 25       	eor	r30, r7
    28f0:	55 95       	asr	r21
    28f2:	47 95       	ror	r20
    28f4:	24 2f       	mov	r18, r20
    28f6:	31 50       	subi	r19, 0x01	; 1
    28f8:	31 f7       	brne	.-52     	; 0x28c6 <TMC2209::write(unsigned char, unsigned long)+0x7a>
    28fa:	18 96       	adiw	r26, 0x08	; 8
    28fc:	a8 33       	cpi	r26, 0x38	; 56
    28fe:	b1 05       	cpc	r27, r1
    2900:	b1 f6       	brne	.-84     	; 0x28ae <TMC2209::write(unsigned char, unsigned long)+0x62>
_ZN7TMC22095writeEhm():
    2902:	e8 87       	std	Y+8, r30	; 0x08
    2904:	d1 2c       	mov	r13, r1
    2906:	c1 2c       	mov	r12, r1
_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h():
    2908:	29 81       	ldd	r18, Y+1	; 0x01
    290a:	3a 81       	ldd	r19, Y+2	; 0x02
    290c:	4b 81       	ldd	r20, Y+3	; 0x03
    290e:	5c 81       	ldd	r21, Y+4	; 0x04
    2910:	6d 81       	ldd	r22, Y+5	; 0x05
    2912:	7e 81       	ldd	r23, Y+6	; 0x06
    2914:	8f 81       	ldd	r24, Y+7	; 0x07
    2916:	98 85       	ldd	r25, Y+8	; 0x08
    2918:	0c 2d       	mov	r16, r12
    291a:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <__lshrdi3>
    291e:	62 2f       	mov	r22, r18
    2920:	c7 01       	movw	r24, r14
    2922:	0e 94 f6 13 	call	0x27ec	; 0x27ec <TMC2209::serialWrite(unsigned char)>
    2926:	f8 e0       	ldi	r31, 0x08	; 8
    2928:	cf 0e       	add	r12, r31
    292a:	d1 1c       	adc	r13, r1
    292c:	80 e4       	ldi	r24, 0x40	; 64
    292e:	c8 16       	cp	r12, r24
    2930:	d1 04       	cpc	r13, r1
    2932:	51 f7       	brne	.-44     	; 0x2908 <TMC2209::write(unsigned char, unsigned long)+0xbc>
_ZN7TMC22095writeEhm():
    2934:	28 96       	adiw	r28, 0x08	; 8
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	df 90       	pop	r13
    294e:	cf 90       	pop	r12
    2950:	bf 90       	pop	r11
    2952:	af 90       	pop	r10
    2954:	9f 90       	pop	r9
    2956:	8f 90       	pop	r8
    2958:	7f 90       	pop	r7
    295a:	08 95       	ret

0000295c <TMC2209::setCoolStepDurationThreshold(unsigned long)>:
_ZN7TMC220928setCoolStepDurationThresholdEm():
    295c:	9a 01       	movw	r18, r20
    295e:	ab 01       	movw	r20, r22
    2960:	64 e1       	ldi	r22, 0x14	; 20
    2962:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>

00002966 <TMC2209::setStallGuardThreshold(unsigned char)>:
_ZN7TMC220922setStallGuardThresholdEh():
    2966:	26 2f       	mov	r18, r22
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	40 e0       	ldi	r20, 0x00	; 0
    296e:	60 e4       	ldi	r22, 0x40	; 64
    2970:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>

00002974 <TMC2209::setRegistersToDefaults()>:
_ZN7TMC220922setRegistersToDefaultsEv():
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	ec 01       	movw	r28, r24
    297a:	1d 86       	std	Y+13, r1	; 0x0d
    297c:	1e 86       	std	Y+14, r1	; 0x0e
    297e:	1f 86       	std	Y+15, r1	; 0x0f
    2980:	18 8a       	std	Y+16, r1	; 0x10
    2982:	80 e1       	ldi	r24, 0x10	; 16
    2984:	8d 87       	std	Y+13, r24	; 0x0d
    2986:	8e 85       	ldd	r24, Y+14	; 0x0e
    2988:	8f 61       	ori	r24, 0x1F	; 31
    298a:	8e 87       	std	Y+14, r24	; 0x0e
    298c:	8f 85       	ldd	r24, Y+15	; 0x0f
    298e:	80 7f       	andi	r24, 0xF0	; 240
    2990:	81 60       	ori	r24, 0x01	; 1
    2992:	8f 87       	std	Y+15, r24	; 0x0f
    2994:	2d 85       	ldd	r18, Y+13	; 0x0d
    2996:	3e 85       	ldd	r19, Y+14	; 0x0e
    2998:	4f 85       	ldd	r20, Y+15	; 0x0f
    299a:	58 89       	ldd	r21, Y+16	; 0x10
    299c:	60 e1       	ldi	r22, 0x10	; 16
    299e:	ce 01       	movw	r24, r28
    29a0:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    29a4:	83 e5       	ldi	r24, 0x53	; 83
    29a6:	8e 8b       	std	Y+22, r24	; 0x16
    29a8:	1f 8a       	std	Y+23, r1	; 0x17
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	88 8f       	std	Y+24, r24	; 0x18
    29ae:	80 e1       	ldi	r24, 0x10	; 16
    29b0:	89 8f       	std	Y+25, r24	; 0x19
    29b2:	2e 89       	ldd	r18, Y+22	; 0x16
    29b4:	3f 89       	ldd	r19, Y+23	; 0x17
    29b6:	48 8d       	ldd	r20, Y+24	; 0x18
    29b8:	59 8d       	ldd	r21, Y+25	; 0x19
    29ba:	6c e6       	ldi	r22, 0x6C	; 108
    29bc:	ce 01       	movw	r24, r28
    29be:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    29c2:	84 e2       	ldi	r24, 0x24	; 36
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	ad e0       	ldi	r26, 0x0D	; 13
    29c8:	b1 ec       	ldi	r27, 0xC1	; 193
    29ca:	8b 8f       	std	Y+27, r24	; 0x1b
    29cc:	9c 8f       	std	Y+28, r25	; 0x1c
    29ce:	ad 8f       	std	Y+29, r26	; 0x1d
    29d0:	be 8f       	std	Y+30, r27	; 0x1e
    29d2:	24 e2       	ldi	r18, 0x24	; 36
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	4d e0       	ldi	r20, 0x0D	; 13
    29d8:	51 ec       	ldi	r21, 0xC1	; 193
    29da:	60 e7       	ldi	r22, 0x70	; 112
    29dc:	ce 01       	movw	r24, r28
    29de:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    29e2:	19 8a       	std	Y+17, r1	; 0x11
    29e4:	1a 8a       	std	Y+18, r1	; 0x12
    29e6:	1b 8a       	std	Y+19, r1	; 0x13
    29e8:	1c 8a       	std	Y+20, r1	; 0x14
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	a9 01       	movw	r20, r18
    29f0:	62 e4       	ldi	r22, 0x42	; 66
    29f2:	ce 01       	movw	r24, r28
    29f4:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    29f8:	24 e1       	ldi	r18, 0x14	; 20
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	61 e1       	ldi	r22, 0x11	; 17
    2a02:	ce 01       	movw	r24, r28
    2a04:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	a9 01       	movw	r20, r18
    2a0e:	63 e1       	ldi	r22, 0x13	; 19
    2a10:	ce 01       	movw	r24, r28
    2a12:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	a9 01       	movw	r20, r18
    2a1c:	62 e2       	ldi	r22, 0x22	; 34
    2a1e:	ce 01       	movw	r24, r28
    2a20:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	a9 01       	movw	r20, r18
    2a2a:	64 e1       	ldi	r22, 0x14	; 20
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	a9 01       	movw	r20, r18
    2a38:	60 e4       	ldi	r22, 0x40	; 64
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	a9 01       	movw	r20, r18
    2a46:	62 e4       	ldi	r22, 0x42	; 66
    2a48:	ce 01       	movw	r24, r28
    2a4a:	df 91       	pop	r29
    2a4c:	cf 91       	pop	r28
    2a4e:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>

00002a52 <TMC2209::read(unsigned char)>:
_ZN7TMC22094readEh():
    2a52:	8f 92       	push	r8
    2a54:	9f 92       	push	r9
    2a56:	af 92       	push	r10
    2a58:	bf 92       	push	r11
    2a5a:	df 92       	push	r13
    2a5c:	ef 92       	push	r14
    2a5e:	ff 92       	push	r15
    2a60:	0f 93       	push	r16
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
    2a6c:	28 97       	sbiw	r28, 0x08	; 8
    2a6e:	0f b6       	in	r0, 0x3f	; 63
    2a70:	f8 94       	cli
    2a72:	de bf       	out	0x3e, r29	; 62
    2a74:	0f be       	out	0x3f, r0	; 63
    2a76:	cd bf       	out	0x3d, r28	; 61
    2a78:	7c 01       	movw	r14, r24
    2a7a:	45 e0       	ldi	r20, 0x05	; 5
    2a7c:	84 2e       	mov	r8, r20
    2a7e:	91 2c       	mov	r9, r1
    2a80:	a1 2c       	mov	r10, r1
    2a82:	b1 2c       	mov	r11, r1
    2a84:	fc 01       	movw	r30, r24
    2a86:	96 80       	ldd	r9, Z+6	; 0x06
    2a88:	6f 77       	andi	r22, 0x7F	; 127
    2a8a:	8a 2d       	mov	r24, r10
    2a8c:	80 78       	andi	r24, 0x80	; 128
    2a8e:	a8 2e       	mov	r10, r24
    2a90:	a6 2a       	or	r10, r22
    2a92:	e8 94       	clt
    2a94:	a7 f8       	bld	r10, 7
_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h():
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	e0 e0       	ldi	r30, 0x00	; 0
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	57 e0       	ldi	r21, 0x07	; 7
    2a9e:	d5 2e       	mov	r13, r21
    2aa0:	b5 01       	movw	r22, r10
    2aa2:	a4 01       	movw	r20, r8
    2aa4:	0e 2e       	mov	r0, r30
    2aa6:	04 c0       	rjmp	.+8      	; 0x2ab0 <TMC2209::read(unsigned char)+0x5e>
    2aa8:	76 95       	lsr	r23
    2aaa:	67 95       	ror	r22
    2aac:	57 95       	ror	r21
    2aae:	47 95       	ror	r20
    2ab0:	0a 94       	dec	r0
    2ab2:	d2 f7       	brpl	.-12     	; 0x2aa8 <TMC2209::read(unsigned char)+0x56>
    2ab4:	58 e0       	ldi	r21, 0x08	; 8
    2ab6:	68 2f       	mov	r22, r24
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	a4 2f       	mov	r26, r20
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	8b 01       	movw	r16, r22
    2ac0:	00 0f       	add	r16, r16
    2ac2:	01 2f       	mov	r16, r17
    2ac4:	00 1f       	adc	r16, r16
    2ac6:	11 0b       	sbc	r17, r17
    2ac8:	24 2f       	mov	r18, r20
    2aca:	21 70       	andi	r18, 0x01	; 1
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	88 0f       	add	r24, r24
    2ad0:	02 17       	cp	r16, r18
    2ad2:	13 07       	cpc	r17, r19
    2ad4:	21 f0       	breq	.+8      	; 0x2ade <TMC2209::read(unsigned char)+0x8c>
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	8d 25       	eor	r24, r13
    2ade:	b5 95       	asr	r27
    2ae0:	a7 95       	ror	r26
    2ae2:	4a 2f       	mov	r20, r26
    2ae4:	51 50       	subi	r21, 0x01	; 1
    2ae6:	39 f7       	brne	.-50     	; 0x2ab6 <TMC2209::read(unsigned char)+0x64>
    2ae8:	38 96       	adiw	r30, 0x08	; 8
    2aea:	e8 31       	cpi	r30, 0x18	; 24
    2aec:	f1 05       	cpc	r31, r1
    2aee:	c1 f6       	brne	.-80     	; 0x2aa0 <TMC2209::read(unsigned char)+0x4e>
_ZN7TMC22094readEh():
    2af0:	b8 2e       	mov	r11, r24
_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h():
    2af2:	c7 01       	movw	r24, r14
    2af4:	0e 94 14 14 	call	0x2828	; 0x2828 <TMC2209::serialFlush()>
    2af8:	c7 01       	movw	r24, r14
    2afa:	0e 94 e7 13 	call	0x27ce	; 0x27ce <TMC2209::serialAvailable()>
    2afe:	18 16       	cp	r1, r24
    2b00:	19 06       	cpc	r1, r25
    2b02:	24 f4       	brge	.+8      	; 0x2b0c <TMC2209::read(unsigned char)+0xba>
    2b04:	c7 01       	movw	r24, r14
    2b06:	0e 94 05 14 	call	0x280a	; 0x280a <TMC2209::serialRead()>
    2b0a:	f6 cf       	rjmp	.-20     	; 0x2af8 <TMC2209::read(unsigned char)+0xa6>
    2b0c:	10 e0       	ldi	r17, 0x00	; 0
    2b0e:	00 e0       	ldi	r16, 0x00	; 0
    2b10:	c5 01       	movw	r24, r10
    2b12:	b4 01       	movw	r22, r8
    2b14:	00 2e       	mov	r0, r16
    2b16:	04 c0       	rjmp	.+8      	; 0x2b20 <TMC2209::read(unsigned char)+0xce>
    2b18:	96 95       	lsr	r25
    2b1a:	87 95       	ror	r24
    2b1c:	77 95       	ror	r23
    2b1e:	67 95       	ror	r22
    2b20:	0a 94       	dec	r0
    2b22:	d2 f7       	brpl	.-12     	; 0x2b18 <TMC2209::read(unsigned char)+0xc6>
    2b24:	c7 01       	movw	r24, r14
    2b26:	0e 94 f6 13 	call	0x27ec	; 0x27ec <TMC2209::serialWrite(unsigned char)>
    2b2a:	08 5f       	subi	r16, 0xF8	; 248
    2b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2e:	00 32       	cpi	r16, 0x20	; 32
    2b30:	11 05       	cpc	r17, r1
    2b32:	71 f7       	brne	.-36     	; 0x2b10 <TMC2209::read(unsigned char)+0xbe>
    2b34:	c7 01       	movw	r24, r14
    2b36:	0e 94 14 14 	call	0x2828	; 0x2828 <TMC2209::serialFlush()>
    2b3a:	81 2c       	mov	r8, r1
    2b3c:	91 2c       	mov	r9, r1
    2b3e:	54 01       	movw	r10, r8
    2b40:	c7 01       	movw	r24, r14
    2b42:	0e 94 e7 13 	call	0x27ce	; 0x27ce <TMC2209::serialAvailable()>
    2b46:	04 97       	sbiw	r24, 0x04	; 4
    2b48:	8c f4       	brge	.+34     	; 0x2b6c <TMC2209::read(unsigned char)+0x11a>
    2b4a:	f0 ea       	ldi	r31, 0xA0	; 160
    2b4c:	8f 16       	cp	r8, r31
    2b4e:	ff e0       	ldi	r31, 0x0F	; 15
    2b50:	9f 06       	cpc	r9, r31
    2b52:	a1 04       	cpc	r10, r1
    2b54:	b1 04       	cpc	r11, r1
    2b56:	e9 f0       	breq	.+58     	; 0x2b92 <TMC2209::read(unsigned char)+0x140>
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 0b 34 	call	0x6816	; 0x6816 <delayMicroseconds>
    2b60:	8f ef       	ldi	r24, 0xFF	; 255
    2b62:	88 1a       	sub	r8, r24
    2b64:	98 0a       	sbc	r9, r24
    2b66:	a8 0a       	sbc	r10, r24
    2b68:	b8 0a       	sbc	r11, r24
    2b6a:	ea cf       	rjmp	.-44     	; 0x2b40 <TMC2209::read(unsigned char)+0xee>
    2b6c:	e0 ea       	ldi	r30, 0xA0	; 160
    2b6e:	8e 16       	cp	r8, r30
    2b70:	ef e0       	ldi	r30, 0x0F	; 15
    2b72:	9e 06       	cpc	r9, r30
    2b74:	a1 04       	cpc	r10, r1
    2b76:	b1 04       	cpc	r11, r1
    2b78:	61 f0       	breq	.+24     	; 0x2b92 <TMC2209::read(unsigned char)+0x140>
    2b7a:	c7 01       	movw	r24, r14
    2b7c:	0e 94 05 14 	call	0x280a	; 0x280a <TMC2209::serialRead()>
    2b80:	c7 01       	movw	r24, r14
    2b82:	0e 94 05 14 	call	0x280a	; 0x280a <TMC2209::serialRead()>
    2b86:	c7 01       	movw	r24, r14
    2b88:	0e 94 05 14 	call	0x280a	; 0x280a <TMC2209::serialRead()>
    2b8c:	c7 01       	movw	r24, r14
    2b8e:	0e 94 05 14 	call	0x280a	; 0x280a <TMC2209::serialRead()>
    2b92:	81 2c       	mov	r8, r1
    2b94:	91 2c       	mov	r9, r1
    2b96:	54 01       	movw	r10, r8
_ZN7TMC22094readEh():
    2b98:	c7 01       	movw	r24, r14
    2b9a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <TMC2209::serialAvailable()>
    2b9e:	08 97       	sbiw	r24, 0x08	; 8
    2ba0:	94 f4       	brge	.+36     	; 0x2bc6 <TMC2209::read(unsigned char)+0x174>
    2ba2:	f0 e1       	ldi	r31, 0x10	; 16
    2ba4:	8f 16       	cp	r8, r31
    2ba6:	f7 e2       	ldi	r31, 0x27	; 39
    2ba8:	9f 06       	cpc	r9, r31
    2baa:	a1 04       	cpc	r10, r1
    2bac:	b1 04       	cpc	r11, r1
    2bae:	09 f4       	brne	.+2      	; 0x2bb2 <TMC2209::read(unsigned char)+0x160>
    2bb0:	5e c0       	rjmp	.+188    	; 0x2c6e <TMC2209::read(unsigned char)+0x21c>
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 0b 34 	call	0x6816	; 0x6816 <delayMicroseconds>
    2bba:	8f ef       	ldi	r24, 0xFF	; 255
    2bbc:	88 1a       	sub	r8, r24
    2bbe:	98 0a       	sbc	r9, r24
    2bc0:	a8 0a       	sbc	r10, r24
    2bc2:	b8 0a       	sbc	r11, r24
    2bc4:	e9 cf       	rjmp	.-46     	; 0x2b98 <TMC2209::read(unsigned char)+0x146>
    2bc6:	e0 e1       	ldi	r30, 0x10	; 16
    2bc8:	8e 16       	cp	r8, r30
    2bca:	e7 e2       	ldi	r30, 0x27	; 39
    2bcc:	9e 06       	cpc	r9, r30
    2bce:	a1 04       	cpc	r10, r1
    2bd0:	b1 04       	cpc	r11, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <TMC2209::read(unsigned char)+0x184>
    2bd4:	4c c0       	rjmp	.+152    	; 0x2c6e <TMC2209::read(unsigned char)+0x21c>
    2bd6:	19 82       	std	Y+1, r1	; 0x01
    2bd8:	1a 82       	std	Y+2, r1	; 0x02
    2bda:	1b 82       	std	Y+3, r1	; 0x03
    2bdc:	1c 82       	std	Y+4, r1	; 0x04
    2bde:	1d 82       	std	Y+5, r1	; 0x05
    2be0:	1e 82       	std	Y+6, r1	; 0x06
    2be2:	1f 82       	std	Y+7, r1	; 0x07
    2be4:	18 86       	std	Y+8, r1	; 0x08
    2be6:	b1 2c       	mov	r11, r1
    2be8:	a1 2c       	mov	r10, r1
    2bea:	c7 01       	movw	r24, r14
    2bec:	0e 94 05 14 	call	0x280a	; 0x280a <TMC2209::serialRead()>
    2bf0:	9c 01       	movw	r18, r24
    2bf2:	93 2f       	mov	r25, r19
    2bf4:	99 0f       	add	r25, r25
    2bf6:	99 0b       	sbc	r25, r25
    2bf8:	49 2f       	mov	r20, r25
    2bfa:	59 2f       	mov	r21, r25
    2bfc:	69 2f       	mov	r22, r25
    2bfe:	79 2f       	mov	r23, r25
    2c00:	89 2f       	mov	r24, r25
    2c02:	0a 2d       	mov	r16, r10
    2c04:	0e 94 dd 38 	call	0x71ba	; 0x71ba <__ashldi3>
    2c08:	f9 81       	ldd	r31, Y+1	; 0x01
    2c0a:	2f 2b       	or	r18, r31
    2c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0e:	3f 2b       	or	r19, r31
    2c10:	eb 81       	ldd	r30, Y+3	; 0x03
    2c12:	e4 2b       	or	r30, r20
    2c14:	4c 81       	ldd	r20, Y+4	; 0x04
    2c16:	45 2b       	or	r20, r21
    2c18:	5d 81       	ldd	r21, Y+5	; 0x05
    2c1a:	56 2b       	or	r21, r22
    2c1c:	6e 81       	ldd	r22, Y+6	; 0x06
    2c1e:	67 2b       	or	r22, r23
    2c20:	7f 81       	ldd	r23, Y+7	; 0x07
    2c22:	78 2b       	or	r23, r24
    2c24:	88 85       	ldd	r24, Y+8	; 0x08
    2c26:	98 2b       	or	r25, r24
    2c28:	29 83       	std	Y+1, r18	; 0x01
    2c2a:	3a 83       	std	Y+2, r19	; 0x02
    2c2c:	eb 83       	std	Y+3, r30	; 0x03
    2c2e:	4c 83       	std	Y+4, r20	; 0x04
    2c30:	5d 83       	std	Y+5, r21	; 0x05
    2c32:	6e 83       	std	Y+6, r22	; 0x06
    2c34:	7f 83       	std	Y+7, r23	; 0x07
    2c36:	98 87       	std	Y+8, r25	; 0x08
    2c38:	f8 e0       	ldi	r31, 0x08	; 8
    2c3a:	af 0e       	add	r10, r31
    2c3c:	b1 1c       	adc	r11, r1
    2c3e:	80 e4       	ldi	r24, 0x40	; 64
    2c40:	a8 16       	cp	r10, r24
    2c42:	b1 04       	cpc	r11, r1
    2c44:	91 f6       	brne	.-92     	; 0x2bea <TMC2209::read(unsigned char)+0x198>
    2c46:	c7 01       	movw	r24, r14
    2c48:	28 96       	adiw	r28, 0x08	; 8
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	bf 90       	pop	r11
    2c64:	af 90       	pop	r10
    2c66:	9f 90       	pop	r9
    2c68:	8f 90       	pop	r8
    2c6a:	0c 94 21 14 	jmp	0x2842	; 0x2842 <TMC2209::reverseData(unsigned long)>
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	70 e0       	ldi	r23, 0x00	; 0
    2c72:	cb 01       	movw	r24, r22
    2c74:	28 96       	adiw	r28, 0x08	; 8
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	df 91       	pop	r29
    2c82:	cf 91       	pop	r28
    2c84:	1f 91       	pop	r17
    2c86:	0f 91       	pop	r16
    2c88:	ff 90       	pop	r15
    2c8a:	ef 90       	pop	r14
    2c8c:	df 90       	pop	r13
    2c8e:	bf 90       	pop	r11
    2c90:	af 90       	pop	r10
    2c92:	9f 90       	pop	r9
    2c94:	8f 90       	pop	r8
    2c96:	08 95       	ret

00002c98 <TMC2209::getStatus()>:
_ZN7TMC22099getStatusEv():
    2c98:	6f e6       	ldi	r22, 0x6F	; 111
    2c9a:	0e 94 29 15 	call	0x2a52	; 0x2a52 <TMC2209::read(unsigned char)>
    2c9e:	08 95       	ret

00002ca0 <TMC2209::getStallGuardResult()>:
_ZN7TMC220919getStallGuardResultEv():
    2ca0:	61 e4       	ldi	r22, 0x41	; 65
    2ca2:	0e 94 29 15 	call	0x2a52	; 0x2a52 <TMC2209::read(unsigned char)>
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	08 95       	ret

00002caa <TMC2209::percentToCurrentSetting(unsigned char)>:
_ZN7TMC220923percentToCurrentSettingEh():
    2caa:	af 92       	push	r10
    2cac:	bf 92       	push	r11
    2cae:	cf 92       	push	r12
    2cb0:	df 92       	push	r13
    2cb2:	ef 92       	push	r14
    2cb4:	ff 92       	push	r15
    2cb6:	0f 93       	push	r16
    2cb8:	1f 93       	push	r17
    2cba:	70 e0       	ldi	r23, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	65 36       	cpi	r22, 0x65	; 101
    2cc2:	71 05       	cpc	r23, r1
    2cc4:	81 05       	cpc	r24, r1
    2cc6:	91 05       	cpc	r25, r1
    2cc8:	20 f0       	brcs	.+8      	; 0x2cd2 <TMC2209::percentToCurrentSetting(unsigned char)+0x28>
    2cca:	64 e6       	ldi	r22, 0x64	; 100
    2ccc:	70 e0       	ldi	r23, 0x00	; 0
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	1f 92       	push	r1
    2cd4:	1f 92       	push	r1
    2cd6:	1f 92       	push	r1
    2cd8:	2f e1       	ldi	r18, 0x1F	; 31
    2cda:	2f 93       	push	r18
    2cdc:	a1 2c       	mov	r10, r1
    2cde:	b1 2c       	mov	r11, r1
    2ce0:	65 01       	movw	r12, r10
    2ce2:	14 e6       	ldi	r17, 0x64	; 100
    2ce4:	e1 2e       	mov	r14, r17
    2ce6:	f1 2c       	mov	r15, r1
    2ce8:	00 e0       	ldi	r16, 0x00	; 0
    2cea:	10 e0       	ldi	r17, 0x00	; 0
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	a9 01       	movw	r20, r18
    2cf2:	0e 94 01 33 	call	0x6602	; 0x6602 <map(long, long, long, long, long)>
    2cf6:	86 2f       	mov	r24, r22
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	df 90       	pop	r13
    2d0a:	cf 90       	pop	r12
    2d0c:	bf 90       	pop	r11
    2d0e:	af 90       	pop	r10
    2d10:	08 95       	ret

00002d12 <TMC2209::writeStoredGlobalConfig()>:
_ZN7TMC220923writeStoredGlobalConfigEv():
    2d12:	fc 01       	movw	r30, r24
    2d14:	21 85       	ldd	r18, Z+9	; 0x09
    2d16:	32 85       	ldd	r19, Z+10	; 0x0a
    2d18:	43 85       	ldd	r20, Z+11	; 0x0b
    2d1a:	54 85       	ldd	r21, Z+12	; 0x0c
    2d1c:	60 e0       	ldi	r22, 0x00	; 0
    2d1e:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>

00002d22 <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>:
_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE():
    2d22:	fc 01       	movw	r30, r24
    2d24:	66 83       	std	Z+6, r22	; 0x06
    2d26:	80 ec       	ldi	r24, 0xC0	; 192
    2d28:	81 87       	std	Z+9, r24	; 0x09
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	82 87       	std	Z+10, r24	; 0x0a
    2d2e:	13 86       	std	Z+11, r1	; 0x0b
    2d30:	14 86       	std	Z+12, r1	; 0x0c
    2d32:	cf 01       	movw	r24, r30
    2d34:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <TMC2209::writeStoredGlobalConfig()>

00002d38 <TMC2209::writeStoredDriverCurrent()>:
_ZN7TMC220924writeStoredDriverCurrentEv():
    2d38:	cf 93       	push	r28
    2d3a:	df 93       	push	r29
    2d3c:	ec 01       	movw	r28, r24
    2d3e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2d40:	3e 85       	ldd	r19, Y+14	; 0x0e
    2d42:	4f 85       	ldd	r20, Y+15	; 0x0f
    2d44:	58 89       	ldd	r21, Y+16	; 0x10
    2d46:	60 e1       	ldi	r22, 0x10	; 16
    2d48:	0e 94 26 14 	call	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d4e:	9f 71       	andi	r25, 0x1F	; 31
    2d50:	8a 89       	ldd	r24, Y+18	; 0x12
    2d52:	94 31       	cpi	r25, 0x14	; 20
    2d54:	78 f0       	brcs	.+30     	; 0x2d74 <TMC2209::writeStoredDriverCurrent()+0x3c>
    2d56:	80 68       	ori	r24, 0x80	; 128
    2d58:	8a 8b       	std	Y+18, r24	; 0x12
    2d5a:	8d 89       	ldd	r24, Y+21	; 0x15
    2d5c:	88 23       	and	r24, r24
    2d5e:	61 f0       	breq	.+24     	; 0x2d78 <TMC2209::writeStoredDriverCurrent()+0x40>
    2d60:	29 89       	ldd	r18, Y+17	; 0x11
    2d62:	3a 89       	ldd	r19, Y+18	; 0x12
    2d64:	4b 89       	ldd	r20, Y+19	; 0x13
    2d66:	5c 89       	ldd	r21, Y+20	; 0x14
    2d68:	62 e4       	ldi	r22, 0x42	; 66
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>
    2d74:	8f 77       	andi	r24, 0x7F	; 127
    2d76:	f0 cf       	rjmp	.-32     	; 0x2d58 <TMC2209::writeStoredDriverCurrent()+0x20>
    2d78:	df 91       	pop	r29
    2d7a:	cf 91       	pop	r28
    2d7c:	08 95       	ret

00002d7e <TMC2209::setRunCurrent(unsigned char)>:
_ZN7TMC220913setRunCurrentEh():
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	ec 01       	movw	r28, r24
    2d84:	0e 94 55 16 	call	0x2caa	; 0x2caa <TMC2209::percentToCurrentSetting(unsigned char)>
    2d88:	98 2f       	mov	r25, r24
    2d8a:	9f 71       	andi	r25, 0x1F	; 31
    2d8c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d8e:	80 7e       	andi	r24, 0xE0	; 224
    2d90:	89 2b       	or	r24, r25
    2d92:	8e 87       	std	Y+14, r24	; 0x0e
    2d94:	ce 01       	movw	r24, r28
    2d96:	df 91       	pop	r29
    2d98:	cf 91       	pop	r28
    2d9a:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <TMC2209::writeStoredDriverCurrent()>

00002d9e <TMC2209::setHoldCurrent(unsigned char)>:
_ZN7TMC220914setHoldCurrentEh():
    2d9e:	cf 93       	push	r28
    2da0:	df 93       	push	r29
    2da2:	ec 01       	movw	r28, r24
    2da4:	0e 94 55 16 	call	0x2caa	; 0x2caa <TMC2209::percentToCurrentSetting(unsigned char)>
    2da8:	98 2f       	mov	r25, r24
    2daa:	9f 71       	andi	r25, 0x1F	; 31
    2dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dae:	80 7e       	andi	r24, 0xE0	; 224
    2db0:	89 2b       	or	r24, r25
    2db2:	8d 87       	std	Y+13, r24	; 0x0d
    2db4:	ce 01       	movw	r24, r28
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <TMC2209::writeStoredDriverCurrent()>

00002dbe <TMC2209::minimizeMotorCurrent()>:
_ZN7TMC220920minimizeMotorCurrentEv():
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	26 85       	ldd	r18, Z+14	; 0x0e
    2dc2:	20 7e       	andi	r18, 0xE0	; 224
    2dc4:	26 87       	std	Z+14, r18	; 0x0e
    2dc6:	25 85       	ldd	r18, Z+13	; 0x0d
    2dc8:	20 7e       	andi	r18, 0xE0	; 224
    2dca:	25 87       	std	Z+13, r18	; 0x0d
    2dcc:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <TMC2209::writeStoredDriverCurrent()>

00002dd0 <TMC2209::writeStoredChopperConfig()>:
_ZN7TMC220924writeStoredChopperConfigEv():
    2dd0:	fc 01       	movw	r30, r24
    2dd2:	26 89       	ldd	r18, Z+22	; 0x16
    2dd4:	37 89       	ldd	r19, Z+23	; 0x17
    2dd6:	40 8d       	ldd	r20, Z+24	; 0x18
    2dd8:	51 8d       	ldd	r21, Z+25	; 0x19
    2dda:	6c e6       	ldi	r22, 0x6C	; 108
    2ddc:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>

00002de0 <TMC2209::enable()>:
_ZN7TMC22096enableEv():
    2de0:	cf 93       	push	r28
    2de2:	df 93       	push	r29
    2de4:	ec 01       	movw	r28, r24
    2de6:	8f 81       	ldd	r24, Y+7	; 0x07
    2de8:	98 85       	ldd	r25, Y+8	; 0x08
    2dea:	97 fd       	sbrc	r25, 7
    2dec:	03 c0       	rjmp	.+6      	; 0x2df4 <TMC2209::enable()+0x14>
    2dee:	60 e0       	ldi	r22, 0x00	; 0
    2df0:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
    2df4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2df6:	9f 70       	andi	r25, 0x0F	; 15
    2df8:	8e 89       	ldd	r24, Y+22	; 0x16
    2dfa:	80 7f       	andi	r24, 0xF0	; 240
    2dfc:	89 2b       	or	r24, r25
    2dfe:	8e 8b       	std	Y+22, r24	; 0x16
    2e00:	ce 01       	movw	r24, r28
    2e02:	df 91       	pop	r29
    2e04:	cf 91       	pop	r28
    2e06:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <TMC2209::writeStoredChopperConfig()>

00002e0a <TMC2209::disable()>:
_ZN7TMC22097disableEv():
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	ec 01       	movw	r28, r24
    2e10:	8f 81       	ldd	r24, Y+7	; 0x07
    2e12:	98 85       	ldd	r25, Y+8	; 0x08
    2e14:	97 fd       	sbrc	r25, 7
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <TMC2209::disable()+0x14>
    2e18:	61 e0       	ldi	r22, 0x01	; 1
    2e1a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
    2e1e:	8e 89       	ldd	r24, Y+22	; 0x16
    2e20:	80 7f       	andi	r24, 0xF0	; 240
    2e22:	8e 8b       	std	Y+22, r24	; 0x16
    2e24:	ce 01       	movw	r24, r28
    2e26:	df 91       	pop	r29
    2e28:	cf 91       	pop	r28
    2e2a:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <TMC2209::writeStoredChopperConfig()>

00002e2e <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>:
_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh():
    2e2e:	dc 01       	movw	r26, r24
    2e30:	59 96       	adiw	r26, 0x19	; 25
    2e32:	9c 91       	ld	r25, X
    2e34:	59 97       	sbiw	r26, 0x19	; 25
    2e36:	68 30       	cpi	r22, 0x08	; 8
    2e38:	20 f5       	brcc	.+72     	; 0x2e82 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x54>
    2e3a:	e6 2f       	mov	r30, r22
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	ec 5d       	subi	r30, 0xDC	; 220
    2e40:	f8 4e       	sbci	r31, 0xE8	; 232
    2e42:	90 7f       	andi	r25, 0xF0	; 240
    2e44:	0c 94 b6 38 	jmp	0x716c	; 0x716c <__tablejump2__>
    2e48:	2c 17       	cp	r18, r28
    2e4a:	33 17       	cp	r19, r19
    2e4c:	35 17       	cp	r19, r21
    2e4e:	37 17       	cp	r19, r23
    2e50:	39 17       	cp	r19, r25
    2e52:	3b 17       	cp	r19, r27
    2e54:	3d 17       	cp	r19, r29
    2e56:	3f 17       	cp	r19, r31
    2e58:	98 60       	ori	r25, 0x08	; 8
    2e5a:	59 96       	adiw	r26, 0x19	; 25
    2e5c:	9c 93       	st	X, r25
    2e5e:	59 97       	sbiw	r26, 0x19	; 25
    2e60:	cd 01       	movw	r24, r26
    2e62:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <TMC2209::writeStoredChopperConfig()>
    2e66:	97 60       	ori	r25, 0x07	; 7
    2e68:	f8 cf       	rjmp	.-16     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e6a:	96 60       	ori	r25, 0x06	; 6
    2e6c:	f6 cf       	rjmp	.-20     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e6e:	95 60       	ori	r25, 0x05	; 5
    2e70:	f4 cf       	rjmp	.-24     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e72:	94 60       	ori	r25, 0x04	; 4
    2e74:	f2 cf       	rjmp	.-28     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e76:	93 60       	ori	r25, 0x03	; 3
    2e78:	f0 cf       	rjmp	.-32     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e7a:	92 60       	ori	r25, 0x02	; 2
    2e7c:	ee cf       	rjmp	.-36     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e7e:	91 60       	ori	r25, 0x01	; 1
    2e80:	ec cf       	rjmp	.-40     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    2e82:	90 7f       	andi	r25, 0xF0	; 240
    2e84:	ea cf       	rjmp	.-44     	; 0x2e5a <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>

00002e86 <TMC2209::setMicrostepsPerStep(unsigned int)>:
_ZN7TMC220920setMicrostepsPerStepEj():
    2e86:	9b 01       	movw	r18, r22
    2e88:	36 95       	lsr	r19
    2e8a:	27 95       	ror	r18
    2e8c:	70 e0       	ldi	r23, 0x00	; 0
    2e8e:	60 e0       	ldi	r22, 0x00	; 0
    2e90:	21 15       	cp	r18, r1
    2e92:	31 05       	cpc	r19, r1
    2e94:	29 f0       	breq	.+10     	; 0x2ea0 <TMC2209::setMicrostepsPerStep(unsigned int)+0x1a>
    2e96:	36 95       	lsr	r19
    2e98:	27 95       	ror	r18
    2e9a:	6f 5f       	subi	r22, 0xFF	; 255
    2e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e9e:	f8 cf       	rjmp	.-16     	; 0x2e90 <TMC2209::setMicrostepsPerStep(unsigned int)+0xa>
    2ea0:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>

00002ea4 <TMC2209::writeStoredPwmConfig()>:
_ZN7TMC220920writeStoredPwmConfigEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:961
}

void TMC2209::writeStoredPwmConfig()
{
  write(ADDRESS_PWMCONF, pwm_config_.bytes);
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	23 8d       	ldd	r18, Z+27	; 0x1b
    2ea8:	34 8d       	ldd	r19, Z+28	; 0x1c
    2eaa:	45 8d       	ldd	r20, Z+29	; 0x1d
    2eac:	56 8d       	ldd	r21, Z+30	; 0x1e
    2eae:	60 e7       	ldi	r22, 0x70	; 112
    2eb0:	0c 94 26 14 	jmp	0x284c	; 0x284c <TMC2209::write(unsigned char, unsigned long)>

00002eb4 <TMC2209::setStandstillMode(TMC2209::StandstillMode)>:
_ZN7TMC220917setStandstillModeENS_14StandstillModeE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:240
  global_config_.shaft = 0;
  writeStoredGlobalConfig();
}

void TMC2209::setStandstillMode(TMC2209::StandstillMode mode)
{
    2eb4:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:241
  pwm_config_.freewheel = mode;
    2eb6:	63 70       	andi	r22, 0x03	; 3
    2eb8:	96 2f       	mov	r25, r22
    2eba:	92 95       	swap	r25
    2ebc:	90 7f       	andi	r25, 0xF0	; 240
    2ebe:	65 8d       	ldd	r22, Z+29	; 0x1d
    2ec0:	6f 7c       	andi	r22, 0xCF	; 207
    2ec2:	69 2b       	or	r22, r25
    2ec4:	65 8f       	std	Z+29, r22	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:242
  writeStoredPwmConfig();
    2ec6:	cf 01       	movw	r24, r30
    2ec8:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <TMC2209::writeStoredPwmConfig()>

00002ecc <TMC2209::enableAutomaticCurrentScaling()>:
_ZN7TMC220929enableAutomaticCurrentScalingEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:247
}

void TMC2209::enableAutomaticCurrentScaling()
{
  pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
    2ecc:	fc 01       	movw	r30, r24
    2ece:	25 8d       	ldd	r18, Z+29	; 0x1d
    2ed0:	24 60       	ori	r18, 0x04	; 4
    2ed2:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:248
  writeStoredPwmConfig();
    2ed4:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <TMC2209::writeStoredPwmConfig()>

00002ed8 <TMC2209::disableAutomaticCurrentScaling()>:
_ZN7TMC220930disableAutomaticCurrentScalingEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:253
}

void TMC2209::disableAutomaticCurrentScaling()
{
  pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
    2ed8:	fc 01       	movw	r30, r24
    2eda:	25 8d       	ldd	r18, Z+29	; 0x1d
    2edc:	2b 7f       	andi	r18, 0xFB	; 251
    2ede:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:254
  writeStoredPwmConfig();
    2ee0:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <TMC2209::writeStoredPwmConfig()>

00002ee4 <TMC2209::enableAutomaticGradientAdaptation()>:
_ZN7TMC220933enableAutomaticGradientAdaptationEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:259
}

void TMC2209::enableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	25 8d       	ldd	r18, Z+29	; 0x1d
    2ee8:	28 60       	ori	r18, 0x08	; 8
    2eea:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:260
  writeStoredPwmConfig();
    2eec:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <TMC2209::writeStoredPwmConfig()>

00002ef0 <TMC2209::disableAutomaticGradientAdaptation()>:
_ZN7TMC220934disableAutomaticGradientAdaptationEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:265
}

void TMC2209::disableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	25 8d       	ldd	r18, Z+29	; 0x1d
    2ef4:	27 7f       	andi	r18, 0xF7	; 247
    2ef6:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:266
  writeStoredPwmConfig();
    2ef8:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <TMC2209::writeStoredPwmConfig()>

00002efc <TMC2209::initialize(long, TMC2209::SerialAddress)>:
_ZN7TMC220910initializeElNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:595
}

// private
void TMC2209::initialize(long serial_baud_rate,
  SerialAddress serial_address)
{
    2efc:	cf 93       	push	r28
    2efe:	df 93       	push	r29
    2f00:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:596
  serial_baud_rate_ = serial_baud_rate;
    2f02:	4a 83       	std	Y+2, r20	; 0x02
    2f04:	5b 83       	std	Y+3, r21	; 0x03
    2f06:	6c 83       	std	Y+4, r22	; 0x04
    2f08:	7d 83       	std	Y+5, r23	; 0x05
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:598

  setOperationModeToSerial(serial_address);
    2f0a:	b9 01       	movw	r22, r18
    2f0c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:599
  setRegistersToDefaults();
    2f10:	ce 01       	movw	r24, r28
    2f12:	0e 94 ba 14 	call	0x2974	; 0x2974 <TMC2209::setRegistersToDefaults()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:601

  minimizeMotorCurrent();
    2f16:	ce 01       	movw	r24, r28
    2f18:	0e 94 df 16 	call	0x2dbe	; 0x2dbe <TMC2209::minimizeMotorCurrent()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:602
  disable();
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <TMC2209::disable()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:603
  disableAutomaticCurrentScaling();
    2f22:	ce 01       	movw	r24, r28
    2f24:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <TMC2209::disableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:604
  disableAutomaticGradientAdaptation();
    2f28:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:605
}
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:604
  setRegistersToDefaults();

  minimizeMotorCurrent();
  disable();
  disableAutomaticCurrentScaling();
  disableAutomaticGradientAdaptation();
    2f2e:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <TMC2209::disableAutomaticGradientAdaptation()>

00002f32 <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>:
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:70
}
#else
void TMC2209::setup(HardwareSerial & serial,
  long serial_baud_rate,
  SerialAddress serial_address)
{
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	ec 01       	movw	r28, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	69 01       	movw	r12, r18
    2f48:	7a 01       	movw	r14, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:71
  hardware_serial_ptr_ = &serial;
    2f4a:	79 83       	std	Y+1, r23	; 0x01
    2f4c:	68 83       	st	Y, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:72
  hardware_serial_ptr_->end();
    2f4e:	0e 94 6b 30 	call	0x60d6	; 0x60d6 <HardwareSerial::end()>
_ZN14HardwareSerial5beginEm():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    2f52:	26 e0       	ldi	r18, 0x06	; 6
    2f54:	b7 01       	movw	r22, r14
    2f56:	a6 01       	movw	r20, r12
    2f58:	88 81       	ld	r24, Y
    2f5a:	99 81       	ldd	r25, Y+1	; 0x01
    2f5c:	0e 94 13 30 	call	0x6026	; 0x6026 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:75
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    2f60:	98 01       	movw	r18, r16
    2f62:	b7 01       	movw	r22, r14
    2f64:	a6 01       	movw	r20, r12
    2f66:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:76
}
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	ff 90       	pop	r15
    2f72:	ef 90       	pop	r14
    2f74:	df 90       	pop	r13
    2f76:	cf 90       	pop	r12
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:75
{
  hardware_serial_ptr_ = &serial;
  hardware_serial_ptr_->end();
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    2f78:	0c 94 7e 17 	jmp	0x2efc	; 0x2efc <TMC2209::initialize(long, TMC2209::SerialAddress)>

00002f7c <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD2Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:644
// Blocks until the target position is reached and stopped
void AccelStepper::runToPosition()
{
    while (run())
	YIELD; // Let system housekeeping occur
}
    2f7c:	08 95       	ret

00002f7e <AccelStepper::computeNewSpeed()>:
_ZN12AccelStepper15computeNewSpeedEv():
    2f7e:	4f 92       	push	r4
    2f80:	5f 92       	push	r5
    2f82:	6f 92       	push	r6
    2f84:	7f 92       	push	r7
    2f86:	8f 92       	push	r8
    2f88:	9f 92       	push	r9
    2f8a:	af 92       	push	r10
    2f8c:	bf 92       	push	r11
    2f8e:	cf 92       	push	r12
    2f90:	df 92       	push	r13
    2f92:	ef 92       	push	r14
    2f94:	ff 92       	push	r15
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	ec 01       	movw	r28, r24
_ZN12AccelStepper12distanceToGoEv():
    2fa0:	cc 88       	ldd	r12, Y+20	; 0x14
    2fa2:	dd 88       	ldd	r13, Y+21	; 0x15
    2fa4:	ee 88       	ldd	r14, Y+22	; 0x16
    2fa6:	ff 88       	ldd	r15, Y+23	; 0x17
    2fa8:	88 89       	ldd	r24, Y+16	; 0x10
    2faa:	99 89       	ldd	r25, Y+17	; 0x11
    2fac:	aa 89       	ldd	r26, Y+18	; 0x12
    2fae:	bb 89       	ldd	r27, Y+19	; 0x13
    2fb0:	c8 1a       	sub	r12, r24
    2fb2:	d9 0a       	sbc	r13, r25
    2fb4:	ea 0a       	sbc	r14, r26
    2fb6:	fb 0a       	sbc	r15, r27
_ZN12AccelStepper15computeNewSpeedEv():
    2fb8:	68 8d       	ldd	r22, Y+24	; 0x18
    2fba:	79 8d       	ldd	r23, Y+25	; 0x19
    2fbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2fbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2fc0:	9b 01       	movw	r18, r22
    2fc2:	ac 01       	movw	r20, r24
    2fc4:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    2fc8:	4b 01       	movw	r8, r22
    2fca:	5c 01       	movw	r10, r24
    2fcc:	68 a1       	ldd	r22, Y+32	; 0x20
    2fce:	79 a1       	ldd	r23, Y+33	; 0x21
    2fd0:	8a a1       	ldd	r24, Y+34	; 0x22
    2fd2:	9b a1       	ldd	r25, Y+35	; 0x23
    2fd4:	9b 01       	movw	r18, r22
    2fd6:	ac 01       	movw	r20, r24
    2fd8:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    2fdc:	9b 01       	movw	r18, r22
    2fde:	ac 01       	movw	r20, r24
    2fe0:	c5 01       	movw	r24, r10
    2fe2:	b4 01       	movw	r22, r8
    2fe4:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    2fe8:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__fixsfsi>
    2fec:	c1 14       	cp	r12, r1
    2fee:	d1 04       	cpc	r13, r1
    2ff0:	e1 04       	cpc	r14, r1
    2ff2:	f1 04       	cpc	r15, r1
    2ff4:	09 f0       	breq	.+2      	; 0x2ff8 <AccelStepper::computeNewSpeed()+0x7a>
    2ff6:	b6 c0       	rjmp	.+364    	; 0x3164 <AccelStepper::computeNewSpeed()+0x1e6>
    2ff8:	62 30       	cpi	r22, 0x02	; 2
    2ffa:	71 05       	cpc	r23, r1
    2ffc:	81 05       	cpc	r24, r1
    2ffe:	91 05       	cpc	r25, r1
    3000:	0c f0       	brlt	.+2      	; 0x3004 <AccelStepper::computeNewSpeed()+0x86>
    3002:	d0 c0       	rjmp	.+416    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    3004:	1b 82       	std	Y+3, r1	; 0x03
    3006:	1c 82       	std	Y+4, r1	; 0x04
    3008:	1d 82       	std	Y+5, r1	; 0x05
    300a:	1e 82       	std	Y+6, r1	; 0x06
    300c:	18 8e       	std	Y+24, r1	; 0x18
    300e:	19 8e       	std	Y+25, r1	; 0x19
    3010:	1a 8e       	std	Y+26, r1	; 0x1a
    3012:	1b 8e       	std	Y+27, r1	; 0x1b
    3014:	1c aa       	std	Y+52, r1	; 0x34
    3016:	1d aa       	std	Y+53, r1	; 0x35
    3018:	1e aa       	std	Y+54, r1	; 0x36
    301a:	1f aa       	std	Y+55, r1	; 0x37
    301c:	c1 2c       	mov	r12, r1
    301e:	d1 2c       	mov	r13, r1
    3020:	76 01       	movw	r14, r12
    3022:	c7 01       	movw	r24, r14
    3024:	b6 01       	movw	r22, r12
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	ff 90       	pop	r15
    3030:	ef 90       	pop	r14
    3032:	df 90       	pop	r13
    3034:	cf 90       	pop	r12
    3036:	bf 90       	pop	r11
    3038:	af 90       	pop	r10
    303a:	9f 90       	pop	r9
    303c:	8f 90       	pop	r8
    303e:	7f 90       	pop	r7
    3040:	6f 90       	pop	r6
    3042:	5f 90       	pop	r5
    3044:	4f 90       	pop	r4
    3046:	08 95       	ret
    3048:	10 16       	cp	r1, r16
    304a:	11 06       	cpc	r1, r17
    304c:	12 06       	cpc	r1, r18
    304e:	13 06       	cpc	r1, r19
    3050:	b4 f4       	brge	.+44     	; 0x307e <AccelStepper::computeNewSpeed()+0x100>
    3052:	6c 15       	cp	r22, r12
    3054:	7d 05       	cpc	r23, r13
    3056:	8e 05       	cpc	r24, r14
    3058:	9f 05       	cpc	r25, r15
    305a:	1c f4       	brge	.+6      	; 0x3062 <AccelStepper::computeNewSpeed()+0xe4>
    305c:	2a 81       	ldd	r18, Y+2	; 0x02
    305e:	21 11       	cpse	r18, r1
    3060:	a1 c0       	rjmp	.+322    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    3062:	9b 01       	movw	r18, r22
    3064:	ac 01       	movw	r20, r24
    3066:	88 27       	eor	r24, r24
    3068:	99 27       	eor	r25, r25
    306a:	dc 01       	movw	r26, r24
    306c:	82 1b       	sub	r24, r18
    306e:	93 0b       	sbc	r25, r19
    3070:	a4 0b       	sbc	r26, r20
    3072:	b5 0b       	sbc	r27, r21
    3074:	8c ab       	std	Y+52, r24	; 0x34
    3076:	9d ab       	std	Y+53, r25	; 0x35
    3078:	ae ab       	std	Y+54, r26	; 0x36
    307a:	bf ab       	std	Y+55, r27	; 0x37
    307c:	93 c0       	rjmp	.+294    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    307e:	01 15       	cp	r16, r1
    3080:	11 05       	cpc	r17, r1
    3082:	21 05       	cpc	r18, r1
    3084:	31 05       	cpc	r19, r1
    3086:	09 f4       	brne	.+2      	; 0x308a <AccelStepper::computeNewSpeed()+0x10c>
    3088:	8d c0       	rjmp	.+282    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    308a:	6c 15       	cp	r22, r12
    308c:	7d 05       	cpc	r23, r13
    308e:	8e 05       	cpc	r24, r14
    3090:	9f 05       	cpc	r25, r15
    3092:	0c f0       	brlt	.+2      	; 0x3096 <AccelStepper::computeNewSpeed()+0x118>
    3094:	87 c0       	rjmp	.+270    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	88 23       	and	r24, r24
    309a:	09 f4       	brne	.+2      	; 0x309e <AccelStepper::computeNewSpeed()+0x120>
    309c:	83 c0       	rjmp	.+262    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    309e:	30 95       	com	r19
    30a0:	20 95       	com	r18
    30a2:	10 95       	com	r17
    30a4:	01 95       	neg	r16
    30a6:	1f 4f       	sbci	r17, 0xFF	; 255
    30a8:	2f 4f       	sbci	r18, 0xFF	; 255
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	0c ab       	std	Y+52, r16	; 0x34
    30ae:	1d ab       	std	Y+53, r17	; 0x35
    30b0:	2e ab       	std	Y+54, r18	; 0x36
    30b2:	3f ab       	std	Y+55, r19	; 0x37
    30b4:	77 c0       	rjmp	.+238    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    30b6:	01 15       	cp	r16, r1
    30b8:	11 05       	cpc	r17, r1
    30ba:	21 05       	cpc	r18, r1
    30bc:	31 05       	cpc	r19, r1
    30be:	09 f4       	brne	.+2      	; 0x30c2 <AccelStepper::computeNewSpeed()+0x144>
    30c0:	71 c0       	rjmp	.+226    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    30c2:	88 24       	eor	r8, r8
    30c4:	99 24       	eor	r9, r9
    30c6:	54 01       	movw	r10, r8
    30c8:	8c 18       	sub	r8, r12
    30ca:	9d 08       	sbc	r9, r13
    30cc:	ae 08       	sbc	r10, r14
    30ce:	bf 08       	sbc	r11, r15
    30d0:	68 15       	cp	r22, r8
    30d2:	79 05       	cpc	r23, r9
    30d4:	8a 05       	cpc	r24, r10
    30d6:	9b 05       	cpc	r25, r11
    30d8:	0c f0       	brlt	.+2      	; 0x30dc <AccelStepper::computeNewSpeed()+0x15e>
    30da:	64 c0       	rjmp	.+200    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	81 11       	cpse	r24, r1
    30e0:	61 c0       	rjmp	.+194    	; 0x31a4 <AccelStepper::computeNewSpeed()+0x226>
    30e2:	dd cf       	rjmp	.-70     	; 0x309e <AccelStepper::computeNewSpeed()+0x120>
    30e4:	cc ac       	ldd	r12, Y+60	; 0x3c
    30e6:	dd ac       	ldd	r13, Y+61	; 0x3d
    30e8:	ee ac       	ldd	r14, Y+62	; 0x3e
    30ea:	ff ac       	ldd	r15, Y+63	; 0x3f
    30ec:	a7 01       	movw	r20, r14
    30ee:	96 01       	movw	r18, r12
    30f0:	c7 01       	movw	r24, r14
    30f2:	b6 01       	movw	r22, r12
    30f4:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    30f8:	2b 01       	movw	r4, r22
    30fa:	3c 01       	movw	r6, r24
    30fc:	c5 01       	movw	r24, r10
    30fe:	b4 01       	movw	r22, r8
    3100:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e8       	ldi	r20, 0x80	; 128
    310a:	50 e4       	ldi	r21, 0x40	; 64
    310c:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e8       	ldi	r20, 0x80	; 128
    3116:	5f e3       	ldi	r21, 0x3F	; 63
    3118:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    311c:	9b 01       	movw	r18, r22
    311e:	ac 01       	movw	r20, r24
    3120:	c3 01       	movw	r24, r6
    3122:	b2 01       	movw	r22, r4
    3124:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    3128:	9b 01       	movw	r18, r22
    312a:	ac 01       	movw	r20, r24
    312c:	c7 01       	movw	r24, r14
    312e:	b6 01       	movw	r22, r12
    3130:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    3134:	3b 01       	movw	r6, r22
    3136:	6c 01       	movw	r12, r24
    3138:	fe 01       	movw	r30, r28
    313a:	e0 5c       	subi	r30, 0xC0	; 192
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	e0 80       	ld	r14, Z
    3140:	f1 80       	ldd	r15, Z+1	; 0x01
    3142:	02 81       	ldd	r16, Z+2	; 0x02
    3144:	13 81       	ldd	r17, Z+3	; 0x03
    3146:	97 01       	movw	r18, r14
    3148:	a8 01       	movw	r20, r16
    314a:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <__gesf2>
    314e:	18 16       	cp	r1, r24
    3150:	14 f4       	brge	.+4      	; 0x3156 <AccelStepper::computeNewSpeed()+0x1d8>
    3152:	73 01       	movw	r14, r6
    3154:	86 01       	movw	r16, r12
    3156:	c7 01       	movw	r24, r14
    3158:	d8 01       	movw	r26, r16
    315a:	8c af       	std	Y+60, r24	; 0x3c
    315c:	9d af       	std	Y+61, r25	; 0x3d
    315e:	ae af       	std	Y+62, r26	; 0x3e
    3160:	bf af       	std	Y+63, r27	; 0x3f
    3162:	3a c0       	rjmp	.+116    	; 0x31d8 <AccelStepper::computeNewSpeed()+0x25a>
    3164:	0c a9       	ldd	r16, Y+52	; 0x34
    3166:	1d a9       	ldd	r17, Y+53	; 0x35
    3168:	2e a9       	ldd	r18, Y+54	; 0x36
    316a:	3f a9       	ldd	r19, Y+55	; 0x37
    316c:	1c 14       	cp	r1, r12
    316e:	1d 04       	cpc	r1, r13
    3170:	1e 04       	cpc	r1, r14
    3172:	1f 04       	cpc	r1, r15
    3174:	0c f4       	brge	.+2      	; 0x3178 <AccelStepper::computeNewSpeed()+0x1fa>
    3176:	68 cf       	rjmp	.-304    	; 0x3048 <AccelStepper::computeNewSpeed()+0xca>
    3178:	10 16       	cp	r1, r16
    317a:	11 06       	cpc	r1, r17
    317c:	12 06       	cpc	r1, r18
    317e:	13 06       	cpc	r1, r19
    3180:	0c f0       	brlt	.+2      	; 0x3184 <AccelStepper::computeNewSpeed()+0x206>
    3182:	99 cf       	rjmp	.-206    	; 0x30b6 <AccelStepper::computeNewSpeed()+0x138>
    3184:	00 27       	eor	r16, r16
    3186:	11 27       	eor	r17, r17
    3188:	98 01       	movw	r18, r16
    318a:	0c 19       	sub	r16, r12
    318c:	1d 09       	sbc	r17, r13
    318e:	2e 09       	sbc	r18, r14
    3190:	3f 09       	sbc	r19, r15
    3192:	60 17       	cp	r22, r16
    3194:	71 07       	cpc	r23, r17
    3196:	82 07       	cpc	r24, r18
    3198:	93 07       	cpc	r25, r19
    319a:	0c f0       	brlt	.+2      	; 0x319e <AccelStepper::computeNewSpeed()+0x220>
    319c:	62 cf       	rjmp	.-316    	; 0x3062 <AccelStepper::computeNewSpeed()+0xe4>
    319e:	2a 81       	ldd	r18, Y+2	; 0x02
    31a0:	21 11       	cpse	r18, r1
    31a2:	5f cf       	rjmp	.-322    	; 0x3062 <AccelStepper::computeNewSpeed()+0xe4>
    31a4:	8c a8       	ldd	r8, Y+52	; 0x34
    31a6:	9d a8       	ldd	r9, Y+53	; 0x35
    31a8:	ae a8       	ldd	r10, Y+54	; 0x36
    31aa:	bf a8       	ldd	r11, Y+55	; 0x37
    31ac:	81 14       	cp	r8, r1
    31ae:	91 04       	cpc	r9, r1
    31b0:	a1 04       	cpc	r10, r1
    31b2:	b1 04       	cpc	r11, r1
    31b4:	09 f0       	breq	.+2      	; 0x31b8 <AccelStepper::computeNewSpeed()+0x23a>
    31b6:	96 cf       	rjmp	.-212    	; 0x30e4 <AccelStepper::computeNewSpeed()+0x166>
    31b8:	88 ad       	ldd	r24, Y+56	; 0x38
    31ba:	99 ad       	ldd	r25, Y+57	; 0x39
    31bc:	aa ad       	ldd	r26, Y+58	; 0x3a
    31be:	bb ad       	ldd	r27, Y+59	; 0x3b
    31c0:	8c af       	std	Y+60, r24	; 0x3c
    31c2:	9d af       	std	Y+61, r25	; 0x3d
    31c4:	ae af       	std	Y+62, r26	; 0x3e
    31c6:	bf af       	std	Y+63, r27	; 0x3f
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	1c 14       	cp	r1, r12
    31cc:	1d 04       	cpc	r1, r13
    31ce:	1e 04       	cpc	r1, r14
    31d0:	1f 04       	cpc	r1, r15
    31d2:	0c f0       	brlt	.+2      	; 0x31d6 <AccelStepper::computeNewSpeed()+0x258>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	3f ef       	ldi	r19, 0xFF	; 255
    31da:	83 1a       	sub	r8, r19
    31dc:	93 0a       	sbc	r9, r19
    31de:	a3 0a       	sbc	r10, r19
    31e0:	b3 0a       	sbc	r11, r19
    31e2:	8c aa       	std	Y+52, r8	; 0x34
    31e4:	9d aa       	std	Y+53, r9	; 0x35
    31e6:	ae aa       	std	Y+54, r10	; 0x36
    31e8:	bf aa       	std	Y+55, r11	; 0x37
    31ea:	8c ac       	ldd	r8, Y+60	; 0x3c
    31ec:	9d ac       	ldd	r9, Y+61	; 0x3d
    31ee:	ae ac       	ldd	r10, Y+62	; 0x3e
    31f0:	bf ac       	ldd	r11, Y+63	; 0x3f
    31f2:	c5 01       	movw	r24, r10
    31f4:	b4 01       	movw	r22, r8
    31f6:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <__fixunssfsi>
    31fa:	6b 01       	movw	r12, r22
    31fc:	7c 01       	movw	r14, r24
    31fe:	cb 82       	std	Y+3, r12	; 0x03
    3200:	dc 82       	std	Y+4, r13	; 0x04
    3202:	ed 82       	std	Y+5, r14	; 0x05
    3204:	fe 82       	std	Y+6, r15	; 0x06
    3206:	a5 01       	movw	r20, r10
    3208:	94 01       	movw	r18, r8
    320a:	60 e0       	ldi	r22, 0x00	; 0
    320c:	74 e2       	ldi	r23, 0x24	; 36
    320e:	84 e7       	ldi	r24, 0x74	; 116
    3210:	99 e4       	ldi	r25, 0x49	; 73
    3212:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    3216:	68 8f       	std	Y+24, r22	; 0x18
    3218:	79 8f       	std	Y+25, r23	; 0x19
    321a:	8a 8f       	std	Y+26, r24	; 0x1a
    321c:	9b 8f       	std	Y+27, r25	; 0x1b
    321e:	2a 81       	ldd	r18, Y+2	; 0x02
    3220:	21 11       	cpse	r18, r1
    3222:	ff ce       	rjmp	.-514    	; 0x3022 <AccelStepper::computeNewSpeed()+0xa4>
    3224:	90 58       	subi	r25, 0x80	; 128
    3226:	68 8f       	std	Y+24, r22	; 0x18
    3228:	79 8f       	std	Y+25, r23	; 0x19
    322a:	8a 8f       	std	Y+26, r24	; 0x1a
    322c:	9b 8f       	std	Y+27, r25	; 0x1b
    322e:	f9 ce       	rjmp	.-526    	; 0x3022 <AccelStepper::computeNewSpeed()+0xa4>

00003230 <AccelStepper::step(long)>:
_ZN12AccelStepper4stepEl():
    3230:	dc 01       	movw	r26, r24
    3232:	17 96       	adiw	r26, 0x07	; 7
    3234:	ec 91       	ld	r30, X
    3236:	17 97       	sbiw	r26, 0x07	; 7
    3238:	e9 30       	cpi	r30, 0x09	; 9
    323a:	08 f0       	brcs	.+2      	; 0x323e <AccelStepper::step(long)+0xe>
    323c:	38 c0       	rjmp	.+112    	; 0x32ae <AccelStepper::step(long)+0x7e>
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	ec 5d       	subi	r30, 0xDC	; 220
    3242:	f6 4e       	sbci	r31, 0xE6	; 230
    3244:	0c 94 b6 38 	jmp	0x716c	; 0x716c <__tablejump2__>
    3248:	2d 19       	sub	r18, r13
    324a:	33 19       	sub	r19, r3
    324c:	39 19       	sub	r19, r9
    324e:	3f 19       	sub	r19, r15
    3250:	45 19       	sub	r20, r5
    3252:	57 19       	sub	r21, r7
    3254:	4b 19       	sub	r20, r11
    3256:	57 19       	sub	r21, r7
    3258:	51 19       	sub	r21, r1
    325a:	ed 91       	ld	r30, X+
    325c:	fc 91       	ld	r31, X
    325e:	06 84       	ldd	r0, Z+14	; 0x0e
    3260:	f7 85       	ldd	r31, Z+15	; 0x0f
    3262:	e0 2d       	mov	r30, r0
    3264:	09 94       	ijmp
    3266:	ed 91       	ld	r30, X+
    3268:	fc 91       	ld	r31, X
    326a:	00 88       	ldd	r0, Z+16	; 0x10
    326c:	f1 89       	ldd	r31, Z+17	; 0x11
    326e:	e0 2d       	mov	r30, r0
    3270:	f9 cf       	rjmp	.-14     	; 0x3264 <AccelStepper::step(long)+0x34>
    3272:	ed 91       	ld	r30, X+
    3274:	fc 91       	ld	r31, X
    3276:	02 88       	ldd	r0, Z+18	; 0x12
    3278:	f3 89       	ldd	r31, Z+19	; 0x13
    327a:	e0 2d       	mov	r30, r0
    327c:	f3 cf       	rjmp	.-26     	; 0x3264 <AccelStepper::step(long)+0x34>
    327e:	ed 91       	ld	r30, X+
    3280:	fc 91       	ld	r31, X
    3282:	04 88       	ldd	r0, Z+20	; 0x14
    3284:	f5 89       	ldd	r31, Z+21	; 0x15
    3286:	e0 2d       	mov	r30, r0
    3288:	ed cf       	rjmp	.-38     	; 0x3264 <AccelStepper::step(long)+0x34>
    328a:	ed 91       	ld	r30, X+
    328c:	fc 91       	ld	r31, X
    328e:	06 88       	ldd	r0, Z+22	; 0x16
    3290:	f7 89       	ldd	r31, Z+23	; 0x17
    3292:	e0 2d       	mov	r30, r0
    3294:	e7 cf       	rjmp	.-50     	; 0x3264 <AccelStepper::step(long)+0x34>
    3296:	ed 91       	ld	r30, X+
    3298:	fc 91       	ld	r31, X
    329a:	00 8c       	ldd	r0, Z+24	; 0x18
    329c:	f1 8d       	ldd	r31, Z+25	; 0x19
    329e:	e0 2d       	mov	r30, r0
    32a0:	e1 cf       	rjmp	.-62     	; 0x3264 <AccelStepper::step(long)+0x34>
    32a2:	ed 91       	ld	r30, X+
    32a4:	fc 91       	ld	r31, X
    32a6:	02 8c       	ldd	r0, Z+26	; 0x1a
    32a8:	f3 8d       	ldd	r31, Z+27	; 0x1b
    32aa:	e0 2d       	mov	r30, r0
    32ac:	db cf       	rjmp	.-74     	; 0x3264 <AccelStepper::step(long)+0x34>
    32ae:	08 95       	ret

000032b0 <AccelStepper::step6(long)>:
_ZN12AccelStepper5step6El():
    32b0:	cf 93       	push	r28
    32b2:	df 93       	push	r29
    32b4:	ec 01       	movw	r28, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	ba 01       	movw	r22, r20
    32ba:	26 e0       	ldi	r18, 0x06	; 6
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	50 e0       	ldi	r21, 0x00	; 0
    32c2:	0e 94 97 38 	call	0x712e	; 0x712e <__divmodsi4>
    32c6:	62 30       	cpi	r22, 0x02	; 2
    32c8:	71 05       	cpc	r23, r1
    32ca:	81 05       	cpc	r24, r1
    32cc:	91 05       	cpc	r25, r1
    32ce:	89 f1       	breq	.+98     	; 0x3332 <AccelStepper::step6(long)+0x82>
    32d0:	6c f4       	brge	.+26     	; 0x32ec <AccelStepper::step6(long)+0x3c>
    32d2:	61 15       	cp	r22, r1
    32d4:	71 05       	cpc	r23, r1
    32d6:	81 05       	cpc	r24, r1
    32d8:	91 05       	cpc	r25, r1
    32da:	d1 f0       	breq	.+52     	; 0x3310 <AccelStepper::step6(long)+0x60>
    32dc:	61 30       	cpi	r22, 0x01	; 1
    32de:	71 05       	cpc	r23, r1
    32e0:	81 05       	cpc	r24, r1
    32e2:	91 05       	cpc	r25, r1
    32e4:	f9 f0       	breq	.+62     	; 0x3324 <AccelStepper::step6(long)+0x74>
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret
    32ec:	64 30       	cpi	r22, 0x04	; 4
    32ee:	71 05       	cpc	r23, r1
    32f0:	81 05       	cpc	r24, r1
    32f2:	91 05       	cpc	r25, r1
    32f4:	61 f1       	breq	.+88     	; 0x334e <AccelStepper::step6(long)+0x9e>
    32f6:	24 f1       	brlt	.+72     	; 0x3340 <AccelStepper::step6(long)+0x90>
    32f8:	65 30       	cpi	r22, 0x05	; 5
    32fa:	71 05       	cpc	r23, r1
    32fc:	81 05       	cpc	r24, r1
    32fe:	91 05       	cpc	r25, r1
    3300:	91 f7       	brne	.-28     	; 0x32e6 <AccelStepper::step6(long)+0x36>
    3302:	e8 81       	ld	r30, Y
    3304:	f9 81       	ldd	r31, Y+1	; 0x01
    3306:	02 84       	ldd	r0, Z+10	; 0x0a
    3308:	f3 85       	ldd	r31, Z+11	; 0x0b
    330a:	e0 2d       	mov	r30, r0
    330c:	66 e0       	ldi	r22, 0x06	; 6
    330e:	06 c0       	rjmp	.+12     	; 0x331c <AccelStepper::step6(long)+0x6c>
    3310:	e8 81       	ld	r30, Y
    3312:	f9 81       	ldd	r31, Y+1	; 0x01
    3314:	02 84       	ldd	r0, Z+10	; 0x0a
    3316:	f3 85       	ldd	r31, Z+11	; 0x0b
    3318:	e0 2d       	mov	r30, r0
    331a:	64 e0       	ldi	r22, 0x04	; 4
    331c:	ce 01       	movw	r24, r28
    331e:	df 91       	pop	r29
    3320:	cf 91       	pop	r28
    3322:	09 94       	ijmp
    3324:	e8 81       	ld	r30, Y
    3326:	f9 81       	ldd	r31, Y+1	; 0x01
    3328:	02 84       	ldd	r0, Z+10	; 0x0a
    332a:	f3 85       	ldd	r31, Z+11	; 0x0b
    332c:	e0 2d       	mov	r30, r0
    332e:	65 e0       	ldi	r22, 0x05	; 5
    3330:	f5 cf       	rjmp	.-22     	; 0x331c <AccelStepper::step6(long)+0x6c>
    3332:	e8 81       	ld	r30, Y
    3334:	f9 81       	ldd	r31, Y+1	; 0x01
    3336:	02 84       	ldd	r0, Z+10	; 0x0a
    3338:	f3 85       	ldd	r31, Z+11	; 0x0b
    333a:	e0 2d       	mov	r30, r0
    333c:	61 e0       	ldi	r22, 0x01	; 1
    333e:	ee cf       	rjmp	.-36     	; 0x331c <AccelStepper::step6(long)+0x6c>
    3340:	e8 81       	ld	r30, Y
    3342:	f9 81       	ldd	r31, Y+1	; 0x01
    3344:	02 84       	ldd	r0, Z+10	; 0x0a
    3346:	f3 85       	ldd	r31, Z+11	; 0x0b
    3348:	e0 2d       	mov	r30, r0
    334a:	63 e0       	ldi	r22, 0x03	; 3
    334c:	e7 cf       	rjmp	.-50     	; 0x331c <AccelStepper::step6(long)+0x6c>
    334e:	e8 81       	ld	r30, Y
    3350:	f9 81       	ldd	r31, Y+1	; 0x01
    3352:	02 84       	ldd	r0, Z+10	; 0x0a
    3354:	f3 85       	ldd	r31, Z+11	; 0x0b
    3356:	e0 2d       	mov	r30, r0
    3358:	62 e0       	ldi	r22, 0x02	; 2
    335a:	e0 cf       	rjmp	.-64     	; 0x331c <AccelStepper::step6(long)+0x6c>

0000335c <AccelStepper::step8(long)>:
_ZN12AccelStepper5step8El():
    335c:	dc 01       	movw	r26, r24
    335e:	ed 91       	ld	r30, X+
    3360:	fc 91       	ld	r31, X
    3362:	22 85       	ldd	r18, Z+10	; 0x0a
    3364:	33 85       	ldd	r19, Z+11	; 0x0b
    3366:	47 70       	andi	r20, 0x07	; 7
    3368:	55 27       	eor	r21, r21
    336a:	66 27       	eor	r22, r22
    336c:	77 27       	eor	r23, r23
    336e:	41 50       	subi	r20, 0x01	; 1
    3370:	51 09       	sbc	r21, r1
    3372:	61 09       	sbc	r22, r1
    3374:	71 09       	sbc	r23, r1
    3376:	47 30       	cpi	r20, 0x07	; 7
    3378:	51 05       	cpc	r21, r1
    337a:	61 05       	cpc	r22, r1
    337c:	71 05       	cpc	r23, r1
    337e:	60 f4       	brcc	.+24     	; 0x3398 <AccelStepper::step8(long)+0x3c>
    3380:	fa 01       	movw	r30, r20
    3382:	eb 53       	subi	r30, 0x3B	; 59
    3384:	f6 4e       	sbci	r31, 0xE6	; 230
    3386:	0c 94 b6 38 	jmp	0x716c	; 0x716c <__tablejump2__>
    338a:	cf 19       	sub	r28, r15
    338c:	d1 19       	sub	r29, r1
    338e:	d3 19       	sub	r29, r3
    3390:	d5 19       	sub	r29, r5
    3392:	d7 19       	sub	r29, r7
    3394:	d9 19       	sub	r29, r9
    3396:	db 19       	sub	r29, r11
    3398:	61 e0       	ldi	r22, 0x01	; 1
    339a:	f9 01       	movw	r30, r18
    339c:	09 94       	ijmp
    339e:	65 e0       	ldi	r22, 0x05	; 5
    33a0:	fc cf       	rjmp	.-8      	; 0x339a <AccelStepper::step8(long)+0x3e>
    33a2:	64 e0       	ldi	r22, 0x04	; 4
    33a4:	fa cf       	rjmp	.-12     	; 0x339a <AccelStepper::step8(long)+0x3e>
    33a6:	66 e0       	ldi	r22, 0x06	; 6
    33a8:	f8 cf       	rjmp	.-16     	; 0x339a <AccelStepper::step8(long)+0x3e>
    33aa:	62 e0       	ldi	r22, 0x02	; 2
    33ac:	f6 cf       	rjmp	.-20     	; 0x339a <AccelStepper::step8(long)+0x3e>
    33ae:	6a e0       	ldi	r22, 0x0A	; 10
    33b0:	f4 cf       	rjmp	.-24     	; 0x339a <AccelStepper::step8(long)+0x3e>
    33b2:	68 e0       	ldi	r22, 0x08	; 8
    33b4:	f2 cf       	rjmp	.-28     	; 0x339a <AccelStepper::step8(long)+0x3e>
    33b6:	69 e0       	ldi	r22, 0x09	; 9
    33b8:	f0 cf       	rjmp	.-32     	; 0x339a <AccelStepper::step8(long)+0x3e>

000033ba <AccelStepper::setOutputPins(unsigned char)>:
_ZN12AccelStepper13setOutputPinsEh():
    33ba:	cf 92       	push	r12
    33bc:	df 92       	push	r13
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	dc 01       	movw	r26, r24
    33cc:	17 96       	adiw	r26, 0x07	; 7
    33ce:	cc 91       	ld	r28, X
    33d0:	c4 30       	cpi	r28, 0x04	; 4
    33d2:	39 f0       	breq	.+14     	; 0x33e2 <AccelStepper::setOutputPins(unsigned char)+0x28>
    33d4:	c8 30       	cpi	r28, 0x08	; 8
    33d6:	59 f1       	breq	.+86     	; 0x342e <AccelStepper::setOutputPins(unsigned char)+0x74>
    33d8:	c3 30       	cpi	r28, 0x03	; 3
    33da:	19 f0       	breq	.+6      	; 0x33e2 <AccelStepper::setOutputPins(unsigned char)+0x28>
    33dc:	c6 30       	cpi	r28, 0x06	; 6
    33de:	49 f1       	breq	.+82     	; 0x3432 <AccelStepper::setOutputPins(unsigned char)+0x78>
    33e0:	c2 e0       	ldi	r28, 0x02	; 2
    33e2:	8c 01       	movw	r16, r24
    33e4:	08 5f       	subi	r16, 0xF8	; 248
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	f1 2c       	mov	r15, r1
    33ea:	e1 2c       	mov	r14, r1
    33ec:	c6 2e       	mov	r12, r22
    33ee:	d1 2c       	mov	r13, r1
    33f0:	d1 e0       	ldi	r29, 0x01	; 1
    33f2:	f8 01       	movw	r30, r16
    33f4:	64 81       	ldd	r22, Z+4	; 0x04
    33f6:	c6 01       	movw	r24, r12
    33f8:	0e 2c       	mov	r0, r14
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <AccelStepper::setOutputPins(unsigned char)+0x46>
    33fc:	95 95       	asr	r25
    33fe:	87 95       	ror	r24
    3400:	0a 94       	dec	r0
    3402:	e2 f7       	brpl	.-8      	; 0x33fc <AccelStepper::setOutputPins(unsigned char)+0x42>
    3404:	80 fd       	sbrc	r24, 0
    3406:	6d 27       	eor	r22, r29
    3408:	0f 5f       	subi	r16, 0xFF	; 255
    340a:	1f 4f       	sbci	r17, 0xFF	; 255
    340c:	80 81       	ld	r24, Z
    340e:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
    3412:	bf ef       	ldi	r27, 0xFF	; 255
    3414:	eb 1a       	sub	r14, r27
    3416:	fb 0a       	sbc	r15, r27
    3418:	ec 16       	cp	r14, r28
    341a:	58 f3       	brcs	.-42     	; 0x33f2 <AccelStepper::setOutputPins(unsigned char)+0x38>
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	1f 91       	pop	r17
    3422:	0f 91       	pop	r16
    3424:	ff 90       	pop	r15
    3426:	ef 90       	pop	r14
    3428:	df 90       	pop	r13
    342a:	cf 90       	pop	r12
    342c:	08 95       	ret
    342e:	c4 e0       	ldi	r28, 0x04	; 4
    3430:	d8 cf       	rjmp	.-80     	; 0x33e2 <AccelStepper::setOutputPins(unsigned char)+0x28>
    3432:	c3 e0       	ldi	r28, 0x03	; 3
    3434:	d6 cf       	rjmp	.-84     	; 0x33e2 <AccelStepper::setOutputPins(unsigned char)+0x28>

00003436 <AccelStepper::step1(long)>:
_ZN12AccelStepper5step1El():
    3436:	cf 93       	push	r28
    3438:	df 93       	push	r29
    343a:	ec 01       	movw	r28, r24
    343c:	e8 81       	ld	r30, Y
    343e:	f9 81       	ldd	r31, Y+1	; 0x01
    3440:	02 84       	ldd	r0, Z+10	; 0x0a
    3442:	f3 85       	ldd	r31, Z+11	; 0x0b
    3444:	e0 2d       	mov	r30, r0
    3446:	8a 81       	ldd	r24, Y+2	; 0x02
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	81 11       	cpse	r24, r1
    344c:	62 e0       	ldi	r22, 0x02	; 2
    344e:	ce 01       	movw	r24, r28
    3450:	09 95       	icall
    3452:	e8 81       	ld	r30, Y
    3454:	f9 81       	ldd	r31, Y+1	; 0x01
    3456:	02 84       	ldd	r0, Z+10	; 0x0a
    3458:	f3 85       	ldd	r31, Z+11	; 0x0b
    345a:	e0 2d       	mov	r30, r0
    345c:	8a 81       	ldd	r24, Y+2	; 0x02
    345e:	61 e0       	ldi	r22, 0x01	; 1
    3460:	81 11       	cpse	r24, r1
    3462:	63 e0       	ldi	r22, 0x03	; 3
    3464:	ce 01       	movw	r24, r28
    3466:	09 95       	icall
    3468:	8c a5       	ldd	r24, Y+44	; 0x2c
    346a:	9d a5       	ldd	r25, Y+45	; 0x2d
    346c:	0e 94 0b 34 	call	0x6816	; 0x6816 <delayMicroseconds>
    3470:	e8 81       	ld	r30, Y
    3472:	f9 81       	ldd	r31, Y+1	; 0x01
    3474:	02 84       	ldd	r0, Z+10	; 0x0a
    3476:	f3 85       	ldd	r31, Z+11	; 0x0b
    3478:	e0 2d       	mov	r30, r0
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	81 11       	cpse	r24, r1
    3480:	62 e0       	ldi	r22, 0x02	; 2
    3482:	ce 01       	movw	r24, r28
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	09 94       	ijmp

0000348a <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD0Ev():
    348a:	64 e4       	ldi	r22, 0x44	; 68
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	0c 94 55 33 	jmp	0x66aa	; 0x66aa <operator delete(void*, unsigned int)>

00003492 <AccelStepper::step0(long)>:
_ZN12AccelStepper5step0El():
    3492:	cf 93       	push	r28
    3494:	df 93       	push	r29
    3496:	ec 01       	movw	r28, r24
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	a9 01       	movw	r20, r18
    349e:	68 8d       	ldd	r22, Y+24	; 0x18
    34a0:	79 8d       	ldd	r23, Y+25	; 0x19
    34a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    34a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    34a6:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <__gesf2>
    34aa:	18 16       	cp	r1, r24
    34ac:	2c f4       	brge	.+10     	; 0x34b8 <AccelStepper::step0(long)+0x26>
    34ae:	e8 a9       	ldd	r30, Y+48	; 0x30
    34b0:	f9 a9       	ldd	r31, Y+49	; 0x31
    34b2:	df 91       	pop	r29
    34b4:	cf 91       	pop	r28
    34b6:	09 94       	ijmp
    34b8:	ea a9       	ldd	r30, Y+50	; 0x32
    34ba:	fb a9       	ldd	r31, Y+51	; 0x33
    34bc:	fa cf       	rjmp	.-12     	; 0x34b2 <AccelStepper::step0(long)+0x20>

000034be <AccelStepper::step2(long)>:
_ZN12AccelStepper5step2El():
    34be:	dc 01       	movw	r26, r24
    34c0:	ed 91       	ld	r30, X+
    34c2:	fc 91       	ld	r31, X
    34c4:	02 84       	ldd	r0, Z+10	; 0x0a
    34c6:	f3 85       	ldd	r31, Z+11	; 0x0b
    34c8:	e0 2d       	mov	r30, r0
    34ca:	43 70       	andi	r20, 0x03	; 3
    34cc:	55 27       	eor	r21, r21
    34ce:	66 27       	eor	r22, r22
    34d0:	77 27       	eor	r23, r23
    34d2:	42 30       	cpi	r20, 0x02	; 2
    34d4:	51 05       	cpc	r21, r1
    34d6:	61 05       	cpc	r22, r1
    34d8:	71 05       	cpc	r23, r1
    34da:	71 f0       	breq	.+28     	; 0x34f8 <AccelStepper::step2(long)+0x3a>
    34dc:	43 30       	cpi	r20, 0x03	; 3
    34de:	51 05       	cpc	r21, r1
    34e0:	61 05       	cpc	r22, r1
    34e2:	71 05       	cpc	r23, r1
    34e4:	59 f0       	breq	.+22     	; 0x34fc <AccelStepper::step2(long)+0x3e>
    34e6:	41 30       	cpi	r20, 0x01	; 1
    34e8:	51 05       	cpc	r21, r1
    34ea:	61 05       	cpc	r22, r1
    34ec:	71 05       	cpc	r23, r1
    34ee:	11 f0       	breq	.+4      	; 0x34f4 <AccelStepper::step2(long)+0x36>
    34f0:	62 e0       	ldi	r22, 0x02	; 2
    34f2:	09 94       	ijmp
    34f4:	63 e0       	ldi	r22, 0x03	; 3
    34f6:	fd cf       	rjmp	.-6      	; 0x34f2 <AccelStepper::step2(long)+0x34>
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	fb cf       	rjmp	.-10     	; 0x34f2 <AccelStepper::step2(long)+0x34>
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	f9 cf       	rjmp	.-14     	; 0x34f2 <AccelStepper::step2(long)+0x34>

00003500 <AccelStepper::step3(long)>:
_ZN12AccelStepper5step3El():
    3500:	cf 93       	push	r28
    3502:	df 93       	push	r29
    3504:	ec 01       	movw	r28, r24
    3506:	cb 01       	movw	r24, r22
    3508:	ba 01       	movw	r22, r20
    350a:	23 e0       	ldi	r18, 0x03	; 3
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e0       	ldi	r20, 0x00	; 0
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	0e 94 97 38 	call	0x712e	; 0x712e <__divmodsi4>
    3516:	61 30       	cpi	r22, 0x01	; 1
    3518:	71 05       	cpc	r23, r1
    351a:	81 05       	cpc	r24, r1
    351c:	91 05       	cpc	r25, r1
    351e:	99 f0       	breq	.+38     	; 0x3546 <AccelStepper::step3(long)+0x46>
    3520:	62 30       	cpi	r22, 0x02	; 2
    3522:	71 05       	cpc	r23, r1
    3524:	81 05       	cpc	r24, r1
    3526:	91 05       	cpc	r25, r1
    3528:	a9 f0       	breq	.+42     	; 0x3554 <AccelStepper::step3(long)+0x54>
    352a:	67 2b       	or	r22, r23
    352c:	68 2b       	or	r22, r24
    352e:	69 2b       	or	r22, r25
    3530:	c1 f4       	brne	.+48     	; 0x3562 <AccelStepper::step3(long)+0x62>
    3532:	e8 81       	ld	r30, Y
    3534:	f9 81       	ldd	r31, Y+1	; 0x01
    3536:	02 84       	ldd	r0, Z+10	; 0x0a
    3538:	f3 85       	ldd	r31, Z+11	; 0x0b
    353a:	e0 2d       	mov	r30, r0
    353c:	64 e0       	ldi	r22, 0x04	; 4
    353e:	ce 01       	movw	r24, r28
    3540:	df 91       	pop	r29
    3542:	cf 91       	pop	r28
    3544:	09 94       	ijmp
    3546:	e8 81       	ld	r30, Y
    3548:	f9 81       	ldd	r31, Y+1	; 0x01
    354a:	02 84       	ldd	r0, Z+10	; 0x0a
    354c:	f3 85       	ldd	r31, Z+11	; 0x0b
    354e:	e0 2d       	mov	r30, r0
    3550:	61 e0       	ldi	r22, 0x01	; 1
    3552:	f5 cf       	rjmp	.-22     	; 0x353e <AccelStepper::step3(long)+0x3e>
    3554:	e8 81       	ld	r30, Y
    3556:	f9 81       	ldd	r31, Y+1	; 0x01
    3558:	02 84       	ldd	r0, Z+10	; 0x0a
    355a:	f3 85       	ldd	r31, Z+11	; 0x0b
    355c:	e0 2d       	mov	r30, r0
    355e:	62 e0       	ldi	r22, 0x02	; 2
    3560:	ee cf       	rjmp	.-36     	; 0x353e <AccelStepper::step3(long)+0x3e>
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	08 95       	ret

00003568 <AccelStepper::step4(long)>:
_ZN12AccelStepper5step4El():
    3568:	dc 01       	movw	r26, r24
    356a:	ed 91       	ld	r30, X+
    356c:	fc 91       	ld	r31, X
    356e:	02 84       	ldd	r0, Z+10	; 0x0a
    3570:	f3 85       	ldd	r31, Z+11	; 0x0b
    3572:	e0 2d       	mov	r30, r0
    3574:	43 70       	andi	r20, 0x03	; 3
    3576:	55 27       	eor	r21, r21
    3578:	66 27       	eor	r22, r22
    357a:	77 27       	eor	r23, r23
    357c:	42 30       	cpi	r20, 0x02	; 2
    357e:	51 05       	cpc	r21, r1
    3580:	61 05       	cpc	r22, r1
    3582:	71 05       	cpc	r23, r1
    3584:	71 f0       	breq	.+28     	; 0x35a2 <AccelStepper::step4(long)+0x3a>
    3586:	43 30       	cpi	r20, 0x03	; 3
    3588:	51 05       	cpc	r21, r1
    358a:	61 05       	cpc	r22, r1
    358c:	71 05       	cpc	r23, r1
    358e:	59 f0       	breq	.+22     	; 0x35a6 <AccelStepper::step4(long)+0x3e>
    3590:	41 30       	cpi	r20, 0x01	; 1
    3592:	51 05       	cpc	r21, r1
    3594:	61 05       	cpc	r22, r1
    3596:	71 05       	cpc	r23, r1
    3598:	11 f0       	breq	.+4      	; 0x359e <AccelStepper::step4(long)+0x36>
    359a:	65 e0       	ldi	r22, 0x05	; 5
    359c:	09 94       	ijmp
    359e:	66 e0       	ldi	r22, 0x06	; 6
    35a0:	fd cf       	rjmp	.-6      	; 0x359c <AccelStepper::step4(long)+0x34>
    35a2:	6a e0       	ldi	r22, 0x0A	; 10
    35a4:	fb cf       	rjmp	.-10     	; 0x359c <AccelStepper::step4(long)+0x34>
    35a6:	69 e0       	ldi	r22, 0x09	; 9
    35a8:	f9 cf       	rjmp	.-14     	; 0x359c <AccelStepper::step4(long)+0x34>

000035aa <AccelStepper::disableOutputs()>:
_ZN12AccelStepper14disableOutputsEv():
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	fc 01       	movw	r30, r24
    35b0:	27 81       	ldd	r18, Z+7	; 0x07
    35b2:	22 23       	and	r18, r18
    35b4:	a9 f0       	breq	.+42     	; 0x35e0 <AccelStepper::disableOutputs()+0x36>
    35b6:	ec 01       	movw	r28, r24
    35b8:	01 90       	ld	r0, Z+
    35ba:	f0 81       	ld	r31, Z
    35bc:	e0 2d       	mov	r30, r0
    35be:	02 84       	ldd	r0, Z+10	; 0x0a
    35c0:	f3 85       	ldd	r31, Z+11	; 0x0b
    35c2:	e0 2d       	mov	r30, r0
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	09 95       	icall
    35c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    35ca:	8f 3f       	cpi	r24, 0xFF	; 255
    35cc:	49 f0       	breq	.+18     	; 0x35e0 <AccelStepper::disableOutputs()+0x36>
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    35d4:	6e a5       	ldd	r22, Y+46	; 0x2e
    35d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <digitalWrite>
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	08 95       	ret

000035e6 <AccelStepper::enableOutputs()>:
_ZN12AccelStepper13enableOutputsEv():
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	fc 01       	movw	r30, r24
    35ec:	27 81       	ldd	r18, Z+7	; 0x07
    35ee:	22 23       	and	r18, r18
    35f0:	59 f1       	breq	.+86     	; 0x3648 <AccelStepper::enableOutputs()+0x62>
    35f2:	ec 01       	movw	r28, r24
    35f4:	61 e0       	ldi	r22, 0x01	; 1
    35f6:	80 85       	ldd	r24, Z+8	; 0x08
    35f8:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    35fc:	61 e0       	ldi	r22, 0x01	; 1
    35fe:	89 85       	ldd	r24, Y+9	; 0x09
    3600:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    3604:	8f 81       	ldd	r24, Y+7	; 0x07
    3606:	84 30       	cpi	r24, 0x04	; 4
    3608:	11 f0       	breq	.+4      	; 0x360e <AccelStepper::enableOutputs()+0x28>
    360a:	88 30       	cpi	r24, 0x08	; 8
    360c:	b1 f4       	brne	.+44     	; 0x363a <AccelStepper::enableOutputs()+0x54>
    360e:	61 e0       	ldi	r22, 0x01	; 1
    3610:	8a 85       	ldd	r24, Y+10	; 0x0a
    3612:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    3616:	61 e0       	ldi	r22, 0x01	; 1
    3618:	8b 85       	ldd	r24, Y+11	; 0x0b
    361a:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    361e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3620:	8f 3f       	cpi	r24, 0xFF	; 255
    3622:	91 f0       	breq	.+36     	; 0x3648 <AccelStepper::enableOutputs()+0x62>
    3624:	61 e0       	ldi	r22, 0x01	; 1
    3626:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    362a:	6e a5       	ldd	r22, Y+46	; 0x2e
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	68 27       	eor	r22, r24
    3630:	8f a5       	ldd	r24, Y+47	; 0x2f
    3632:	df 91       	pop	r29
    3634:	cf 91       	pop	r28
    3636:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <digitalWrite>
    363a:	83 30       	cpi	r24, 0x03	; 3
    363c:	11 f0       	breq	.+4      	; 0x3642 <AccelStepper::enableOutputs()+0x5c>
    363e:	86 30       	cpi	r24, 0x06	; 6
    3640:	71 f7       	brne	.-36     	; 0x361e <AccelStepper::enableOutputs()+0x38>
    3642:	61 e0       	ldi	r22, 0x01	; 1
    3644:	8a 85       	ldd	r24, Y+10	; 0x0a
    3646:	e9 cf       	rjmp	.-46     	; 0x361a <AccelStepper::enableOutputs()+0x34>
    3648:	df 91       	pop	r29
    364a:	cf 91       	pop	r28
    364c:	08 95       	ret

0000364e <AccelStepper::setAcceleration(float) [clone .part.10]>:
_ZN12AccelStepper15setAccelerationEf():
    364e:	4f 92       	push	r4
    3650:	5f 92       	push	r5
    3652:	6f 92       	push	r6
    3654:	7f 92       	push	r7
    3656:	8f 92       	push	r8
    3658:	9f 92       	push	r9
    365a:	af 92       	push	r10
    365c:	bf 92       	push	r11
    365e:	cf 92       	push	r12
    3660:	df 92       	push	r13
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	cf 93       	push	r28
    3668:	df 93       	push	r29
    366a:	ec 01       	movw	r28, r24
    366c:	6a 01       	movw	r12, r20
    366e:	7b 01       	movw	r14, r22
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	a9 01       	movw	r20, r18
    3676:	cb 01       	movw	r24, r22
    3678:	b6 01       	movw	r22, r12
    367a:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    367e:	87 ff       	sbrs	r24, 7
    3680:	04 c0       	rjmp	.+8      	; 0x368a <AccelStepper::setAcceleration(float) [clone .part.10]+0x3c>
    3682:	f7 fa       	bst	r15, 7
    3684:	f0 94       	com	r15
    3686:	f7 f8       	bld	r15, 7
    3688:	f0 94       	com	r15
    368a:	88 a0       	ldd	r8, Y+32	; 0x20
    368c:	99 a0       	ldd	r9, Y+33	; 0x21
    368e:	aa a0       	ldd	r10, Y+34	; 0x22
    3690:	bb a0       	ldd	r11, Y+35	; 0x23
    3692:	a7 01       	movw	r20, r14
    3694:	96 01       	movw	r18, r12
    3696:	c5 01       	movw	r24, r10
    3698:	b4 01       	movw	r22, r8
    369a:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    369e:	88 23       	and	r24, r24
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <AccelStepper::setAcceleration(float) [clone .part.10]+0x56>
    36a2:	4d c0       	rjmp	.+154    	; 0x373e <AccelStepper::setAcceleration(float) [clone .part.10]+0xf0>
    36a4:	6c a9       	ldd	r22, Y+52	; 0x34
    36a6:	7d a9       	ldd	r23, Y+53	; 0x35
    36a8:	8e a9       	ldd	r24, Y+54	; 0x36
    36aa:	9f a9       	ldd	r25, Y+55	; 0x37
    36ac:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    36b0:	2b 01       	movw	r4, r22
    36b2:	3c 01       	movw	r6, r24
    36b4:	a7 01       	movw	r20, r14
    36b6:	96 01       	movw	r18, r12
    36b8:	c5 01       	movw	r24, r10
    36ba:	b4 01       	movw	r22, r8
    36bc:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    36c0:	9b 01       	movw	r18, r22
    36c2:	ac 01       	movw	r20, r24
    36c4:	c3 01       	movw	r24, r6
    36c6:	b2 01       	movw	r22, r4
    36c8:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    36cc:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__fixsfsi>
    36d0:	6c ab       	std	Y+52, r22	; 0x34
    36d2:	7d ab       	std	Y+53, r23	; 0x35
    36d4:	8e ab       	std	Y+54, r24	; 0x36
    36d6:	9f ab       	std	Y+55, r25	; 0x37
    36d8:	a7 01       	movw	r20, r14
    36da:	96 01       	movw	r18, r12
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	80 e0       	ldi	r24, 0x00	; 0
    36e2:	90 e4       	ldi	r25, 0x40	; 64
    36e4:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    36e8:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <sqrt>
    36ec:	26 e5       	ldi	r18, 0x56	; 86
    36ee:	3e e0       	ldi	r19, 0x0E	; 14
    36f0:	4d e2       	ldi	r20, 0x2D	; 45
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	34 e2       	ldi	r19, 0x24	; 36
    36fc:	44 e7       	ldi	r20, 0x74	; 116
    36fe:	59 e4       	ldi	r21, 0x49	; 73
    3700:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    3704:	68 af       	std	Y+56, r22	; 0x38
    3706:	79 af       	std	Y+57, r23	; 0x39
    3708:	8a af       	std	Y+58, r24	; 0x3a
    370a:	9b af       	std	Y+59, r25	; 0x3b
    370c:	c8 a2       	std	Y+32, r12	; 0x20
    370e:	d9 a2       	std	Y+33, r13	; 0x21
    3710:	ea a2       	std	Y+34, r14	; 0x22
    3712:	fb a2       	std	Y+35, r15	; 0x23
    3714:	e8 81       	ld	r30, Y
    3716:	f9 81       	ldd	r31, Y+1	; 0x01
    3718:	00 84       	ldd	r0, Z+8	; 0x08
    371a:	f1 85       	ldd	r31, Z+9	; 0x09
    371c:	e0 2d       	mov	r30, r0
    371e:	ce 01       	movw	r24, r28
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	ff 90       	pop	r15
    3726:	ef 90       	pop	r14
    3728:	df 90       	pop	r13
    372a:	cf 90       	pop	r12
    372c:	bf 90       	pop	r11
    372e:	af 90       	pop	r10
    3730:	9f 90       	pop	r9
    3732:	8f 90       	pop	r8
    3734:	7f 90       	pop	r7
    3736:	6f 90       	pop	r6
    3738:	5f 90       	pop	r5
    373a:	4f 90       	pop	r4
    373c:	09 94       	ijmp
    373e:	df 91       	pop	r29
    3740:	cf 91       	pop	r28
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	df 90       	pop	r13
    3748:	cf 90       	pop	r12
    374a:	bf 90       	pop	r11
    374c:	af 90       	pop	r10
    374e:	9f 90       	pop	r9
    3750:	8f 90       	pop	r8
    3752:	7f 90       	pop	r7
    3754:	6f 90       	pop	r6
    3756:	5f 90       	pop	r5
    3758:	4f 90       	pop	r4
    375a:	08 95       	ret

0000375c <AccelStepper::moveTo(long)>:
_ZN12AccelStepper6moveToEl():
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	dc 01       	movw	r26, r24
    3762:	54 96       	adiw	r26, 0x14	; 20
    3764:	0d 91       	ld	r16, X+
    3766:	1d 91       	ld	r17, X+
    3768:	2d 91       	ld	r18, X+
    376a:	3c 91       	ld	r19, X
    376c:	57 97       	sbiw	r26, 0x17	; 23
    376e:	04 17       	cp	r16, r20
    3770:	15 07       	cpc	r17, r21
    3772:	26 07       	cpc	r18, r22
    3774:	37 07       	cpc	r19, r23
    3776:	71 f0       	breq	.+28     	; 0x3794 <AccelStepper::moveTo(long)+0x38>
    3778:	fc 01       	movw	r30, r24
    377a:	44 8b       	std	Z+20, r20	; 0x14
    377c:	55 8b       	std	Z+21, r21	; 0x15
    377e:	66 8b       	std	Z+22, r22	; 0x16
    3780:	77 8b       	std	Z+23, r23	; 0x17
    3782:	01 90       	ld	r0, Z+
    3784:	f0 81       	ld	r31, Z
    3786:	e0 2d       	mov	r30, r0
    3788:	00 84       	ldd	r0, Z+8	; 0x08
    378a:	f1 85       	ldd	r31, Z+9	; 0x09
    378c:	e0 2d       	mov	r30, r0
    378e:	1f 91       	pop	r17
    3790:	0f 91       	pop	r16
    3792:	09 94       	ijmp
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	08 95       	ret

0000379a <AccelStepper::runSpeed()>:
_ZN12AccelStepper8runSpeedEv():
    379a:	cf 92       	push	r12
    379c:	df 92       	push	r13
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	fc 01       	movw	r30, r24
    37a8:	43 81       	ldd	r20, Z+3	; 0x03
    37aa:	54 81       	ldd	r21, Z+4	; 0x04
    37ac:	65 81       	ldd	r22, Z+5	; 0x05
    37ae:	76 81       	ldd	r23, Z+6	; 0x06
    37b0:	45 2b       	or	r20, r21
    37b2:	46 2b       	or	r20, r22
    37b4:	47 2b       	or	r20, r23
    37b6:	41 f4       	brne	.+16     	; 0x37c8 <AccelStepper::runSpeed()+0x2e>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	ff 90       	pop	r15
    37c0:	ef 90       	pop	r14
    37c2:	df 90       	pop	r13
    37c4:	cf 90       	pop	r12
    37c6:	08 95       	ret
    37c8:	ec 01       	movw	r28, r24
    37ca:	0e 94 ad 33 	call	0x675a	; 0x675a <micros>
    37ce:	6b 01       	movw	r12, r22
    37d0:	7c 01       	movw	r14, r24
    37d2:	88 a5       	ldd	r24, Y+40	; 0x28
    37d4:	99 a5       	ldd	r25, Y+41	; 0x29
    37d6:	aa a5       	ldd	r26, Y+42	; 0x2a
    37d8:	bb a5       	ldd	r27, Y+43	; 0x2b
    37da:	b7 01       	movw	r22, r14
    37dc:	a6 01       	movw	r20, r12
    37de:	48 1b       	sub	r20, r24
    37e0:	59 0b       	sbc	r21, r25
    37e2:	6a 0b       	sbc	r22, r26
    37e4:	7b 0b       	sbc	r23, r27
    37e6:	8b 81       	ldd	r24, Y+3	; 0x03
    37e8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ea:	ad 81       	ldd	r26, Y+5	; 0x05
    37ec:	be 81       	ldd	r27, Y+6	; 0x06
    37ee:	48 17       	cp	r20, r24
    37f0:	59 07       	cpc	r21, r25
    37f2:	6a 07       	cpc	r22, r26
    37f4:	7b 07       	cpc	r23, r27
    37f6:	00 f3       	brcs	.-64     	; 0x37b8 <AccelStepper::runSpeed()+0x1e>
    37f8:	88 89       	ldd	r24, Y+16	; 0x10
    37fa:	99 89       	ldd	r25, Y+17	; 0x11
    37fc:	aa 89       	ldd	r26, Y+18	; 0x12
    37fe:	bb 89       	ldd	r27, Y+19	; 0x13
    3800:	2a 81       	ldd	r18, Y+2	; 0x02
    3802:	22 23       	and	r18, r18
    3804:	c1 f0       	breq	.+48     	; 0x3836 <AccelStepper::runSpeed()+0x9c>
    3806:	01 96       	adiw	r24, 0x01	; 1
    3808:	a1 1d       	adc	r26, r1
    380a:	b1 1d       	adc	r27, r1
    380c:	88 8b       	std	Y+16, r24	; 0x10
    380e:	99 8b       	std	Y+17, r25	; 0x11
    3810:	aa 8b       	std	Y+18, r26	; 0x12
    3812:	bb 8b       	std	Y+19, r27	; 0x13
    3814:	48 89       	ldd	r20, Y+16	; 0x10
    3816:	59 89       	ldd	r21, Y+17	; 0x11
    3818:	6a 89       	ldd	r22, Y+18	; 0x12
    381a:	7b 89       	ldd	r23, Y+19	; 0x13
    381c:	e8 81       	ld	r30, Y
    381e:	f9 81       	ldd	r31, Y+1	; 0x01
    3820:	04 84       	ldd	r0, Z+12	; 0x0c
    3822:	f5 85       	ldd	r31, Z+13	; 0x0d
    3824:	e0 2d       	mov	r30, r0
    3826:	ce 01       	movw	r24, r28
    3828:	09 95       	icall
    382a:	c8 a6       	std	Y+40, r12	; 0x28
    382c:	d9 a6       	std	Y+41, r13	; 0x29
    382e:	ea a6       	std	Y+42, r14	; 0x2a
    3830:	fb a6       	std	Y+43, r15	; 0x2b
    3832:	81 e0       	ldi	r24, 0x01	; 1
    3834:	c2 cf       	rjmp	.-124    	; 0x37ba <AccelStepper::runSpeed()+0x20>
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	a1 09       	sbc	r26, r1
    383a:	b1 09       	sbc	r27, r1
    383c:	e7 cf       	rjmp	.-50     	; 0x380c <AccelStepper::runSpeed()+0x72>

0000383e <AccelStepper::distanceToGo()>:
_ZN12AccelStepper12distanceToGoEv():
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	fc 01       	movw	r30, r24
    3844:	64 89       	ldd	r22, Z+20	; 0x14
    3846:	75 89       	ldd	r23, Z+21	; 0x15
    3848:	86 89       	ldd	r24, Z+22	; 0x16
    384a:	97 89       	ldd	r25, Z+23	; 0x17
    384c:	00 89       	ldd	r16, Z+16	; 0x10
    384e:	11 89       	ldd	r17, Z+17	; 0x11
    3850:	22 89       	ldd	r18, Z+18	; 0x12
    3852:	33 89       	ldd	r19, Z+19	; 0x13
    3854:	60 1b       	sub	r22, r16
    3856:	71 0b       	sbc	r23, r17
    3858:	82 0b       	sbc	r24, r18
    385a:	93 0b       	sbc	r25, r19
    385c:	1f 91       	pop	r17
    385e:	0f 91       	pop	r16
    3860:	08 95       	ret

00003862 <AccelStepper::currentPosition()>:
_ZN12AccelStepper15currentPositionEv():
    3862:	fc 01       	movw	r30, r24
    3864:	60 89       	ldd	r22, Z+16	; 0x10
    3866:	71 89       	ldd	r23, Z+17	; 0x11
    3868:	82 89       	ldd	r24, Z+18	; 0x12
    386a:	93 89       	ldd	r25, Z+19	; 0x13
    386c:	08 95       	ret

0000386e <AccelStepper::setCurrentPosition(long)>:
_ZN12AccelStepper18setCurrentPositionEl():
    386e:	fc 01       	movw	r30, r24
    3870:	40 8b       	std	Z+16, r20	; 0x10
    3872:	51 8b       	std	Z+17, r21	; 0x11
    3874:	62 8b       	std	Z+18, r22	; 0x12
    3876:	73 8b       	std	Z+19, r23	; 0x13
    3878:	44 8b       	std	Z+20, r20	; 0x14
    387a:	55 8b       	std	Z+21, r21	; 0x15
    387c:	66 8b       	std	Z+22, r22	; 0x16
    387e:	77 8b       	std	Z+23, r23	; 0x17
    3880:	14 aa       	std	Z+52, r1	; 0x34
    3882:	15 aa       	std	Z+53, r1	; 0x35
    3884:	16 aa       	std	Z+54, r1	; 0x36
    3886:	17 aa       	std	Z+55, r1	; 0x37
    3888:	13 82       	std	Z+3, r1	; 0x03
    388a:	14 82       	std	Z+4, r1	; 0x04
    388c:	15 82       	std	Z+5, r1	; 0x05
    388e:	16 82       	std	Z+6, r1	; 0x06
    3890:	10 8e       	std	Z+24, r1	; 0x18
    3892:	11 8e       	std	Z+25, r1	; 0x19
    3894:	12 8e       	std	Z+26, r1	; 0x1a
    3896:	13 8e       	std	Z+27, r1	; 0x1b
    3898:	08 95       	ret

0000389a <AccelStepper::setMaxSpeed(float)>:
_ZN12AccelStepper11setMaxSpeedEf():
    389a:	cf 92       	push	r12
    389c:	df 92       	push	r13
    389e:	ef 92       	push	r14
    38a0:	ff 92       	push	r15
    38a2:	0f 93       	push	r16
    38a4:	1f 93       	push	r17
    38a6:	cf 93       	push	r28
    38a8:	df 93       	push	r29
    38aa:	ec 01       	movw	r28, r24
    38ac:	6a 01       	movw	r12, r20
    38ae:	7b 01       	movw	r14, r22
    38b0:	20 e0       	ldi	r18, 0x00	; 0
    38b2:	30 e0       	ldi	r19, 0x00	; 0
    38b4:	a9 01       	movw	r20, r18
    38b6:	cb 01       	movw	r24, r22
    38b8:	b6 01       	movw	r22, r12
    38ba:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    38be:	87 ff       	sbrs	r24, 7
    38c0:	04 c0       	rjmp	.+8      	; 0x38ca <AccelStepper::setMaxSpeed(float)+0x30>
    38c2:	f7 fa       	bst	r15, 7
    38c4:	f0 94       	com	r15
    38c6:	f7 f8       	bld	r15, 7
    38c8:	f0 94       	com	r15
    38ca:	a7 01       	movw	r20, r14
    38cc:	96 01       	movw	r18, r12
    38ce:	6c 8d       	ldd	r22, Y+28	; 0x1c
    38d0:	7d 8d       	ldd	r23, Y+29	; 0x1d
    38d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    38d6:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    38da:	88 23       	and	r24, r24
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <AccelStepper::setMaxSpeed(float)+0x46>
    38de:	4a c0       	rjmp	.+148    	; 0x3974 <AccelStepper::setMaxSpeed(float)+0xda>
    38e0:	cc 8e       	std	Y+28, r12	; 0x1c
    38e2:	dd 8e       	std	Y+29, r13	; 0x1d
    38e4:	ee 8e       	std	Y+30, r14	; 0x1e
    38e6:	ff 8e       	std	Y+31, r15	; 0x1f
    38e8:	8e 01       	movw	r16, r28
    38ea:	00 5c       	subi	r16, 0xC0	; 192
    38ec:	1f 4f       	sbci	r17, 0xFF	; 255
    38ee:	a7 01       	movw	r20, r14
    38f0:	96 01       	movw	r18, r12
    38f2:	60 e0       	ldi	r22, 0x00	; 0
    38f4:	74 e2       	ldi	r23, 0x24	; 36
    38f6:	84 e7       	ldi	r24, 0x74	; 116
    38f8:	99 e4       	ldi	r25, 0x49	; 73
    38fa:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    38fe:	f8 01       	movw	r30, r16
    3900:	60 83       	st	Z, r22
    3902:	71 83       	std	Z+1, r23	; 0x01
    3904:	82 83       	std	Z+2, r24	; 0x02
    3906:	93 83       	std	Z+3, r25	; 0x03
    3908:	8c a9       	ldd	r24, Y+52	; 0x34
    390a:	9d a9       	ldd	r25, Y+53	; 0x35
    390c:	ae a9       	ldd	r26, Y+54	; 0x36
    390e:	bf a9       	ldd	r27, Y+55	; 0x37
    3910:	18 16       	cp	r1, r24
    3912:	19 06       	cpc	r1, r25
    3914:	1a 06       	cpc	r1, r26
    3916:	1b 06       	cpc	r1, r27
    3918:	6c f5       	brge	.+90     	; 0x3974 <AccelStepper::setMaxSpeed(float)+0xda>
    391a:	68 8d       	ldd	r22, Y+24	; 0x18
    391c:	79 8d       	ldd	r23, Y+25	; 0x19
    391e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3920:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3922:	9b 01       	movw	r18, r22
    3924:	ac 01       	movw	r20, r24
    3926:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    392a:	6b 01       	movw	r12, r22
    392c:	7c 01       	movw	r14, r24
    392e:	68 a1       	ldd	r22, Y+32	; 0x20
    3930:	79 a1       	ldd	r23, Y+33	; 0x21
    3932:	8a a1       	ldd	r24, Y+34	; 0x22
    3934:	9b a1       	ldd	r25, Y+35	; 0x23
    3936:	9b 01       	movw	r18, r22
    3938:	ac 01       	movw	r20, r24
    393a:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    393e:	9b 01       	movw	r18, r22
    3940:	ac 01       	movw	r20, r24
    3942:	c7 01       	movw	r24, r14
    3944:	b6 01       	movw	r22, r12
    3946:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    394a:	0e 94 34 36 	call	0x6c68	; 0x6c68 <__fixsfsi>
    394e:	6c ab       	std	Y+52, r22	; 0x34
    3950:	7d ab       	std	Y+53, r23	; 0x35
    3952:	8e ab       	std	Y+54, r24	; 0x36
    3954:	9f ab       	std	Y+55, r25	; 0x37
    3956:	e8 81       	ld	r30, Y
    3958:	f9 81       	ldd	r31, Y+1	; 0x01
    395a:	00 84       	ldd	r0, Z+8	; 0x08
    395c:	f1 85       	ldd	r31, Z+9	; 0x09
    395e:	e0 2d       	mov	r30, r0
    3960:	ce 01       	movw	r24, r28
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	ff 90       	pop	r15
    396c:	ef 90       	pop	r14
    396e:	df 90       	pop	r13
    3970:	cf 90       	pop	r12
    3972:	09 94       	ijmp
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	ff 90       	pop	r15
    397e:	ef 90       	pop	r14
    3980:	df 90       	pop	r13
    3982:	cf 90       	pop	r12
    3984:	08 95       	ret

00003986 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
_ZN12AccelStepperC2Ehhhhhb():
    3986:	cf 92       	push	r12
    3988:	ef 92       	push	r14
    398a:	0f 93       	push	r16
    398c:	cf 93       	push	r28
    398e:	df 93       	push	r29
    3990:	ec 01       	movw	r28, r24
    3992:	84 e3       	ldi	r24, 0x34	; 52
    3994:	91 e0       	ldi	r25, 0x01	; 1
    3996:	99 83       	std	Y+1, r25	; 0x01
    3998:	88 83       	st	Y, r24
    399a:	6f 83       	std	Y+7, r22	; 0x07
    399c:	18 8a       	std	Y+16, r1	; 0x10
    399e:	19 8a       	std	Y+17, r1	; 0x11
    39a0:	1a 8a       	std	Y+18, r1	; 0x12
    39a2:	1b 8a       	std	Y+19, r1	; 0x13
    39a4:	1c 8a       	std	Y+20, r1	; 0x14
    39a6:	1d 8a       	std	Y+21, r1	; 0x15
    39a8:	1e 8a       	std	Y+22, r1	; 0x16
    39aa:	1f 8a       	std	Y+23, r1	; 0x17
    39ac:	18 8e       	std	Y+24, r1	; 0x18
    39ae:	19 8e       	std	Y+25, r1	; 0x19
    39b0:	1a 8e       	std	Y+26, r1	; 0x1a
    39b2:	1b 8e       	std	Y+27, r1	; 0x1b
    39b4:	1c 8e       	std	Y+28, r1	; 0x1c
    39b6:	1d 8e       	std	Y+29, r1	; 0x1d
    39b8:	1e 8e       	std	Y+30, r1	; 0x1e
    39ba:	1f 8e       	std	Y+31, r1	; 0x1f
    39bc:	18 a2       	std	Y+32, r1	; 0x20
    39be:	19 a2       	std	Y+33, r1	; 0x21
    39c0:	1a a2       	std	Y+34, r1	; 0x22
    39c2:	1b a2       	std	Y+35, r1	; 0x23
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	a0 e8       	ldi	r26, 0x80	; 128
    39ca:	bf e3       	ldi	r27, 0x3F	; 63
    39cc:	8c a3       	std	Y+36, r24	; 0x24
    39ce:	9d a3       	std	Y+37, r25	; 0x25
    39d0:	ae a3       	std	Y+38, r26	; 0x26
    39d2:	bf a3       	std	Y+39, r27	; 0x27
    39d4:	1b 82       	std	Y+3, r1	; 0x03
    39d6:	1c 82       	std	Y+4, r1	; 0x04
    39d8:	1d 82       	std	Y+5, r1	; 0x05
    39da:	1e 82       	std	Y+6, r1	; 0x06
    39dc:	61 e0       	ldi	r22, 0x01	; 1
    39de:	70 e0       	ldi	r23, 0x00	; 0
    39e0:	7d a7       	std	Y+45, r23	; 0x2d
    39e2:	6c a7       	std	Y+44, r22	; 0x2c
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	3f a7       	std	Y+47, r19	; 0x2f
    39e8:	18 a6       	std	Y+40, r1	; 0x28
    39ea:	19 a6       	std	Y+41, r1	; 0x29
    39ec:	1a a6       	std	Y+42, r1	; 0x2a
    39ee:	1b a6       	std	Y+43, r1	; 0x2b
    39f0:	48 87       	std	Y+8, r20	; 0x08
    39f2:	29 87       	std	Y+9, r18	; 0x09
    39f4:	0a 87       	std	Y+10, r16	; 0x0a
    39f6:	eb 86       	std	Y+11, r14	; 0x0b
    39f8:	1e a6       	std	Y+46, r1	; 0x2e
    39fa:	1c aa       	std	Y+52, r1	; 0x34
    39fc:	1d aa       	std	Y+53, r1	; 0x35
    39fe:	1e aa       	std	Y+54, r1	; 0x36
    3a00:	1f aa       	std	Y+55, r1	; 0x37
    3a02:	18 ae       	std	Y+56, r1	; 0x38
    3a04:	19 ae       	std	Y+57, r1	; 0x39
    3a06:	1a ae       	std	Y+58, r1	; 0x3a
    3a08:	1b ae       	std	Y+59, r1	; 0x3b
    3a0a:	1c ae       	std	Y+60, r1	; 0x3c
    3a0c:	1d ae       	std	Y+61, r1	; 0x3d
    3a0e:	1e ae       	std	Y+62, r1	; 0x3e
    3a10:	1f ae       	std	Y+63, r1	; 0x3f
    3a12:	fe 01       	movw	r30, r28
    3a14:	e0 5c       	subi	r30, 0xC0	; 192
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 83       	st	Z, r24
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	a2 83       	std	Z+2, r26	; 0x02
    3a1e:	b3 83       	std	Z+3, r27	; 0x03
    3a20:	1a 82       	std	Y+2, r1	; 0x02
    3a22:	1c 86       	std	Y+12, r1	; 0x0c
    3a24:	1d 86       	std	Y+13, r1	; 0x0d
    3a26:	1e 86       	std	Y+14, r1	; 0x0e
    3a28:	1f 86       	std	Y+15, r1	; 0x0f
    3a2a:	cc 20       	and	r12, r12
    3a2c:	19 f0       	breq	.+6      	; 0x3a34 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xae>
    3a2e:	ce 01       	movw	r24, r28
    3a30:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <AccelStepper::enableOutputs()>
_ZN12AccelStepper15setAccelerationEf():
    3a34:	40 e0       	ldi	r20, 0x00	; 0
    3a36:	50 e0       	ldi	r21, 0x00	; 0
    3a38:	60 e8       	ldi	r22, 0x80	; 128
    3a3a:	7f e3       	ldi	r23, 0x3F	; 63
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	0e 94 27 1b 	call	0x364e	; 0x364e <AccelStepper::setAcceleration(float) [clone .part.10]>
_ZN12AccelStepperC2Ehhhhhb():
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	60 e8       	ldi	r22, 0x80	; 128
    3a48:	7f e3       	ldi	r23, 0x3F	; 63
    3a4a:	ce 01       	movw	r24, r28
    3a4c:	df 91       	pop	r29
    3a4e:	cf 91       	pop	r28
    3a50:	0f 91       	pop	r16
    3a52:	ef 90       	pop	r14
    3a54:	cf 90       	pop	r12
    3a56:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <AccelStepper::setMaxSpeed(float)>

00003a5a <AccelStepper::setAcceleration(float)>:
_ZN12AccelStepper15setAccelerationEf():
    3a5a:	cf 92       	push	r12
    3a5c:	df 92       	push	r13
    3a5e:	ef 92       	push	r14
    3a60:	ff 92       	push	r15
    3a62:	cf 93       	push	r28
    3a64:	df 93       	push	r29
    3a66:	ec 01       	movw	r28, r24
    3a68:	6a 01       	movw	r12, r20
    3a6a:	7b 01       	movw	r14, r22
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	a9 01       	movw	r20, r18
    3a72:	cb 01       	movw	r24, r22
    3a74:	b6 01       	movw	r22, r12
    3a76:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    3a7a:	88 23       	and	r24, r24
    3a7c:	59 f0       	breq	.+22     	; 0x3a94 <AccelStepper::setAcceleration(float)+0x3a>
    3a7e:	b7 01       	movw	r22, r14
    3a80:	a6 01       	movw	r20, r12
    3a82:	ce 01       	movw	r24, r28
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	cf 90       	pop	r12
    3a90:	0c 94 27 1b 	jmp	0x364e	; 0x364e <AccelStepper::setAcceleration(float) [clone .part.10]>
    3a94:	df 91       	pop	r29
    3a96:	cf 91       	pop	r28
    3a98:	ff 90       	pop	r15
    3a9a:	ef 90       	pop	r14
    3a9c:	df 90       	pop	r13
    3a9e:	cf 90       	pop	r12
    3aa0:	08 95       	ret

00003aa2 <AccelStepper::setSpeed(float)>:
_ZN12AccelStepper8setSpeedEf():
    3aa2:	4f 92       	push	r4
    3aa4:	5f 92       	push	r5
    3aa6:	6f 92       	push	r6
    3aa8:	7f 92       	push	r7
    3aaa:	af 92       	push	r10
    3aac:	bf 92       	push	r11
    3aae:	cf 92       	push	r12
    3ab0:	df 92       	push	r13
    3ab2:	ef 92       	push	r14
    3ab4:	ff 92       	push	r15
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	ec 01       	movw	r28, r24
    3ac0:	5a 01       	movw	r10, r20
    3ac2:	8b 01       	movw	r16, r22
    3ac4:	9a 01       	movw	r18, r20
    3ac6:	ab 01       	movw	r20, r22
    3ac8:	68 8d       	ldd	r22, Y+24	; 0x18
    3aca:	79 8d       	ldd	r23, Y+25	; 0x19
    3acc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ace:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ad0:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    3ad4:	88 23       	and	r24, r24
    3ad6:	79 f1       	breq	.+94     	; 0x3b36 <AccelStepper::setSpeed(float)+0x94>
    3ad8:	4c 8c       	ldd	r4, Y+28	; 0x1c
    3ada:	5d 8c       	ldd	r5, Y+29	; 0x1d
    3adc:	6e 8c       	ldd	r6, Y+30	; 0x1e
    3ade:	7f 8c       	ldd	r7, Y+31	; 0x1f
    3ae0:	73 01       	movw	r14, r6
    3ae2:	62 01       	movw	r12, r4
    3ae4:	f7 fa       	bst	r15, 7
    3ae6:	f0 94       	com	r15
    3ae8:	f7 f8       	bld	r15, 7
    3aea:	f0 94       	com	r15
    3aec:	95 01       	movw	r18, r10
    3aee:	a8 01       	movw	r20, r16
    3af0:	c7 01       	movw	r24, r14
    3af2:	b6 01       	movw	r22, r12
    3af4:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <__gesf2>
    3af8:	18 16       	cp	r1, r24
    3afa:	64 f0       	brlt	.+24     	; 0x3b14 <AccelStepper::setSpeed(float)+0x72>
    3afc:	95 01       	movw	r18, r10
    3afe:	a8 01       	movw	r20, r16
    3b00:	c3 01       	movw	r24, r6
    3b02:	b2 01       	movw	r22, r4
    3b04:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    3b08:	65 01       	movw	r12, r10
    3b0a:	78 01       	movw	r14, r16
    3b0c:	87 ff       	sbrs	r24, 7
    3b0e:	02 c0       	rjmp	.+4      	; 0x3b14 <AccelStepper::setSpeed(float)+0x72>
    3b10:	73 01       	movw	r14, r6
    3b12:	62 01       	movw	r12, r4
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	a9 01       	movw	r20, r18
    3b1a:	c7 01       	movw	r24, r14
    3b1c:	b6 01       	movw	r22, r12
    3b1e:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    3b22:	81 11       	cpse	r24, r1
    3b24:	17 c0       	rjmp	.+46     	; 0x3b54 <AccelStepper::setSpeed(float)+0xb2>
    3b26:	1b 82       	std	Y+3, r1	; 0x03
    3b28:	1c 82       	std	Y+4, r1	; 0x04
    3b2a:	1d 82       	std	Y+5, r1	; 0x05
    3b2c:	1e 82       	std	Y+6, r1	; 0x06
    3b2e:	c8 8e       	std	Y+24, r12	; 0x18
    3b30:	d9 8e       	std	Y+25, r13	; 0x19
    3b32:	ea 8e       	std	Y+26, r14	; 0x1a
    3b34:	fb 8e       	std	Y+27, r15	; 0x1b
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	0f 91       	pop	r16
    3b3e:	ff 90       	pop	r15
    3b40:	ef 90       	pop	r14
    3b42:	df 90       	pop	r13
    3b44:	cf 90       	pop	r12
    3b46:	bf 90       	pop	r11
    3b48:	af 90       	pop	r10
    3b4a:	7f 90       	pop	r7
    3b4c:	6f 90       	pop	r6
    3b4e:	5f 90       	pop	r5
    3b50:	4f 90       	pop	r4
    3b52:	08 95       	ret
    3b54:	a7 01       	movw	r20, r14
    3b56:	96 01       	movw	r18, r12
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	74 e2       	ldi	r23, 0x24	; 36
    3b5c:	84 e7       	ldi	r24, 0x74	; 116
    3b5e:	99 e4       	ldi	r25, 0x49	; 73
    3b60:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
    3b64:	9f 77       	andi	r25, 0x7F	; 127
    3b66:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <__fixunssfsi>
    3b6a:	6b 83       	std	Y+3, r22	; 0x03
    3b6c:	7c 83       	std	Y+4, r23	; 0x04
    3b6e:	8d 83       	std	Y+5, r24	; 0x05
    3b70:	9e 83       	std	Y+6, r25	; 0x06
    3b72:	11 e0       	ldi	r17, 0x01	; 1
    3b74:	20 e0       	ldi	r18, 0x00	; 0
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	a9 01       	movw	r20, r18
    3b7a:	c7 01       	movw	r24, r14
    3b7c:	b6 01       	movw	r22, r12
    3b7e:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <__gesf2>
    3b82:	18 16       	cp	r1, r24
    3b84:	0c f0       	brlt	.+2      	; 0x3b88 <AccelStepper::setSpeed(float)+0xe6>
    3b86:	10 e0       	ldi	r17, 0x00	; 0
    3b88:	1a 83       	std	Y+2, r17	; 0x02
    3b8a:	d1 cf       	rjmp	.-94     	; 0x3b2e <AccelStepper::setSpeed(float)+0x8c>

00003b8c <AccelStepper::runSpeedToPosition()>:
_ZN12AccelStepper18runSpeedToPositionEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:647

boolean AccelStepper::runSpeedToPosition()
{
    3b8c:	0f 93       	push	r16
    3b8e:	1f 93       	push	r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:648
    if (_targetPos == _currentPos)
    3b90:	fc 01       	movw	r30, r24
    3b92:	04 89       	ldd	r16, Z+20	; 0x14
    3b94:	15 89       	ldd	r17, Z+21	; 0x15
    3b96:	26 89       	ldd	r18, Z+22	; 0x16
    3b98:	37 89       	ldd	r19, Z+23	; 0x17
    3b9a:	40 89       	ldd	r20, Z+16	; 0x10
    3b9c:	51 89       	ldd	r21, Z+17	; 0x11
    3b9e:	62 89       	ldd	r22, Z+18	; 0x12
    3ba0:	73 89       	ldd	r23, Z+19	; 0x13
    3ba2:	04 17       	cp	r16, r20
    3ba4:	15 07       	cpc	r17, r21
    3ba6:	26 07       	cpc	r18, r22
    3ba8:	37 07       	cpc	r19, r23
    3baa:	69 f0       	breq	.+26     	; 0x3bc6 <AccelStepper::runSpeedToPosition()+0x3a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:650
	return false;
    if (_targetPos >_currentPos)
    3bac:	40 17       	cp	r20, r16
    3bae:	51 07       	cpc	r21, r17
    3bb0:	62 07       	cpc	r22, r18
    3bb2:	73 07       	cpc	r23, r19
    3bb4:	34 f4       	brge	.+12     	; 0x3bc2 <AccelStepper::runSpeedToPosition()+0x36>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:651
	_direction = DIRECTION_CW;
    3bb6:	21 e0       	ldi	r18, 0x01	; 1
    3bb8:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
}
    3bba:	1f 91       	pop	r17
    3bbc:	0f 91       	pop	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:654
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
    3bbe:	0c 94 cd 1b 	jmp	0x379a	; 0x379a <AccelStepper::runSpeed()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:653
    if (_targetPos == _currentPos)
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    3bc2:	12 82       	std	Z+2, r1	; 0x02
    3bc4:	fa cf       	rjmp	.-12     	; 0x3bba <AccelStepper::runSpeedToPosition()+0x2e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    return runSpeed();
}
    3bc6:	80 e0       	ldi	r24, 0x00	; 0
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	08 95       	ret

00003bce <u8x8_gpio_and_delay_arduino>:
u8x8_gpio_and_delay_arduino():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1909
  u8x8_SetPin(u8x8, U8X8_PIN_D7, d7);
  u8x8_SetPin(u8x8, U8X8_PIN_E, e1);
  u8x8_SetPin(u8x8, U8X8_PIN_CS, e2);
  u8x8_SetPin(u8x8, U8X8_PIN_DC, dc);
  u8x8_SetPin(u8x8, U8X8_PIN_RESET, reset);
}
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	8c 01       	movw	r16, r24
    3bd8:	c6 2f       	mov	r28, r22
    3bda:	64 2f       	mov	r22, r20
    3bdc:	cc 32       	cpi	r28, 0x2C	; 44
    3bde:	a8 f4       	brcc	.+42     	; 0x3c0a <u8x8_gpio_and_delay_arduino+0x3c>
    3be0:	ca 32       	cpi	r28, 0x2A	; 42
    3be2:	d0 f5       	brcc	.+116    	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>
    3be4:	c8 32       	cpi	r28, 0x28	; 40
    3be6:	39 f1       	breq	.+78     	; 0x3c36 <u8x8_gpio_and_delay_arduino+0x68>
    3be8:	c9 32       	cpi	r28, 0x29	; 41
    3bea:	e1 f1       	breq	.+120    	; 0x3c64 <u8x8_gpio_and_delay_arduino+0x96>
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	c0 34       	cpi	r28, 0x40	; 64
    3bf0:	a0 f1       	brcs	.+104    	; 0x3c5a <u8x8_gpio_and_delay_arduino+0x8c>
    3bf2:	cf 73       	andi	r28, 0x3F	; 63
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	ec 0f       	add	r30, r28
    3bf8:	f1 1d       	adc	r31, r1
    3bfa:	d6 8d       	ldd	r29, Z+30	; 0x1e
    3bfc:	df 3f       	cpi	r29, 0xFF	; 255
    3bfe:	61 f1       	breq	.+88     	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>
    3c00:	c0 31       	cpi	r28, 0x10	; 16
    3c02:	08 f0       	brcs	.+2      	; 0x3c06 <u8x8_gpio_and_delay_arduino+0x38>
    3c04:	42 c0       	rjmp	.+132    	; 0x3c8a <u8x8_gpio_and_delay_arduino+0xbc>
    3c06:	8d 2f       	mov	r24, r29
    3c08:	13 c0       	rjmp	.+38     	; 0x3c30 <u8x8_gpio_and_delay_arduino+0x62>
    3c0a:	cd 32       	cpi	r28, 0x2D	; 45
    3c0c:	89 f1       	breq	.+98     	; 0x3c70 <u8x8_gpio_and_delay_arduino+0xa2>
    3c0e:	70 f3       	brcs	.-36     	; 0x3bec <u8x8_gpio_and_delay_arduino+0x1e>
    3c10:	84 eb       	ldi	r24, 0xB4	; 180
    3c12:	8c 0f       	add	r24, r28
    3c14:	82 30       	cpi	r24, 0x02	; 2
    3c16:	50 f7       	brcc	.-44     	; 0x3bec <u8x8_gpio_and_delay_arduino+0x1e>
    3c18:	cf 73       	andi	r28, 0x3F	; 63
    3c1a:	c0 0f       	add	r28, r16
    3c1c:	d1 2f       	mov	r29, r17
    3c1e:	d1 1d       	adc	r29, r1
    3c20:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c22:	41 11       	cpse	r20, r1
    3c24:	2e c0       	rjmp	.+92     	; 0x3c82 <u8x8_gpio_and_delay_arduino+0xb4>
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    3c2c:	60 e0       	ldi	r22, 0x00	; 0
    3c2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3c30:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
    3c34:	11 c0       	rjmp	.+34     	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>
    3c36:	02 5e       	subi	r16, 0xE2	; 226
    3c38:	1f 4f       	sbci	r17, 0xFF	; 255
    3c3a:	d0 e0       	ldi	r29, 0x00	; 0
    3c3c:	f8 01       	movw	r30, r16
    3c3e:	81 91       	ld	r24, Z+
    3c40:	8f 01       	movw	r16, r30
    3c42:	8f 3f       	cpi	r24, 0xFF	; 255
    3c44:	31 f0       	breq	.+12     	; 0x3c52 <u8x8_gpio_and_delay_arduino+0x84>
    3c46:	61 e0       	ldi	r22, 0x01	; 1
    3c48:	d0 31       	cpi	r29, 0x10	; 16
    3c4a:	08 f0       	brcs	.+2      	; 0x3c4e <u8x8_gpio_and_delay_arduino+0x80>
    3c4c:	62 e0       	ldi	r22, 0x02	; 2
    3c4e:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    3c52:	df 5f       	subi	r29, 0xFF	; 255
    3c54:	d6 31       	cpi	r29, 0x16	; 22
    3c56:	91 f7       	brne	.-28     	; 0x3c3c <u8x8_gpio_and_delay_arduino+0x6e>
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	df 91       	pop	r29
    3c5c:	cf 91       	pop	r28
    3c5e:	1f 91       	pop	r17
    3c60:	0f 91       	pop	r16
    3c62:	08 95       	ret
    3c64:	70 e0       	ldi	r23, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <delay>
    3c6e:	f4 cf       	rjmp	.-24     	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>
    3c70:	85 e0       	ldi	r24, 0x05	; 5
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	43 30       	cpi	r20, 0x03	; 3
    3c76:	10 f0       	brcs	.+4      	; 0x3c7c <u8x8_gpio_and_delay_arduino+0xae>
    3c78:	82 e0       	ldi	r24, 0x02	; 2
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 0b 34 	call	0x6816	; 0x6816 <delayMicroseconds>
    3c80:	eb cf       	rjmp	.-42     	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>
    3c82:	62 e0       	ldi	r22, 0x02	; 2
    3c84:	0e 94 bd 34 	call	0x697a	; 0x697a <pinMode>
    3c88:	e7 cf       	rjmp	.-50     	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>
    3c8a:	c0 31       	cpi	r28, 0x10	; 16
    3c8c:	11 f4       	brne	.+4      	; 0x3c92 <u8x8_gpio_and_delay_arduino+0xc4>
    3c8e:	0e 94 42 33 	call	0x6684	; 0x6684 <yield>
    3c92:	8d 2f       	mov	r24, r29
    3c94:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <digitalRead>
    3c98:	21 e0       	ldi	r18, 0x01	; 1
    3c9a:	89 2b       	or	r24, r25
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <u8x8_gpio_and_delay_arduino+0xd2>
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	f8 01       	movw	r30, r16
    3ca2:	21 8f       	std	Z+25, r18	; 0x19
    3ca4:	d9 cf       	rjmp	.-78     	; 0x3c58 <u8x8_gpio_and_delay_arduino+0x8a>

00003ca6 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>:
_Z18u8x8_SetPin_HW_I2CP11u8x8_structhhh():
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	61 a7       	std	Z+41, r22	; 0x29
    3caa:	42 a7       	std	Z+42, r20	; 0x2a
    3cac:	23 a7       	std	Z+43, r18	; 0x2b
    3cae:	08 95       	ret

00003cb0 <u8x8_byte_arduino_hw_i2c>:
u8x8_byte_arduino_hw_i2c():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1333

/*=============================================*/
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3cb6:	68 31       	cpi	r22, 0x18	; 24
    3cb8:	89 f1       	breq	.+98     	; 0x3d1c <u8x8_byte_arduino_hw_i2c+0x6c>
    3cba:	30 f4       	brcc	.+12     	; 0x3cc8 <u8x8_byte_arduino_hw_i2c+0x18>
    3cbc:	64 31       	cpi	r22, 0x14	; 20
    3cbe:	99 f0       	breq	.+38     	; 0x3ce6 <u8x8_byte_arduino_hw_i2c+0x36>
    3cc0:	67 31       	cpi	r22, 0x17	; 23
    3cc2:	51 f0       	breq	.+20     	; 0x3cd8 <u8x8_byte_arduino_hw_i2c+0x28>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1375
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
      break;
    default:
      return 0;
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	05 c0       	rjmp	.+10     	; 0x3cd2 <u8x8_byte_arduino_hw_i2c+0x22>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3cc8:	69 31       	cpi	r22, 0x19	; 25
    3cca:	c9 f1       	breq	.+114    	; 0x3d3e <u8x8_byte_arduino_hw_i2c+0x8e>
    3ccc:	60 32       	cpi	r22, 0x20	; 32
    3cce:	d1 f7       	brne	.-12     	; 0x3cc4 <u8x8_byte_arduino_hw_i2c+0x14>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1378
      break;
    default:
      return 0;
  }
#endif
  return 1;
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1379
}
    3cd2:	df 91       	pop	r29
    3cd4:	cf 91       	pop	r28
    3cd6:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1338
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	b9 01       	movw	r22, r18
    3cdc:	8a e1       	ldi	r24, 0x1A	; 26
    3cde:	94 e0       	ldi	r25, 0x04	; 4
    3ce0:	0e 94 98 28 	call	0x5130	; 0x5130 <TwoWire::write(unsigned char const*, unsigned int)>
    3ce4:	f5 cf       	rjmp	.-22     	; 0x3cd0 <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1341
      break;
    case U8X8_MSG_BYTE_INIT:
      if ( u8x8->bus_clock == 0 ) 	/* issue 769 */
    3ce6:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ce8:	9d 85       	ldd	r25, Y+13	; 0x0d
    3cea:	ae 85       	ldd	r26, Y+14	; 0x0e
    3cec:	bf 85       	ldd	r27, Y+15	; 0x0f
    3cee:	89 2b       	or	r24, r25
    3cf0:	8a 2b       	or	r24, r26
    3cf2:	8b 2b       	or	r24, r27
    3cf4:	71 f4       	brne	.+28     	; 0x3d12 <u8x8_byte_arduino_hw_i2c+0x62>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1342
	u8x8->bus_clock = u8x8->display_info->i2c_bus_clock_100kHz * 100000UL;
    3cf6:	e8 81       	ld	r30, Y
    3cf8:	f9 81       	ldd	r31, Y+1	; 0x01
    3cfa:	a5 85       	ldd	r26, Z+13	; 0x0d
    3cfc:	b0 e0       	ldi	r27, 0x00	; 0
    3cfe:	20 ea       	ldi	r18, 0xA0	; 160
    3d00:	36 e8       	ldi	r19, 0x86	; 134
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	50 e0       	ldi	r21, 0x00	; 0
    3d06:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <__muluhisi3>
    3d0a:	6c 87       	std	Y+12, r22	; 0x0c
    3d0c:	7d 87       	std	Y+13, r23	; 0x0d
    3d0e:	8e 87       	std	Y+14, r24	; 0x0e
    3d10:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1355
      else
      {
	Wire.begin();
      }
#else
      Wire.begin();
    3d12:	8a e1       	ldi	r24, 0x1A	; 26
    3d14:	94 e0       	ldi	r25, 0x04	; 4
    3d16:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <TwoWire::begin()>
    3d1a:	da cf       	rjmp	.-76     	; 0x3cd0 <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1366
#if ARDUINO >= 10600
      /* not sure when the setClock function was introduced, but it is there since 1.6.0 */
      /* if there is any error with Wire.setClock() just remove this function call by */
      /* defining U8X8_DO_NOT_SET_WIRE_CLOCK */
#ifndef U8X8_DO_NOT_SET_WIRE_CLOCK
      Wire.setClock(u8x8->bus_clock);
    3d1c:	4c 85       	ldd	r20, Y+12	; 0x0c
    3d1e:	5d 85       	ldd	r21, Y+13	; 0x0d
    3d20:	6e 85       	ldd	r22, Y+14	; 0x0e
    3d22:	7f 85       	ldd	r23, Y+15	; 0x0f
    3d24:	8a e1       	ldi	r24, 0x1A	; 26
    3d26:	94 e0       	ldi	r25, 0x04	; 4
    3d28:	0e 94 83 29 	call	0x5306	; 0x5306 <TwoWire::setClock(unsigned long)>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1369
#endif 
#endif
      Wire.beginTransmission(u8x8_GetI2CAddress(u8x8)>>1);
    3d2c:	6e 89       	ldd	r22, Y+22	; 0x16
    3d2e:	70 e0       	ldi	r23, 0x00	; 0
    3d30:	75 95       	asr	r23
    3d32:	67 95       	ror	r22
    3d34:	8a e1       	ldi	r24, 0x1A	; 26
    3d36:	94 e0       	ldi	r25, 0x04	; 4
    3d38:	0e 94 8a 29 	call	0x5314	; 0x5314 <TwoWire::beginTransmission(int)>
    3d3c:	c9 cf       	rjmp	.-110    	; 0x3cd0 <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1372
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
    3d3e:	8a e1       	ldi	r24, 0x1A	; 26
    3d40:	94 e0       	ldi	r25, 0x04	; 4
    3d42:	0e 94 a6 29 	call	0x534c	; 0x534c <TwoWire::endTransmission()>
    3d46:	c4 cf       	rjmp	.-120    	; 0x3cd0 <u8x8_byte_arduino_hw_i2c+0x20>

00003d48 <u8g2_send_buffer>:
u8g2_send_buffer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:96

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    3d48:	af 92       	push	r10
    3d4a:	bf 92       	push	r11
    3d4c:	cf 92       	push	r12
    3d4e:	df 92       	push	r13
    3d50:	ef 92       	push	r14
    3d52:	ff 92       	push	r15
    3d54:	0f 93       	push	r16
    3d56:	1f 93       	push	r17
    3d58:	cf 93       	push	r28
    3d5a:	df 93       	push	r29
    3d5c:	ec 01       	movw	r28, r24
    3d5e:	aa ac       	ldd	r10, Y+58	; 0x3a
    3d60:	eb ac       	ldd	r14, Y+59	; 0x3b
    3d62:	e8 81       	ld	r30, Y
    3d64:	f9 81       	ldd	r31, Y+1	; 0x01
    3d66:	b1 88       	ldd	r11, Z+17	; 0x11
    3d68:	fe 2c       	mov	r15, r14
    3d6a:	d1 2c       	mov	r13, r1
    3d6c:	c1 2c       	mov	r12, r1
u8g2_send_tile_row():
    3d6e:	e8 81       	ld	r30, Y
    3d70:	f9 81       	ldd	r31, Y+1	; 0x01
    3d72:	20 89       	ldd	r18, Z+16	; 0x10
    3d74:	08 ad       	ldd	r16, Y+56	; 0x38
    3d76:	19 ad       	ldd	r17, Y+57	; 0x39
    3d78:	88 e0       	ldi	r24, 0x08	; 8
    3d7a:	28 9f       	mul	r18, r24
    3d7c:	a0 01       	movw	r20, r0
    3d7e:	11 24       	eor	r1, r1
    3d80:	4c 9d       	mul	r20, r12
    3d82:	c0 01       	movw	r24, r0
    3d84:	4d 9d       	mul	r20, r13
    3d86:	90 0d       	add	r25, r0
    3d88:	5c 9d       	mul	r21, r12
    3d8a:	90 0d       	add	r25, r0
    3d8c:	11 24       	eor	r1, r1
    3d8e:	08 0f       	add	r16, r24
    3d90:	19 1f       	adc	r17, r25
    3d92:	4f 2d       	mov	r20, r15
    3d94:	60 e0       	ldi	r22, 0x00	; 0
    3d96:	ce 01       	movw	r24, r28
    3d98:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <u8x8_DrawTile>
u8g2_send_buffer():
    3d9c:	f3 94       	inc	r15
    3d9e:	8f 2d       	mov	r24, r15
    3da0:	8e 19       	sub	r24, r14
    3da2:	8a 15       	cp	r24, r10
    3da4:	28 f4       	brcc	.+10     	; 0x3db0 <u8g2_send_buffer+0x68>
    3da6:	8f ef       	ldi	r24, 0xFF	; 255
    3da8:	c8 1a       	sub	r12, r24
    3daa:	d8 0a       	sbc	r13, r24
    3dac:	fb 14       	cp	r15, r11
    3dae:	f8 f2       	brcs	.-66     	; 0x3d6e <u8g2_send_buffer+0x26>
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	ff 90       	pop	r15
    3dba:	ef 90       	pop	r14
    3dbc:	df 90       	pop	r13
    3dbe:	cf 90       	pop	r12
    3dc0:	bf 90       	pop	r11
    3dc2:	af 90       	pop	r10
    3dc4:	08 95       	ret

00003dc6 <u8g2_ClearBuffer>:
u8g2_ClearBuffer():
    3dc6:	fc 01       	movw	r30, r24
    3dc8:	a0 81       	ld	r26, Z
    3dca:	b1 81       	ldd	r27, Z+1	; 0x01
    3dcc:	50 96       	adiw	r26, 0x10	; 16
    3dce:	2c 91       	ld	r18, X
    3dd0:	82 ad       	ldd	r24, Z+58	; 0x3a
    3dd2:	38 e0       	ldi	r19, 0x08	; 8
    3dd4:	83 9f       	mul	r24, r19
    3dd6:	c0 01       	movw	r24, r0
    3dd8:	11 24       	eor	r1, r1
    3dda:	28 9f       	mul	r18, r24
    3ddc:	a0 01       	movw	r20, r0
    3dde:	29 9f       	mul	r18, r25
    3de0:	50 0d       	add	r21, r0
    3de2:	11 24       	eor	r1, r1
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	80 ad       	ldd	r24, Z+56	; 0x38
    3dea:	91 ad       	ldd	r25, Z+57	; 0x39
    3dec:	0c 94 38 3a 	jmp	0x7470	; 0x7470 <memset>

00003df0 <u8g2_SetBufferCurrTileRow>:
u8g2_SetBufferCurrTileRow():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:101
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    3df0:	cf 93       	push	r28
    3df2:	df 93       	push	r29
    3df4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:102
  u8g2->tile_curr_row = row;
    3df6:	6b af       	std	Y+59, r22	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:103
  u8g2->cb->update_dimension(u8g2);
    3df8:	ee a9       	ldd	r30, Y+54	; 0x36
    3dfa:	ff a9       	ldd	r31, Y+55	; 0x37
    3dfc:	01 90       	ld	r0, Z+
    3dfe:	f0 81       	ld	r31, Z
    3e00:	e0 2d       	mov	r30, r0
    3e02:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
  u8g2->cb->update_page_win(u8g2);
    3e04:	ee a9       	ldd	r30, Y+54	; 0x36
    3e06:	ff a9       	ldd	r31, Y+55	; 0x37
    3e08:	02 80       	ldd	r0, Z+2	; 0x02
    3e0a:	f3 81       	ldd	r31, Z+3	; 0x03
    3e0c:	e0 2d       	mov	r30, r0
    3e0e:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:105
}
    3e10:	df 91       	pop	r29
    3e12:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
    3e14:	09 94       	ijmp

00003e16 <u8g2_FirstPage>:
u8g2_FirstPage():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:108
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    3e16:	cf 93       	push	r28
    3e18:	df 93       	push	r29
    3e1a:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:109
  if ( u8g2->is_auto_page_clear )
    3e1c:	fc 01       	movw	r30, r24
    3e1e:	e5 57       	subi	r30, 0x75	; 117
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	80 81       	ld	r24, Z
    3e24:	88 23       	and	r24, r24
    3e26:	19 f0       	breq	.+6      	; 0x3e2e <u8g2_FirstPage+0x18>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:111
  {
    u8g2_ClearBuffer(u8g2);
    3e28:	ce 01       	movw	r24, r28
    3e2a:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <u8g2_ClearBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:114
}
    3e32:	df 91       	pop	r29
    3e34:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    3e36:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <u8g2_SetBufferCurrTileRow>

00003e3a <u8g2_NextPage>:
u8g2_NextPage():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:117
}

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    3e3a:	1f 93       	push	r17
    3e3c:	cf 93       	push	r28
    3e3e:	df 93       	push	r29
    3e40:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:119
  uint8_t row;
  u8g2_send_buffer(u8g2);
    3e42:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <u8g2_send_buffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:120
  row = u8g2->tile_curr_row;
    3e46:	1b ad       	ldd	r17, Y+59	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:121
  row += u8g2->tile_buf_height;
    3e48:	8a ad       	ldd	r24, Y+58	; 0x3a
    3e4a:	18 0f       	add	r17, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:122
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    3e4c:	e8 81       	ld	r30, Y
    3e4e:	f9 81       	ldd	r31, Y+1	; 0x01
    3e50:	81 89       	ldd	r24, Z+17	; 0x11
    3e52:	18 17       	cp	r17, r24
    3e54:	40 f0       	brcs	.+16     	; 0x3e66 <u8g2_NextPage+0x2c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:124
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    3e56:	ce 01       	movw	r24, r28
    3e58:	0e 94 e5 27 	call	0x4fca	; 0x4fca <u8x8_RefreshDisplay>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:125
    return 0;
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:133
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
    3e5e:	df 91       	pop	r29
    3e60:	cf 91       	pop	r28
    3e62:	1f 91       	pop	r17
    3e64:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:127
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    3e66:	fe 01       	movw	r30, r28
    3e68:	e5 57       	subi	r30, 0x75	; 117
    3e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6c:	80 81       	ld	r24, Z
    3e6e:	88 23       	and	r24, r24
    3e70:	19 f0       	breq	.+6      	; 0x3e78 <u8g2_NextPage+0x3e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:129
  {
    u8g2_ClearBuffer(u8g2);
    3e72:	ce 01       	movw	r24, r28
    3e74:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <u8g2_ClearBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:131
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    3e78:	61 2f       	mov	r22, r17
    3e7a:	ce 01       	movw	r24, r28
    3e7c:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <u8g2_SetBufferCurrTileRow>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:132
  return 1;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	ed cf       	rjmp	.-38     	; 0x3e5e <u8g2_NextPage+0x24>

00003e84 <u8g2_ClearDisplay>:
u8g2_ClearDisplay():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:40
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:41
  u8g2_FirstPage(u8g2);
    3e8a:	0e 94 0b 1f 	call	0x3e16	; 0x3e16 <u8g2_FirstPage>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:43 (discriminator 1)
  do {
  } while ( u8g2_NextPage(u8g2) );
    3e8e:	ce 01       	movw	r24, r28
    3e90:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <u8g2_NextPage>
    3e94:	81 11       	cpse	r24, r1
    3e96:	fb cf       	rjmp	.-10     	; 0x3e8e <u8g2_ClearDisplay+0xa>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    3e98:	60 e0       	ldi	r22, 0x00	; 0
    3e9a:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:53
}
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    3ea0:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <u8g2_SetBufferCurrTileRow>

00003ea4 <u8g2_m_16_8_2>:
u8g2_m_16_8_2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:57
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
    3ea4:	22 e0       	ldi	r18, 0x02	; 2
    3ea6:	fc 01       	movw	r30, r24
    3ea8:	20 83       	st	Z, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:60
  return buf;
  #endif
}
    3eaa:	89 e1       	ldi	r24, 0x19	; 25
    3eac:	93 e0       	ldi	r25, 0x03	; 3
    3eae:	08 95       	ret

00003eb0 <u8g2_Setup_sh1106_i2c_128x64_noname_2>:
u8g2_Setup_sh1106_i2c_128x64_noname_2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:714
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 2 */
void u8g2_Setup_sh1106_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    3eb0:	cf 92       	push	r12
    3eb2:	df 92       	push	r13
    3eb4:	ef 92       	push	r14
    3eb6:	ff 92       	push	r15
    3eb8:	0f 93       	push	r16
    3eba:	1f 93       	push	r17
    3ebc:	cf 93       	push	r28
    3ebe:	df 93       	push	r29
    3ec0:	1f 92       	push	r1
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	7c 01       	movw	r14, r24
    3ec8:	6b 01       	movw	r12, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:717
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    3eca:	89 01       	movw	r16, r18
    3ecc:	9a 01       	movw	r18, r20
    3ece:	4a e6       	ldi	r20, 0x6A	; 106
    3ed0:	56 e2       	ldi	r21, 0x26	; 38
    3ed2:	68 e4       	ldi	r22, 0x48	; 72
    3ed4:	77 e2       	ldi	r23, 0x27	; 39
    3ed6:	0e 94 15 28 	call	0x502a	; 0x502a <u8x8_Setup>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:718
  buf = u8g2_m_16_8_2(&tile_buf_height);
    3eda:	ce 01       	movw	r24, r28
    3edc:	01 96       	adiw	r24, 0x01	; 1
    3ede:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <u8g2_m_16_8_2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:719
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    3ee2:	86 01       	movw	r16, r12
    3ee4:	2e ef       	ldi	r18, 0xFE	; 254
    3ee6:	33 e2       	ldi	r19, 0x23	; 35
    3ee8:	49 81       	ldd	r20, Y+1	; 0x01
    3eea:	bc 01       	movw	r22, r24
    3eec:	c7 01       	movw	r24, r14
    3eee:	0e 94 6f 25 	call	0x4ade	; 0x4ade <u8g2_SetupBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:720
}
    3ef2:	0f 90       	pop	r0
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	ff 90       	pop	r15
    3efe:	ef 90       	pop	r14
    3f00:	df 90       	pop	r13
    3f02:	cf 90       	pop	r12
    3f04:	08 95       	ret

00003f06 <u8g2_font_get_word>:
u8g2_font_get_word():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1275
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}
    3f06:	fc 01       	movw	r30, r24
    3f08:	e6 0f       	add	r30, r22
    3f0a:	f1 1d       	adc	r31, r1
    3f0c:	84 91       	lpm	r24, Z
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	98 2f       	mov	r25, r24
    3f12:	88 27       	eor	r24, r24
    3f14:	31 96       	adiw	r30, 0x01	; 1
    3f16:	e4 91       	lpm	r30, Z
    3f18:	8e 0f       	add	r24, r30
    3f1a:	91 1d       	adc	r25, r1
    3f1c:	08 95       	ret

00003f1e <u8g2_font_calc_vref_font>:
u8g2_font_calc_vref_font():
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	80 e0       	ldi	r24, 0x00	; 0
    3f22:	08 95       	ret

00003f24 <u8g2_read_font_info>:
u8g2_read_font_info():
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	ec 01       	movw	r28, r24
    3f2e:	8b 01       	movw	r16, r22
u8g2_font_get_byte():
    3f30:	fb 01       	movw	r30, r22
    3f32:	84 91       	lpm	r24, Z
u8g2_read_font_info():
    3f34:	88 83       	st	Y, r24
u8g2_font_get_byte():
    3f36:	31 96       	adiw	r30, 0x01	; 1
    3f38:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f3a:	e9 83       	std	Y+1, r30	; 0x01
u8g2_font_get_byte():
    3f3c:	fb 01       	movw	r30, r22
    3f3e:	32 96       	adiw	r30, 0x02	; 2
    3f40:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f42:	ea 83       	std	Y+2, r30	; 0x02
u8g2_font_get_byte():
    3f44:	fb 01       	movw	r30, r22
    3f46:	33 96       	adiw	r30, 0x03	; 3
    3f48:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f4a:	eb 83       	std	Y+3, r30	; 0x03
u8g2_font_get_byte():
    3f4c:	fb 01       	movw	r30, r22
    3f4e:	34 96       	adiw	r30, 0x04	; 4
    3f50:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f52:	ec 83       	std	Y+4, r30	; 0x04
u8g2_font_get_byte():
    3f54:	fb 01       	movw	r30, r22
    3f56:	35 96       	adiw	r30, 0x05	; 5
    3f58:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f5a:	ed 83       	std	Y+5, r30	; 0x05
u8g2_font_get_byte():
    3f5c:	fb 01       	movw	r30, r22
    3f5e:	36 96       	adiw	r30, 0x06	; 6
    3f60:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f62:	ee 83       	std	Y+6, r30	; 0x06
u8g2_font_get_byte():
    3f64:	fb 01       	movw	r30, r22
    3f66:	37 96       	adiw	r30, 0x07	; 7
    3f68:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f6a:	ef 83       	std	Y+7, r30	; 0x07
u8g2_font_get_byte():
    3f6c:	fb 01       	movw	r30, r22
    3f6e:	38 96       	adiw	r30, 0x08	; 8
    3f70:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f72:	e8 87       	std	Y+8, r30	; 0x08
u8g2_font_get_byte():
    3f74:	fb 01       	movw	r30, r22
    3f76:	39 96       	adiw	r30, 0x09	; 9
    3f78:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f7a:	e9 87       	std	Y+9, r30	; 0x09
u8g2_font_get_byte():
    3f7c:	fb 01       	movw	r30, r22
    3f7e:	3a 96       	adiw	r30, 0x0a	; 10
    3f80:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f82:	ea 87       	std	Y+10, r30	; 0x0a
u8g2_font_get_byte():
    3f84:	fb 01       	movw	r30, r22
    3f86:	3b 96       	adiw	r30, 0x0b	; 11
    3f88:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f8a:	eb 87       	std	Y+11, r30	; 0x0b
u8g2_font_get_byte():
    3f8c:	fb 01       	movw	r30, r22
    3f8e:	3c 96       	adiw	r30, 0x0c	; 12
    3f90:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f92:	ec 87       	std	Y+12, r30	; 0x0c
u8g2_font_get_byte():
    3f94:	fb 01       	movw	r30, r22
    3f96:	3d 96       	adiw	r30, 0x0d	; 13
    3f98:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3f9a:	ed 87       	std	Y+13, r30	; 0x0d
u8g2_font_get_byte():
    3f9c:	fb 01       	movw	r30, r22
    3f9e:	3e 96       	adiw	r30, 0x0e	; 14
    3fa0:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3fa2:	ee 87       	std	Y+14, r30	; 0x0e
u8g2_font_get_byte():
    3fa4:	fb 01       	movw	r30, r22
    3fa6:	3f 96       	adiw	r30, 0x0f	; 15
    3fa8:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3faa:	ef 87       	std	Y+15, r30	; 0x0f
u8g2_font_get_byte():
    3fac:	fb 01       	movw	r30, r22
    3fae:	70 96       	adiw	r30, 0x10	; 16
    3fb0:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    3fb2:	e8 8b       	std	Y+16, r30	; 0x10
    3fb4:	61 e1       	ldi	r22, 0x11	; 17
    3fb6:	c8 01       	movw	r24, r16
    3fb8:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <u8g2_font_get_word>
    3fbc:	9a 8b       	std	Y+18, r25	; 0x12
    3fbe:	89 8b       	std	Y+17, r24	; 0x11
    3fc0:	63 e1       	ldi	r22, 0x13	; 19
    3fc2:	c8 01       	movw	r24, r16
    3fc4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <u8g2_font_get_word>
    3fc8:	9c 8b       	std	Y+20, r25	; 0x14
    3fca:	8b 8b       	std	Y+19, r24	; 0x13
    3fcc:	65 e1       	ldi	r22, 0x15	; 21
    3fce:	c8 01       	movw	r24, r16
    3fd0:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <u8g2_font_get_word>
    3fd4:	9e 8b       	std	Y+22, r25	; 0x16
    3fd6:	8d 8b       	std	Y+21, r24	; 0x15
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	1f 91       	pop	r17
    3fde:	0f 91       	pop	r16
    3fe0:	08 95       	ret

00003fe2 <u8g2_font_decode_get_unsigned_bits>:
u8g2_font_decode_get_unsigned_bits():
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	1a 96       	adiw	r26, 0x0a	; 10
    3fe6:	4c 91       	ld	r20, X
    3fe8:	1a 97       	sbiw	r26, 0x0a	; 10
    3fea:	ed 91       	ld	r30, X+
    3fec:	fc 91       	ld	r31, X
    3fee:	11 97       	sbiw	r26, 0x01	; 1
    3ff0:	24 91       	lpm	r18, Z
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	04 2e       	mov	r0, r20
    3ff6:	02 c0       	rjmp	.+4      	; 0x3ffc <u8g2_font_decode_get_unsigned_bits+0x1a>
    3ff8:	35 95       	asr	r19
    3ffa:	27 95       	ror	r18
    3ffc:	0a 94       	dec	r0
    3ffe:	e2 f7       	brpl	.-8      	; 0x3ff8 <u8g2_font_decode_get_unsigned_bits+0x16>
    4000:	84 2f       	mov	r24, r20
    4002:	86 0f       	add	r24, r22
    4004:	88 30       	cpi	r24, 0x08	; 8
    4006:	68 f0       	brcs	.+26     	; 0x4022 <u8g2_font_decode_get_unsigned_bits+0x40>
    4008:	31 96       	adiw	r30, 0x01	; 1
    400a:	11 96       	adiw	r26, 0x01	; 1
    400c:	fc 93       	st	X, r31
    400e:	ee 93       	st	-X, r30
    4010:	e4 91       	lpm	r30, Z
    4012:	98 e0       	ldi	r25, 0x08	; 8
    4014:	94 1b       	sub	r25, r20
    4016:	01 c0       	rjmp	.+2      	; 0x401a <u8g2_font_decode_get_unsigned_bits+0x38>
    4018:	ee 0f       	add	r30, r30
    401a:	9a 95       	dec	r25
    401c:	ea f7       	brpl	.-6      	; 0x4018 <u8g2_font_decode_get_unsigned_bits+0x36>
    401e:	2e 2b       	or	r18, r30
    4020:	88 50       	subi	r24, 0x08	; 8
    4022:	1a 96       	adiw	r26, 0x0a	; 10
    4024:	8c 93       	st	X, r24
    4026:	8f ef       	ldi	r24, 0xFF	; 255
    4028:	9f ef       	ldi	r25, 0xFF	; 255
    402a:	01 c0       	rjmp	.+2      	; 0x402e <u8g2_font_decode_get_unsigned_bits+0x4c>
    402c:	88 0f       	add	r24, r24
    402e:	6a 95       	dec	r22
    4030:	ea f7       	brpl	.-6      	; 0x402c <u8g2_font_decode_get_unsigned_bits+0x4a>
    4032:	80 95       	com	r24
    4034:	82 23       	and	r24, r18
    4036:	08 95       	ret

00004038 <u8g2_font_setup_decode>:
u8g2_font_setup_decode():
    4038:	0f 93       	push	r16
    403a:	1f 93       	push	r17
    403c:	cf 93       	push	r28
    403e:	df 93       	push	r29
    4040:	8c 01       	movw	r16, r24
    4042:	ec 01       	movw	r28, r24
    4044:	c2 5a       	subi	r28, 0xA2	; 162
    4046:	df 4f       	sbci	r29, 0xFF	; 255
    4048:	79 83       	std	Y+1, r23	; 0x01
    404a:	68 83       	st	Y, r22
    404c:	1a 86       	std	Y+10, r1	; 0x0a
    404e:	fc 01       	movw	r30, r24
    4050:	ef 58       	subi	r30, 0x8F	; 143
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	60 81       	ld	r22, Z
    4056:	ce 01       	movw	r24, r28
    4058:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_font_decode_get_unsigned_bits>
    405c:	88 87       	std	Y+8, r24	; 0x08
    405e:	f8 01       	movw	r30, r16
    4060:	ee 58       	subi	r30, 0x8E	; 142
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	60 81       	ld	r22, Z
    4066:	ce 01       	movw	r24, r28
    4068:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_font_decode_get_unsigned_bits>
    406c:	89 87       	std	Y+9, r24	; 0x09
    406e:	f8 01       	movw	r30, r16
    4070:	e6 57       	subi	r30, 0x76	; 118
    4072:	ff 4f       	sbci	r31, 0xFF	; 255
    4074:	90 81       	ld	r25, Z
    4076:	9c 87       	std	Y+12, r25	; 0x0c
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	91 11       	cpse	r25, r1
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	8d 87       	std	Y+13, r24	; 0x0d
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	0f 91       	pop	r16
    4088:	08 95       	ret

0000408a <u8g2_font_decode_get_signed_bits>:
u8g2_font_decode_get_signed_bits():
    408a:	cf 93       	push	r28
    408c:	c6 2f       	mov	r28, r22
    408e:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_font_decode_get_unsigned_bits>
    4092:	c1 50       	subi	r28, 0x01	; 1
    4094:	21 e0       	ldi	r18, 0x01	; 1
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	01 c0       	rjmp	.+2      	; 0x409c <u8g2_font_decode_get_signed_bits+0x12>
    409a:	22 0f       	add	r18, r18
    409c:	ca 95       	dec	r28
    409e:	ea f7       	brpl	.-6      	; 0x409a <u8g2_font_decode_get_signed_bits+0x10>
    40a0:	82 1b       	sub	r24, r18
    40a2:	cf 91       	pop	r28
    40a4:	08 95       	ret

000040a6 <u8g2_add_vector_y>:
u8g2_add_vector_y():
    40a6:	21 30       	cpi	r18, 0x01	; 1
    40a8:	69 f0       	breq	.+26     	; 0x40c4 <u8g2_add_vector_y+0x1e>
    40aa:	38 f0       	brcs	.+14     	; 0x40ba <u8g2_add_vector_y+0x14>
    40ac:	22 30       	cpi	r18, 0x02	; 2
    40ae:	79 f0       	breq	.+30     	; 0x40ce <u8g2_add_vector_y+0x28>
    40b0:	86 1b       	sub	r24, r22
    40b2:	91 09       	sbc	r25, r1
    40b4:	67 fd       	sbrc	r22, 7
    40b6:	93 95       	inc	r25
    40b8:	08 95       	ret
    40ba:	84 0f       	add	r24, r20
    40bc:	91 1d       	adc	r25, r1
    40be:	47 fd       	sbrc	r20, 7
    40c0:	9a 95       	dec	r25
    40c2:	08 95       	ret
    40c4:	86 0f       	add	r24, r22
    40c6:	91 1d       	adc	r25, r1
    40c8:	67 fd       	sbrc	r22, 7
    40ca:	9a 95       	dec	r25
    40cc:	08 95       	ret
    40ce:	84 1b       	sub	r24, r20
    40d0:	91 09       	sbc	r25, r1
    40d2:	47 fd       	sbrc	r20, 7
    40d4:	93 95       	inc	r25
    40d6:	08 95       	ret

000040d8 <u8g2_add_vector_x>:
u8g2_add_vector_x():
    40d8:	21 30       	cpi	r18, 0x01	; 1
    40da:	69 f0       	breq	.+26     	; 0x40f6 <u8g2_add_vector_x+0x1e>
    40dc:	38 f0       	brcs	.+14     	; 0x40ec <u8g2_add_vector_x+0x14>
    40de:	22 30       	cpi	r18, 0x02	; 2
    40e0:	79 f0       	breq	.+30     	; 0x4100 <u8g2_add_vector_x+0x28>
    40e2:	84 0f       	add	r24, r20
    40e4:	91 1d       	adc	r25, r1
    40e6:	47 fd       	sbrc	r20, 7
    40e8:	9a 95       	dec	r25
    40ea:	08 95       	ret
    40ec:	86 0f       	add	r24, r22
    40ee:	91 1d       	adc	r25, r1
    40f0:	67 fd       	sbrc	r22, 7
    40f2:	9a 95       	dec	r25
    40f4:	08 95       	ret
    40f6:	84 1b       	sub	r24, r20
    40f8:	91 09       	sbc	r25, r1
    40fa:	47 fd       	sbrc	r20, 7
    40fc:	93 95       	inc	r25
    40fe:	08 95       	ret
    4100:	86 1b       	sub	r24, r22
    4102:	91 09       	sbc	r25, r1
    4104:	67 fd       	sbrc	r22, 7
    4106:	93 95       	inc	r25
    4108:	08 95       	ret

0000410a <u8g2_font_decode_len>:
u8g2_font_decode_len():
    410a:	3f 92       	push	r3
    410c:	4f 92       	push	r4
    410e:	5f 92       	push	r5
    4110:	6f 92       	push	r6
    4112:	7f 92       	push	r7
    4114:	8f 92       	push	r8
    4116:	9f 92       	push	r9
    4118:	af 92       	push	r10
    411a:	bf 92       	push	r11
    411c:	cf 92       	push	r12
    411e:	df 92       	push	r13
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	7c 01       	movw	r14, r24
    412e:	16 2f       	mov	r17, r22
    4130:	44 2e       	mov	r4, r20
    4132:	ec 01       	movw	r28, r24
    4134:	c2 5a       	subi	r28, 0xA2	; 162
    4136:	df 4f       	sbci	r29, 0xFF	; 255
    4138:	5e 80       	ldd	r5, Y+6	; 0x06
    413a:	6f 80       	ldd	r6, Y+7	; 0x07
    413c:	6c 01       	movw	r12, r24
    413e:	8a e8       	ldi	r24, 0x8A	; 138
    4140:	c8 0e       	add	r12, r24
    4142:	d1 1c       	adc	r13, r1
    4144:	78 84       	ldd	r7, Y+8	; 0x08
    4146:	75 18       	sub	r7, r5
    4148:	31 2e       	mov	r3, r17
    414a:	71 16       	cp	r7, r17
    414c:	08 f4       	brcc	.+2      	; 0x4150 <u8g2_font_decode_len+0x46>
    414e:	37 2c       	mov	r3, r7
    4150:	8c 80       	ldd	r8, Y+4	; 0x04
    4152:	9d 80       	ldd	r9, Y+5	; 0x05
    4154:	0e 85       	ldd	r16, Y+14	; 0x0e
    4156:	20 2f       	mov	r18, r16
    4158:	46 2d       	mov	r20, r6
    415a:	65 2d       	mov	r22, r5
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	9b 81       	ldd	r25, Y+3	; 0x03
    4160:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <u8g2_add_vector_x>
    4164:	5c 01       	movw	r10, r24
    4166:	20 2f       	mov	r18, r16
    4168:	46 2d       	mov	r20, r6
    416a:	65 2d       	mov	r22, r5
    416c:	c4 01       	movw	r24, r8
    416e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <u8g2_add_vector_y>
    4172:	ac 01       	movw	r20, r24
    4174:	44 20       	and	r4, r4
    4176:	79 f0       	breq	.+30     	; 0x4196 <u8g2_font_decode_len+0x8c>
    4178:	8c 85       	ldd	r24, Y+12	; 0x0c
    417a:	f6 01       	movw	r30, r12
    417c:	80 83       	st	Z, r24
    417e:	23 2d       	mov	r18, r3
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	b5 01       	movw	r22, r10
    4184:	c7 01       	movw	r24, r14
    4186:	0e 94 04 23 	call	0x4608	; 0x4608 <u8g2_DrawHVLine>
    418a:	17 15       	cp	r17, r7
    418c:	48 f0       	brcs	.+18     	; 0x41a0 <u8g2_font_decode_len+0x96>
    418e:	17 19       	sub	r17, r7
    4190:	63 94       	inc	r6
    4192:	51 2c       	mov	r5, r1
    4194:	d7 cf       	rjmp	.-82     	; 0x4144 <u8g2_font_decode_len+0x3a>
    4196:	8b 85       	ldd	r24, Y+11	; 0x0b
    4198:	81 11       	cpse	r24, r1
    419a:	f7 cf       	rjmp	.-18     	; 0x418a <u8g2_font_decode_len+0x80>
    419c:	8d 85       	ldd	r24, Y+13	; 0x0d
    419e:	ed cf       	rjmp	.-38     	; 0x417a <u8g2_font_decode_len+0x70>
    41a0:	15 0d       	add	r17, r5
    41a2:	1e 83       	std	Y+6, r17	; 0x06
    41a4:	6f 82       	std	Y+7, r6	; 0x07
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	ef 90       	pop	r14
    41b2:	df 90       	pop	r13
    41b4:	cf 90       	pop	r12
    41b6:	bf 90       	pop	r11
    41b8:	af 90       	pop	r10
    41ba:	9f 90       	pop	r9
    41bc:	8f 90       	pop	r8
    41be:	7f 90       	pop	r7
    41c0:	6f 90       	pop	r6
    41c2:	5f 90       	pop	r5
    41c4:	4f 90       	pop	r4
    41c6:	3f 90       	pop	r3
    41c8:	08 95       	ret

000041ca <u8g2_font_decode_glyph>:
u8g2_font_decode_glyph():
    41ca:	8f 92       	push	r8
    41cc:	9f 92       	push	r9
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	cf 92       	push	r12
    41d4:	df 92       	push	r13
    41d6:	ef 92       	push	r14
    41d8:	ff 92       	push	r15
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	7c 01       	movw	r14, r24
    41e4:	ec 01       	movw	r28, r24
    41e6:	c2 5a       	subi	r28, 0xA2	; 162
    41e8:	df 4f       	sbci	r29, 0xFF	; 255
    41ea:	0e 94 1c 20 	call	0x4038	; 0x4038 <u8g2_font_setup_decode>
    41ee:	f7 01       	movw	r30, r14
    41f0:	e9 59       	subi	r30, 0x99	; 153
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	b0 80       	ld	r11, Z
    41f6:	3c 96       	adiw	r30, 0x0c	; 12
    41f8:	60 81       	ld	r22, Z
    41fa:	ce 01       	movw	r24, r28
    41fc:	0e 94 45 20 	call	0x408a	; 0x408a <u8g2_font_decode_get_signed_bits>
    4200:	88 2e       	mov	r8, r24
    4202:	f7 01       	movw	r30, r14
    4204:	ec 58       	subi	r30, 0x8C	; 140
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	60 81       	ld	r22, Z
    420a:	ce 01       	movw	r24, r28
    420c:	0e 94 45 20 	call	0x408a	; 0x408a <u8g2_font_decode_get_signed_bits>
    4210:	08 2f       	mov	r16, r24
    4212:	f7 01       	movw	r30, r14
    4214:	eb 58       	subi	r30, 0x8B	; 139
    4216:	ff 4f       	sbci	r31, 0xFF	; 255
    4218:	60 81       	ld	r22, Z
    421a:	ce 01       	movw	r24, r28
    421c:	0e 94 45 20 	call	0x408a	; 0x408a <u8g2_font_decode_get_signed_bits>
    4220:	a8 2e       	mov	r10, r24
    4222:	98 84       	ldd	r9, Y+8	; 0x08
    4224:	19 14       	cp	r1, r9
    4226:	0c f0       	brlt	.+2      	; 0x422a <u8g2_font_decode_glyph+0x60>
    4228:	61 c0       	rjmp	.+194    	; 0x42ec <u8g2_font_decode_glyph+0x122>
    422a:	1e 85       	ldd	r17, Y+14	; 0x0e
    422c:	0b 0d       	add	r16, r11
    422e:	01 95       	neg	r16
    4230:	21 2f       	mov	r18, r17
    4232:	40 2f       	mov	r20, r16
    4234:	68 2d       	mov	r22, r8
    4236:	8a 81       	ldd	r24, Y+2	; 0x02
    4238:	9b 81       	ldd	r25, Y+3	; 0x03
    423a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <u8g2_add_vector_x>
    423e:	6c 01       	movw	r12, r24
    4240:	9b 83       	std	Y+3, r25	; 0x03
    4242:	8a 83       	std	Y+2, r24	; 0x02
    4244:	21 2f       	mov	r18, r17
    4246:	40 2f       	mov	r20, r16
    4248:	68 2d       	mov	r22, r8
    424a:	8c 81       	ldd	r24, Y+4	; 0x04
    424c:	9d 81       	ldd	r25, Y+5	; 0x05
    424e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <u8g2_add_vector_y>
    4252:	9d 83       	std	Y+5, r25	; 0x05
    4254:	8c 83       	std	Y+4, r24	; 0x04
    4256:	11 30       	cpi	r17, 0x01	; 1
    4258:	09 f4       	brne	.+2      	; 0x425c <u8g2_font_decode_glyph+0x92>
    425a:	56 c0       	rjmp	.+172    	; 0x4308 <u8g2_font_decode_glyph+0x13e>
    425c:	48 f0       	brcs	.+18     	; 0x4270 <u8g2_font_decode_glyph+0xa6>
    425e:	12 30       	cpi	r17, 0x02	; 2
    4260:	09 f4       	brne	.+2      	; 0x4264 <u8g2_font_decode_glyph+0x9a>
    4262:	63 c0       	rjmp	.+198    	; 0x432a <u8g2_font_decode_glyph+0x160>
    4264:	13 30       	cpi	r17, 0x03	; 3
    4266:	09 f4       	brne	.+2      	; 0x426a <u8g2_font_decode_glyph+0xa0>
    4268:	76 c0       	rjmp	.+236    	; 0x4356 <u8g2_font_decode_glyph+0x18c>
    426a:	8c 01       	movw	r16, r24
    426c:	96 01       	movw	r18, r12
    426e:	0a c0       	rjmp	.+20     	; 0x4284 <u8g2_font_decode_glyph+0xba>
    4270:	96 01       	movw	r18, r12
    4272:	29 0d       	add	r18, r9
    4274:	31 1d       	adc	r19, r1
    4276:	97 fc       	sbrc	r9, 7
    4278:	3a 95       	dec	r19
    427a:	8c 01       	movw	r16, r24
    427c:	0b 0d       	add	r16, r11
    427e:	11 1d       	adc	r17, r1
    4280:	b7 fc       	sbrc	r11, 7
    4282:	1a 95       	dec	r17
    4284:	ac 01       	movw	r20, r24
    4286:	b6 01       	movw	r22, r12
    4288:	c7 01       	movw	r24, r14
    428a:	0e 94 c7 23 	call	0x478e	; 0x478e <u8g2_IsIntersection>
    428e:	88 23       	and	r24, r24
    4290:	69 f1       	breq	.+90     	; 0x42ec <u8g2_font_decode_glyph+0x122>
    4292:	1e 82       	std	Y+6, r1	; 0x06
    4294:	1f 82       	std	Y+7, r1	; 0x07
    4296:	87 01       	movw	r16, r14
    4298:	01 59       	subi	r16, 0x91	; 145
    429a:	1f 4f       	sbci	r17, 0xFF	; 255
    429c:	67 01       	movw	r12, r14
    429e:	80 e7       	ldi	r24, 0x70	; 112
    42a0:	c8 0e       	add	r12, r24
    42a2:	d1 1c       	adc	r13, r1
    42a4:	f8 01       	movw	r30, r16
    42a6:	60 81       	ld	r22, Z
    42a8:	ce 01       	movw	r24, r28
    42aa:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_font_decode_get_unsigned_bits>
    42ae:	88 2e       	mov	r8, r24
    42b0:	f6 01       	movw	r30, r12
    42b2:	60 81       	ld	r22, Z
    42b4:	ce 01       	movw	r24, r28
    42b6:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_font_decode_get_unsigned_bits>
    42ba:	98 2e       	mov	r9, r24
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	68 2d       	mov	r22, r8
    42c0:	c7 01       	movw	r24, r14
    42c2:	0e 94 85 20 	call	0x410a	; 0x410a <u8g2_font_decode_len>
    42c6:	41 e0       	ldi	r20, 0x01	; 1
    42c8:	69 2d       	mov	r22, r9
    42ca:	c7 01       	movw	r24, r14
    42cc:	0e 94 85 20 	call	0x410a	; 0x410a <u8g2_font_decode_len>
    42d0:	61 e0       	ldi	r22, 0x01	; 1
    42d2:	ce 01       	movw	r24, r28
    42d4:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_font_decode_get_unsigned_bits>
    42d8:	81 11       	cpse	r24, r1
    42da:	f0 cf       	rjmp	.-32     	; 0x42bc <u8g2_font_decode_glyph+0xf2>
    42dc:	8f 81       	ldd	r24, Y+7	; 0x07
    42de:	8b 15       	cp	r24, r11
    42e0:	0c f3       	brlt	.-62     	; 0x42a4 <u8g2_font_decode_glyph+0xda>
    42e2:	f7 01       	movw	r30, r14
    42e4:	e6 57       	subi	r30, 0x76	; 118
    42e6:	ff 4f       	sbci	r31, 0xFF	; 255
    42e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    42ea:	80 83       	st	Z, r24
    42ec:	8a 2d       	mov	r24, r10
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	ff 90       	pop	r15
    42f8:	ef 90       	pop	r14
    42fa:	df 90       	pop	r13
    42fc:	cf 90       	pop	r12
    42fe:	bf 90       	pop	r11
    4300:	af 90       	pop	r10
    4302:	9f 90       	pop	r9
    4304:	8f 90       	pop	r8
    4306:	08 95       	ret
    4308:	41 e0       	ldi	r20, 0x01	; 1
    430a:	50 e0       	ldi	r21, 0x00	; 0
    430c:	4b 19       	sub	r20, r11
    430e:	51 09       	sbc	r21, r1
    4310:	b7 fc       	sbrc	r11, 7
    4312:	53 95       	inc	r21
    4314:	96 01       	movw	r18, r12
    4316:	2f 5f       	subi	r18, 0xFF	; 255
    4318:	3f 4f       	sbci	r19, 0xFF	; 255
    431a:	8c 01       	movw	r16, r24
    431c:	09 0d       	add	r16, r9
    431e:	11 1d       	adc	r17, r1
    4320:	97 fc       	sbrc	r9, 7
    4322:	1a 95       	dec	r17
    4324:	c4 0e       	add	r12, r20
    4326:	d5 1e       	adc	r13, r21
    4328:	ad cf       	rjmp	.-166    	; 0x4284 <u8g2_font_decode_glyph+0xba>
    432a:	41 e0       	ldi	r20, 0x01	; 1
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	ba 01       	movw	r22, r20
    4330:	69 19       	sub	r22, r9
    4332:	71 09       	sbc	r23, r1
    4334:	97 fc       	sbrc	r9, 7
    4336:	73 95       	inc	r23
    4338:	96 01       	movw	r18, r12
    433a:	2f 5f       	subi	r18, 0xFF	; 255
    433c:	3f 4f       	sbci	r19, 0xFF	; 255
    433e:	4b 19       	sub	r20, r11
    4340:	51 09       	sbc	r21, r1
    4342:	b7 fc       	sbrc	r11, 7
    4344:	53 95       	inc	r21
    4346:	8c 01       	movw	r16, r24
    4348:	0f 5f       	subi	r16, 0xFF	; 255
    434a:	1f 4f       	sbci	r17, 0xFF	; 255
    434c:	84 0f       	add	r24, r20
    434e:	95 1f       	adc	r25, r21
    4350:	c6 0e       	add	r12, r22
    4352:	d7 1e       	adc	r13, r23
    4354:	97 cf       	rjmp	.-210    	; 0x4284 <u8g2_font_decode_glyph+0xba>
    4356:	96 01       	movw	r18, r12
    4358:	2b 0d       	add	r18, r11
    435a:	31 1d       	adc	r19, r1
    435c:	b7 fc       	sbrc	r11, 7
    435e:	3a 95       	dec	r19
    4360:	41 e0       	ldi	r20, 0x01	; 1
    4362:	50 e0       	ldi	r21, 0x00	; 0
    4364:	49 19       	sub	r20, r9
    4366:	51 09       	sbc	r21, r1
    4368:	97 fc       	sbrc	r9, 7
    436a:	53 95       	inc	r21
    436c:	8c 01       	movw	r16, r24
    436e:	0f 5f       	subi	r16, 0xFF	; 255
    4370:	1f 4f       	sbci	r17, 0xFF	; 255
    4372:	84 0f       	add	r24, r20
    4374:	95 1f       	adc	r25, r21
    4376:	86 cf       	rjmp	.-244    	; 0x4284 <u8g2_font_decode_glyph+0xba>

00004378 <u8g2_font_get_glyph_data>:
u8g2_font_get_glyph_data():
    4378:	ef 92       	push	r14
    437a:	ff 92       	push	r15
    437c:	0f 93       	push	r16
    437e:	1f 93       	push	r17
    4380:	cf 93       	push	r28
    4382:	df 93       	push	r29
    4384:	fc 01       	movw	r30, r24
    4386:	e6 5a       	subi	r30, 0xA6	; 166
    4388:	ff 4f       	sbci	r31, 0xFF	; 255
    438a:	20 81       	ld	r18, Z
    438c:	31 81       	ldd	r19, Z+1	; 0x01
    438e:	29 5e       	subi	r18, 0xE9	; 233
    4390:	3f 4f       	sbci	r19, 0xFF	; 255
    4392:	6f 3f       	cpi	r22, 0xFF	; 255
    4394:	71 05       	cpc	r23, r1
    4396:	09 f0       	breq	.+2      	; 0x439a <u8g2_font_get_glyph_data+0x22>
    4398:	48 f5       	brcc	.+82     	; 0x43ec <u8g2_font_get_glyph_data+0x74>
    439a:	61 36       	cpi	r22, 0x61	; 97
    439c:	71 05       	cpc	r23, r1
    439e:	d8 f0       	brcs	.+54     	; 0x43d6 <u8g2_font_get_glyph_data+0x5e>
    43a0:	80 58       	subi	r24, 0x80	; 128
    43a2:	9f 4f       	sbci	r25, 0xFF	; 255
    43a4:	fc 01       	movw	r30, r24
    43a6:	80 81       	ld	r24, Z
    43a8:	91 81       	ldd	r25, Z+1	; 0x01
    43aa:	28 0f       	add	r18, r24
    43ac:	39 1f       	adc	r19, r25
    43ae:	c9 01       	movw	r24, r18
    43b0:	01 96       	adiw	r24, 0x01	; 1
    43b2:	fc 01       	movw	r30, r24
    43b4:	44 91       	lpm	r20, Z
    43b6:	44 23       	and	r20, r20
    43b8:	09 f4       	brne	.+2      	; 0x43bc <u8g2_font_get_glyph_data+0x44>
    43ba:	47 c0       	rjmp	.+142    	; 0x444a <u8g2_font_get_glyph_data+0xd2>
    43bc:	f9 01       	movw	r30, r18
    43be:	44 91       	lpm	r20, Z
    43c0:	46 17       	cp	r20, r22
    43c2:	17 06       	cpc	r1, r23
    43c4:	71 f4       	brne	.+28     	; 0x43e2 <u8g2_font_get_glyph_data+0x6a>
    43c6:	01 96       	adiw	r24, 0x01	; 1
    43c8:	df 91       	pop	r29
    43ca:	cf 91       	pop	r28
    43cc:	1f 91       	pop	r17
    43ce:	0f 91       	pop	r16
    43d0:	ff 90       	pop	r15
    43d2:	ef 90       	pop	r14
    43d4:	08 95       	ret
    43d6:	61 34       	cpi	r22, 0x41	; 65
    43d8:	71 05       	cpc	r23, r1
    43da:	48 f3       	brcs	.-46     	; 0x43ae <u8g2_font_get_glyph_data+0x36>
    43dc:	82 58       	subi	r24, 0x82	; 130
    43de:	9f 4f       	sbci	r25, 0xFF	; 255
    43e0:	e1 cf       	rjmp	.-62     	; 0x43a4 <u8g2_font_get_glyph_data+0x2c>
    43e2:	fc 01       	movw	r30, r24
    43e4:	84 91       	lpm	r24, Z
    43e6:	28 0f       	add	r18, r24
    43e8:	31 1d       	adc	r19, r1
    43ea:	e1 cf       	rjmp	.-62     	; 0x43ae <u8g2_font_get_glyph_data+0x36>
    43ec:	8b 01       	movw	r16, r22
    43ee:	fc 01       	movw	r30, r24
    43f0:	ee 57       	subi	r30, 0x7E	; 126
    43f2:	ff 4f       	sbci	r31, 0xFF	; 255
    43f4:	c0 81       	ld	r28, Z
    43f6:	d1 81       	ldd	r29, Z+1	; 0x01
    43f8:	c2 0f       	add	r28, r18
    43fa:	d3 1f       	adc	r29, r19
    43fc:	7e 01       	movw	r14, r28
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	c7 01       	movw	r24, r14
    4402:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <u8g2_font_get_word>
    4406:	c8 0f       	add	r28, r24
    4408:	d9 1f       	adc	r29, r25
    440a:	62 e0       	ldi	r22, 0x02	; 2
    440c:	c7 01       	movw	r24, r14
    440e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <u8g2_font_get_word>
    4412:	f4 e0       	ldi	r31, 0x04	; 4
    4414:	ef 0e       	add	r14, r31
    4416:	f1 1c       	adc	r15, r1
    4418:	80 17       	cp	r24, r16
    441a:	91 07       	cpc	r25, r17
    441c:	80 f3       	brcs	.-32     	; 0x43fe <u8g2_font_get_glyph_data+0x86>
    441e:	fe 01       	movw	r30, r28
    4420:	84 91       	lpm	r24, Z
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	98 2f       	mov	r25, r24
    4426:	88 27       	eor	r24, r24
    4428:	31 96       	adiw	r30, 0x01	; 1
    442a:	e4 91       	lpm	r30, Z
    442c:	8e 2b       	or	r24, r30
    442e:	00 97       	sbiw	r24, 0x00	; 0
    4430:	61 f0       	breq	.+24     	; 0x444a <u8g2_font_get_glyph_data+0xd2>
    4432:	08 17       	cp	r16, r24
    4434:	19 07       	cpc	r17, r25
    4436:	19 f4       	brne	.+6      	; 0x443e <u8g2_font_get_glyph_data+0xc6>
    4438:	ce 01       	movw	r24, r28
    443a:	03 96       	adiw	r24, 0x03	; 3
    443c:	c5 cf       	rjmp	.-118    	; 0x43c8 <u8g2_font_get_glyph_data+0x50>
    443e:	fe 01       	movw	r30, r28
    4440:	32 96       	adiw	r30, 0x02	; 2
    4442:	e4 91       	lpm	r30, Z
    4444:	ce 0f       	add	r28, r30
    4446:	d1 1d       	adc	r29, r1
    4448:	ea cf       	rjmp	.-44     	; 0x441e <u8g2_font_get_glyph_data+0xa6>
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	bc cf       	rjmp	.-136    	; 0x43c8 <u8g2_font_get_glyph_data+0x50>

00004450 <u8g2_DrawGlyph>:
u8g2_DrawGlyph():
    4450:	cf 92       	push	r12
    4452:	df 92       	push	r13
    4454:	ef 92       	push	r14
    4456:	ff 92       	push	r15
    4458:	0f 93       	push	r16
    445a:	1f 93       	push	r17
    445c:	cf 93       	push	r28
    445e:	df 93       	push	r29
    4460:	ec 01       	movw	r28, r24
    4462:	7b 01       	movw	r14, r22
    4464:	8a 01       	movw	r16, r20
    4466:	69 01       	movw	r12, r18
    4468:	fc 01       	movw	r30, r24
    446a:	e4 59       	subi	r30, 0x94	; 148
    446c:	ff 4f       	sbci	r31, 0xFF	; 255
    446e:	80 81       	ld	r24, Z
    4470:	81 30       	cpi	r24, 0x01	; 1
    4472:	79 f1       	breq	.+94     	; 0x44d2 <u8g2_DrawGlyph+0x82>
    4474:	18 f1       	brcs	.+70     	; 0x44bc <u8g2_DrawGlyph+0x6c>
    4476:	82 30       	cpi	r24, 0x02	; 2
    4478:	b9 f1       	breq	.+110    	; 0x44e8 <u8g2_DrawGlyph+0x98>
    447a:	83 30       	cpi	r24, 0x03	; 3
    447c:	09 f4       	brne	.+2      	; 0x4480 <u8g2_DrawGlyph+0x30>
    447e:	3f c0       	rjmp	.+126    	; 0x44fe <u8g2_DrawGlyph+0xae>
u8g2_font_draw_glyph():
    4480:	fe 01       	movw	r30, r28
    4482:	e0 5a       	subi	r30, 0xA0	; 160
    4484:	ff 4f       	sbci	r31, 0xFF	; 255
    4486:	f1 82       	std	Z+1, r15	; 0x01
    4488:	e0 82       	st	Z, r14
    448a:	32 96       	adiw	r30, 0x02	; 2
    448c:	11 83       	std	Z+1, r17	; 0x01
    448e:	00 83       	st	Z, r16
    4490:	b6 01       	movw	r22, r12
    4492:	ce 01       	movw	r24, r28
    4494:	0e 94 bc 21 	call	0x4378	; 0x4378 <u8g2_font_get_glyph_data>
    4498:	00 97       	sbiw	r24, 0x00	; 0
    449a:	e1 f1       	breq	.+120    	; 0x4514 <u8g2_DrawGlyph+0xc4>
    449c:	bc 01       	movw	r22, r24
    449e:	ce 01       	movw	r24, r28
    44a0:	0e 94 e5 20 	call	0x41ca	; 0x41ca <u8g2_font_decode_glyph>
    44a4:	08 2e       	mov	r0, r24
    44a6:	00 0c       	add	r0, r0
    44a8:	99 0b       	sbc	r25, r25
u8g2_DrawGlyph():
    44aa:	df 91       	pop	r29
    44ac:	cf 91       	pop	r28
    44ae:	1f 91       	pop	r17
    44b0:	0f 91       	pop	r16
    44b2:	ff 90       	pop	r15
    44b4:	ef 90       	pop	r14
    44b6:	df 90       	pop	r13
    44b8:	cf 90       	pop	r12
    44ba:	08 95       	ret
    44bc:	fe 01       	movw	r30, r28
    44be:	e4 5a       	subi	r30, 0xA4	; 164
    44c0:	ff 4f       	sbci	r31, 0xFF	; 255
    44c2:	01 90       	ld	r0, Z+
    44c4:	f0 81       	ld	r31, Z
    44c6:	e0 2d       	mov	r30, r0
    44c8:	ce 01       	movw	r24, r28
    44ca:	09 95       	icall
    44cc:	08 0f       	add	r16, r24
    44ce:	19 1f       	adc	r17, r25
    44d0:	d7 cf       	rjmp	.-82     	; 0x4480 <u8g2_DrawGlyph+0x30>
    44d2:	fe 01       	movw	r30, r28
    44d4:	e4 5a       	subi	r30, 0xA4	; 164
    44d6:	ff 4f       	sbci	r31, 0xFF	; 255
    44d8:	01 90       	ld	r0, Z+
    44da:	f0 81       	ld	r31, Z
    44dc:	e0 2d       	mov	r30, r0
    44de:	ce 01       	movw	r24, r28
    44e0:	09 95       	icall
    44e2:	e8 1a       	sub	r14, r24
    44e4:	f9 0a       	sbc	r15, r25
    44e6:	cc cf       	rjmp	.-104    	; 0x4480 <u8g2_DrawGlyph+0x30>
    44e8:	fe 01       	movw	r30, r28
    44ea:	e4 5a       	subi	r30, 0xA4	; 164
    44ec:	ff 4f       	sbci	r31, 0xFF	; 255
    44ee:	01 90       	ld	r0, Z+
    44f0:	f0 81       	ld	r31, Z
    44f2:	e0 2d       	mov	r30, r0
    44f4:	ce 01       	movw	r24, r28
    44f6:	09 95       	icall
    44f8:	08 1b       	sub	r16, r24
    44fa:	19 0b       	sbc	r17, r25
    44fc:	c1 cf       	rjmp	.-126    	; 0x4480 <u8g2_DrawGlyph+0x30>
    44fe:	fe 01       	movw	r30, r28
    4500:	e4 5a       	subi	r30, 0xA4	; 164
    4502:	ff 4f       	sbci	r31, 0xFF	; 255
    4504:	01 90       	ld	r0, Z+
    4506:	f0 81       	ld	r31, Z
    4508:	e0 2d       	mov	r30, r0
    450a:	ce 01       	movw	r24, r28
    450c:	09 95       	icall
    450e:	e8 0e       	add	r14, r24
    4510:	f9 1e       	adc	r15, r25
    4512:	b6 cf       	rjmp	.-148    	; 0x4480 <u8g2_DrawGlyph+0x30>
u8g2_font_draw_glyph():
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	80 e0       	ldi	r24, 0x00	; 0
u8g2_DrawGlyph():
    4518:	c8 cf       	rjmp	.-112    	; 0x44aa <u8g2_DrawGlyph+0x5a>

0000451a <u8g2_UpdateRefHeight>:
u8g2_UpdateRefHeight():
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	fc 01       	movw	r30, r24
    4520:	e6 5a       	subi	r30, 0xA6	; 166
    4522:	ff 4f       	sbci	r31, 0xFF	; 255
    4524:	20 81       	ld	r18, Z
    4526:	31 81       	ldd	r19, Z+1	; 0x01
    4528:	23 2b       	or	r18, r19
    452a:	f1 f0       	breq	.+60     	; 0x4568 <u8g2_UpdateRefHeight+0x4e>
    452c:	b0 96       	adiw	r30, 0x20	; 32
    452e:	20 81       	ld	r18, Z
    4530:	dc 01       	movw	r26, r24
    4532:	aa 57       	subi	r26, 0x7A	; 122
    4534:	bf 4f       	sbci	r27, 0xFF	; 255
    4536:	2c 93       	st	X, r18
    4538:	31 96       	adiw	r30, 0x01	; 1
    453a:	50 81       	ld	r21, Z
    453c:	3c 96       	adiw	r30, 0x0c	; 12
    453e:	50 83       	st	Z, r21
    4540:	ec 01       	movw	r28, r24
    4542:	cb 57       	subi	r28, 0x7B	; 123
    4544:	df 4f       	sbci	r29, 0xFF	; 255
    4546:	38 81       	ld	r19, Y
    4548:	33 23       	and	r19, r19
    454a:	71 f0       	breq	.+28     	; 0x4568 <u8g2_UpdateRefHeight+0x4e>
    454c:	31 30       	cpi	r19, 0x01	; 1
    454e:	79 f4       	brne	.+30     	; 0x456e <u8g2_UpdateRefHeight+0x54>
    4550:	29 97       	sbiw	r28, 0x09	; 9
    4552:	38 81       	ld	r19, Y
    4554:	23 17       	cp	r18, r19
    4556:	0c f4       	brge	.+2      	; 0x455a <u8g2_UpdateRefHeight+0x40>
    4558:	3c 93       	st	X, r19
    455a:	83 58       	subi	r24, 0x83	; 131
    455c:	9f 4f       	sbci	r25, 0xFF	; 255
    455e:	dc 01       	movw	r26, r24
    4560:	8c 91       	ld	r24, X
    4562:	85 17       	cp	r24, r21
    4564:	0c f4       	brge	.+2      	; 0x4568 <u8g2_UpdateRefHeight+0x4e>
    4566:	80 83       	st	Z, r24
    4568:	df 91       	pop	r29
    456a:	cf 91       	pop	r28
    456c:	08 95       	ret
    456e:	ec 01       	movw	r28, r24
    4570:	c9 58       	subi	r28, 0x89	; 137
    4572:	df 4f       	sbci	r29, 0xFF	; 255
    4574:	48 81       	ld	r20, Y
    4576:	87 58       	subi	r24, 0x87	; 135
    4578:	9f 4f       	sbci	r25, 0xFF	; 255
    457a:	ec 01       	movw	r28, r24
    457c:	38 81       	ld	r19, Y
    457e:	82 2f       	mov	r24, r18
    4580:	22 0f       	add	r18, r18
    4582:	99 0b       	sbc	r25, r25
    4584:	63 2f       	mov	r22, r19
    4586:	03 2e       	mov	r0, r19
    4588:	00 0c       	add	r0, r0
    458a:	77 0b       	sbc	r23, r23
    458c:	64 0f       	add	r22, r20
    458e:	71 1d       	adc	r23, r1
    4590:	47 fd       	sbrc	r20, 7
    4592:	7a 95       	dec	r23
    4594:	86 17       	cp	r24, r22
    4596:	97 07       	cpc	r25, r23
    4598:	14 f4       	brge	.+4      	; 0x459e <u8g2_UpdateRefHeight+0x84>
    459a:	43 0f       	add	r20, r19
    459c:	4c 93       	st	X, r20
    459e:	35 17       	cp	r19, r21
    45a0:	1c f7       	brge	.-58     	; 0x4568 <u8g2_UpdateRefHeight+0x4e>
    45a2:	30 83       	st	Z, r19
    45a4:	e1 cf       	rjmp	.-62     	; 0x4568 <u8g2_UpdateRefHeight+0x4e>

000045a6 <u8g2_SetFontPosBaseline>:
u8g2_SetFontPosBaseline():
    45a6:	84 5a       	subi	r24, 0xA4	; 164
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	2f e8       	ldi	r18, 0x8F	; 143
    45ac:	3f e1       	ldi	r19, 0x1F	; 31
    45ae:	fc 01       	movw	r30, r24
    45b0:	31 83       	std	Z+1, r19	; 0x01
    45b2:	20 83       	st	Z, r18
    45b4:	08 95       	ret

000045b6 <u8g2_SetFont>:
u8g2_SetFont():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1280

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1281
  if ( u8g2->font != font )
    45ba:	fc 01       	movw	r30, r24
    45bc:	e6 5a       	subi	r30, 0xA6	; 166
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	20 81       	ld	r18, Z
    45c2:	31 81       	ldd	r19, Z+1	; 0x01
    45c4:	26 17       	cp	r18, r22
    45c6:	37 07       	cpc	r19, r23
    45c8:	61 f0       	breq	.+24     	; 0x45e2 <u8g2_SetFont+0x2c>
    45ca:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1287
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    45cc:	71 83       	std	Z+1, r23	; 0x01
    45ce:	60 83       	st	Z, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1288
    u8g2_read_font_info(&(u8g2->font_info), font);
    45d0:	83 59       	subi	r24, 0x93	; 147
    45d2:	9f 4f       	sbci	r25, 0xFF	; 255
    45d4:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <u8g2_read_font_info>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
    u8g2_UpdateRefHeight(u8g2);
    45d8:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    45da:	df 91       	pop	r29
    45dc:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    45de:	0c 94 8d 22 	jmp	0x451a	; 0x451a <u8g2_UpdateRefHeight>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    45e2:	df 91       	pop	r29
    45e4:	cf 91       	pop	r28
    45e6:	08 95       	ret

000045e8 <u8g2_draw_hv_line_2dir>:
u8g2_draw_hv_line_2dir():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:133
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    45e8:	0f 93       	push	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:138

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    45ea:	fc 01       	movw	r30, r24
    45ec:	e0 5c       	subi	r30, 0xC0	; 192
    45ee:	ff 4f       	sbci	r31, 0xFF	; 255
    45f0:	01 90       	ld	r0, Z+
    45f2:	f0 81       	ld	r31, Z
    45f4:	e0 2d       	mov	r30, r0
    45f6:	4e 1b       	sub	r20, r30
    45f8:	5f 0b       	sbc	r21, r31
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:140
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    45fa:	dc 01       	movw	r26, r24
    45fc:	d4 96       	adiw	r26, 0x34	; 52
    45fe:	ed 91       	ld	r30, X+
    4600:	fc 91       	ld	r31, X
    4602:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:141
}
    4604:	0f 91       	pop	r16
    4606:	08 95       	ret

00004608 <u8g2_DrawHVLine>:
u8g2_DrawHVLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:151
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    4608:	0f 93       	push	r16
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	e0 2f       	mov	r30, r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:157
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    4610:	dc 01       	movw	r26, r24
    4612:	ac 57       	subi	r26, 0x7C	; 124
    4614:	bf 4f       	sbci	r27, 0xFF	; 255
    4616:	fc 91       	ld	r31, X
    4618:	ff 23       	and	r31, r31
    461a:	09 f4       	brne	.+2      	; 0x461e <u8g2_DrawHVLine+0x16>
    461c:	60 c0       	rjmp	.+192    	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:159
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    461e:	21 15       	cp	r18, r1
    4620:	31 05       	cpc	r19, r1
    4622:	09 f4       	brne	.+2      	; 0x4626 <u8g2_DrawHVLine+0x1e>
    4624:	5c c0       	rjmp	.+184    	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:163
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    4626:	22 30       	cpi	r18, 0x02	; 2
    4628:	31 05       	cpc	r19, r1
    462a:	38 f0       	brcs	.+14     	; 0x463a <u8g2_DrawHVLine+0x32>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:165
      {
	if ( dir == 2 )
    462c:	02 30       	cpi	r16, 0x02	; 2
    462e:	09 f0       	breq	.+2      	; 0x4632 <u8g2_DrawHVLine+0x2a>
    4630:	4a c0       	rjmp	.+148    	; 0x46c6 <u8g2_DrawHVLine+0xbe>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:168
	{
	  x -= len;
	  x++;
    4632:	6f 5f       	subi	r22, 0xFF	; 255
    4634:	7f 4f       	sbci	r23, 0xFF	; 255
    4636:	62 1b       	sub	r22, r18
    4638:	73 0b       	sbc	r23, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:179
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    463a:	0e 2f       	mov	r16, r30
    463c:	01 70       	andi	r16, 0x01	; 1
    463e:	e0 fd       	sbrc	r30, 0
    4640:	52 c0       	rjmp	.+164    	; 0x46e6 <u8g2_DrawHVLine+0xde>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:181
      {
	if ( y < u8g2->user_y0 )
    4642:	fc 01       	movw	r30, r24
    4644:	e2 5b       	subi	r30, 0xB2	; 178
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	01 90       	ld	r0, Z+
    464a:	f0 81       	ld	r31, Z
    464c:	e0 2d       	mov	r30, r0
    464e:	4e 17       	cp	r20, r30
    4650:	5f 07       	cpc	r21, r31
    4652:	08 f4       	brcc	.+2      	; 0x4656 <u8g2_DrawHVLine+0x4e>
    4654:	44 c0       	rjmp	.+136    	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:183
	  return;
	if ( y >= u8g2->user_y1 )
    4656:	fc 01       	movw	r30, r24
    4658:	e0 5b       	subi	r30, 0xB0	; 176
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	01 90       	ld	r0, Z+
    465e:	f0 81       	ld	r31, Z
    4660:	e0 2d       	mov	r30, r0
    4662:	4e 17       	cp	r20, r30
    4664:	5f 07       	cpc	r21, r31
    4666:	d8 f5       	brcc	.+118    	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:185
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    4668:	fc 01       	movw	r30, r24
    466a:	e4 5b       	subi	r30, 0xB4	; 180
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	01 90       	ld	r0, Z+
    4670:	f0 81       	ld	r31, Z
    4672:	e0 2d       	mov	r30, r0
    4674:	dc 01       	movw	r26, r24
    4676:	a6 5b       	subi	r26, 0xB6	; 182
    4678:	bf 4f       	sbci	r27, 0xFF	; 255
    467a:	0d 90       	ld	r0, X+
    467c:	bc 91       	ld	r27, X
    467e:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:66
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    4680:	26 0f       	add	r18, r22
    4682:	37 1f       	adc	r19, r23
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:87
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    4684:	26 17       	cp	r18, r22
    4686:	37 07       	cpc	r19, r23
    4688:	38 f5       	brcc	.+78     	; 0x46d8 <u8g2_DrawHVLine+0xd0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:90
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    468a:	6e 17       	cp	r22, r30
    468c:	7f 07       	cpc	r23, r31
    468e:	18 f5       	brcc	.+70     	; 0x46d6 <u8g2_DrawHVLine+0xce>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:93
    {
      b = d;
      b--;
    4690:	9f 01       	movw	r18, r30
    4692:	21 50       	subi	r18, 0x01	; 1
    4694:	31 09       	sbc	r19, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:105
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    4696:	a2 17       	cp	r26, r18
    4698:	b3 07       	cpc	r27, r19
    469a:	08 f5       	brcc	.+66     	; 0x46de <u8g2_DrawHVLine+0xd6>
    469c:	6a 17       	cp	r22, r26
    469e:	7b 07       	cpc	r23, r27
    46a0:	08 f4       	brcc	.+2      	; 0x46a4 <u8g2_DrawHVLine+0x9c>
    46a2:	bd 01       	movw	r22, r26
    46a4:	2e 17       	cp	r18, r30
    46a6:	3f 07       	cpc	r19, r31
    46a8:	08 f4       	brcc	.+2      	; 0x46ac <u8g2_DrawHVLine+0xa4>
    46aa:	f9 01       	movw	r30, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:113
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    46ac:	e6 1b       	sub	r30, r22
    46ae:	f7 0b       	sbc	r31, r23
u8g2_DrawHVLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:199
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    46b0:	ec 01       	movw	r28, r24
    46b2:	ae a9       	ldd	r26, Y+54	; 0x36
    46b4:	bf a9       	ldd	r27, Y+55	; 0x37
    46b6:	14 96       	adiw	r26, 0x04	; 4
    46b8:	0d 90       	ld	r0, X+
    46ba:	bc 91       	ld	r27, X
    46bc:	a0 2d       	mov	r26, r0
    46be:	9f 01       	movw	r18, r30
    46c0:	fd 01       	movw	r30, r26
    46c2:	09 95       	icall
    46c4:	0c c0       	rjmp	.+24     	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:170
	if ( dir == 2 )
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
    46c6:	03 30       	cpi	r16, 0x03	; 3
    46c8:	09 f0       	breq	.+2      	; 0x46cc <u8g2_DrawHVLine+0xc4>
    46ca:	b7 cf       	rjmp	.-146    	; 0x463a <u8g2_DrawHVLine+0x32>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:173
	{
	  y -= len;
	  y++;
    46cc:	4f 5f       	subi	r20, 0xFF	; 255
    46ce:	5f 4f       	sbci	r21, 0xFF	; 255
    46d0:	42 1b       	sub	r20, r18
    46d2:	53 0b       	sbc	r21, r19
    46d4:	b2 cf       	rjmp	.-156    	; 0x463a <u8g2_DrawHVLine+0x32>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:185
      {
	if ( y < u8g2->user_y0 )
	  return;
	if ( y >= u8g2->user_y1 )
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    46d6:	bd 01       	movw	r22, r26
u8g2_clip_intersection2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:103
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    46d8:	6e 17       	cp	r22, r30
    46da:	7f 07       	cpc	r23, r31
    46dc:	e0 f2       	brcs	.-72     	; 0x4696 <u8g2_DrawHVLine+0x8e>
u8g2_DrawHVLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:201
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
    46de:	df 91       	pop	r29
    46e0:	cf 91       	pop	r28
    46e2:	0f 91       	pop	r16
    46e4:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:190
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    46e6:	fc 01       	movw	r30, r24
    46e8:	e6 5b       	subi	r30, 0xB6	; 182
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	01 90       	ld	r0, Z+
    46ee:	f0 81       	ld	r31, Z
    46f0:	e0 2d       	mov	r30, r0
    46f2:	6e 17       	cp	r22, r30
    46f4:	7f 07       	cpc	r23, r31
    46f6:	98 f3       	brcs	.-26     	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:192
	  return;
	if ( x >= u8g2->user_x1 )
    46f8:	fc 01       	movw	r30, r24
    46fa:	e4 5b       	subi	r30, 0xB4	; 180
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	01 90       	ld	r0, Z+
    4700:	f0 81       	ld	r31, Z
    4702:	e0 2d       	mov	r30, r0
    4704:	6e 17       	cp	r22, r30
    4706:	7f 07       	cpc	r23, r31
    4708:	50 f7       	brcc	.-44     	; 0x46de <u8g2_DrawHVLine+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:194
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    470a:	fc 01       	movw	r30, r24
    470c:	e0 5b       	subi	r30, 0xB0	; 176
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	01 90       	ld	r0, Z+
    4712:	f0 81       	ld	r31, Z
    4714:	e0 2d       	mov	r30, r0
    4716:	dc 01       	movw	r26, r24
    4718:	a2 5b       	subi	r26, 0xB2	; 178
    471a:	bf 4f       	sbci	r27, 0xFF	; 255
    471c:	0d 90       	ld	r0, X+
    471e:	bc 91       	ld	r27, X
    4720:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:66
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    4722:	24 0f       	add	r18, r20
    4724:	35 1f       	adc	r19, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:87
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    4726:	24 17       	cp	r18, r20
    4728:	35 07       	cpc	r19, r21
    472a:	a8 f4       	brcc	.+42     	; 0x4756 <u8g2_DrawHVLine+0x14e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:90
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    472c:	4e 17       	cp	r20, r30
    472e:	5f 07       	cpc	r21, r31
    4730:	88 f4       	brcc	.+34     	; 0x4754 <u8g2_DrawHVLine+0x14c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:93
    {
      b = d;
      b--;
    4732:	9f 01       	movw	r18, r30
    4734:	21 50       	subi	r18, 0x01	; 1
    4736:	31 09       	sbc	r19, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:105
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    4738:	a2 17       	cp	r26, r18
    473a:	b3 07       	cpc	r27, r19
    473c:	80 f6       	brcc	.-96     	; 0x46de <u8g2_DrawHVLine+0xd6>
    473e:	4a 17       	cp	r20, r26
    4740:	5b 07       	cpc	r21, r27
    4742:	08 f4       	brcc	.+2      	; 0x4746 <u8g2_DrawHVLine+0x13e>
    4744:	ad 01       	movw	r20, r26
    4746:	2e 17       	cp	r18, r30
    4748:	3f 07       	cpc	r19, r31
    474a:	08 f4       	brcc	.+2      	; 0x474e <u8g2_DrawHVLine+0x146>
    474c:	f9 01       	movw	r30, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:113
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    474e:	e4 1b       	sub	r30, r20
    4750:	f5 0b       	sbc	r31, r21
    4752:	ae cf       	rjmp	.-164    	; 0x46b0 <u8g2_DrawHVLine+0xa8>
u8g2_DrawHVLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:194
      {
	if ( x < u8g2->user_x0 )
	  return;
	if ( x >= u8g2->user_x1 )
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    4754:	ad 01       	movw	r20, r26
u8g2_clip_intersection2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:103
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    4756:	4e 17       	cp	r20, r30
    4758:	5f 07       	cpc	r21, r31
    475a:	08 f6       	brcc	.-126    	; 0x46de <u8g2_DrawHVLine+0xd6>
    475c:	ed cf       	rjmp	.-38     	; 0x4738 <u8g2_DrawHVLine+0x130>

0000475e <u8g2_DrawHLine>:
u8g2_DrawHLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:204
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
    475e:	0f 93       	push	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:209
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
    4760:	00 e0       	ldi	r16, 0x00	; 0
    4762:	0e 94 04 23 	call	0x4608	; 0x4608 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:210
}
    4766:	0f 91       	pop	r16
    4768:	08 95       	ret

0000476a <u8g2_is_intersection_decision_tree>:
u8g2_is_intersection_decision_tree():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:125
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    476a:	46 17       	cp	r20, r22
    476c:	57 07       	cpc	r21, r23
    476e:	48 f4       	brcc	.+18     	; 0x4782 <u8g2_is_intersection_decision_tree+0x18>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:127
  {
    if ( v1 > a0 )	// v1 >= a0
    4770:	82 17       	cp	r24, r18
    4772:	93 07       	cpc	r25, r19
    4774:	50 f0       	brcs	.+20     	; 0x478a <u8g2_is_intersection_decision_tree+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:133
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	24 17       	cp	r18, r20
    477a:	35 07       	cpc	r19, r21
    477c:	38 f0       	brcs	.+14     	; 0x478c <u8g2_is_intersection_decision_tree+0x22>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:158
	return 0;
      }
    }
    else
    {
      return 0;
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:145
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    4782:	82 17       	cp	r24, r18
    4784:	93 07       	cpc	r25, r19
    4786:	b8 f3       	brcs	.-18     	; 0x4776 <u8g2_is_intersection_decision_tree+0xc>
    4788:	fa cf       	rjmp	.-12     	; 0x477e <u8g2_is_intersection_decision_tree+0x14>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:129
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    478a:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:161
    else
    {
      return 0;
    }
  }
}
    478c:	08 95       	ret

0000478e <u8g2_IsIntersection>:
u8g2_IsIntersection():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:167



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    478e:	cf 92       	push	r12
    4790:	df 92       	push	r13
    4792:	ef 92       	push	r14
    4794:	ff 92       	push	r15
    4796:	0f 93       	push	r16
    4798:	1f 93       	push	r17
    479a:	cf 93       	push	r28
    479c:	df 93       	push	r29
    479e:	ec 01       	movw	r28, r24
    47a0:	7b 01       	movw	r14, r22
    47a2:	69 01       	movw	r12, r18
    47a4:	98 01       	movw	r18, r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:168
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    47a6:	fc 01       	movw	r30, r24
    47a8:	e0 5b       	subi	r30, 0xB0	; 176
    47aa:	ff 4f       	sbci	r31, 0xFF	; 255
    47ac:	60 81       	ld	r22, Z
    47ae:	71 81       	ldd	r23, Z+1	; 0x01
    47b0:	32 97       	sbiw	r30, 0x02	; 2
    47b2:	80 81       	ld	r24, Z
    47b4:	91 81       	ldd	r25, Z+1	; 0x01
    47b6:	0e 94 b5 23 	call	0x476a	; 0x476a <u8g2_is_intersection_decision_tree>
    47ba:	88 23       	and	r24, r24
    47bc:	a9 f0       	breq	.+42     	; 0x47e8 <u8g2_IsIntersection+0x5a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    47be:	fe 01       	movw	r30, r28
    47c0:	e4 5b       	subi	r30, 0xB4	; 180
    47c2:	ff 4f       	sbci	r31, 0xFF	; 255
    47c4:	60 81       	ld	r22, Z
    47c6:	71 81       	ldd	r23, Z+1	; 0x01
    47c8:	c6 5b       	subi	r28, 0xB6	; 182
    47ca:	df 4f       	sbci	r29, 0xFF	; 255
    47cc:	96 01       	movw	r18, r12
    47ce:	a7 01       	movw	r20, r14
    47d0:	88 81       	ld	r24, Y
    47d2:	99 81       	ldd	r25, Y+1	; 0x01
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	df 90       	pop	r13
    47e2:	cf 90       	pop	r12
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    47e4:	0c 94 b5 23 	jmp	0x476a	; 0x476a <u8g2_is_intersection_decision_tree>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	df 91       	pop	r29
    47ec:	cf 91       	pop	r28
    47ee:	1f 91       	pop	r17
    47f0:	0f 91       	pop	r16
    47f2:	ff 90       	pop	r15
    47f4:	ef 90       	pop	r14
    47f6:	df 90       	pop	r13
    47f8:	cf 90       	pop	r12
    47fa:	08 95       	ret

000047fc <u8g2_ll_hvline_vertical_top_lsb>:
u8g2_ll_hvline_vertical_top_lsb():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:73
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    47fc:	af 92       	push	r10
    47fe:	bf 92       	push	r11
    4800:	cf 92       	push	r12
    4802:	df 92       	push	r13
    4804:	ef 92       	push	r14
    4806:	ff 92       	push	r15
    4808:	0f 93       	push	r16
    480a:	cf 93       	push	r28
    480c:	df 93       	push	r29
    480e:	ec 01       	movw	r28, r24
    4810:	da 01       	movw	r26, r20
    4812:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:89
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    4814:	94 2f       	mov	r25, r20
    4816:	97 70       	andi	r25, 0x07	; 7
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:91
  mask = 1;
  mask <<= bit_pos;
    4818:	e1 e0       	ldi	r30, 0x01	; 1
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	9f 01       	movw	r18, r30
    481e:	09 2e       	mov	r0, r25
    4820:	01 c0       	rjmp	.+2      	; 0x4824 <u8g2_ll_hvline_vertical_top_lsb+0x28>
    4822:	22 0f       	add	r18, r18
    4824:	0a 94       	dec	r0
    4826:	ea f7       	brpl	.-6      	; 0x4822 <u8g2_ll_hvline_vertical_top_lsb+0x26>
    4828:	52 2f       	mov	r21, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    482a:	6e 01       	movw	r12, r28
    482c:	8a e8       	ldi	r24, 0x8A	; 138
    482e:	c8 0e       	add	r12, r24
    4830:	d1 1c       	adc	r13, r1
    4832:	f6 01       	movw	r30, r12
    4834:	80 81       	ld	r24, Z
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:93
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    4836:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4838:	82 30       	cpi	r24, 0x02	; 2
    483a:	18 f4       	brcc	.+6      	; 0x4842 <u8g2_ll_hvline_vertical_top_lsb+0x46>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:96
    or_mask  = mask;
    483c:	42 2f       	mov	r20, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:97
  if ( u8g2->draw_color != 1 )
    483e:	81 30       	cpi	r24, 0x01	; 1
    4840:	49 f1       	breq	.+82     	; 0x4894 <u8g2_ll_hvline_vertical_top_lsb+0x98>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:102
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    4842:	5d 01       	movw	r10, r26
    4844:	f8 ef       	ldi	r31, 0xF8	; 248
    4846:	af 22       	and	r10, r31
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:104
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    4848:	e8 ad       	ldd	r30, Y+56	; 0x38
    484a:	f9 ad       	ldd	r31, Y+57	; 0x39
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:103
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    484c:	28 81       	ld	r18, Y
    484e:	39 81       	ldd	r19, Y+1	; 0x01
    4850:	d9 01       	movw	r26, r18
    4852:	50 96       	adiw	r26, 0x10	; 16
    4854:	8c 91       	ld	r24, X
    4856:	8a 9d       	mul	r24, r10
    4858:	90 01       	movw	r18, r0
    485a:	8b 9d       	mul	r24, r11
    485c:	30 0d       	add	r19, r0
    485e:	11 24       	eor	r1, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:106
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    4860:	62 0f       	add	r22, r18
    4862:	73 1f       	adc	r23, r19
    4864:	df 01       	movw	r26, r30
    4866:	a6 0f       	add	r26, r22
    4868:	b7 1f       	adc	r27, r23
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:108
  
  if ( dir == 0 )
    486a:	01 11       	cpse	r16, r1
    486c:	1a c0       	rjmp	.+52     	; 0x48a2 <u8g2_ll_hvline_vertical_top_lsb+0xa6>
    486e:	ea 0e       	add	r14, r26
    4870:	fb 1e       	adc	r15, r27
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:115 (discriminator 1)
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    4872:	8c 91       	ld	r24, X
    4874:	84 2b       	or	r24, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:116 (discriminator 1)
	*ptr ^= xor_mask;
    4876:	85 27       	eor	r24, r21
    4878:	8d 93       	st	X+, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:119 (discriminator 1)
	ptr++;
	len--;
      } while( len != 0 );
    487a:	ea 16       	cp	r14, r26
    487c:	fb 06       	cpc	r15, r27
    487e:	c9 f7       	brne	.-14     	; 0x4872 <u8g2_ll_hvline_vertical_top_lsb+0x76>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:152
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	0f 91       	pop	r16
    4886:	ff 90       	pop	r15
    4888:	ef 90       	pop	r14
    488a:	df 90       	pop	r13
    488c:	cf 90       	pop	r12
    488e:	bf 90       	pop	r11
    4890:	af 90       	pop	r10
    4892:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:94
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    4894:	50 e0       	ldi	r21, 0x00	; 0
    4896:	d5 cf       	rjmp	.-86     	; 0x4842 <u8g2_ll_hvline_vertical_top_lsb+0x46>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:147
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    4898:	44 0f       	add	r20, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:148
	xor_mask <<= 1;
    489a:	55 0f       	add	r21, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:150
      }
    } while( len != 0 );
    489c:	e1 14       	cp	r14, r1
    489e:	f1 04       	cpc	r15, r1
    48a0:	79 f3       	breq	.-34     	; 0x4880 <u8g2_ll_hvline_vertical_top_lsb+0x84>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:128
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    48a2:	3c 91       	ld	r19, X
    48a4:	34 2b       	or	r19, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:129
      *ptr ^= xor_mask;
    48a6:	35 27       	eor	r19, r21
    48a8:	3c 93       	st	X, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:131
      
      bit_pos++;
    48aa:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:132
      bit_pos &= 7;
    48ac:	97 70       	andi	r25, 0x07	; 7
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:134

      len--;
    48ae:	e1 e0       	ldi	r30, 0x01	; 1
    48b0:	ee 1a       	sub	r14, r30
    48b2:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:136

      if ( bit_pos == 0 )
    48b4:	91 11       	cpse	r25, r1
    48b6:	f0 cf       	rjmp	.-32     	; 0x4898 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:138
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    48b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    48ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    48bc:	a2 0f       	add	r26, r18
    48be:	b3 1f       	adc	r27, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:140
		
	if ( u8g2->draw_color <= 1 )
    48c0:	f6 01       	movw	r30, r12
    48c2:	80 81       	ld	r24, Z
    48c4:	82 30       	cpi	r24, 0x02	; 2
    48c6:	28 f4       	brcc	.+10     	; 0x48d2 <u8g2_ll_hvline_vertical_top_lsb+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:142
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    48c8:	81 30       	cpi	r24, 0x01	; 1
    48ca:	09 f0       	breq	.+2      	; 0x48ce <u8g2_ll_hvline_vertical_top_lsb+0xd2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	  xor_mask = 1;
    48cc:	51 e0       	ldi	r21, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:141
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    48ce:	41 e0       	ldi	r20, 0x01	; 1
    48d0:	e5 cf       	rjmp	.-54     	; 0x489c <u8g2_ll_hvline_vertical_top_lsb+0xa0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    48d2:	51 e0       	ldi	r21, 0x01	; 1
    48d4:	e3 cf       	rjmp	.-58     	; 0x489c <u8g2_ll_hvline_vertical_top_lsb+0xa0>

000048d6 <u8g2_update_dimension_common>:
u8g2_update_dimension_common():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:62
{
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
    48d6:	cf 93       	push	r28
    48d8:	df 93       	push	r29
    48da:	fc 01       	movw	r30, r24
    48dc:	a0 81       	ld	r26, Z
    48de:	b1 81       	ldd	r27, Z+1	; 0x01
    48e0:	82 ad       	ldd	r24, Z+58	; 0x3a
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	9c 01       	movw	r18, r24
    48e6:	43 e0       	ldi	r20, 0x03	; 3
    48e8:	22 0f       	add	r18, r18
    48ea:	33 1f       	adc	r19, r19
    48ec:	4a 95       	dec	r20
    48ee:	e1 f7       	brne	.-8      	; 0x48e8 <u8g2_update_dimension_common+0x12>
    48f0:	37 af       	std	Z+63, r19	; 0x3f
    48f2:	26 af       	std	Z+62, r18	; 0x3e
    48f4:	50 96       	adiw	r26, 0x10	; 16
    48f6:	2c 91       	ld	r18, X
    48f8:	50 97       	sbiw	r26, 0x10	; 16
    48fa:	48 e0       	ldi	r20, 0x08	; 8
    48fc:	24 9f       	mul	r18, r20
    48fe:	90 01       	movw	r18, r0
    4900:	11 24       	eor	r1, r1
    4902:	35 af       	std	Z+61, r19	; 0x3d
    4904:	24 af       	std	Z+60, r18	; 0x3c
    4906:	23 ad       	ldd	r18, Z+59	; 0x3b
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	b9 01       	movw	r22, r18
    490c:	53 e0       	ldi	r21, 0x03	; 3
    490e:	66 0f       	add	r22, r22
    4910:	77 1f       	adc	r23, r23
    4912:	5a 95       	dec	r21
    4914:	e1 f7       	brne	.-8      	; 0x490e <u8g2_update_dimension_common+0x38>
    4916:	ef 01       	movw	r28, r30
    4918:	c0 5c       	subi	r28, 0xC0	; 192
    491a:	df 4f       	sbci	r29, 0xFF	; 255
    491c:	79 83       	std	Y+1, r23	; 0x01
    491e:	68 83       	st	Y, r22
    4920:	51 96       	adiw	r26, 0x11	; 17
    4922:	4c 91       	ld	r20, X
    4924:	51 97       	sbiw	r26, 0x11	; 17
    4926:	e9 01       	movw	r28, r18
    4928:	c8 0f       	add	r28, r24
    492a:	d9 1f       	adc	r29, r25
    492c:	50 e0       	ldi	r21, 0x00	; 0
    492e:	4c 17       	cp	r20, r28
    4930:	5d 07       	cpc	r21, r29
    4932:	18 f4       	brcc	.+6      	; 0x493a <u8g2_update_dimension_common+0x64>
    4934:	ca 01       	movw	r24, r20
    4936:	82 1b       	sub	r24, r18
    4938:	93 0b       	sbc	r25, r19
    493a:	ef 01       	movw	r28, r30
    493c:	ce 5b       	subi	r28, 0xBE	; 190
    493e:	df 4f       	sbci	r29, 0xFF	; 255
    4940:	79 83       	std	Y+1, r23	; 0x01
    4942:	68 83       	st	Y, r22
    4944:	22 96       	adiw	r28, 0x02	; 2
    4946:	23 e0       	ldi	r18, 0x03	; 3
    4948:	88 0f       	add	r24, r24
    494a:	99 1f       	adc	r25, r25
    494c:	2a 95       	dec	r18
    494e:	e1 f7       	brne	.-8      	; 0x4948 <u8g2_update_dimension_common+0x72>
    4950:	86 0f       	add	r24, r22
    4952:	97 1f       	adc	r25, r23
    4954:	99 83       	std	Y+1, r25	; 0x01
    4956:	88 83       	st	Y, r24
    4958:	22 96       	adiw	r28, 0x02	; 2
    495a:	54 96       	adiw	r26, 0x14	; 20
    495c:	8d 91       	ld	r24, X+
    495e:	9c 91       	ld	r25, X
    4960:	55 97       	sbiw	r26, 0x15	; 21
    4962:	99 83       	std	Y+1, r25	; 0x01
    4964:	88 83       	st	Y, r24
    4966:	e8 5b       	subi	r30, 0xB8	; 184
    4968:	ff 4f       	sbci	r31, 0xFF	; 255
    496a:	56 96       	adiw	r26, 0x16	; 22
    496c:	8d 91       	ld	r24, X+
    496e:	9c 91       	ld	r25, X
    4970:	91 83       	std	Z+1, r25	; 0x01
    4972:	80 83       	st	Z, r24
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	08 95       	ret

0000497a <u8g2_update_dimension_r0>:
u8g2_update_dimension_r0():
    497a:	0c 94 6b 24 	jmp	0x48d6	; 0x48d6 <u8g2_update_dimension_common>

0000497e <u8g2_draw_l90_r0>:
u8g2_draw_l90_r0():
    497e:	0f 93       	push	r16
    4980:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <u8g2_draw_hv_line_2dir>
    4984:	0f 91       	pop	r16
    4986:	08 95       	ret

00004988 <u8g2_apply_clip_window>:
u8g2_apply_clip_window():
    4988:	8f 92       	push	r8
    498a:	9f 92       	push	r9
    498c:	af 92       	push	r10
    498e:	bf 92       	push	r11
    4990:	cf 92       	push	r12
    4992:	df 92       	push	r13
    4994:	ef 92       	push	r14
    4996:	ff 92       	push	r15
    4998:	0f 93       	push	r16
    499a:	1f 93       	push	r17
    499c:	cf 93       	push	r28
    499e:	df 93       	push	r29
    49a0:	ec 01       	movw	r28, r24
    49a2:	7c 01       	movw	r14, r24
    49a4:	88 e5       	ldi	r24, 0x58	; 88
    49a6:	e8 0e       	add	r14, r24
    49a8:	f1 1c       	adc	r15, r1
    49aa:	f7 01       	movw	r30, r14
    49ac:	00 81       	ld	r16, Z
    49ae:	11 81       	ldd	r17, Z+1	; 0x01
    49b0:	5e 01       	movw	r10, r28
    49b2:	f4 e5       	ldi	r31, 0x54	; 84
    49b4:	af 0e       	add	r10, r31
    49b6:	b1 1c       	adc	r11, r1
    49b8:	f5 01       	movw	r30, r10
    49ba:	20 81       	ld	r18, Z
    49bc:	31 81       	ldd	r19, Z+1	; 0x01
    49be:	6e 01       	movw	r12, r28
    49c0:	f6 e5       	ldi	r31, 0x56	; 86
    49c2:	cf 0e       	add	r12, r31
    49c4:	d1 1c       	adc	r13, r1
    49c6:	f6 01       	movw	r30, r12
    49c8:	40 81       	ld	r20, Z
    49ca:	51 81       	ldd	r21, Z+1	; 0x01
    49cc:	4e 01       	movw	r8, r28
    49ce:	f2 e5       	ldi	r31, 0x52	; 82
    49d0:	8f 0e       	add	r8, r31
    49d2:	91 1c       	adc	r9, r1
    49d4:	f4 01       	movw	r30, r8
    49d6:	60 81       	ld	r22, Z
    49d8:	71 81       	ldd	r23, Z+1	; 0x01
    49da:	ce 01       	movw	r24, r28
    49dc:	0e 94 c7 23 	call	0x478e	; 0x478e <u8g2_IsIntersection>
    49e0:	fe 01       	movw	r30, r28
    49e2:	ec 57       	subi	r30, 0x7C	; 124
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	81 11       	cpse	r24, r1
    49e8:	0e c0       	rjmp	.+28     	; 0x4a06 <u8g2_apply_clip_window+0x7e>
    49ea:	10 82       	st	Z, r1
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	1f 91       	pop	r17
    49f2:	0f 91       	pop	r16
    49f4:	ff 90       	pop	r15
    49f6:	ef 90       	pop	r14
    49f8:	df 90       	pop	r13
    49fa:	cf 90       	pop	r12
    49fc:	bf 90       	pop	r11
    49fe:	af 90       	pop	r10
    4a00:	9f 90       	pop	r9
    4a02:	8f 90       	pop	r8
    4a04:	08 95       	ret
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	80 83       	st	Z, r24
    4a0a:	f4 01       	movw	r30, r8
    4a0c:	80 81       	ld	r24, Z
    4a0e:	91 81       	ldd	r25, Z+1	; 0x01
    4a10:	fe 01       	movw	r30, r28
    4a12:	e6 5b       	subi	r30, 0xB6	; 182
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	20 81       	ld	r18, Z
    4a18:	31 81       	ldd	r19, Z+1	; 0x01
    4a1a:	28 17       	cp	r18, r24
    4a1c:	39 07       	cpc	r19, r25
    4a1e:	10 f4       	brcc	.+4      	; 0x4a24 <u8g2_apply_clip_window+0x9c>
    4a20:	91 83       	std	Z+1, r25	; 0x01
    4a22:	80 83       	st	Z, r24
    4a24:	f5 01       	movw	r30, r10
    4a26:	80 81       	ld	r24, Z
    4a28:	91 81       	ldd	r25, Z+1	; 0x01
    4a2a:	fe 01       	movw	r30, r28
    4a2c:	e4 5b       	subi	r30, 0xB4	; 180
    4a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a30:	20 81       	ld	r18, Z
    4a32:	31 81       	ldd	r19, Z+1	; 0x01
    4a34:	82 17       	cp	r24, r18
    4a36:	93 07       	cpc	r25, r19
    4a38:	10 f4       	brcc	.+4      	; 0x4a3e <u8g2_apply_clip_window+0xb6>
    4a3a:	91 83       	std	Z+1, r25	; 0x01
    4a3c:	80 83       	st	Z, r24
    4a3e:	f6 01       	movw	r30, r12
    4a40:	80 81       	ld	r24, Z
    4a42:	91 81       	ldd	r25, Z+1	; 0x01
    4a44:	fe 01       	movw	r30, r28
    4a46:	e2 5b       	subi	r30, 0xB2	; 178
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	20 81       	ld	r18, Z
    4a4c:	31 81       	ldd	r19, Z+1	; 0x01
    4a4e:	28 17       	cp	r18, r24
    4a50:	39 07       	cpc	r19, r25
    4a52:	10 f4       	brcc	.+4      	; 0x4a58 <u8g2_apply_clip_window+0xd0>
    4a54:	91 83       	std	Z+1, r25	; 0x01
    4a56:	80 83       	st	Z, r24
    4a58:	f7 01       	movw	r30, r14
    4a5a:	80 81       	ld	r24, Z
    4a5c:	91 81       	ldd	r25, Z+1	; 0x01
    4a5e:	c0 5b       	subi	r28, 0xB0	; 176
    4a60:	df 4f       	sbci	r29, 0xFF	; 255
    4a62:	28 81       	ld	r18, Y
    4a64:	39 81       	ldd	r19, Y+1	; 0x01
    4a66:	82 17       	cp	r24, r18
    4a68:	93 07       	cpc	r25, r19
    4a6a:	08 f0       	brcs	.+2      	; 0x4a6e <u8g2_apply_clip_window+0xe6>
    4a6c:	bf cf       	rjmp	.-130    	; 0x49ec <u8g2_apply_clip_window+0x64>
    4a6e:	99 83       	std	Y+1, r25	; 0x01
    4a70:	88 83       	st	Y, r24
    4a72:	bc cf       	rjmp	.-136    	; 0x49ec <u8g2_apply_clip_window+0x64>

00004a74 <u8g2_update_page_win_r0>:
u8g2_update_page_win_r0():
    4a74:	fc 01       	movw	r30, r24
    4a76:	e6 5b       	subi	r30, 0xB6	; 182
    4a78:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7a:	11 82       	std	Z+1, r1	; 0x01
    4a7c:	10 82       	st	Z, r1
    4a7e:	32 96       	adiw	r30, 0x02	; 2
    4a80:	dc 01       	movw	r26, r24
    4a82:	aa 5b       	subi	r26, 0xBA	; 186
    4a84:	bf 4f       	sbci	r27, 0xFF	; 255
    4a86:	2d 91       	ld	r18, X+
    4a88:	3c 91       	ld	r19, X
    4a8a:	11 97       	sbiw	r26, 0x01	; 1
    4a8c:	31 83       	std	Z+1, r19	; 0x01
    4a8e:	20 83       	st	Z, r18
    4a90:	32 96       	adiw	r30, 0x02	; 2
    4a92:	14 97       	sbiw	r26, 0x04	; 4
    4a94:	2d 91       	ld	r18, X+
    4a96:	3c 91       	ld	r19, X
    4a98:	11 97       	sbiw	r26, 0x01	; 1
    4a9a:	31 83       	std	Z+1, r19	; 0x01
    4a9c:	20 83       	st	Z, r18
    4a9e:	32 96       	adiw	r30, 0x02	; 2
    4aa0:	12 96       	adiw	r26, 0x02	; 2
    4aa2:	2d 91       	ld	r18, X+
    4aa4:	3c 91       	ld	r19, X
    4aa6:	31 83       	std	Z+1, r19	; 0x01
    4aa8:	20 83       	st	Z, r18
    4aaa:	0c 94 c4 24 	jmp	0x4988	; 0x4988 <u8g2_apply_clip_window>

00004aae <u8g2_SetMaxClipWindow>:
u8g2_SetMaxClipWindow():
    4aae:	fc 01       	movw	r30, r24
    4ab0:	ee 5a       	subi	r30, 0xAE	; 174
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	11 82       	std	Z+1, r1	; 0x01
    4ab6:	10 82       	st	Z, r1
    4ab8:	34 96       	adiw	r30, 0x04	; 4
    4aba:	11 82       	std	Z+1, r1	; 0x01
    4abc:	10 82       	st	Z, r1
    4abe:	32 97       	sbiw	r30, 0x02	; 2
    4ac0:	2f ef       	ldi	r18, 0xFF	; 255
    4ac2:	3f ef       	ldi	r19, 0xFF	; 255
    4ac4:	31 83       	std	Z+1, r19	; 0x01
    4ac6:	20 83       	st	Z, r18
    4ac8:	34 96       	adiw	r30, 0x04	; 4
    4aca:	31 83       	std	Z+1, r19	; 0x01
    4acc:	20 83       	st	Z, r18
    4ace:	dc 01       	movw	r26, r24
    4ad0:	d6 96       	adiw	r26, 0x36	; 54
    4ad2:	ed 91       	ld	r30, X+
    4ad4:	fc 91       	ld	r31, X
    4ad6:	02 80       	ldd	r0, Z+2	; 0x02
    4ad8:	f3 81       	ldd	r31, Z+3	; 0x03
    4ada:	e0 2d       	mov	r30, r0
    4adc:	09 94       	ijmp

00004ade <u8g2_SetupBuffer>:
u8g2_SetupBuffer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:72
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    4ade:	0f 93       	push	r16
    4ae0:	1f 93       	push	r17
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:73
  u8g2->font = NULL;
    4ae8:	fc 01       	movw	r30, r24
    4aea:	e6 5a       	subi	r30, 0xA6	; 166
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	11 82       	std	Z+1, r1	; 0x01
    4af0:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:78
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    4af2:	3d ab       	std	Y+53, r19	; 0x35
    4af4:	2c ab       	std	Y+52, r18	; 0x34
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:80
  
  u8g2->tile_buf_ptr = buf;
    4af6:	79 af       	std	Y+57, r23	; 0x39
    4af8:	68 af       	std	Y+56, r22	; 0x38
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:81
  u8g2->tile_buf_height = tile_buf_height;
    4afa:	4a af       	std	Y+58, r20	; 0x3a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:83
  
  u8g2->tile_curr_row = 0;
    4afc:	1b ae       	std	Y+59, r1	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:85
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    4afe:	3f 96       	adiw	r30, 0x0f	; 15
    4b00:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:86
  u8g2->bitmap_transparency = 0;
    4b02:	b0 96       	adiw	r30, 0x20	; 32
    4b04:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:88
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    4b06:	34 97       	sbiw	r30, 0x04	; 4
    4b08:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:89
  u8g2->draw_color = 1;
    4b0a:	35 96       	adiw	r30, 0x05	; 5
    4b0c:	81 e0       	ldi	r24, 0x01	; 1
    4b0e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:90
  u8g2->is_auto_page_clear = 1;
    4b10:	31 96       	adiw	r30, 0x01	; 1
    4b12:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:92
  
  u8g2->cb = u8g2_cb;
    4b14:	1f ab       	std	Y+55, r17	; 0x37
    4b16:	0e ab       	std	Y+54, r16	; 0x36
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:93
  u8g2->cb->update_dimension(u8g2);
    4b18:	d8 01       	movw	r26, r16
    4b1a:	ed 91       	ld	r30, X+
    4b1c:	fc 91       	ld	r31, X
    4b1e:	ce 01       	movw	r24, r28
    4b20:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:95
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    4b22:	ce 01       	movw	r24, r28
    4b24:	0e 94 57 25 	call	0x4aae	; 0x4aae <u8g2_SetMaxClipWindow>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:100
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    4b28:	ce 01       	movw	r24, r28
    4b2a:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <u8g2_SetFontPosBaseline>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:103
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    4b2e:	c4 59       	subi	r28, 0x94	; 148
    4b30:	df 4f       	sbci	r29, 0xFF	; 255
    4b32:	18 82       	st	Y, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:105
#endif
}
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	1f 91       	pop	r17
    4b3a:	0f 91       	pop	r16
    4b3c:	08 95       	ret

00004b3e <u8x8_ascii_next>:
u8x8_ascii_next():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:459
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    4b3e:	66 23       	and	r22, r22
    4b40:	29 f0       	breq	.+10     	; 0x4b4c <u8x8_ascii_next+0xe>
    4b42:	6a 30       	cpi	r22, 0x0A	; 10
    4b44:	19 f0       	breq	.+6      	; 0x4b4c <u8x8_ascii_next+0xe>
    4b46:	86 2f       	mov	r24, r22
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	08 95       	ret
    4b4c:	8f ef       	ldi	r24, 0xFF	; 255
    4b4e:	9f ef       	ldi	r25, 0xFF	; 255
    4b50:	08 95       	ret

00004b52 <u8x8_utf8_init>:
u8x8_utf8_init():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    4b52:	fc 01       	movw	r30, r24
    4b54:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:288
}
    4b56:	08 95       	ret

00004b58 <u8x8_byte_SendBytes>:
u8x8_byte_SendBytes():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:45
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    4b58:	9a 01       	movw	r18, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:46
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    4b5a:	dc 01       	movw	r26, r24
    4b5c:	18 96       	adiw	r26, 0x08	; 8
    4b5e:	ed 91       	ld	r30, X+
    4b60:	fc 91       	ld	r31, X
    4b62:	46 2f       	mov	r20, r22
    4b64:	67 e1       	ldi	r22, 0x17	; 23
    4b66:	09 94       	ijmp

00004b68 <u8x8_byte_SendByte>:
u8x8_byte_SendByte():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:50
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
    4b6c:	1f 92       	push	r1
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
    4b72:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:51
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    4b74:	ae 01       	movw	r20, r28
    4b76:	4f 5f       	subi	r20, 0xFF	; 255
    4b78:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7a:	61 e0       	ldi	r22, 0x01	; 1
    4b7c:	0e 94 ac 25 	call	0x4b58	; 0x4b58 <u8x8_byte_SendBytes>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:52
}
    4b80:	0f 90       	pop	r0
    4b82:	df 91       	pop	r29
    4b84:	cf 91       	pop	r28
    4b86:	08 95       	ret

00004b88 <u8x8_byte_StartTransfer>:
u8x8_byte_StartTransfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:56

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    4b88:	dc 01       	movw	r26, r24
    4b8a:	18 96       	adiw	r26, 0x08	; 8
    4b8c:	ed 91       	ld	r30, X+
    4b8e:	fc 91       	ld	r31, X
    4b90:	30 e0       	ldi	r19, 0x00	; 0
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	40 e0       	ldi	r20, 0x00	; 0
    4b96:	68 e1       	ldi	r22, 0x18	; 24
    4b98:	09 94       	ijmp

00004b9a <u8x8_byte_EndTransfer>:
u8x8_byte_EndTransfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:61
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	18 96       	adiw	r26, 0x08	; 8
    4b9e:	ed 91       	ld	r30, X+
    4ba0:	fc 91       	ld	r31, X
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	40 e0       	ldi	r20, 0x00	; 0
    4ba8:	69 e1       	ldi	r22, 0x19	; 25
    4baa:	09 94       	ijmp

00004bac <u8x8_i2c_data_transfer>:
u8x8_i2c_data_transfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:521
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    4bac:	ef 92       	push	r14
    4bae:	ff 92       	push	r15
    4bb0:	1f 93       	push	r17
    4bb2:	cf 93       	push	r28
    4bb4:	df 93       	push	r29
    4bb6:	ec 01       	movw	r28, r24
    4bb8:	16 2f       	mov	r17, r22
    4bba:	7a 01       	movw	r14, r20
    4bbc:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <u8x8_byte_StartTransfer>
    4bc0:	60 e4       	ldi	r22, 0x40	; 64
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <u8x8_byte_SendByte>
    4bc8:	e8 85       	ldd	r30, Y+8	; 0x08
    4bca:	f9 85       	ldd	r31, Y+9	; 0x09
    4bcc:	97 01       	movw	r18, r14
    4bce:	41 2f       	mov	r20, r17
    4bd0:	67 e1       	ldi	r22, 0x17	; 23
    4bd2:	ce 01       	movw	r24, r28
    4bd4:	09 95       	icall
    4bd6:	ce 01       	movw	r24, r28
    4bd8:	df 91       	pop	r29
    4bda:	cf 91       	pop	r28
    4bdc:	1f 91       	pop	r17
    4bde:	ff 90       	pop	r15
    4be0:	ef 90       	pop	r14
    4be2:	0c 94 cd 25 	jmp	0x4b9a	; 0x4b9a <u8x8_byte_EndTransfer>

00004be6 <u8x8_cad_SendCmd>:
u8x8_cad_SendCmd():
    4be6:	46 2f       	mov	r20, r22
    4be8:	dc 01       	movw	r26, r24
    4bea:	16 96       	adiw	r26, 0x06	; 6
    4bec:	ed 91       	ld	r30, X+
    4bee:	fc 91       	ld	r31, X
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	20 e0       	ldi	r18, 0x00	; 0
    4bf4:	65 e1       	ldi	r22, 0x15	; 21
    4bf6:	09 94       	ijmp

00004bf8 <u8x8_cad_SendArg>:
u8x8_cad_SendArg():
    4bf8:	46 2f       	mov	r20, r22
    4bfa:	dc 01       	movw	r26, r24
    4bfc:	16 96       	adiw	r26, 0x06	; 6
    4bfe:	ed 91       	ld	r30, X+
    4c00:	fc 91       	ld	r31, X
    4c02:	30 e0       	ldi	r19, 0x00	; 0
    4c04:	20 e0       	ldi	r18, 0x00	; 0
    4c06:	66 e1       	ldi	r22, 0x16	; 22
    4c08:	09 94       	ijmp

00004c0a <u8x8_cad_SendData>:
u8x8_cad_SendData():
    4c0a:	9a 01       	movw	r18, r20
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	16 96       	adiw	r26, 0x06	; 6
    4c10:	ed 91       	ld	r30, X+
    4c12:	fc 91       	ld	r31, X
    4c14:	46 2f       	mov	r20, r22
    4c16:	67 e1       	ldi	r22, 0x17	; 23
    4c18:	09 94       	ijmp

00004c1a <u8x8_cad_StartTransfer>:
u8x8_cad_StartTransfer():
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	16 96       	adiw	r26, 0x06	; 6
    4c1e:	ed 91       	ld	r30, X+
    4c20:	fc 91       	ld	r31, X
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	20 e0       	ldi	r18, 0x00	; 0
    4c26:	40 e0       	ldi	r20, 0x00	; 0
    4c28:	68 e1       	ldi	r22, 0x18	; 24
    4c2a:	09 94       	ijmp

00004c2c <u8x8_cad_EndTransfer>:
u8x8_cad_EndTransfer():
    4c2c:	dc 01       	movw	r26, r24
    4c2e:	16 96       	adiw	r26, 0x06	; 6
    4c30:	ed 91       	ld	r30, X+
    4c32:	fc 91       	ld	r31, X
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	20 e0       	ldi	r18, 0x00	; 0
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	69 e1       	ldi	r22, 0x19	; 25
    4c3c:	09 94       	ijmp

00004c3e <u8x8_cad_SendSequence>:
u8x8_cad_SendSequence():
    4c3e:	ef 92       	push	r14
    4c40:	ff 92       	push	r15
    4c42:	0f 93       	push	r16
    4c44:	1f 93       	push	r17
    4c46:	cf 93       	push	r28
    4c48:	df 93       	push	r29
    4c4a:	1f 92       	push	r1
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    4c50:	7c 01       	movw	r14, r24
    4c52:	8b 01       	movw	r16, r22
    4c54:	d8 01       	movw	r26, r16
    4c56:	6c 91       	ld	r22, X
    4c58:	67 31       	cpi	r22, 0x17	; 23
    4c5a:	29 f1       	breq	.+74     	; 0x4ca6 <u8x8_cad_SendSequence+0x68>
    4c5c:	50 f4       	brcc	.+20     	; 0x4c72 <u8x8_cad_SendSequence+0x34>
    4c5e:	65 31       	cpi	r22, 0x15	; 21
    4c60:	a0 f4       	brcc	.+40     	; 0x4c8a <u8x8_cad_SendSequence+0x4c>
    4c62:	0f 90       	pop	r0
    4c64:	df 91       	pop	r29
    4c66:	cf 91       	pop	r28
    4c68:	1f 91       	pop	r17
    4c6a:	0f 91       	pop	r16
    4c6c:	ff 90       	pop	r15
    4c6e:	ef 90       	pop	r14
    4c70:	08 95       	ret
    4c72:	6a 31       	cpi	r22, 0x1A	; 26
    4c74:	18 f1       	brcs	.+70     	; 0x4cbc <u8x8_cad_SendSequence+0x7e>
    4c76:	6e 3f       	cpi	r22, 0xFE	; 254
    4c78:	a1 f7       	brne	.-24     	; 0x4c62 <u8x8_cad_SendSequence+0x24>
    4c7a:	f8 01       	movw	r30, r16
    4c7c:	41 81       	ldd	r20, Z+1	; 0x01
    4c7e:	49 83       	std	Y+1, r20	; 0x01
    4c80:	69 e2       	ldi	r22, 0x29	; 41
    4c82:	c7 01       	movw	r24, r14
    4c84:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <u8x8_gpio_call>
    4c88:	0b c0       	rjmp	.+22     	; 0x4ca0 <u8x8_cad_SendSequence+0x62>
    4c8a:	f8 01       	movw	r30, r16
    4c8c:	41 81       	ldd	r20, Z+1	; 0x01
    4c8e:	49 83       	std	Y+1, r20	; 0x01
    4c90:	d7 01       	movw	r26, r14
    4c92:	16 96       	adiw	r26, 0x06	; 6
    4c94:	ed 91       	ld	r30, X+
    4c96:	fc 91       	ld	r31, X
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	c7 01       	movw	r24, r14
    4c9e:	09 95       	icall
    4ca0:	0e 5f       	subi	r16, 0xFE	; 254
    4ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca4:	d7 cf       	rjmp	.-82     	; 0x4c54 <u8x8_cad_SendSequence+0x16>
    4ca6:	f8 01       	movw	r30, r16
    4ca8:	81 81       	ldd	r24, Z+1	; 0x01
    4caa:	89 83       	std	Y+1, r24	; 0x01
    4cac:	ae 01       	movw	r20, r28
    4cae:	4f 5f       	subi	r20, 0xFF	; 255
    4cb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb2:	61 e0       	ldi	r22, 0x01	; 1
    4cb4:	c7 01       	movw	r24, r14
    4cb6:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <u8x8_cad_SendData>
    4cba:	f2 cf       	rjmp	.-28     	; 0x4ca0 <u8x8_cad_SendSequence+0x62>
    4cbc:	0f 5f       	subi	r16, 0xFF	; 255
    4cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4cc0:	d7 01       	movw	r26, r14
    4cc2:	16 96       	adiw	r26, 0x06	; 6
    4cc4:	ed 91       	ld	r30, X+
    4cc6:	fc 91       	ld	r31, X
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	40 e0       	ldi	r20, 0x00	; 0
    4cce:	c7 01       	movw	r24, r14
    4cd0:	09 95       	icall
    4cd2:	c0 cf       	rjmp	.-128    	; 0x4c54 <u8x8_cad_SendSequence+0x16>

00004cd4 <u8x8_cad_ssd13xx_fast_i2c>:
u8x8_cad_ssd13xx_fast_i2c():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:535
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    4cd4:	ef 92       	push	r14
    4cd6:	ff 92       	push	r15
    4cd8:	1f 93       	push	r17
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
    4cde:	ec 01       	movw	r28, r24
    4ce0:	14 2f       	mov	r17, r20
    4ce2:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    4ce4:	66 31       	cpi	r22, 0x16	; 22
    4ce6:	81 f1       	breq	.+96     	; 0x4d48 <u8x8_cad_ssd13xx_fast_i2c+0x74>
    4ce8:	38 f4       	brcc	.+14     	; 0x4cf8 <u8x8_cad_ssd13xx_fast_i2c+0x24>
    4cea:	64 31       	cpi	r22, 0x14	; 20
    4cec:	09 f4       	brne	.+2      	; 0x4cf0 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    4cee:	4b c0       	rjmp	.+150    	; 0x4d86 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
    4cf0:	65 31       	cpi	r22, 0x15	; 21
    4cf2:	79 f0       	breq	.+30     	; 0x4d12 <u8x8_cad_ssd13xx_fast_i2c+0x3e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:602
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	22 c0       	rjmp	.+68     	; 0x4d3c <u8x8_cad_ssd13xx_fast_i2c+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    4cf8:	68 31       	cpi	r22, 0x18	; 24
    4cfa:	c9 f1       	breq	.+114    	; 0x4d6e <u8x8_cad_ssd13xx_fast_i2c+0x9a>
    4cfc:	50 f1       	brcs	.+84     	; 0x4d52 <u8x8_cad_ssd13xx_fast_i2c+0x7e>
    4cfe:	69 31       	cpi	r22, 0x19	; 25
    4d00:	c9 f7       	brne	.-14     	; 0x4cf4 <u8x8_cad_ssd13xx_fast_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:597
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    4d02:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    4d06:	88 23       	and	r24, r24
    4d08:	91 f1       	breq	.+100    	; 0x4d6e <u8x8_cad_ssd13xx_fast_i2c+0x9a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:598
	u8x8_byte_EndTransfer(u8x8); 
    4d0a:	ce 01       	movw	r24, r28
    4d0c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <u8x8_byte_EndTransfer>
    4d10:	2e c0       	rjmp	.+92     	; 0x4d6e <u8x8_cad_ssd13xx_fast_i2c+0x9a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:544
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    4d12:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    4d16:	88 23       	and	r24, r24
    4d18:	19 f0       	breq	.+6      	; 0x4d20 <u8x8_cad_ssd13xx_fast_i2c+0x4c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:545
	 u8x8_byte_EndTransfer(u8x8); 
    4d1a:	ce 01       	movw	r24, r28
    4d1c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <u8x8_byte_EndTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:547
      
      u8x8_byte_StartTransfer(u8x8);
    4d20:	ce 01       	movw	r24, r28
    4d22:	0e 94 c4 25 	call	0x4b88	; 0x4b88 <u8x8_byte_StartTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:548
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    4d26:	60 e0       	ldi	r22, 0x00	; 0
    4d28:	ce 01       	movw	r24, r28
    4d2a:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:549
      u8x8_byte_SendByte(u8x8, arg_int);
    4d2e:	61 2f       	mov	r22, r17
    4d30:	ce 01       	movw	r24, r28
    4d32:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:550
      in_transfer = 1;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <in_transfer.3489>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    4d3c:	df 91       	pop	r29
    4d3e:	cf 91       	pop	r28
    4d40:	1f 91       	pop	r17
    4d42:	ff 90       	pop	r15
    4d44:	ef 90       	pop	r14
    4d46:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:564
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    4d48:	64 2f       	mov	r22, r20
    4d4a:	0e 94 b4 25 	call	0x4b68	; 0x4b68 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:604
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:600
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    4d50:	f5 cf       	rjmp	.-22     	; 0x4d3c <u8x8_cad_ssd13xx_fast_i2c+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:567
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    4d52:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    4d56:	88 23       	and	r24, r24
    4d58:	19 f0       	breq	.+6      	; 0x4d60 <u8x8_cad_ssd13xx_fast_i2c+0x8c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:568
	u8x8_byte_EndTransfer(u8x8); 
    4d5a:	ce 01       	movw	r24, r28
    4d5c:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <u8x8_byte_EndTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    4d60:	a7 01       	movw	r20, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:579
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    4d62:	19 31       	cpi	r17, 0x19	; 25
    4d64:	38 f4       	brcc	.+14     	; 0x4d74 <u8x8_cad_ssd13xx_fast_i2c+0xa0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:585
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    4d66:	61 2f       	mov	r22, r17
    4d68:	ce 01       	movw	r24, r28
    4d6a:	0e 94 d6 25 	call	0x4bac	; 0x4bac <u8x8_i2c_data_transfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:599
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    4d6e:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <in_transfer.3489>
    4d72:	ed cf       	rjmp	.-38     	; 0x4d4e <u8x8_cad_ssd13xx_fast_i2c+0x7a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    4d74:	68 e1       	ldi	r22, 0x18	; 24
    4d76:	ce 01       	movw	r24, r28
    4d78:	0e 94 d6 25 	call	0x4bac	; 0x4bac <u8x8_i2c_data_transfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:582
	arg_int-=24;
    4d7c:	18 51       	subi	r17, 0x18	; 24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:583
	p+=24;
    4d7e:	88 e1       	ldi	r24, 0x18	; 24
    4d80:	e8 0e       	add	r14, r24
    4d82:	f1 1c       	adc	r15, r1
    4d84:	ed cf       	rjmp	.-38     	; 0x4d60 <u8x8_cad_ssd13xx_fast_i2c+0x8c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:590
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    4d86:	8e 89       	ldd	r24, Y+22	; 0x16
    4d88:	8f 3f       	cpi	r24, 0xFF	; 255
    4d8a:	11 f4       	brne	.+4      	; 0x4d90 <u8x8_cad_ssd13xx_fast_i2c+0xbc>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:591
	u8x8->i2c_address = 0x078;
    4d8c:	88 e7       	ldi	r24, 0x78	; 120
    4d8e:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    4d90:	e8 85       	ldd	r30, Y+8	; 0x08
    4d92:	f9 85       	ldd	r31, Y+9	; 0x09
    4d94:	97 01       	movw	r18, r14
    4d96:	41 2f       	mov	r20, r17
    4d98:	64 e1       	ldi	r22, 0x14	; 20
    4d9a:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    4d9c:	df 91       	pop	r29
    4d9e:	cf 91       	pop	r28
    4da0:	1f 91       	pop	r17
    4da2:	ff 90       	pop	r15
    4da4:	ef 90       	pop	r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    4da6:	09 94       	ijmp

00004da8 <u8x8_d_ssd1306_sh1106_generic>:
u8x8_d_ssd1306_sh1106_generic():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:446
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    4da8:	ef 92       	push	r14
    4daa:	ff 92       	push	r15
    4dac:	0f 93       	push	r16
    4dae:	1f 93       	push	r17
    4db0:	cf 93       	push	r28
    4db2:	df 93       	push	r29
    4db4:	ec 01       	movw	r28, r24
    4db6:	04 2f       	mov	r16, r20
    4db8:	79 01       	movw	r14, r18
    4dba:	6d 30       	cpi	r22, 0x0D	; 13
    4dbc:	09 f4       	brne	.+2      	; 0x4dc0 <u8x8_d_ssd1306_sh1106_generic+0x18>
    4dbe:	47 c0       	rjmp	.+142    	; 0x4e4e <u8x8_d_ssd1306_sh1106_generic+0xa6>
    4dc0:	20 f4       	brcc	.+8      	; 0x4dca <u8x8_d_ssd1306_sh1106_generic+0x22>
    4dc2:	6b 30       	cpi	r22, 0x0B	; 11
    4dc4:	99 f1       	breq	.+102    	; 0x4e2c <u8x8_d_ssd1306_sh1106_generic+0x84>
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	3b c0       	rjmp	.+118    	; 0x4e40 <u8x8_d_ssd1306_sh1106_generic+0x98>
    4dca:	6e 30       	cpi	r22, 0x0E	; 14
    4dcc:	09 f4       	brne	.+2      	; 0x4dd0 <u8x8_d_ssd1306_sh1106_generic+0x28>
    4dce:	52 c0       	rjmp	.+164    	; 0x4e74 <u8x8_d_ssd1306_sh1106_generic+0xcc>
    4dd0:	6f 30       	cpi	r22, 0x0F	; 15
    4dd2:	c9 f7       	brne	.-14     	; 0x4dc6 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    4dd4:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <u8x8_cad_StartTransfer>
    4dd8:	f7 01       	movw	r30, r14
    4dda:	13 81       	ldd	r17, Z+3	; 0x03
    4ddc:	11 0f       	add	r17, r17
    4dde:	11 0f       	add	r17, r17
    4de0:	11 0f       	add	r17, r17
    4de2:	6c 89       	ldd	r22, Y+20	; 0x14
    4de4:	16 0f       	add	r17, r22
    4de6:	60 e4       	ldi	r22, 0x40	; 64
    4de8:	ce 01       	movw	r24, r28
    4dea:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <u8x8_cad_SendCmd>
    4dee:	61 2f       	mov	r22, r17
    4df0:	62 95       	swap	r22
    4df2:	6f 70       	andi	r22, 0x0F	; 15
    4df4:	60 61       	ori	r22, 0x10	; 16
    4df6:	ce 01       	movw	r24, r28
    4df8:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <u8x8_cad_SendCmd>
    4dfc:	61 2f       	mov	r22, r17
    4dfe:	6f 70       	andi	r22, 0x0F	; 15
    4e00:	ce 01       	movw	r24, r28
    4e02:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <u8x8_cad_SendArg>
    4e06:	f7 01       	movw	r30, r14
    4e08:	64 81       	ldd	r22, Z+4	; 0x04
    4e0a:	60 6b       	ori	r22, 0xB0	; 176
    4e0c:	ce 01       	movw	r24, r28
    4e0e:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <u8x8_cad_SendArg>
    4e12:	f7 01       	movw	r30, r14
    4e14:	40 81       	ld	r20, Z
    4e16:	51 81       	ldd	r21, Z+1	; 0x01
    4e18:	62 81       	ldd	r22, Z+2	; 0x02
    4e1a:	66 0f       	add	r22, r22
    4e1c:	66 0f       	add	r22, r22
    4e1e:	66 0f       	add	r22, r22
    4e20:	ce 01       	movw	r24, r28
    4e22:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <u8x8_cad_SendData>
    4e26:	01 50       	subi	r16, 0x01	; 1
    4e28:	a1 f7       	brne	.-24     	; 0x4e12 <u8x8_d_ssd1306_sh1106_generic+0x6a>
    4e2a:	2e c0       	rjmp	.+92     	; 0x4e88 <u8x8_d_ssd1306_sh1106_generic+0xe0>
    4e2c:	61 e8       	ldi	r22, 0x81	; 129
    4e2e:	71 e0       	ldi	r23, 0x01	; 1
    4e30:	44 23       	and	r20, r20
    4e32:	11 f0       	breq	.+4      	; 0x4e38 <u8x8_d_ssd1306_sh1106_generic+0x90>
    4e34:	6c e7       	ldi	r22, 0x7C	; 124
    4e36:	71 e0       	ldi	r23, 0x01	; 1
    4e38:	ce 01       	movw	r24, r28
    4e3a:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <u8x8_cad_SendSequence>
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	1f 91       	pop	r17
    4e46:	0f 91       	pop	r16
    4e48:	ff 90       	pop	r15
    4e4a:	ef 90       	pop	r14
    4e4c:	08 95       	ret
    4e4e:	41 11       	cpse	r20, r1
    4e50:	09 c0       	rjmp	.+18     	; 0x4e64 <u8x8_d_ssd1306_sh1106_generic+0xbc>
    4e52:	65 e7       	ldi	r22, 0x75	; 117
    4e54:	71 e0       	ldi	r23, 0x01	; 1
    4e56:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <u8x8_cad_SendSequence>
    4e5a:	e8 81       	ld	r30, Y
    4e5c:	f9 81       	ldd	r31, Y+1	; 0x01
    4e5e:	82 89       	ldd	r24, Z+18	; 0x12
    4e60:	8c 8b       	std	Y+20, r24	; 0x14
    4e62:	ed cf       	rjmp	.-38     	; 0x4e3e <u8x8_d_ssd1306_sh1106_generic+0x96>
    4e64:	6e e6       	ldi	r22, 0x6E	; 110
    4e66:	71 e0       	ldi	r23, 0x01	; 1
    4e68:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <u8x8_cad_SendSequence>
    4e6c:	e8 81       	ld	r30, Y
    4e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e70:	83 89       	ldd	r24, Z+19	; 0x13
    4e72:	f6 cf       	rjmp	.-20     	; 0x4e60 <u8x8_d_ssd1306_sh1106_generic+0xb8>
    4e74:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <u8x8_cad_StartTransfer>
    4e78:	61 e8       	ldi	r22, 0x81	; 129
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <u8x8_cad_SendCmd>
    4e80:	60 2f       	mov	r22, r16
    4e82:	ce 01       	movw	r24, r28
    4e84:	0e 94 fc 25 	call	0x4bf8	; 0x4bf8 <u8x8_cad_SendArg>
    4e88:	ce 01       	movw	r24, r28
    4e8a:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <u8x8_cad_EndTransfer>
    4e8e:	d7 cf       	rjmp	.-82     	; 0x4e3e <u8x8_d_ssd1306_sh1106_generic+0x96>

00004e90 <u8x8_d_sh1106_128x64_noname>:
u8x8_d_sh1106_128x64_noname():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:480
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    4e90:	1f 93       	push	r17
    4e92:	cf 93       	push	r28
    4e94:	df 93       	push	r29
    4e96:	ec 01       	movw	r28, r24
    4e98:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:481
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    4e9a:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <u8x8_d_ssd1306_sh1106_generic>
    4e9e:	81 11       	cpse	r24, r1
    4ea0:	0c c0       	rjmp	.+24     	; 0x4eba <u8x8_d_sh1106_128x64_noname+0x2a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:484
    return 1;
  
  switch(msg)
    4ea2:	19 30       	cpi	r17, 0x09	; 9
    4ea4:	79 f0       	breq	.+30     	; 0x4ec4 <u8x8_d_sh1106_128x64_noname+0x34>
    4ea6:	1a 30       	cpi	r17, 0x0A	; 10
    4ea8:	49 f4       	brne	.+18     	; 0x4ebc <u8x8_d_sh1106_128x64_noname+0x2c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:487
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    4eaa:	ce 01       	movw	r24, r28
    4eac:	0e 94 70 27 	call	0x4ee0	; 0x4ee0 <u8x8_d_helper_display_init>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:491
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    4eb0:	66 e8       	ldi	r22, 0x86	; 134
    4eb2:	71 e0       	ldi	r23, 0x01	; 1
    4eb4:	ce 01       	movw	r24, r28
    4eb6:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <u8x8_cad_SendSequence>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:482
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    4eba:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:501
    default:
      return 0;
  }
  return 1;
    
}
    4ebc:	df 91       	pop	r29
    4ebe:	cf 91       	pop	r28
    4ec0:	1f 91       	pop	r17
    4ec2:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:494
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
    4ec4:	66 e5       	ldi	r22, 0x56	; 86
    4ec6:	71 e0       	ldi	r23, 0x01	; 1
    4ec8:	ce 01       	movw	r24, r28
    4eca:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <u8x8_d_helper_display_setup_memory>
    4ece:	f5 cf       	rjmp	.-22     	; 0x4eba <u8x8_d_sh1106_128x64_noname+0x2a>

00004ed0 <u8x8_d_helper_display_setup_memory>:
u8x8_d_helper_display_setup_memory():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:153
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    4ed0:	fc 01       	movw	r30, r24
    4ed2:	71 83       	std	Z+1, r23	; 0x01
    4ed4:	60 83       	st	Z, r22
    4ed6:	fb 01       	movw	r30, r22
    4ed8:	22 89       	ldd	r18, Z+18	; 0x12
    4eda:	fc 01       	movw	r30, r24
    4edc:	24 8b       	std	Z+20, r18	; 0x14
    4ede:	08 95       	ret

00004ee0 <u8x8_d_helper_display_init>:
u8x8_d_helper_display_init():
    4ee0:	cf 93       	push	r28
    4ee2:	df 93       	push	r29
    4ee4:	ec 01       	movw	r28, r24
    4ee6:	ea 85       	ldd	r30, Y+10	; 0x0a
    4ee8:	fb 85       	ldd	r31, Y+11	; 0x0b
    4eea:	30 e0       	ldi	r19, 0x00	; 0
    4eec:	20 e0       	ldi	r18, 0x00	; 0
    4eee:	40 e0       	ldi	r20, 0x00	; 0
    4ef0:	68 e2       	ldi	r22, 0x28	; 40
    4ef2:	09 95       	icall
    4ef4:	ee 81       	ldd	r30, Y+6	; 0x06
    4ef6:	ff 81       	ldd	r31, Y+7	; 0x07
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	20 e0       	ldi	r18, 0x00	; 0
    4efc:	40 e0       	ldi	r20, 0x00	; 0
    4efe:	64 e1       	ldi	r22, 0x14	; 20
    4f00:	ce 01       	movw	r24, r28
    4f02:	09 95       	icall
    4f04:	41 e0       	ldi	r20, 0x01	; 1
    4f06:	6b e4       	ldi	r22, 0x4B	; 75
    4f08:	ce 01       	movw	r24, r28
    4f0a:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <u8x8_gpio_call>
    4f0e:	e8 81       	ld	r30, Y
    4f10:	f9 81       	ldd	r31, Y+1	; 0x01
    4f12:	44 81       	ldd	r20, Z+4	; 0x04
    4f14:	69 e2       	ldi	r22, 0x29	; 41
    4f16:	ce 01       	movw	r24, r28
    4f18:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <u8x8_gpio_call>
    4f1c:	40 e0       	ldi	r20, 0x00	; 0
    4f1e:	6b e4       	ldi	r22, 0x4B	; 75
    4f20:	ce 01       	movw	r24, r28
    4f22:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <u8x8_gpio_call>
    4f26:	e8 81       	ld	r30, Y
    4f28:	f9 81       	ldd	r31, Y+1	; 0x01
    4f2a:	44 81       	ldd	r20, Z+4	; 0x04
    4f2c:	69 e2       	ldi	r22, 0x29	; 41
    4f2e:	ce 01       	movw	r24, r28
    4f30:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <u8x8_gpio_call>
    4f34:	41 e0       	ldi	r20, 0x01	; 1
    4f36:	6b e4       	ldi	r22, 0x4B	; 75
    4f38:	ce 01       	movw	r24, r28
    4f3a:	0e 94 ee 27 	call	0x4fdc	; 0x4fdc <u8x8_gpio_call>
    4f3e:	e8 81       	ld	r30, Y
    4f40:	f9 81       	ldd	r31, Y+1	; 0x01
    4f42:	45 81       	ldd	r20, Z+5	; 0x05
    4f44:	69 e2       	ldi	r22, 0x29	; 41
    4f46:	ce 01       	movw	r24, r28
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	0c 94 ee 27 	jmp	0x4fdc	; 0x4fdc <u8x8_gpio_call>

00004f50 <u8x8_DrawTile>:
u8x8_DrawTile():
    4f50:	0f 93       	push	r16
    4f52:	1f 93       	push	r17
    4f54:	cf 93       	push	r28
    4f56:	df 93       	push	r29
    4f58:	00 d0       	rcall	.+0      	; 0x4f5a <u8x8_DrawTile+0xa>
    4f5a:	00 d0       	rcall	.+0      	; 0x4f5c <u8x8_DrawTile+0xc>
    4f5c:	1f 92       	push	r1
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
    4f62:	6c 83       	std	Y+4, r22	; 0x04
    4f64:	4d 83       	std	Y+5, r20	; 0x05
    4f66:	2b 83       	std	Y+3, r18	; 0x03
    4f68:	1a 83       	std	Y+2, r17	; 0x02
    4f6a:	09 83       	std	Y+1, r16	; 0x01
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	14 96       	adiw	r26, 0x04	; 4
    4f70:	ed 91       	ld	r30, X+
    4f72:	fc 91       	ld	r31, X
    4f74:	9e 01       	movw	r18, r28
    4f76:	2f 5f       	subi	r18, 0xFF	; 255
    4f78:	3f 4f       	sbci	r19, 0xFF	; 255
    4f7a:	41 e0       	ldi	r20, 0x01	; 1
    4f7c:	6f e0       	ldi	r22, 0x0F	; 15
    4f7e:	09 95       	icall
    4f80:	0f 90       	pop	r0
    4f82:	0f 90       	pop	r0
    4f84:	0f 90       	pop	r0
    4f86:	0f 90       	pop	r0
    4f88:	0f 90       	pop	r0
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	1f 91       	pop	r17
    4f90:	0f 91       	pop	r16
    4f92:	08 95       	ret

00004f94 <u8x8_SetupMemory>:
u8x8_SetupMemory():
    4f94:	dc 01       	movw	r26, r24
    4f96:	14 96       	adiw	r26, 0x04	; 4
    4f98:	ed 91       	ld	r30, X+
    4f9a:	fc 91       	ld	r31, X
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	40 e0       	ldi	r20, 0x00	; 0
    4fa2:	69 e0       	ldi	r22, 0x09	; 9
    4fa4:	09 94       	ijmp

00004fa6 <u8x8_InitDisplay>:
u8x8_InitDisplay():
    4fa6:	dc 01       	movw	r26, r24
    4fa8:	14 96       	adiw	r26, 0x04	; 4
    4faa:	ed 91       	ld	r30, X+
    4fac:	fc 91       	ld	r31, X
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	20 e0       	ldi	r18, 0x00	; 0
    4fb2:	40 e0       	ldi	r20, 0x00	; 0
    4fb4:	6a e0       	ldi	r22, 0x0A	; 10
    4fb6:	09 94       	ijmp

00004fb8 <u8x8_SetPowerSave>:
u8x8_SetPowerSave():
    4fb8:	46 2f       	mov	r20, r22
    4fba:	dc 01       	movw	r26, r24
    4fbc:	14 96       	adiw	r26, 0x04	; 4
    4fbe:	ed 91       	ld	r30, X+
    4fc0:	fc 91       	ld	r31, X
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	6b e0       	ldi	r22, 0x0B	; 11
    4fc8:	09 94       	ijmp

00004fca <u8x8_RefreshDisplay>:
u8x8_RefreshDisplay():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:158
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    4fca:	dc 01       	movw	r26, r24
    4fcc:	14 96       	adiw	r26, 0x04	; 4
    4fce:	ed 91       	ld	r30, X+
    4fd0:	fc 91       	ld	r31, X
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	40 e0       	ldi	r20, 0x00	; 0
    4fd8:	60 e1       	ldi	r22, 0x10	; 16
    4fda:	09 94       	ijmp

00004fdc <u8x8_gpio_call>:
u8x8_gpio_call():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_gpio.c:42
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    4fdc:	dc 01       	movw	r26, r24
    4fde:	1a 96       	adiw	r26, 0x0a	; 10
    4fe0:	ed 91       	ld	r30, X+
    4fe2:	fc 91       	ld	r31, X
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	20 e0       	ldi	r18, 0x00	; 0
    4fe8:	09 94       	ijmp

00004fea <u8x8_dummy_cb>:
u8x8_dummy_cb():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:82
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_null_display_info);
      break;
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      break;
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	08 95       	ret

00004fee <u8x8_SetupDefaults>:
u8x8_SetupDefaults():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:96
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    4fee:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:97
    u8x8->display_info = NULL;
    4ff0:	11 82       	std	Z+1, r1	; 0x01
    4ff2:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:98
    u8x8->display_cb = u8x8_dummy_cb;
    4ff4:	85 ef       	ldi	r24, 0xF5	; 245
    4ff6:	97 e2       	ldi	r25, 0x27	; 39
    4ff8:	95 83       	std	Z+5, r25	; 0x05
    4ffa:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:99
    u8x8->cad_cb = u8x8_dummy_cb;
    4ffc:	97 83       	std	Z+7, r25	; 0x07
    4ffe:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:100
    u8x8->byte_cb = u8x8_dummy_cb;
    5000:	91 87       	std	Z+9, r25	; 0x09
    5002:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:101
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    5004:	93 87       	std	Z+11, r25	; 0x0b
    5006:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:102
    u8x8->is_font_inverse_mode = 0;
    5008:	15 8a       	std	Z+21, r1	; 0x15
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:104
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    500a:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:105
    u8x8->bus_clock = 0;		/* issue 769 */
    500c:	14 86       	std	Z+12, r1	; 0x0c
    500e:	15 86       	std	Z+13, r1	; 0x0d
    5010:	16 86       	std	Z+14, r1	; 0x0e
    5012:	17 86       	std	Z+15, r1	; 0x0f
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:106
    u8x8->i2c_address = 255;
    5014:	8f ef       	ldi	r24, 0xFF	; 255
    5016:	86 8b       	std	Z+22, r24	; 0x16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:107
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    5018:	82 8f       	std	Z+26, r24	; 0x1a
    501a:	df 01       	movw	r26, r30
    501c:	5e 96       	adiw	r26, 0x1e	; 30
    501e:	f4 96       	adiw	r30, 0x34	; 52
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:113 (discriminator 3)
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
    5020:	8d 93       	st	X+, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:112 (discriminator 3)
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
    5022:	ae 17       	cp	r26, r30
    5024:	bf 07       	cpc	r27, r31
    5026:	e1 f7       	brne	.-8      	; 0x5020 <u8x8_SetupDefaults+0x32>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:116
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    5028:	08 95       	ret

0000502a <u8x8_Setup>:
u8x8_Setup():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:134
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    502a:	af 92       	push	r10
    502c:	bf 92       	push	r11
    502e:	cf 92       	push	r12
    5030:	df 92       	push	r13
    5032:	ef 92       	push	r14
    5034:	ff 92       	push	r15
    5036:	0f 93       	push	r16
    5038:	1f 93       	push	r17
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
    503e:	ec 01       	movw	r28, r24
    5040:	5b 01       	movw	r10, r22
    5042:	6a 01       	movw	r12, r20
    5044:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:136
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    5046:	0e 94 f7 27 	call	0x4fee	; 0x4fee <u8x8_SetupDefaults>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:139

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    504a:	bd 82       	std	Y+5, r11	; 0x05
    504c:	ac 82       	std	Y+4, r10	; 0x04
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:140
  u8x8->cad_cb = cad_cb;
    504e:	df 82       	std	Y+7, r13	; 0x07
    5050:	ce 82       	std	Y+6, r12	; 0x06
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:141
  u8x8->byte_cb = byte_cb;
    5052:	f9 86       	std	Y+9, r15	; 0x09
    5054:	e8 86       	std	Y+8, r14	; 0x08
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:142
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    5056:	1b 87       	std	Y+11, r17	; 0x0b
    5058:	0a 87       	std	Y+10, r16	; 0x0a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    505a:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:146
}
    505c:	df 91       	pop	r29
    505e:	cf 91       	pop	r28
    5060:	1f 91       	pop	r17
    5062:	0f 91       	pop	r16
    5064:	ff 90       	pop	r15
    5066:	ef 90       	pop	r14
    5068:	df 90       	pop	r13
    506a:	cf 90       	pop	r12
    506c:	bf 90       	pop	r11
    506e:	af 90       	pop	r10
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    5070:	0c 94 ca 27 	jmp	0x4f94	; 0x4f94 <u8x8_SetupMemory>

00005074 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:657

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    5074:	cf 93       	push	r28
    5076:	df 93       	push	r29
    5078:	1f 92       	push	r1
    507a:	cd b7       	in	r28, 0x3d	; 61
    507c:	de b7       	in	r29, 0x3e	; 62
    507e:	fc 01       	movw	r30, r24
    5080:	69 83       	std	Y+1, r22	; 0x01
    5082:	87 89       	ldd	r24, Z+23	; 0x17
    5084:	88 23       	and	r24, r24
    5086:	f9 f0       	breq	.+62     	; 0x50c6 <TwoWire::write(unsigned char)+0x52>
    5088:	26 89       	ldd	r18, Z+22	; 0x16
    508a:	84 85       	ldd	r24, Z+12	; 0x0c
    508c:	95 85       	ldd	r25, Z+13	; 0x0d
    508e:	28 17       	cp	r18, r24
    5090:	19 06       	cpc	r1, r25
    5092:	54 f0       	brlt	.+20     	; 0x50a8 <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
    5094:	81 e0       	ldi	r24, 0x01	; 1
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	93 83       	std	Z+3, r25	; 0x03
    509a:	82 83       	std	Z+2, r24	; 0x02
_ZN7TwoWire5writeEh():
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	0f 90       	pop	r0
    50a2:	df 91       	pop	r29
    50a4:	cf 91       	pop	r28
    50a6:	08 95       	ret
    50a8:	89 81       	ldd	r24, Y+1	; 0x01
    50aa:	a5 89       	ldd	r26, Z+21	; 0x15
    50ac:	23 89       	ldd	r18, Z+19	; 0x13
    50ae:	34 89       	ldd	r19, Z+20	; 0x14
    50b0:	a2 0f       	add	r26, r18
    50b2:	b3 2f       	mov	r27, r19
    50b4:	b1 1d       	adc	r27, r1
    50b6:	8c 93       	st	X, r24
    50b8:	85 89       	ldd	r24, Z+21	; 0x15
    50ba:	8f 5f       	subi	r24, 0xFF	; 255
    50bc:	85 8b       	std	Z+21, r24	; 0x15
    50be:	86 8b       	std	Z+22, r24	; 0x16
    50c0:	81 e0       	ldi	r24, 0x01	; 1
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	ed cf       	rjmp	.-38     	; 0x50a0 <TwoWire::write(unsigned char)+0x2c>
    50c6:	00 a4       	ldd	r0, Z+40	; 0x28
    50c8:	f1 a5       	ldd	r31, Z+41	; 0x29
    50ca:	e0 2d       	mov	r30, r0
    50cc:	61 e0       	ldi	r22, 0x01	; 1
    50ce:	ce 01       	movw	r24, r28
    50d0:	01 96       	adiw	r24, 0x01	; 1
    50d2:	09 95       	icall
    50d4:	f5 cf       	rjmp	.-22     	; 0x50c0 <TwoWire::write(unsigned char)+0x4c>

000050d6 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    50d6:	fc 01       	movw	r30, r24
    50d8:	81 89       	ldd	r24, Z+17	; 0x11
    50da:	90 89       	ldd	r25, Z+16	; 0x10
    50dc:	89 1b       	sub	r24, r25
    50de:	99 0b       	sbc	r25, r25
    50e0:	08 95       	ret

000050e2 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    50e2:	fc 01       	movw	r30, r24
    50e4:	90 89       	ldd	r25, Z+16	; 0x10
    50e6:	81 89       	ldd	r24, Z+17	; 0x11
    50e8:	2f ef       	ldi	r18, 0xFF	; 255
    50ea:	3f ef       	ldi	r19, 0xFF	; 255
    50ec:	98 17       	cp	r25, r24
    50ee:	40 f4       	brcc	.+16     	; 0x5100 <TwoWire::read()+0x1e>
    50f0:	a6 85       	ldd	r26, Z+14	; 0x0e
    50f2:	b7 85       	ldd	r27, Z+15	; 0x0f
    50f4:	a9 0f       	add	r26, r25
    50f6:	b1 1d       	adc	r27, r1
    50f8:	2c 91       	ld	r18, X
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	9f 5f       	subi	r25, 0xFF	; 255
    50fe:	90 8b       	std	Z+16, r25	; 0x10
    5100:	c9 01       	movw	r24, r18
    5102:	08 95       	ret

00005104 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    5104:	dc 01       	movw	r26, r24
    5106:	50 96       	adiw	r26, 0x10	; 16
    5108:	ec 91       	ld	r30, X
    510a:	50 97       	sbiw	r26, 0x10	; 16
    510c:	51 96       	adiw	r26, 0x11	; 17
    510e:	8c 91       	ld	r24, X
    5110:	51 97       	sbiw	r26, 0x11	; 17
    5112:	e8 17       	cp	r30, r24
    5114:	48 f4       	brcc	.+18     	; 0x5128 <TwoWire::peek()+0x24>
    5116:	1e 96       	adiw	r26, 0x0e	; 14
    5118:	8d 91       	ld	r24, X+
    511a:	9c 91       	ld	r25, X
    511c:	e8 0f       	add	r30, r24
    511e:	f9 2f       	mov	r31, r25
    5120:	f1 1d       	adc	r31, r1
    5122:	80 81       	ld	r24, Z
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	08 95       	ret
    5128:	8f ef       	ldi	r24, 0xFF	; 255
    512a:	9f ef       	ldi	r25, 0xFF	; 255
    512c:	08 95       	ret

0000512e <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    512e:	08 95       	ret

00005130 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    5130:	cf 92       	push	r12
    5132:	df 92       	push	r13
    5134:	ef 92       	push	r14
    5136:	ff 92       	push	r15
    5138:	0f 93       	push	r16
    513a:	1f 93       	push	r17
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	8c 01       	movw	r16, r24
    5142:	cb 01       	movw	r24, r22
    5144:	7a 01       	movw	r14, r20
    5146:	d8 01       	movw	r26, r16
    5148:	57 96       	adiw	r26, 0x17	; 23
    514a:	2c 91       	ld	r18, X
    514c:	57 97       	sbiw	r26, 0x17	; 23
    514e:	22 23       	and	r18, r18
    5150:	89 f0       	breq	.+34     	; 0x5174 <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    5152:	eb 01       	movw	r28, r22
    5154:	6b 01       	movw	r12, r22
    5156:	c4 0e       	add	r12, r20
    5158:	d5 1e       	adc	r13, r21
    515a:	cc 15       	cp	r28, r12
    515c:	dd 05       	cpc	r29, r13
    515e:	79 f0       	breq	.+30     	; 0x517e <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
    5160:	69 91       	ld	r22, Y+
    5162:	d8 01       	movw	r26, r16
    5164:	ed 91       	ld	r30, X+
    5166:	fc 91       	ld	r31, X
    5168:	01 90       	ld	r0, Z+
    516a:	f0 81       	ld	r31, Z
    516c:	e0 2d       	mov	r30, r0
    516e:	c8 01       	movw	r24, r16
    5170:	09 95       	icall
    5172:	f3 cf       	rjmp	.-26     	; 0x515a <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
    5174:	98 96       	adiw	r26, 0x28	; 40
    5176:	ed 91       	ld	r30, X+
    5178:	fc 91       	ld	r31, X
    517a:	64 2f       	mov	r22, r20
    517c:	09 95       	icall
    517e:	c7 01       	movw	r24, r14
    5180:	df 91       	pop	r29
    5182:	cf 91       	pop	r28
    5184:	1f 91       	pop	r17
    5186:	0f 91       	pop	r16
    5188:	ff 90       	pop	r15
    518a:	ef 90       	pop	r14
    518c:	df 90       	pop	r13
    518e:	cf 90       	pop	r12
    5190:	08 95       	ret

00005192 <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>:
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    5192:	2f 92       	push	r2
    5194:	3f 92       	push	r3
    5196:	4f 92       	push	r4
    5198:	5f 92       	push	r5
    519a:	6f 92       	push	r6
    519c:	7f 92       	push	r7
    519e:	8f 92       	push	r8
    51a0:	9f 92       	push	r9
    51a2:	af 92       	push	r10
    51a4:	bf 92       	push	r11
    51a6:	cf 92       	push	r12
    51a8:	df 92       	push	r13
    51aa:	ef 92       	push	r14
    51ac:	ff 92       	push	r15
    51ae:	0f 93       	push	r16
    51b0:	1f 93       	push	r17
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	cd b7       	in	r28, 0x3d	; 61
    51b8:	de b7       	in	r29, 0x3e	; 62
    51ba:	60 97       	sbiw	r28, 0x10	; 16
    51bc:	0f b6       	in	r0, 0x3f	; 63
    51be:	f8 94       	cli
    51c0:	de bf       	out	0x3e, r29	; 62
    51c2:	0f be       	out	0x3f, r0	; 63
    51c4:	cd bf       	out	0x3d, r28	; 61
    51c6:	3c 01       	movw	r6, r24
    51c8:	2b 01       	movw	r4, r22
    51ca:	5a 83       	std	Y+2, r21	; 0x02
    51cc:	49 83       	std	Y+1, r20	; 0x01
    51ce:	3c 83       	std	Y+4, r19	; 0x04
    51d0:	2b 83       	std	Y+3, r18	; 0x03
    51d2:	8d a1       	ldd	r24, Y+37	; 0x25
    51d4:	9e a1       	ldd	r25, Y+38	; 0x26
    51d6:	9e 83       	std	Y+6, r25	; 0x06
    51d8:	8d 83       	std	Y+5, r24	; 0x05
    51da:	ef a1       	ldd	r30, Y+39	; 0x27
    51dc:	f8 a5       	ldd	r31, Y+40	; 0x28
    51de:	f8 87       	std	Y+8, r31	; 0x08
    51e0:	ef 83       	std	Y+7, r30	; 0x07
    51e2:	89 a5       	ldd	r24, Y+41	; 0x29
    51e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    51e6:	9a 87       	std	Y+10, r25	; 0x0a
    51e8:	89 87       	std	Y+9, r24	; 0x09
    51ea:	eb a5       	ldd	r30, Y+43	; 0x2b
    51ec:	fc a5       	ldd	r31, Y+44	; 0x2c
    51ee:	fc 87       	std	Y+12, r31	; 0x0c
    51f0:	eb 87       	std	Y+11, r30	; 0x0b
    51f2:	2d a4       	ldd	r2, Y+45	; 0x2d
    51f4:	3e a4       	ldd	r3, Y+46	; 0x2e
    51f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    51f8:	98 a9       	ldd	r25, Y+48	; 0x30
    51fa:	9e 87       	std	Y+14, r25	; 0x0e
    51fc:	8d 87       	std	Y+13, r24	; 0x0d
    51fe:	e9 a9       	ldd	r30, Y+49	; 0x31
    5200:	fa a9       	ldd	r31, Y+50	; 0x32
    5202:	f8 8b       	std	Y+16, r31	; 0x10
    5204:	ef 87       	std	Y+15, r30	; 0x0f
_ZN5PrintC4Ev():
    5206:	f3 01       	movw	r30, r6
    5208:	13 82       	std	Z+3, r1	; 0x03
    520a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
    520c:	88 ee       	ldi	r24, 0xE8	; 232
    520e:	93 e0       	ldi	r25, 0x03	; 3
    5210:	a0 e0       	ldi	r26, 0x00	; 0
    5212:	b0 e0       	ldi	r27, 0x00	; 0
    5214:	84 83       	std	Z+4, r24	; 0x04
    5216:	95 83       	std	Z+5, r25	; 0x05
    5218:	a6 83       	std	Z+6, r26	; 0x06
    521a:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    521c:	8f eb       	ldi	r24, 0xBF	; 191
    521e:	91 e0       	ldi	r25, 0x01	; 1
    5220:	91 83       	std	Z+1, r25	; 0x01
    5222:	80 83       	st	Z, r24
    5224:	75 87       	std	Z+13, r23	; 0x0d
    5226:	64 87       	std	Z+12, r22	; 0x0c
    5228:	cb 01       	movw	r24, r22
    522a:	0e 94 53 33 	call	0x66a6	; 0x66a6 <operator new[](unsigned int)>
    522e:	f3 01       	movw	r30, r6
    5230:	97 87       	std	Z+15, r25	; 0x0f
    5232:	86 87       	std	Z+14, r24	; 0x0e
    5234:	10 8a       	std	Z+16, r1	; 0x10
    5236:	11 8a       	std	Z+17, r1	; 0x11
    5238:	12 8a       	std	Z+18, r1	; 0x12
    523a:	c2 01       	movw	r24, r4
    523c:	0e 94 53 33 	call	0x66a6	; 0x66a6 <operator new[](unsigned int)>
    5240:	f3 01       	movw	r30, r6
    5242:	94 8b       	std	Z+20, r25	; 0x14
    5244:	83 8b       	std	Z+19, r24	; 0x13
    5246:	15 8a       	std	Z+21, r1	; 0x15
    5248:	16 8a       	std	Z+22, r1	; 0x16
    524a:	17 8a       	std	Z+23, r1	; 0x17
    524c:	89 81       	ldd	r24, Y+1	; 0x01
    524e:	9a 81       	ldd	r25, Y+2	; 0x02
    5250:	95 8f       	std	Z+29, r25	; 0x1d
    5252:	84 8f       	std	Z+28, r24	; 0x1c
    5254:	8b 81       	ldd	r24, Y+3	; 0x03
    5256:	9c 81       	ldd	r25, Y+4	; 0x04
    5258:	97 8f       	std	Z+31, r25	; 0x1f
    525a:	86 8f       	std	Z+30, r24	; 0x1e
    525c:	11 a3       	std	Z+33, r17	; 0x21
    525e:	00 a3       	std	Z+32, r16	; 0x20
    5260:	f3 a2       	std	Z+35, r15	; 0x23
    5262:	e2 a2       	std	Z+34, r14	; 0x22
    5264:	d5 a2       	std	Z+37, r13	; 0x25
    5266:	c4 a2       	std	Z+36, r12	; 0x24
    5268:	b7 a2       	std	Z+39, r11	; 0x27
    526a:	a6 a2       	std	Z+38, r10	; 0x26
    526c:	91 a6       	std	Z+41, r9	; 0x29
    526e:	80 a6       	std	Z+40, r8	; 0x28
    5270:	8d 81       	ldd	r24, Y+5	; 0x05
    5272:	9e 81       	ldd	r25, Y+6	; 0x06
    5274:	93 a7       	std	Z+43, r25	; 0x2b
    5276:	82 a7       	std	Z+42, r24	; 0x2a
    5278:	8f 81       	ldd	r24, Y+7	; 0x07
    527a:	98 85       	ldd	r25, Y+8	; 0x08
    527c:	95 a7       	std	Z+45, r25	; 0x2d
    527e:	84 a7       	std	Z+44, r24	; 0x2c
    5280:	89 85       	ldd	r24, Y+9	; 0x09
    5282:	9a 85       	ldd	r25, Y+10	; 0x0a
    5284:	97 a7       	std	Z+47, r25	; 0x2f
    5286:	86 a7       	std	Z+46, r24	; 0x2e
    5288:	c1 01       	movw	r24, r2
    528a:	eb 85       	ldd	r30, Y+11	; 0x0b
    528c:	fc 85       	ldd	r31, Y+12	; 0x0c
    528e:	09 95       	icall
    5290:	8f 85       	ldd	r24, Y+15	; 0x0f
    5292:	98 89       	ldd	r25, Y+16	; 0x10
    5294:	ed 85       	ldd	r30, Y+13	; 0x0d
    5296:	fe 85       	ldd	r31, Y+14	; 0x0e
    5298:	60 96       	adiw	r28, 0x10	; 16
    529a:	0f b6       	in	r0, 0x3f	; 63
    529c:	f8 94       	cli
    529e:	de bf       	out	0x3e, r29	; 62
    52a0:	0f be       	out	0x3f, r0	; 63
    52a2:	cd bf       	out	0x3d, r28	; 61
    52a4:	df 91       	pop	r29
    52a6:	cf 91       	pop	r28
    52a8:	1f 91       	pop	r17
    52aa:	0f 91       	pop	r16
    52ac:	ff 90       	pop	r15
    52ae:	ef 90       	pop	r14
    52b0:	df 90       	pop	r13
    52b2:	cf 90       	pop	r12
    52b4:	bf 90       	pop	r11
    52b6:	af 90       	pop	r10
    52b8:	9f 90       	pop	r9
    52ba:	8f 90       	pop	r8
    52bc:	7f 90       	pop	r7
    52be:	6f 90       	pop	r6
    52c0:	5f 90       	pop	r5
    52c2:	4f 90       	pop	r4
    52c4:	3f 90       	pop	r3
    52c6:	2f 90       	pop	r2
    52c8:	09 94       	ijmp

000052ca <TwoWire::~TwoWire()>:
_ZN7TwoWireD2Ev():
    52ca:	cf 93       	push	r28
    52cc:	df 93       	push	r29
    52ce:	ec 01       	movw	r28, r24
    52d0:	8f eb       	ldi	r24, 0xBF	; 191
    52d2:	91 e0       	ldi	r25, 0x01	; 1
    52d4:	99 83       	std	Y+1, r25	; 0x01
    52d6:	88 83       	st	Y, r24
    52d8:	61 e0       	ldi	r22, 0x01	; 1
    52da:	70 e0       	ldi	r23, 0x00	; 0
    52dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    52de:	9f 85       	ldd	r25, Y+15	; 0x0f
    52e0:	0e 94 55 33 	call	0x66aa	; 0x66aa <operator delete(void*, unsigned int)>
    52e4:	61 e0       	ldi	r22, 0x01	; 1
    52e6:	70 e0       	ldi	r23, 0x00	; 0
    52e8:	8b 89       	ldd	r24, Y+19	; 0x13
    52ea:	9c 89       	ldd	r25, Y+20	; 0x14
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	0c 94 55 33 	jmp	0x66aa	; 0x66aa <operator delete(void*, unsigned int)>

000052f4 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    52f4:	fc 01       	movw	r30, r24
    52f6:	10 8a       	std	Z+16, r1	; 0x10
    52f8:	11 8a       	std	Z+17, r1	; 0x11
    52fa:	15 8a       	std	Z+21, r1	; 0x15
    52fc:	16 8a       	std	Z+22, r1	; 0x16
    52fe:	04 8c       	ldd	r0, Z+28	; 0x1c
    5300:	f5 8d       	ldd	r31, Z+29	; 0x1d
    5302:	e0 2d       	mov	r30, r0
    5304:	09 94       	ijmp

00005306 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    5306:	dc 01       	movw	r26, r24
    5308:	92 96       	adiw	r26, 0x22	; 34
    530a:	ed 91       	ld	r30, X+
    530c:	fc 91       	ld	r31, X
    530e:	cb 01       	movw	r24, r22
    5310:	ba 01       	movw	r22, r20
    5312:	09 94       	ijmp

00005314 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    5314:	fc 01       	movw	r30, r24
_ZN7TwoWire17beginTransmissionEh():
    5316:	81 e0       	ldi	r24, 0x01	; 1
    5318:	87 8b       	std	Z+23, r24	; 0x17
_ZN7TwoWire17beginTransmissionEi():
    531a:	62 8b       	std	Z+18, r22	; 0x12
_ZN7TwoWire17beginTransmissionEh():
    531c:	15 8a       	std	Z+21, r1	; 0x15
    531e:	16 8a       	std	Z+22, r1	; 0x16
_ZN7TwoWire17beginTransmissionEi():
    5320:	08 95       	ret

00005322 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    5322:	0f 93       	push	r16
    5324:	cf 93       	push	r28
    5326:	df 93       	push	r29
    5328:	ec 01       	movw	r28, r24
    532a:	8b 89       	ldd	r24, Y+19	; 0x13
    532c:	9c 89       	ldd	r25, Y+20	; 0x14
    532e:	ee a1       	ldd	r30, Y+38	; 0x26
    5330:	ff a1       	ldd	r31, Y+39	; 0x27
    5332:	06 2f       	mov	r16, r22
    5334:	21 e0       	ldi	r18, 0x01	; 1
    5336:	4e 89       	ldd	r20, Y+22	; 0x16
    5338:	bc 01       	movw	r22, r24
    533a:	8a 89       	ldd	r24, Y+18	; 0x12
    533c:	09 95       	icall
    533e:	1d 8a       	std	Y+21, r1	; 0x15
    5340:	1e 8a       	std	Y+22, r1	; 0x16
    5342:	1f 8a       	std	Y+23, r1	; 0x17
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	0f 91       	pop	r16
    534a:	08 95       	ret

0000534c <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    534c:	61 e0       	ldi	r22, 0x01	; 1
    534e:	0c 94 91 29 	jmp	0x5322	; 0x5322 <TwoWire::endTransmission(unsigned char)>

00005352 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    5352:	fc 01       	movw	r30, r24
    5354:	ca 01       	movw	r24, r20
    5356:	22 8d       	ldd	r18, Z+26	; 0x1a
    5358:	33 8d       	ldd	r19, Z+27	; 0x1b
    535a:	23 2b       	or	r18, r19
    535c:	d9 f0       	breq	.+54     	; 0x5394 <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    535e:	30 89       	ldd	r19, Z+16	; 0x10
    5360:	21 89       	ldd	r18, Z+17	; 0x11
    5362:	32 17       	cp	r19, r18
    5364:	b8 f0       	brcs	.+46     	; 0x5394 <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	42 2f       	mov	r20, r18
    536a:	50 e0       	ldi	r21, 0x00	; 0
    536c:	48 17       	cp	r20, r24
    536e:	59 07       	cpc	r21, r25
    5370:	5c f4       	brge	.+22     	; 0x5388 <TwoWire::onReceiveService(unsigned char*, int)+0x36>
    5372:	db 01       	movw	r26, r22
    5374:	a4 0f       	add	r26, r20
    5376:	b5 1f       	adc	r27, r21
    5378:	3c 91       	ld	r19, X
    537a:	a6 85       	ldd	r26, Z+14	; 0x0e
    537c:	b7 85       	ldd	r27, Z+15	; 0x0f
    537e:	a4 0f       	add	r26, r20
    5380:	b5 1f       	adc	r27, r21
    5382:	3c 93       	st	X, r19
    5384:	2f 5f       	subi	r18, 0xFF	; 255
    5386:	f0 cf       	rjmp	.-32     	; 0x5368 <TwoWire::onReceiveService(unsigned char*, int)+0x16>
    5388:	10 8a       	std	Z+16, r1	; 0x10
    538a:	81 8b       	std	Z+17, r24	; 0x11
    538c:	02 8c       	ldd	r0, Z+26	; 0x1a
    538e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5390:	e0 2d       	mov	r30, r0
    5392:	09 94       	ijmp
    5394:	08 95       	ret

00005396 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
    5396:	ab 01       	movw	r20, r22
operator()():
    5398:	bc 01       	movw	r22, r24
    539a:	8a e1       	ldi	r24, 0x1A	; 26
    539c:	94 e0       	ldi	r25, 0x04	; 4
    539e:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <TwoWire::onReceiveService(unsigned char*, int)>

000053a2 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    53a2:	dc 01       	movw	r26, r24
    53a4:	58 96       	adiw	r26, 0x18	; 24
    53a6:	ed 91       	ld	r30, X+
    53a8:	fc 91       	ld	r31, X
    53aa:	59 97       	sbiw	r26, 0x19	; 25
    53ac:	30 97       	sbiw	r30, 0x00	; 0
    53ae:	31 f0       	breq	.+12     	; 0x53bc <TwoWire::onRequestService()+0x1a>
    53b0:	55 96       	adiw	r26, 0x15	; 21
    53b2:	1c 92       	st	X, r1
    53b4:	55 97       	sbiw	r26, 0x15	; 21
    53b6:	56 96       	adiw	r26, 0x16	; 22
    53b8:	1c 92       	st	X, r1
    53ba:	09 94       	ijmp
    53bc:	08 95       	ret

000053be <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
    53be:	8a e1       	ldi	r24, 0x1A	; 26
    53c0:	94 e0       	ldi	r25, 0x04	; 4
    53c2:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <TwoWire::onRequestService()>

000053c6 <_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    53c6:	8f 92       	push	r8
    53c8:	9f 92       	push	r9
    53ca:	af 92       	push	r10
    53cc:	bf 92       	push	r11
    53ce:	cf 92       	push	r12
    53d0:	df 92       	push	r13
    53d2:	ef 92       	push	r14
    53d4:	ff 92       	push	r15
    53d6:	0f 93       	push	r16
    53d8:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    53da:	8f ed       	ldi	r24, 0xDF	; 223
    53dc:	99 e2       	ldi	r25, 0x29	; 41
    53de:	9f 93       	push	r25
    53e0:	8f 93       	push	r24
    53e2:	89 e4       	ldi	r24, 0x49	; 73
    53e4:	9b e2       	ldi	r25, 0x2B	; 43
    53e6:	9f 93       	push	r25
    53e8:	8f 93       	push	r24
    53ea:	8b ec       	ldi	r24, 0xCB	; 203
    53ec:	99 e2       	ldi	r25, 0x29	; 41
    53ee:	9f 93       	push	r25
    53f0:	8f 93       	push	r24
    53f2:	84 e4       	ldi	r24, 0x44	; 68
    53f4:	9b e2       	ldi	r25, 0x2B	; 43
    53f6:	9f 93       	push	r25
    53f8:	8f 93       	push	r24
    53fa:	80 e6       	ldi	r24, 0x60	; 96
    53fc:	9b e2       	ldi	r25, 0x2B	; 43
    53fe:	9f 93       	push	r25
    5400:	8f 93       	push	r24
    5402:	86 e5       	ldi	r24, 0x56	; 86
    5404:	9b e2       	ldi	r25, 0x2B	; 43
    5406:	9f 93       	push	r25
    5408:	8f 93       	push	r24
    540a:	8e e4       	ldi	r24, 0x4E	; 78
    540c:	9b e2       	ldi	r25, 0x2B	; 43
    540e:	9f 93       	push	r25
    5410:	8f 93       	push	r24
    5412:	8d e1       	ldi	r24, 0x1D	; 29
    5414:	88 2e       	mov	r8, r24
    5416:	8b e2       	ldi	r24, 0x2B	; 43
    5418:	98 2e       	mov	r9, r24
    541a:	96 ec       	ldi	r25, 0xC6	; 198
    541c:	a9 2e       	mov	r10, r25
    541e:	9a e2       	ldi	r25, 0x2A	; 42
    5420:	b9 2e       	mov	r11, r25
    5422:	2e e7       	ldi	r18, 0x7E	; 126
    5424:	c2 2e       	mov	r12, r18
    5426:	2a e2       	ldi	r18, 0x2A	; 42
    5428:	d2 2e       	mov	r13, r18
    542a:	3b e6       	ldi	r19, 0x6B	; 107
    542c:	e3 2e       	mov	r14, r19
    542e:	3a e2       	ldi	r19, 0x2A	; 42
    5430:	f3 2e       	mov	r15, r19
    5432:	07 e6       	ldi	r16, 0x67	; 103
    5434:	1a e2       	ldi	r17, 0x2A	; 42
    5436:	2a e5       	ldi	r18, 0x5A	; 90
    5438:	3a e2       	ldi	r19, 0x2A	; 42
    543a:	4c e3       	ldi	r20, 0x3C	; 60
    543c:	5a e2       	ldi	r21, 0x2A	; 42
    543e:	60 e2       	ldi	r22, 0x20	; 32
    5440:	70 e0       	ldi	r23, 0x00	; 0
    5442:	8a e1       	ldi	r24, 0x1A	; 26
    5444:	94 e0       	ldi	r25, 0x04	; 4
    5446:	0e 94 c9 28 	call	0x5192	; 0x5192 <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    544a:	8d b7       	in	r24, 0x3d	; 61
    544c:	9e b7       	in	r25, 0x3e	; 62
    544e:	0e 96       	adiw	r24, 0x0e	; 14
    5450:	0f b6       	in	r0, 0x3f	; 63
    5452:	f8 94       	cli
    5454:	9e bf       	out	0x3e, r25	; 62
    5456:	0f be       	out	0x3f, r0	; 63
    5458:	8d bf       	out	0x3d, r24	; 61
    545a:	1f 91       	pop	r17
    545c:	0f 91       	pop	r16
    545e:	ff 90       	pop	r15
    5460:	ef 90       	pop	r14
    5462:	df 90       	pop	r13
    5464:	cf 90       	pop	r12
    5466:	bf 90       	pop	r11
    5468:	af 90       	pop	r10
    546a:	9f 90       	pop	r9
    546c:	8f 90       	pop	r8
    546e:	08 95       	ret

00005470 <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    5470:	8a e1       	ldi	r24, 0x1A	; 26
    5472:	94 e0       	ldi	r25, 0x04	; 4
    5474:	0c 94 65 29 	jmp	0x52ca	; 0x52ca <TwoWire::~TwoWire()>

00005478 <twi_init>:
twi_init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    5478:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
    5482:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    5486:	61 e0       	ldi	r22, 0x01	; 1
    5488:	82 e1       	ldi	r24, 0x12	; 18
    548a:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
    548e:	61 e0       	ldi	r22, 0x01	; 1
    5490:	83 e1       	ldi	r24, 0x13	; 19
    5492:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    5496:	e9 eb       	ldi	r30, 0xB9	; 185
    5498:	f0 e0       	ldi	r31, 0x00	; 0
    549a:	80 81       	ld	r24, Z
    549c:	8e 7f       	andi	r24, 0xFE	; 254
    549e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
    54a0:	80 81       	ld	r24, Z
    54a2:	8d 7f       	andi	r24, 0xFD	; 253
    54a4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    54a6:	88 e4       	ldi	r24, 0x48	; 72
    54a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    54ac:	85 e4       	ldi	r24, 0x45	; 69
    54ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:91
}
    54b2:	08 95       	ret

000054b4 <twi_disable>:
twi_disable():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:102
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    54b4:	ec eb       	ldi	r30, 0xBC	; 188
    54b6:	f0 e0       	ldi	r31, 0x00	; 0
    54b8:	80 81       	ld	r24, Z
    54ba:	8a 7b       	andi	r24, 0xBA	; 186
    54bc:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    54be:	60 e0       	ldi	r22, 0x00	; 0
    54c0:	82 e1       	ldi	r24, 0x12	; 18
    54c2:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:106
  digitalWrite(SCL, 0);
    54c6:	60 e0       	ldi	r22, 0x00	; 0
    54c8:	83 e1       	ldi	r24, 0x13	; 19
    54ca:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <digitalWrite>

000054ce <twi_setAddress>:
twi_setAddress():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:118
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    54ce:	88 0f       	add	r24, r24
    54d0:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:119
}
    54d4:	08 95       	ret

000054d6 <twi_setFrequency>:
twi_setFrequency():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    54d6:	9b 01       	movw	r18, r22
    54d8:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    54da:	60 e0       	ldi	r22, 0x00	; 0
    54dc:	74 e2       	ldi	r23, 0x24	; 36
    54de:	84 ef       	ldi	r24, 0xF4	; 244
    54e0:	90 e0       	ldi	r25, 0x00	; 0
    54e2:	0e 94 75 38 	call	0x70ea	; 0x70ea <__udivmodsi4>
    54e6:	20 51       	subi	r18, 0x10	; 16
    54e8:	31 09       	sbc	r19, r1
    54ea:	41 09       	sbc	r20, r1
    54ec:	51 09       	sbc	r21, r1
    54ee:	56 95       	lsr	r21
    54f0:	47 95       	ror	r20
    54f2:	37 95       	ror	r19
    54f4:	27 95       	ror	r18
    54f6:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    54fa:	08 95       	ret

000054fc <twi_readFrom>:
twi_readFrom():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:152
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    54fc:	41 32       	cpi	r20, 0x21	; 33
    54fe:	08 f0       	brcs	.+2      	; 0x5502 <twi_readFrom+0x6>
    5500:	43 c0       	rjmp	.+134    	; 0x5588 <twi_readFrom+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5502:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_state>
    5506:	91 11       	cpse	r25, r1
    5508:	fc cf       	rjmp	.-8      	; 0x5502 <twi_readFrom+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    550a:	91 e0       	ldi	r25, 0x01	; 1
    550c:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    5510:	20 93 b5 04 	sts	0x04B5, r18	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5514:	2f ef       	ldi	r18, 0xFF	; 255
    5516:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    551a:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    551e:	24 0f       	add	r18, r20
    5520:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5524:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    5528:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    552c:	88 0f       	add	r24, r24
    552e:	89 2b       	or	r24, r25
    5530:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    5534:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    5538:	81 30       	cpi	r24, 0x01	; 1
    553a:	09 f5       	brne	.+66     	; 0x557e <twi_readFrom+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    553c:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187 (discriminator 1)
    do {
      TWDR = twi_slarw;
    5540:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    5544:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    5548:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    554c:	83 fd       	sbrc	r24, 3
    554e:	f8 cf       	rjmp	.-16     	; 0x5540 <twi_readFrom+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    5550:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5552:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5556:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    555a:	81 30       	cpi	r24, 0x01	; 1
    555c:	e1 f3       	breq	.-8      	; 0x5556 <twi_readFrom+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    555e:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5562:	84 17       	cp	r24, r20
    5564:	10 f4       	brcc	.+4      	; 0x556a <twi_readFrom+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    5566:	40 91 8f 04 	lds	r20, 0x048F	; 0x80048f <twi_masterBufferIndex>
    556a:	a0 e9       	ldi	r26, 0x90	; 144
    556c:	b4 e0       	ldi	r27, 0x04	; 4
    556e:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    5570:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204 (discriminator 1)
    5572:	8e 2f       	mov	r24, r30
    5574:	89 1b       	sub	r24, r25
    5576:	84 17       	cp	r24, r20
    5578:	20 f0       	brcs	.+8      	; 0x5582 <twi_readFrom+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    557a:	84 2f       	mov	r24, r20
    557c:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    557e:	85 ee       	ldi	r24, 0xE5	; 229
    5580:	e8 cf       	rjmp	.-48     	; 0x5552 <twi_readFrom+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5582:	8d 91       	ld	r24, X+
    5584:	81 93       	st	Z+, r24
    5586:	f5 cf       	rjmp	.-22     	; 0x5572 <twi_readFrom+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 0;
    5588:	40 e0       	ldi	r20, 0x00	; 0
    558a:	f7 cf       	rjmp	.-18     	; 0x557a <twi_readFrom+0x7e>

0000558c <twi_writeTo>:
twi_writeTo():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    558c:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    558e:	41 32       	cpi	r20, 0x21	; 33
    5590:	08 f0       	brcs	.+2      	; 0x5594 <twi_writeTo+0x8>
    5592:	4b c0       	rjmp	.+150    	; 0x562a <twi_writeTo+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    5594:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_state>
    5598:	91 11       	cpse	r25, r1
    559a:	fc cf       	rjmp	.-8      	; 0x5594 <twi_writeTo+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    559c:	92 e0       	ldi	r25, 0x02	; 2
    559e:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
    55a2:	00 93 b5 04 	sts	0x04B5, r16	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    55a6:	9f ef       	ldi	r25, 0xFF	; 255
    55a8:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    55ac:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
    55b0:	40 93 8e 04 	sts	0x048E, r20	; 0x80048e <twi_masterBufferLength>
    55b4:	36 2f       	mov	r19, r22
    55b6:	a0 e9       	ldi	r26, 0x90	; 144
    55b8:	b4 e0       	ldi	r27, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    55ba:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249 (discriminator 1)
    55bc:	9e 2f       	mov	r25, r30
    55be:	93 1b       	sub	r25, r19
    55c0:	94 17       	cp	r25, r20
    55c2:	70 f1       	brcs	.+92     	; 0x5620 <twi_writeTo+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    55c4:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
    55c8:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    55cc:	88 0f       	add	r24, r24
    55ce:	89 2b       	or	r24, r25
    55d0:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    55d4:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    55d8:	81 30       	cpi	r24, 0x01	; 1
    55da:	29 f5       	brne	.+74     	; 0x5626 <twi_writeTo+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    55dc:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269 (discriminator 1)
    do {
      TWDR = twi_slarw;
    55e0:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    55e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    55e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    55ec:	83 fd       	sbrc	r24, 3
    55ee:	f8 cf       	rjmp	.-16     	; 0x55e0 <twi_writeTo+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    55f0:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    55f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    55f6:	22 23       	and	r18, r18
    55f8:	21 f0       	breq	.+8      	; 0x5602 <twi_writeTo+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278 (discriminator 1)
    55fa:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    55fe:	82 30       	cpi	r24, 0x02	; 2
    5600:	d1 f3       	breq	.-12     	; 0x55f6 <twi_writeTo+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    5602:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5606:	8f 3f       	cpi	r24, 0xFF	; 255
    5608:	91 f0       	breq	.+36     	; 0x562e <twi_writeTo+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    560a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    560e:	80 32       	cpi	r24, 0x20	; 32
    5610:	81 f0       	breq	.+32     	; 0x5632 <twi_writeTo+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5612:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5616:	80 33       	cpi	r24, 0x30	; 48
    5618:	71 f0       	breq	.+28     	; 0x5636 <twi_writeTo+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    561a:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:290
}
    561c:	0f 91       	pop	r16
    561e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    5620:	91 91       	ld	r25, Z+
    5622:	9d 93       	st	X+, r25
    5624:	cb cf       	rjmp	.-106    	; 0x55bc <twi_writeTo+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    5626:	85 ee       	ldi	r24, 0xE5	; 229
    5628:	e4 cf       	rjmp	.-56     	; 0x55f2 <twi_writeTo+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    562a:	81 e0       	ldi	r24, 0x01	; 1
    562c:	f7 cf       	rjmp	.-18     	; 0x561c <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	f5 cf       	rjmp	.-22     	; 0x561c <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    5632:	82 e0       	ldi	r24, 0x02	; 2
    5634:	f3 cf       	rjmp	.-26     	; 0x561c <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    5636:	83 e0       	ldi	r24, 0x03	; 3
    5638:	f1 cf       	rjmp	.-30     	; 0x561c <twi_writeTo+0x90>

0000563a <twi_transmit>:
twi_transmit():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    563a:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <twi_txBufferLength>
    563e:	26 0f       	add	r18, r22
    5640:	33 27       	eor	r19, r19
    5642:	33 1f       	adc	r19, r19
    5644:	21 32       	cpi	r18, 0x21	; 33
    5646:	31 05       	cpc	r19, r1
    5648:	ec f4       	brge	.+58     	; 0x5684 <twi_transmit+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    564a:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <twi_state>
    564e:	fc 01       	movw	r30, r24
    5650:	90 e0       	ldi	r25, 0x00	; 0
    5652:	80 e0       	ldi	r24, 0x00	; 0
    5654:	24 30       	cpi	r18, 0x04	; 4
    5656:	69 f0       	breq	.+26     	; 0x5672 <twi_transmit+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
    5658:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    565a:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    565c:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <twi_txBufferLength>
    5660:	21 91       	ld	r18, Z+
    5662:	ac 01       	movw	r20, r24
    5664:	42 59       	subi	r20, 0x92	; 146
    5666:	5b 4f       	sbci	r21, 0xFB	; 251
    5668:	a4 0f       	add	r26, r20
    566a:	b5 2f       	mov	r27, r21
    566c:	b1 1d       	adc	r27, r1
    566e:	2c 93       	st	X, r18
    5670:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    5672:	86 17       	cp	r24, r22
    5674:	98 f3       	brcs	.-26     	; 0x565c <twi_transmit+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    5676:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    567a:	68 0f       	add	r22, r24
    567c:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:322

  return 0;
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	08 95       	ret

00005688 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    5688:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <twi_onSlaveReceive+0x1>
    568c:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:334
}
    5690:	08 95       	ret

00005692 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    5692:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <twi_onSlaveTransmit+0x1>
    5696:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:345
}
    569a:	08 95       	ret

0000569c <twi_reply>:
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:356
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    569c:	88 23       	and	r24, r24
    569e:	21 f0       	breq	.+8      	; 0x56a8 <twi_reply+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    56a0:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    56a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:361
  }
}
    56a6:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    56a8:	85 e8       	ldi	r24, 0x85	; 133
    56aa:	fb cf       	rjmp	.-10     	; 0x56a2 <twi_reply+0x6>

000056ac <twi_stop>:
twi_stop():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    56ac:	85 ed       	ldi	r24, 0xD5	; 213
    56ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    56b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    56b6:	84 fd       	sbrc	r24, 4
    56b8:	fc cf       	rjmp	.-8      	; 0x56b2 <twi_stop+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    56ba:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    56be:	08 95       	ret

000056c0 <twi_releaseBus>:
twi_releaseBus():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    56c0:	85 ec       	ldi	r24, 0xC5	; 197
    56c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    56c6:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    56ca:	08 95       	ret

000056cc <__vector_24>:
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    56cc:	1f 92       	push	r1
    56ce:	0f 92       	push	r0
    56d0:	0f b6       	in	r0, 0x3f	; 63
    56d2:	0f 92       	push	r0
    56d4:	11 24       	eor	r1, r1
    56d6:	2f 93       	push	r18
    56d8:	3f 93       	push	r19
    56da:	4f 93       	push	r20
    56dc:	5f 93       	push	r21
    56de:	6f 93       	push	r22
    56e0:	7f 93       	push	r23
    56e2:	8f 93       	push	r24
    56e4:	9f 93       	push	r25
    56e6:	af 93       	push	r26
    56e8:	bf 93       	push	r27
    56ea:	ef 93       	push	r30
    56ec:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    56ee:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    56f2:	88 7f       	andi	r24, 0xF8	; 248
    56f4:	80 36       	cpi	r24, 0x60	; 96
    56f6:	09 f4       	brne	.+2      	; 0x56fa <__vector_24+0x2e>
    56f8:	4c c0       	rjmp	.+152    	; 0x5792 <__vector_24+0xc6>
    56fa:	08 f0       	brcs	.+2      	; 0x56fe <__vector_24+0x32>
    56fc:	3f c0       	rjmp	.+126    	; 0x577c <__vector_24+0xb0>
    56fe:	88 32       	cpi	r24, 0x28	; 40
    5700:	09 f4       	brne	.+2      	; 0x5704 <__vector_24+0x38>
    5702:	a8 c0       	rjmp	.+336    	; 0x5854 <__vector_24+0x188>
    5704:	18 f5       	brcc	.+70     	; 0x574c <__vector_24+0x80>
    5706:	80 31       	cpi	r24, 0x10	; 16
    5708:	09 f4       	brne	.+2      	; 0x570c <__vector_24+0x40>
    570a:	9c c0       	rjmp	.+312    	; 0x5844 <__vector_24+0x178>
    570c:	b8 f4       	brcc	.+46     	; 0x573c <__vector_24+0x70>
    570e:	88 23       	and	r24, r24
    5710:	09 f4       	brne	.+2      	; 0x5714 <__vector_24+0x48>
    5712:	f9 c0       	rjmp	.+498    	; 0x5906 <__vector_24+0x23a>
    5714:	88 30       	cpi	r24, 0x08	; 8
    5716:	09 f4       	brne	.+2      	; 0x571a <__vector_24+0x4e>
    5718:	95 c0       	rjmp	.+298    	; 0x5844 <__vector_24+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    571a:	ff 91       	pop	r31
    571c:	ef 91       	pop	r30
    571e:	bf 91       	pop	r27
    5720:	af 91       	pop	r26
    5722:	9f 91       	pop	r25
    5724:	8f 91       	pop	r24
    5726:	7f 91       	pop	r23
    5728:	6f 91       	pop	r22
    572a:	5f 91       	pop	r21
    572c:	4f 91       	pop	r20
    572e:	3f 91       	pop	r19
    5730:	2f 91       	pop	r18
    5732:	0f 90       	pop	r0
    5734:	0f be       	out	0x3f, r0	; 63
    5736:	0f 90       	pop	r0
    5738:	1f 90       	pop	r1
    573a:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    573c:	88 31       	cpi	r24, 0x18	; 24
    573e:	09 f4       	brne	.+2      	; 0x5742 <__vector_24+0x76>
    5740:	89 c0       	rjmp	.+274    	; 0x5854 <__vector_24+0x188>
    5742:	80 32       	cpi	r24, 0x20	; 32
    5744:	51 f7       	brne	.-44     	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5746:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_error>
    574a:	15 c0       	rjmp	.+42     	; 0x5776 <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    574c:	80 34       	cpi	r24, 0x40	; 64
    574e:	09 f4       	brne	.+2      	; 0x5752 <__vector_24+0x86>
    5750:	9e c0       	rjmp	.+316    	; 0x588e <__vector_24+0x1c2>
    5752:	48 f4       	brcc	.+18     	; 0x5766 <__vector_24+0x9a>
    5754:	80 33       	cpi	r24, 0x30	; 48
    5756:	b9 f3       	breq	.-18     	; 0x5746 <__vector_24+0x7a>
    5758:	88 33       	cpi	r24, 0x38	; 56
    575a:	f9 f6       	brne	.-66     	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    575c:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    5760:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    5764:	da cf       	rjmp	.-76     	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5766:	80 35       	cpi	r24, 0x50	; 80
    5768:	09 f4       	brne	.+2      	; 0x576c <__vector_24+0xa0>
    576a:	85 c0       	rjmp	.+266    	; 0x5876 <__vector_24+0x1aa>
    576c:	88 35       	cpi	r24, 0x58	; 88
    576e:	09 f4       	brne	.+2      	; 0x5772 <__vector_24+0xa6>
    5770:	96 c0       	rjmp	.+300    	; 0x589e <__vector_24+0x1d2>
    5772:	88 34       	cpi	r24, 0x48	; 72
    5774:	91 f6       	brne	.-92     	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    5776:	0e 94 56 2b 	call	0x56ac	; 0x56ac <twi_stop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    577a:	cf cf       	rjmp	.-98     	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    577c:	88 39       	cpi	r24, 0x98	; 152
    577e:	09 f4       	brne	.+2      	; 0x5782 <__vector_24+0xb6>
    5780:	8c c0       	rjmp	.+280    	; 0x589a <__vector_24+0x1ce>
    5782:	38 f5       	brcc	.+78     	; 0x57d2 <__vector_24+0x106>
    5784:	88 37       	cpi	r24, 0x78	; 120
    5786:	29 f0       	breq	.+10     	; 0x5792 <__vector_24+0xc6>
    5788:	50 f4       	brcc	.+20     	; 0x579e <__vector_24+0xd2>
    578a:	88 36       	cpi	r24, 0x68	; 104
    578c:	11 f0       	breq	.+4      	; 0x5792 <__vector_24+0xc6>
    578e:	80 37       	cpi	r24, 0x70	; 112
    5790:	21 f6       	brne	.-120    	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5792:	83 e0       	ldi	r24, 0x03	; 3
    5794:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5798:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_rxBufferIndex>
    579c:	57 c0       	rjmp	.+174    	; 0x584c <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    579e:	88 38       	cpi	r24, 0x88	; 136
    57a0:	09 f4       	brne	.+2      	; 0x57a4 <__vector_24+0xd8>
    57a2:	7b c0       	rjmp	.+246    	; 0x589a <__vector_24+0x1ce>
    57a4:	80 39       	cpi	r24, 0x90	; 144
    57a6:	19 f0       	breq	.+6      	; 0x57ae <__vector_24+0xe2>
    57a8:	80 38       	cpi	r24, 0x80	; 128
    57aa:	09 f0       	breq	.+2      	; 0x57ae <__vector_24+0xe2>
    57ac:	b6 cf       	rjmp	.-148    	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    57ae:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_rxBufferIndex>
    57b2:	80 32       	cpi	r24, 0x20	; 32
    57b4:	08 f0       	brcs	.+2      	; 0x57b8 <__vector_24+0xec>
    57b6:	71 c0       	rjmp	.+226    	; 0x589a <__vector_24+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    57b8:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_rxBufferIndex>
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	8e 0f       	add	r24, r30
    57c0:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_rxBufferIndex>
    57c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    57c8:	f0 e0       	ldi	r31, 0x00	; 0
    57ca:	e4 5b       	subi	r30, 0xB4	; 180
    57cc:	fb 4f       	sbci	r31, 0xFB	; 251
    57ce:	80 83       	st	Z, r24
    57d0:	3d c0       	rjmp	.+122    	; 0x584c <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    57d2:	80 3b       	cpi	r24, 0xB0	; 176
    57d4:	39 f0       	breq	.+14     	; 0x57e4 <__vector_24+0x118>
    57d6:	e0 f4       	brcc	.+56     	; 0x5810 <__vector_24+0x144>
    57d8:	80 3a       	cpi	r24, 0xA0	; 160
    57da:	09 f4       	brne	.+2      	; 0x57de <__vector_24+0x112>
    57dc:	79 c0       	rjmp	.+242    	; 0x58d0 <__vector_24+0x204>
    57de:	88 3a       	cpi	r24, 0xA8	; 168
    57e0:	09 f0       	breq	.+2      	; 0x57e4 <__vector_24+0x118>
    57e2:	9b cf       	rjmp	.-202    	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    57e4:	84 e0       	ldi	r24, 0x04	; 4
    57e6:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    57ea:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    57ee:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    57f2:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <twi_onSlaveTransmit>
    57f6:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <twi_onSlaveTransmit+0x1>
    57fa:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    57fc:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5800:	81 11       	cpse	r24, r1
    5802:	0f c0       	rjmp	.+30     	; 0x5822 <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    5804:	81 e0       	ldi	r24, 0x01	; 1
    5806:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    580a:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_txBuffer>
    580e:	09 c0       	rjmp	.+18     	; 0x5822 <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5810:	80 3c       	cpi	r24, 0xC0	; 192
    5812:	09 f4       	brne	.+2      	; 0x5816 <__vector_24+0x14a>
    5814:	76 c0       	rjmp	.+236    	; 0x5902 <__vector_24+0x236>
    5816:	88 3c       	cpi	r24, 0xC8	; 200
    5818:	09 f4       	brne	.+2      	; 0x581c <__vector_24+0x150>
    581a:	73 c0       	rjmp	.+230    	; 0x5902 <__vector_24+0x236>
    581c:	88 3b       	cpi	r24, 0xB8	; 184
    581e:	09 f0       	breq	.+2      	; 0x5822 <__vector_24+0x156>
    5820:	7c cf       	rjmp	.-264    	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5822:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <twi_txBufferIndex>
    5826:	81 e0       	ldi	r24, 0x01	; 1
    5828:	8e 0f       	add	r24, r30
    582a:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_txBufferIndex>
    582e:	f0 e0       	ldi	r31, 0x00	; 0
    5830:	e2 59       	subi	r30, 0x92	; 146
    5832:	fb 4f       	sbci	r31, 0xFB	; 251
    5834:	80 81       	ld	r24, Z
    5836:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    583a:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_txBufferIndex>
    583e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5842:	29 c0       	rjmp	.+82     	; 0x5896 <__vector_24+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5844:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5848:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    584c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    584e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5852:	63 cf       	rjmp	.-314    	; 0x571a <__vector_24+0x4e>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5854:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5858:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_masterBufferLength>
    585c:	98 17       	cp	r25, r24
    585e:	58 f5       	brcc	.+86     	; 0x58b6 <__vector_24+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5860:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5864:	81 e0       	ldi	r24, 0x01	; 1
    5866:	8e 0f       	add	r24, r30
    5868:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    586c:	f0 e0       	ldi	r31, 0x00	; 0
    586e:	e0 57       	subi	r30, 0x70	; 112
    5870:	fb 4f       	sbci	r31, 0xFB	; 251
    5872:	80 81       	ld	r24, Z
    5874:	e9 cf       	rjmp	.-46     	; 0x5848 <__vector_24+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5876:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    587a:	81 e0       	ldi	r24, 0x01	; 1
    587c:	8e 0f       	add	r24, r30
    587e:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5882:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5886:	f0 e0       	ldi	r31, 0x00	; 0
    5888:	e0 57       	subi	r30, 0x70	; 112
    588a:	fb 4f       	sbci	r31, 0xFB	; 251
    588c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    588e:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5892:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5896:	98 17       	cp	r25, r24
    5898:	c8 f2       	brcs	.-78     	; 0x584c <__vector_24+0x180>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    589a:	85 e8       	ldi	r24, 0x85	; 133
    589c:	d8 cf       	rjmp	.-80     	; 0x584e <__vector_24+0x182>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    589e:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    58a2:	81 e0       	ldi	r24, 0x01	; 1
    58a4:	8e 0f       	add	r24, r30
    58a6:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    58aa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    58ae:	f0 e0       	ldi	r31, 0x00	; 0
    58b0:	e0 57       	subi	r30, 0x70	; 112
    58b2:	fb 4f       	sbci	r31, 0xFB	; 251
    58b4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    58b6:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_sendStop>
    58ba:	81 11       	cpse	r24, r1
    58bc:	5c cf       	rjmp	.-328    	; 0x5776 <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    58be:	81 e0       	ldi	r24, 0x01	; 1
    58c0:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    58c4:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    58c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    58ca:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    58ce:	25 cf       	rjmp	.-438    	; 0x571a <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    58d0:	0e 94 60 2b 	call	0x56c0	; 0x56c0 <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    58d4:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_rxBufferIndex>
    58d8:	80 32       	cpi	r24, 0x20	; 32
    58da:	30 f4       	brcc	.+12     	; 0x58e8 <__vector_24+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    58dc:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_rxBufferIndex>
    58e0:	f0 e0       	ldi	r31, 0x00	; 0
    58e2:	e4 5b       	subi	r30, 0xB4	; 180
    58e4:	fb 4f       	sbci	r31, 0xFB	; 251
    58e6:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    58e8:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <twi_rxBufferIndex>
    58ec:	70 e0       	ldi	r23, 0x00	; 0
    58ee:	e0 91 b0 04 	lds	r30, 0x04B0	; 0x8004b0 <twi_onSlaveReceive>
    58f2:	f0 91 b1 04 	lds	r31, 0x04B1	; 0x8004b1 <twi_onSlaveReceive+0x1>
    58f6:	8c e4       	ldi	r24, 0x4C	; 76
    58f8:	94 e0       	ldi	r25, 0x04	; 4
    58fa:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    58fc:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    5900:	0c cf       	rjmp	.-488    	; 0x571a <__vector_24+0x4e>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5902:	85 ec       	ldi	r24, 0xC5	; 197
    5904:	e0 cf       	rjmp	.-64     	; 0x58c6 <__vector_24+0x1fa>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5906:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <twi_error>
    590a:	35 cf       	rjmp	.-406    	; 0x5776 <__vector_24+0xaa>

0000590c <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    590c:	88 eb       	ldi	r24, 0xB8	; 184
    590e:	94 e0       	ldi	r25, 0x04	; 4
    5910:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <TwoWire::onRequestService()>

00005914 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:19
                        twi_transmit1,
                        twi_reply1,
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
    5914:	ab 01       	movw	r20, r22
operator()():
    5916:	bc 01       	movw	r22, r24
    5918:	88 eb       	ldi	r24, 0xB8	; 184
    591a:	94 e0       	ldi	r25, 0x04	; 4
    591c:	0c 94 a9 29 	jmp	0x5352	; 0x5352 <TwoWire::onReceiveService(unsigned char*, int)>

00005920 <_GLOBAL__sub_I_Wire1>:
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5920:	8f 92       	push	r8
    5922:	9f 92       	push	r9
    5924:	af 92       	push	r10
    5926:	bf 92       	push	r11
    5928:	cf 92       	push	r12
    592a:	df 92       	push	r13
    592c:	ef 92       	push	r14
    592e:	ff 92       	push	r15
    5930:	0f 93       	push	r16
    5932:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    5934:	86 e8       	ldi	r24, 0x86	; 134
    5936:	9c e2       	ldi	r25, 0x2C	; 44
    5938:	9f 93       	push	r25
    593a:	8f 93       	push	r24
    593c:	86 ef       	ldi	r24, 0xF6	; 246
    593e:	9d e2       	ldi	r25, 0x2D	; 45
    5940:	9f 93       	push	r25
    5942:	8f 93       	push	r24
    5944:	8a e8       	ldi	r24, 0x8A	; 138
    5946:	9c e2       	ldi	r25, 0x2C	; 44
    5948:	9f 93       	push	r25
    594a:	8f 93       	push	r24
    594c:	81 ef       	ldi	r24, 0xF1	; 241
    594e:	9d e2       	ldi	r25, 0x2D	; 45
    5950:	9f 93       	push	r25
    5952:	8f 93       	push	r24
    5954:	8d e0       	ldi	r24, 0x0D	; 13
    5956:	9e e2       	ldi	r25, 0x2E	; 46
    5958:	9f 93       	push	r25
    595a:	8f 93       	push	r24
    595c:	83 e0       	ldi	r24, 0x03	; 3
    595e:	9e e2       	ldi	r25, 0x2E	; 46
    5960:	9f 93       	push	r25
    5962:	8f 93       	push	r24
    5964:	8b ef       	ldi	r24, 0xFB	; 251
    5966:	9d e2       	ldi	r25, 0x2D	; 45
    5968:	9f 93       	push	r25
    596a:	8f 93       	push	r24
    596c:	8a ec       	ldi	r24, 0xCA	; 202
    596e:	88 2e       	mov	r8, r24
    5970:	8d e2       	ldi	r24, 0x2D	; 45
    5972:	98 2e       	mov	r9, r24
    5974:	93 e7       	ldi	r25, 0x73	; 115
    5976:	a9 2e       	mov	r10, r25
    5978:	9d e2       	ldi	r25, 0x2D	; 45
    597a:	b9 2e       	mov	r11, r25
    597c:	2b e2       	ldi	r18, 0x2B	; 43
    597e:	c2 2e       	mov	r12, r18
    5980:	2d e2       	ldi	r18, 0x2D	; 45
    5982:	d2 2e       	mov	r13, r18
    5984:	38 e1       	ldi	r19, 0x18	; 24
    5986:	e3 2e       	mov	r14, r19
    5988:	3d e2       	ldi	r19, 0x2D	; 45
    598a:	f3 2e       	mov	r15, r19
    598c:	04 e1       	ldi	r16, 0x14	; 20
    598e:	1d e2       	ldi	r17, 0x2D	; 45
    5990:	27 e0       	ldi	r18, 0x07	; 7
    5992:	3d e2       	ldi	r19, 0x2D	; 45
    5994:	49 ee       	ldi	r20, 0xE9	; 233
    5996:	5c e2       	ldi	r21, 0x2C	; 44
    5998:	60 e2       	ldi	r22, 0x20	; 32
    599a:	70 e0       	ldi	r23, 0x00	; 0
    599c:	88 eb       	ldi	r24, 0xB8	; 184
    599e:	94 e0       	ldi	r25, 0x04	; 4
    59a0:	0e 94 c9 28 	call	0x5192	; 0x5192 <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    59a4:	8d b7       	in	r24, 0x3d	; 61
    59a6:	9e b7       	in	r25, 0x3e	; 62
    59a8:	0e 96       	adiw	r24, 0x0e	; 14
    59aa:	0f b6       	in	r0, 0x3f	; 63
    59ac:	f8 94       	cli
    59ae:	9e bf       	out	0x3e, r25	; 62
    59b0:	0f be       	out	0x3f, r0	; 63
    59b2:	8d bf       	out	0x3d, r24	; 61
    59b4:	1f 91       	pop	r17
    59b6:	0f 91       	pop	r16
    59b8:	ff 90       	pop	r15
    59ba:	ef 90       	pop	r14
    59bc:	df 90       	pop	r13
    59be:	cf 90       	pop	r12
    59c0:	bf 90       	pop	r11
    59c2:	af 90       	pop	r10
    59c4:	9f 90       	pop	r9
    59c6:	8f 90       	pop	r8
    59c8:	08 95       	ret

000059ca <_GLOBAL__sub_D_Wire1>:
_GLOBAL__sub_D_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    59ca:	88 eb       	ldi	r24, 0xB8	; 184
    59cc:	94 e0       	ldi	r25, 0x04	; 4
    59ce:	0c 94 65 29 	jmp	0x52ca	; 0x52ca <TwoWire::~TwoWire()>

000059d2 <twi_init1>:
twi_init1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:71
 * Output   none
 */
void twi_init1(void)
{
  // initialize state
  twi_state = TWI_READY;
    59d2:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:72
  twi_sendStop = true;  // default value
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:73
  twi_inRepStart = false;
    59dc:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA1, 1);
    59e0:	61 e0       	ldi	r22, 0x01	; 1
    59e2:	87 e1       	ldi	r24, 0x17	; 23
    59e4:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:77
  digitalWrite(SCL1, 1);
    59e8:	61 e0       	ldi	r22, 0x01	; 1
    59ea:	88 e1       	ldi	r24, 0x18	; 24
    59ec:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR1, TWPS0);
    59f0:	e9 ed       	ldi	r30, 0xD9	; 217
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	80 81       	ld	r24, Z
    59f6:	8e 7f       	andi	r24, 0xFE	; 254
    59f8:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:81
  cbi(TWSR1, TWPS1);
    59fa:	80 81       	ld	r24, Z
    59fc:	8d 7f       	andi	r24, 0xFD	; 253
    59fe:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:82
  TWBR1 = ((F_CPU / TWI_FREQ) - 16) / 2;
    5a00:	88 e4       	ldi	r24, 0x48	; 72
    5a02:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5a06:	85 e4       	ldi	r24, 0x45	; 69
    5a08:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:91
}
    5a0c:	08 95       	ret

00005a0e <twi_disable1>:
twi_disable1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:102
 * Output   none
 */
void twi_disable1(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR1 &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    5a0e:	ec ed       	ldi	r30, 0xDC	; 220
    5a10:	f0 e0       	ldi	r31, 0x00	; 0
    5a12:	80 81       	ld	r24, Z
    5a14:	8a 7b       	andi	r24, 0xBA	; 186
    5a16:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA1, 0);
    5a18:	60 e0       	ldi	r22, 0x00	; 0
    5a1a:	87 e1       	ldi	r24, 0x17	; 23
    5a1c:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:106
  digitalWrite(SCL1, 0);
    5a20:	60 e0       	ldi	r22, 0x00	; 0
    5a22:	88 e1       	ldi	r24, 0x18	; 24
    5a24:	0c 94 f9 34 	jmp	0x69f2	; 0x69f2 <digitalWrite>

00005a28 <twi_setAddress1>:
twi_setAddress1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:118
 * Output   none
 */
void twi_setAddress1(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR1 = address << 1;
    5a28:	88 0f       	add	r24, r24
    5a2a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:119
}
    5a2e:	08 95       	ret

00005a30 <twi_setFrequency1>:
twi_setFrequency1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency1(uint32_t frequency)
{
    5a30:	9b 01       	movw	r18, r22
    5a32:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    5a34:	60 e0       	ldi	r22, 0x00	; 0
    5a36:	74 e2       	ldi	r23, 0x24	; 36
    5a38:	84 ef       	ldi	r24, 0xF4	; 244
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	0e 94 75 38 	call	0x70ea	; 0x70ea <__udivmodsi4>
    5a40:	20 51       	subi	r18, 0x10	; 16
    5a42:	31 09       	sbc	r19, r1
    5a44:	41 09       	sbc	r20, r1
    5a46:	51 09       	sbc	r21, r1
    5a48:	56 95       	lsr	r21
    5a4a:	47 95       	ror	r20
    5a4c:	37 95       	ror	r19
    5a4e:	27 95       	ror	r18
    5a50:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
  note: TWBR1 should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    5a54:	08 95       	ret

00005a56 <twi_readFrom1>:
twi_readFrom1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:152
uint8_t twi_readFrom1(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    5a56:	41 32       	cpi	r20, 0x21	; 33
    5a58:	08 f0       	brcs	.+2      	; 0x5a5c <twi_readFrom1+0x6>
    5a5a:	43 c0       	rjmp	.+134    	; 0x5ae2 <twi_readFrom1+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5a5c:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <twi_state>
    5a60:	91 11       	cpse	r25, r1
    5a62:	fc cf       	rjmp	.-8      	; 0x5a5c <twi_readFrom1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:160
    continue;
  }
  twi_state = TWI_MRX;
    5a64:	91 e0       	ldi	r25, 0x01	; 1
    5a66:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:161
  twi_sendStop = sendStop;
    5a6a:	20 93 53 05 	sts	0x0553, r18	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5a6e:	2f ef       	ldi	r18, 0xFF	; 255
    5a70:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5a74:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5a78:	24 0f       	add	r18, r20
    5a7a:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5a7e:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:176
  twi_slarw |= address << 1;
    5a82:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <twi_slarw>
    5a86:	88 0f       	add	r24, r24
    5a88:	89 2b       	or	r24, r25
    5a8a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:178

  if (true == twi_inRepStart) {
    5a8e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    5a92:	81 30       	cpi	r24, 0x01	; 1
    5a94:	09 f5       	brne	.+66     	; 0x5ad8 <twi_readFrom1+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5a96:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:187 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    5a9a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    5a9e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:188 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    5aa2:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5aa6:	83 fd       	sbrc	r24, 3
    5aa8:	f8 cf       	rjmp	.-16     	; 0x5a9a <twi_readFrom1+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:189
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    5aaa:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5aac:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5ab0:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    5ab4:	81 30       	cpi	r24, 0x01	; 1
    5ab6:	e1 f3       	breq	.-8      	; 0x5ab0 <twi_readFrom1+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    5ab8:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5abc:	84 17       	cp	r24, r20
    5abe:	10 f4       	brcc	.+4      	; 0x5ac4 <twi_readFrom1+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:201
    length = twi_masterBufferIndex;
    5ac0:	40 91 2d 05 	lds	r20, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5ac4:	ae e2       	ldi	r26, 0x2E	; 46
    5ac6:	b5 e0       	ldi	r27, 0x05	; 5
    5ac8:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    5aca:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204 (discriminator 1)
    5acc:	8e 2f       	mov	r24, r30
    5ace:	89 1b       	sub	r24, r25
    5ad0:	84 17       	cp	r24, r20
    5ad2:	20 f0       	brcs	.+8      	; 0x5adc <twi_readFrom1+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    5ad4:	84 2f       	mov	r24, r20
    5ad6:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5ad8:	85 ee       	ldi	r24, 0xE5	; 229
    5ada:	e8 cf       	rjmp	.-48     	; 0x5aac <twi_readFrom1+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5adc:	8d 91       	ld	r24, X+
    5ade:	81 93       	st	Z+, r24
    5ae0:	f5 cf       	rjmp	.-22     	; 0x5acc <twi_readFrom1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 0;
    5ae2:	40 e0       	ldi	r20, 0x00	; 0
    5ae4:	f7 cf       	rjmp	.-18     	; 0x5ad4 <twi_readFrom1+0x7e>

00005ae6 <twi_writeTo1>:
twi_writeTo1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo1(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    5ae6:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    5ae8:	41 32       	cpi	r20, 0x21	; 33
    5aea:	08 f0       	brcs	.+2      	; 0x5aee <twi_writeTo1+0x8>
    5aec:	4b c0       	rjmp	.+150    	; 0x5b84 <twi_writeTo1+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    5aee:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <twi_state>
    5af2:	91 11       	cpse	r25, r1
    5af4:	fc cf       	rjmp	.-8      	; 0x5aee <twi_writeTo1+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:239
    continue;
  }
  twi_state = TWI_MTX;
    5af6:	92 e0       	ldi	r25, 0x02	; 2
    5af8:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:240
  twi_sendStop = sendStop;
    5afc:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5b00:	9f ef       	ldi	r25, 0xFF	; 255
    5b02:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5b06:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:246
  twi_masterBufferLength = length;
    5b0a:	40 93 2c 05 	sts	0x052C, r20	; 0x80052c <twi_masterBufferLength>
    5b0e:	36 2f       	mov	r19, r22
    5b10:	ae e2       	ldi	r26, 0x2E	; 46
    5b12:	b5 e0       	ldi	r27, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    5b14:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249 (discriminator 1)
    5b16:	9e 2f       	mov	r25, r30
    5b18:	93 1b       	sub	r25, r19
    5b1a:	94 17       	cp	r25, r20
    5b1c:	70 f1       	brcs	.+92     	; 0x5b7a <twi_writeTo1+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    5b1e:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:255
  twi_slarw |= address << 1;
    5b22:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <twi_slarw>
    5b26:	88 0f       	add	r24, r24
    5b28:	89 2b       	or	r24, r25
    5b2a:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5b2e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    5b32:	81 30       	cpi	r24, 0x01	; 1
    5b34:	29 f5       	brne	.+74     	; 0x5b80 <twi_writeTo1+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5b36:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:269 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    5b3a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    5b3e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:270 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    5b42:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5b46:	83 fd       	sbrc	r24, 3
    5b48:	f8 cf       	rjmp	.-16     	; 0x5b3a <twi_writeTo1+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:271
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    5b4a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    5b4c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    5b50:	22 23       	and	r18, r18
    5b52:	21 f0       	breq	.+8      	; 0x5b5c <twi_writeTo1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278 (discriminator 1)
    5b54:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    5b58:	82 30       	cpi	r24, 0x02	; 2
    5b5a:	d1 f3       	breq	.-12     	; 0x5b50 <twi_writeTo1+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    5b5c:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    5b60:	8f 3f       	cpi	r24, 0xFF	; 255
    5b62:	91 f0       	breq	.+36     	; 0x5b88 <twi_writeTo1+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    5b64:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    5b68:	80 32       	cpi	r24, 0x20	; 32
    5b6a:	81 f0       	breq	.+32     	; 0x5b8c <twi_writeTo1+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5b6c:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    5b70:	80 33       	cpi	r24, 0x30	; 48
    5b72:	71 f0       	breq	.+28     	; 0x5b90 <twi_writeTo1+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    5b74:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:290
}
    5b76:	0f 91       	pop	r16
    5b78:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    5b7a:	91 91       	ld	r25, Z+
    5b7c:	9d 93       	st	X+, r25
    5b7e:	cb cf       	rjmp	.-106    	; 0x5b16 <twi_writeTo1+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    5b80:	85 ee       	ldi	r24, 0xE5	; 229
    5b82:	e4 cf       	rjmp	.-56     	; 0x5b4c <twi_writeTo1+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 1;
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	f7 cf       	rjmp	.-18     	; 0x5b76 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    5b88:	80 e0       	ldi	r24, 0x00	; 0
    5b8a:	f5 cf       	rjmp	.-22     	; 0x5b76 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    5b8c:	82 e0       	ldi	r24, 0x02	; 2
    5b8e:	f3 cf       	rjmp	.-26     	; 0x5b76 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    5b90:	83 e0       	ldi	r24, 0x03	; 3
    5b92:	f1 cf       	rjmp	.-30     	; 0x5b76 <twi_writeTo1+0x90>

00005b94 <twi_transmit1>:
twi_transmit1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:307
uint8_t twi_transmit1(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    5b94:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <twi_txBufferLength>
    5b98:	26 0f       	add	r18, r22
    5b9a:	33 27       	eor	r19, r19
    5b9c:	33 1f       	adc	r19, r19
    5b9e:	21 32       	cpi	r18, 0x21	; 33
    5ba0:	31 05       	cpc	r19, r1
    5ba2:	ec f4       	brge	.+58     	; 0x5bde <twi_transmit1+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5ba4:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <twi_state>
    5ba8:	fc 01       	movw	r30, r24
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	80 e0       	ldi	r24, 0x00	; 0
    5bae:	24 30       	cpi	r18, 0x04	; 4
    5bb0:	69 f0       	breq	.+26     	; 0x5bcc <twi_transmit1+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:313
    return 2;
    5bb2:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
    5bb4:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    5bb6:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <twi_txBufferLength>
    5bba:	21 91       	ld	r18, Z+
    5bbc:	ac 01       	movw	r20, r24
    5bbe:	44 5f       	subi	r20, 0xF4	; 244
    5bc0:	5a 4f       	sbci	r21, 0xFA	; 250
    5bc2:	a4 0f       	add	r26, r20
    5bc4:	b5 2f       	mov	r27, r21
    5bc6:	b1 1d       	adc	r27, r1
    5bc8:	2c 93       	st	X, r18
    5bca:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    5bcc:	86 17       	cp	r24, r22
    5bce:	98 f3       	brcs	.-26     	; 0x5bb6 <twi_transmit1+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    5bd0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    5bd4:	68 0f       	add	r22, r24
    5bd6:	60 93 0a 05 	sts	0x050A, r22	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:322
  
  return 0;
    5bda:	80 e0       	ldi	r24, 0x00	; 0
    5bdc:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	08 95       	ret

00005be2 <twi_attachSlaveRxEvent1>:
twi_attachSlaveRxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent1( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    5be2:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <twi_onSlaveReceive+0x1>
    5be6:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:334
}
    5bea:	08 95       	ret

00005bec <twi_attachSlaveTxEvent1>:
twi_attachSlaveTxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent1( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    5bec:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <twi_onSlaveTransmit+0x1>
    5bf0:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:345
}
    5bf4:	08 95       	ret

00005bf6 <twi_reply1>:
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:356
 * Output   none
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    5bf6:	88 23       	and	r24, r24
    5bf8:	21 f0       	breq	.+8      	; 0x5c02 <twi_reply1+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5bfa:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5bfc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:361
  }
}
    5c00:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5c02:	85 e8       	ldi	r24, 0x85	; 133
    5c04:	fb cf       	rjmp	.-10     	; 0x5bfc <twi_reply1+0x6>

00005c06 <twi_stop1>:
twi_stop1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:372
 * Output   none
 */
void twi_stop1(void)
{
  // send stop condition
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5c06:	85 ed       	ldi	r24, 0xD5	; 213
    5c08:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR1 & _BV(TWSTO)){
    5c0c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5c10:	84 fd       	sbrc	r24, 4
    5c12:	fc cf       	rjmp	.-8      	; 0x5c0c <twi_stop1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5c14:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:382
}
    5c18:	08 95       	ret

00005c1a <twi_releaseBus1>:
twi_releaseBus1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:393
 * Output   none
 */
void twi_releaseBus1(void)
{
  // release bus
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5c1a:	85 ec       	ldi	r24, 0xC5	; 197
    5c1c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:396

  // update twi state
  twi_state = TWI_READY;
    5c20:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:397
}
    5c24:	08 95       	ret

00005c26 <__vector_40>:
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:400

ISR(TWI1_vect)
{
    5c26:	1f 92       	push	r1
    5c28:	0f 92       	push	r0
    5c2a:	0f b6       	in	r0, 0x3f	; 63
    5c2c:	0f 92       	push	r0
    5c2e:	11 24       	eor	r1, r1
    5c30:	2f 93       	push	r18
    5c32:	3f 93       	push	r19
    5c34:	4f 93       	push	r20
    5c36:	5f 93       	push	r21
    5c38:	6f 93       	push	r22
    5c3a:	7f 93       	push	r23
    5c3c:	8f 93       	push	r24
    5c3e:	9f 93       	push	r25
    5c40:	af 93       	push	r26
    5c42:	bf 93       	push	r27
    5c44:	ef 93       	push	r30
    5c46:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5c48:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    5c4c:	88 7f       	andi	r24, 0xF8	; 248
    5c4e:	80 36       	cpi	r24, 0x60	; 96
    5c50:	09 f4       	brne	.+2      	; 0x5c54 <__vector_40+0x2e>
    5c52:	4c c0       	rjmp	.+152    	; 0x5cec <__vector_40+0xc6>
    5c54:	08 f0       	brcs	.+2      	; 0x5c58 <__vector_40+0x32>
    5c56:	3f c0       	rjmp	.+126    	; 0x5cd6 <__vector_40+0xb0>
    5c58:	88 32       	cpi	r24, 0x28	; 40
    5c5a:	09 f4       	brne	.+2      	; 0x5c5e <__vector_40+0x38>
    5c5c:	a8 c0       	rjmp	.+336    	; 0x5dae <__vector_40+0x188>
    5c5e:	18 f5       	brcc	.+70     	; 0x5ca6 <__vector_40+0x80>
    5c60:	80 31       	cpi	r24, 0x10	; 16
    5c62:	09 f4       	brne	.+2      	; 0x5c66 <__vector_40+0x40>
    5c64:	9c c0       	rjmp	.+312    	; 0x5d9e <__vector_40+0x178>
    5c66:	b8 f4       	brcc	.+46     	; 0x5c96 <__vector_40+0x70>
    5c68:	88 23       	and	r24, r24
    5c6a:	09 f4       	brne	.+2      	; 0x5c6e <__vector_40+0x48>
    5c6c:	f9 c0       	rjmp	.+498    	; 0x5e60 <__vector_40+0x23a>
    5c6e:	88 30       	cpi	r24, 0x08	; 8
    5c70:	09 f4       	brne	.+2      	; 0x5c74 <__vector_40+0x4e>
    5c72:	95 c0       	rjmp	.+298    	; 0x5d9e <__vector_40+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
      break;
  }
}
    5c74:	ff 91       	pop	r31
    5c76:	ef 91       	pop	r30
    5c78:	bf 91       	pop	r27
    5c7a:	af 91       	pop	r26
    5c7c:	9f 91       	pop	r25
    5c7e:	8f 91       	pop	r24
    5c80:	7f 91       	pop	r23
    5c82:	6f 91       	pop	r22
    5c84:	5f 91       	pop	r21
    5c86:	4f 91       	pop	r20
    5c88:	3f 91       	pop	r19
    5c8a:	2f 91       	pop	r18
    5c8c:	0f 90       	pop	r0
    5c8e:	0f be       	out	0x3f, r0	; 63
    5c90:	0f 90       	pop	r0
    5c92:	1f 90       	pop	r1
    5c94:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5c96:	88 31       	cpi	r24, 0x18	; 24
    5c98:	09 f4       	brne	.+2      	; 0x5c9c <__vector_40+0x76>
    5c9a:	89 c0       	rjmp	.+274    	; 0x5dae <__vector_40+0x188>
    5c9c:	80 32       	cpi	r24, 0x20	; 32
    5c9e:	51 f7       	brne	.-44     	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:437
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop1();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5ca0:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <twi_error>
    5ca4:	15 c0       	rjmp	.+42     	; 0x5cd0 <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5ca6:	80 34       	cpi	r24, 0x40	; 64
    5ca8:	09 f4       	brne	.+2      	; 0x5cac <__vector_40+0x86>
    5caa:	9e c0       	rjmp	.+316    	; 0x5de8 <__vector_40+0x1c2>
    5cac:	48 f4       	brcc	.+18     	; 0x5cc0 <__vector_40+0x9a>
    5cae:	80 33       	cpi	r24, 0x30	; 48
    5cb0:	b9 f3       	breq	.-18     	; 0x5ca0 <__vector_40+0x7a>
    5cb2:	88 33       	cpi	r24, 0x38	; 56
    5cb4:	f9 f6       	brne	.-66     	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:441
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop1();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5cb6:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:442
      twi_releaseBus1();
    5cba:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:443
      break;
    5cbe:	da cf       	rjmp	.-76     	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5cc0:	80 35       	cpi	r24, 0x50	; 80
    5cc2:	09 f4       	brne	.+2      	; 0x5cc6 <__vector_40+0xa0>
    5cc4:	85 c0       	rjmp	.+266    	; 0x5dd0 <__vector_40+0x1aa>
    5cc6:	88 35       	cpi	r24, 0x58	; 88
    5cc8:	09 f4       	brne	.+2      	; 0x5ccc <__vector_40+0xa6>
    5cca:	96 c0       	rjmp	.+300    	; 0x5df8 <__vector_40+0x1d2>
    5ccc:	88 34       	cpi	r24, 0x48	; 72
    5cce:	91 f6       	brne	.-92     	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:560
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
    5cd0:	0e 94 03 2e 	call	0x5c06	; 0x5c06 <twi_stop1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
      break;
  }
}
    5cd4:	cf cf       	rjmp	.-98     	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5cd6:	88 39       	cpi	r24, 0x98	; 152
    5cd8:	09 f4       	brne	.+2      	; 0x5cdc <__vector_40+0xb6>
    5cda:	8c c0       	rjmp	.+280    	; 0x5df4 <__vector_40+0x1ce>
    5cdc:	38 f5       	brcc	.+78     	; 0x5d2c <__vector_40+0x106>
    5cde:	88 37       	cpi	r24, 0x78	; 120
    5ce0:	29 f0       	breq	.+10     	; 0x5cec <__vector_40+0xc6>
    5ce2:	50 f4       	brcc	.+20     	; 0x5cf8 <__vector_40+0xd2>
    5ce4:	88 36       	cpi	r24, 0x68	; 104
    5ce6:	11 f0       	breq	.+4      	; 0x5cec <__vector_40+0xc6>
    5ce8:	80 37       	cpi	r24, 0x70	; 112
    5cea:	21 f6       	brne	.-120    	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:483
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5cec:	83 e0       	ldi	r24, 0x03	; 3
    5cee:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:485
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5cf2:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <twi_rxBufferIndex>
    5cf6:	57 c0       	rjmp	.+174    	; 0x5da6 <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5cf8:	88 38       	cpi	r24, 0x88	; 136
    5cfa:	09 f4       	brne	.+2      	; 0x5cfe <__vector_40+0xd8>
    5cfc:	7b c0       	rjmp	.+246    	; 0x5df4 <__vector_40+0x1ce>
    5cfe:	80 39       	cpi	r24, 0x90	; 144
    5d00:	19 f0       	breq	.+6      	; 0x5d08 <__vector_40+0xe2>
    5d02:	80 38       	cpi	r24, 0x80	; 128
    5d04:	09 f0       	breq	.+2      	; 0x5d08 <__vector_40+0xe2>
    5d06:	b6 cf       	rjmp	.-148    	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:491
      twi_reply1(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    5d08:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    5d0c:	80 32       	cpi	r24, 0x20	; 32
    5d0e:	08 f0       	brcs	.+2      	; 0x5d12 <__vector_40+0xec>
    5d10:	71 c0       	rjmp	.+226    	; 0x5df4 <__vector_40+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:493
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR1;
    5d12:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    5d16:	81 e0       	ldi	r24, 0x01	; 1
    5d18:	8e 0f       	add	r24, r30
    5d1a:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <twi_rxBufferIndex>
    5d1e:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    5d22:	f0 e0       	ldi	r31, 0x00	; 0
    5d24:	e6 51       	subi	r30, 0x16	; 22
    5d26:	fb 4f       	sbci	r31, 0xFB	; 251
    5d28:	80 83       	st	Z, r24
    5d2a:	3d c0       	rjmp	.+122    	; 0x5da6 <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5d2c:	80 3b       	cpi	r24, 0xB0	; 176
    5d2e:	39 f0       	breq	.+14     	; 0x5d3e <__vector_40+0x118>
    5d30:	e0 f4       	brcc	.+56     	; 0x5d6a <__vector_40+0x144>
    5d32:	80 3a       	cpi	r24, 0xA0	; 160
    5d34:	09 f4       	brne	.+2      	; 0x5d38 <__vector_40+0x112>
    5d36:	79 c0       	rjmp	.+242    	; 0x5e2a <__vector_40+0x204>
    5d38:	88 3a       	cpi	r24, 0xA8	; 168
    5d3a:	09 f0       	breq	.+2      	; 0x5d3e <__vector_40+0x118>
    5d3c:	9b cf       	rjmp	.-202    	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:522
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5d3e:	84 e0       	ldi	r24, 0x04	; 4
    5d40:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:524
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5d44:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:526
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5d48:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:529
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5d4c:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <twi_onSlaveTransmit>
    5d50:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <twi_onSlaveTransmit+0x1>
    5d54:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:531
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5d56:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    5d5a:	81 11       	cpse	r24, r1
    5d5c:	0f c0       	rjmp	.+30     	; 0x5d7c <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:532
        twi_txBufferLength = 1;
    5d5e:	81 e0       	ldi	r24, 0x01	; 1
    5d60:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:533
        twi_txBuffer[0] = 0x00;
    5d64:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_txBuffer>
    5d68:	09 c0       	rjmp	.+18     	; 0x5d7c <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    5d6a:	80 3c       	cpi	r24, 0xC0	; 192
    5d6c:	09 f4       	brne	.+2      	; 0x5d70 <__vector_40+0x14a>
    5d6e:	76 c0       	rjmp	.+236    	; 0x5e5c <__vector_40+0x236>
    5d70:	88 3c       	cpi	r24, 0xC8	; 200
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <__vector_40+0x150>
    5d74:	73 c0       	rjmp	.+230    	; 0x5e5c <__vector_40+0x236>
    5d76:	88 3b       	cpi	r24, 0xB8	; 184
    5d78:	09 f0       	breq	.+2      	; 0x5d7c <__vector_40+0x156>
    5d7a:	7c cf       	rjmp	.-264    	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:539
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
    5d7c:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <twi_txBufferIndex>
    5d80:	81 e0       	ldi	r24, 0x01	; 1
    5d82:	8e 0f       	add	r24, r30
    5d84:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_txBufferIndex>
    5d88:	f0 e0       	ldi	r31, 0x00	; 0
    5d8a:	e4 5f       	subi	r30, 0xF4	; 244
    5d8c:	fa 4f       	sbci	r31, 0xFA	; 250
    5d8e:	80 81       	ld	r24, Z
    5d90:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5d94:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <twi_txBufferIndex>
    5d98:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    5d9c:	29 c0       	rjmp	.+82     	; 0x5df0 <__vector_40+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:407
  switch(TWSR1 & TW_STATUS_MASK){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR1 = twi_slarw;
    5d9e:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    5da2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5da6:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5da8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5dac:	63 cf       	rjmp	.-314    	; 0x5c74 <__vector_40+0x4e>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:415

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5dae:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5db2:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_masterBufferLength>
    5db6:	98 17       	cp	r25, r24
    5db8:	58 f5       	brcc	.+86     	; 0x5e10 <__vector_40+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    5dba:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5dbe:	81 e0       	ldi	r24, 0x01	; 1
    5dc0:	8e 0f       	add	r24, r30
    5dc2:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    5dc6:	f0 e0       	ldi	r31, 0x00	; 0
    5dc8:	e2 5d       	subi	r30, 0xD2	; 210
    5dca:	fa 4f       	sbci	r31, 0xFA	; 250
    5dcc:	80 81       	ld	r24, Z
    5dce:	e9 cf       	rjmp	.-46     	; 0x5da2 <__vector_40+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:448
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    5dd0:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5dd4:	81 e0       	ldi	r24, 0x01	; 1
    5dd6:	8e 0f       	add	r24, r30
    5dd8:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    5ddc:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    5de0:	f0 e0       	ldi	r31, 0x00	; 0
    5de2:	e2 5d       	subi	r30, 0xD2	; 210
    5de4:	fa 4f       	sbci	r31, 0xFA	; 250
    5de6:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:452
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5de8:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5dec:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5df0:	98 17       	cp	r25, r24
    5df2:	c8 f2       	brcs	.-78     	; 0x5da6 <__vector_40+0x180>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5df4:	85 e8       	ldi	r24, 0x85	; 133
    5df6:	d8 cf       	rjmp	.-80     	; 0x5da8 <__vector_40+0x182>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:460
        twi_reply1(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    5df8:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	8e 0f       	add	r24, r30
    5e00:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    5e04:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    5e08:	f0 e0       	ldi	r31, 0x00	; 0
    5e0a:	e2 5d       	subi	r30, 0xD2	; 210
    5e0c:	fa 4f       	sbci	r31, 0xFA	; 250
    5e0e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:461
  if (twi_sendStop)
    5e10:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <twi_sendStop>
    5e14:	81 11       	cpse	r24, r1
    5e16:	5c cf       	rjmp	.-328    	; 0x5cd0 <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:464
          twi_stop1();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    5e18:	81 e0       	ldi	r24, 0x01	; 1
    5e1a:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:468
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR1 = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5e1e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e20:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:552
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply1(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5e24:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:553
      break;
    5e28:	25 cf       	rjmp	.-438    	; 0x5c74 <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:502
        twi_reply1(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus1();
    5e2a:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:504
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    5e2e:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    5e32:	80 32       	cpi	r24, 0x20	; 32
    5e34:	30 f4       	brcc	.+12     	; 0x5e42 <__vector_40+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:505
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5e36:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    5e3a:	f0 e0       	ldi	r31, 0x00	; 0
    5e3c:	e6 51       	subi	r30, 0x16	; 22
    5e3e:	fb 4f       	sbci	r31, 0xFB	; 251
    5e40:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:508
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5e42:	60 91 e9 04 	lds	r22, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    5e46:	70 e0       	ldi	r23, 0x00	; 0
    5e48:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <twi_onSlaveReceive>
    5e4c:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <twi_onSlaveReceive+0x1>
    5e50:	8a ee       	ldi	r24, 0xEA	; 234
    5e52:	94 e0       	ldi	r25, 0x04	; 4
    5e54:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:510
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5e56:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:511
      break;
    5e5a:	0c cf       	rjmp	.-488    	; 0x5c74 <__vector_40+0x4e>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e5c:	85 ec       	ldi	r24, 0xC5	; 197
    5e5e:	e0 cf       	rjmp	.-64     	; 0x5e20 <__vector_40+0x1fa>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:559

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5e60:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <twi_error>
    5e64:	35 cf       	rjmp	.-406    	; 0x5cd0 <__vector_40+0xaa>

00005e66 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    5e66:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5e68:	91 8d       	ldd	r25, Z+25	; 0x19
    5e6a:	22 8d       	ldd	r18, Z+26	; 0x1a
    5e6c:	89 2f       	mov	r24, r25
    5e6e:	90 e0       	ldi	r25, 0x00	; 0
    5e70:	80 5c       	subi	r24, 0xC0	; 192
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	82 1b       	sub	r24, r18
    5e76:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    5e78:	8f 73       	andi	r24, 0x3F	; 63
    5e7a:	99 27       	eor	r25, r25
    5e7c:	08 95       	ret

00005e7e <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    5e7e:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    5e80:	91 8d       	ldd	r25, Z+25	; 0x19
    5e82:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e84:	98 17       	cp	r25, r24
    5e86:	31 f0       	breq	.+12     	; 0x5e94 <HardwareSerial::peek()+0x16>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5e88:	82 8d       	ldd	r24, Z+26	; 0x1a
    5e8a:	e8 0f       	add	r30, r24
    5e8c:	f1 1d       	adc	r31, r1
    5e8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    5e90:	90 e0       	ldi	r25, 0x00	; 0
    5e92:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5e94:	8f ef       	ldi	r24, 0xFF	; 255
    5e96:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5e98:	08 95       	ret

00005e9a <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    5e9a:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5e9c:	91 8d       	ldd	r25, Z+25	; 0x19
    5e9e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ea0:	98 17       	cp	r25, r24
    5ea2:	61 f0       	breq	.+24     	; 0x5ebc <HardwareSerial::read()+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    5ea4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    5ea6:	ae 0f       	add	r26, r30
    5ea8:	bf 2f       	mov	r27, r31
    5eaa:	b1 1d       	adc	r27, r1
    5eac:	5d 96       	adiw	r26, 0x1d	; 29
    5eae:	8c 91       	ld	r24, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    5eb0:	92 8d       	ldd	r25, Z+26	; 0x1a
    5eb2:	9f 5f       	subi	r25, 0xFF	; 255
    5eb4:	9f 73       	andi	r25, 0x3F	; 63
    5eb6:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    5eb8:	90 e0       	ldi	r25, 0x00	; 0
    5eba:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    5ebc:	8f ef       	ldi	r24, 0xFF	; 255
    5ebe:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    5ec0:	08 95       	ret

00005ec2 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    5ec2:	fc 01       	movw	r30, r24
    5ec4:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    5ec6:	44 8d       	ldd	r20, Z+28	; 0x1c
    5ec8:	25 2f       	mov	r18, r21
    5eca:	30 e0       	ldi	r19, 0x00	; 0
    5ecc:	84 2f       	mov	r24, r20
    5ece:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    5ed0:	82 1b       	sub	r24, r18
    5ed2:	93 0b       	sbc	r25, r19
    5ed4:	54 17       	cp	r21, r20
    5ed6:	10 f0       	brcs	.+4      	; 0x5edc <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    5ed8:	cf 96       	adiw	r24, 0x3f	; 63
    5eda:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    5edc:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    5ede:	08 95       	ret

00005ee0 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    5ee0:	86 ed       	ldi	r24, 0xD6	; 214
    5ee2:	90 e3       	ldi	r25, 0x30	; 48
    5ee4:	89 2b       	or	r24, r25
    5ee6:	49 f0       	breq	.+18     	; 0x5efa <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    5ee8:	80 e0       	ldi	r24, 0x00	; 0
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	89 2b       	or	r24, r25
    5eee:	29 f0       	breq	.+10     	; 0x5efa <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    5ef0:	0e 94 d6 30 	call	0x61ac	; 0x61ac <Serial0_available()>
    5ef4:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    5ef6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5efa:	80 e0       	ldi	r24, 0x00	; 0
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	89 2b       	or	r24, r25
    5f00:	49 f0       	breq	.+18     	; 0x5f14 <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    5f02:	80 e0       	ldi	r24, 0x00	; 0
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	89 2b       	or	r24, r25
    5f08:	29 f0       	breq	.+10     	; 0x5f14 <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    5f0a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5f0e:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    5f10:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    5f14:	08 95       	ret

00005f16 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5f16:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5f18:	a4 8d       	ldd	r26, Z+28	; 0x1c
    5f1a:	a8 0f       	add	r26, r24
    5f1c:	b9 2f       	mov	r27, r25
    5f1e:	b1 1d       	adc	r27, r1
    5f20:	a3 5a       	subi	r26, 0xA3	; 163
    5f22:	bf 4f       	sbci	r27, 0xFF	; 255
    5f24:	2c 91       	ld	r18, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5f26:	84 8d       	ldd	r24, Z+28	; 0x1c
    5f28:	90 e0       	ldi	r25, 0x00	; 0
    5f2a:	01 96       	adiw	r24, 0x01	; 1
    5f2c:	8f 73       	andi	r24, 0x3F	; 63
    5f2e:	99 27       	eor	r25, r25
    5f30:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    5f32:	a6 89       	ldd	r26, Z+22	; 0x16
    5f34:	b7 89       	ldd	r27, Z+23	; 0x17
    5f36:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    5f38:	a0 89       	ldd	r26, Z+16	; 0x10
    5f3a:	b1 89       	ldd	r27, Z+17	; 0x11
    5f3c:	8c 91       	ld	r24, X
    5f3e:	80 64       	ori	r24, 0x40	; 64
    5f40:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    5f42:	93 8d       	ldd	r25, Z+27	; 0x1b
    5f44:	84 8d       	ldd	r24, Z+28	; 0x1c
    5f46:	98 13       	cpse	r25, r24
    5f48:	06 c0       	rjmp	.+12     	; 0x5f56 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    5f4a:	02 88       	ldd	r0, Z+18	; 0x12
    5f4c:	f3 89       	ldd	r31, Z+19	; 0x13
    5f4e:	e0 2d       	mov	r30, r0
    5f50:	80 81       	ld	r24, Z
    5f52:	8f 7d       	andi	r24, 0xDF	; 223
    5f54:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    5f56:	08 95       	ret

00005f58 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5f58:	cf 93       	push	r28
    5f5a:	df 93       	push	r29
    5f5c:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5f5e:	88 8d       	ldd	r24, Y+24	; 0x18
    5f60:	88 23       	and	r24, r24
    5f62:	b9 f0       	breq	.+46     	; 0x5f92 <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    5f64:	aa 89       	ldd	r26, Y+18	; 0x12
    5f66:	bb 89       	ldd	r27, Y+19	; 0x13
    5f68:	e8 89       	ldd	r30, Y+16	; 0x10
    5f6a:	f9 89       	ldd	r31, Y+17	; 0x11
    5f6c:	8c 91       	ld	r24, X
    5f6e:	85 fd       	sbrc	r24, 5
    5f70:	03 c0       	rjmp	.+6      	; 0x5f78 <HardwareSerial::flush()+0x20>
    5f72:	80 81       	ld	r24, Z
    5f74:	86 fd       	sbrc	r24, 6
    5f76:	0d c0       	rjmp	.+26     	; 0x5f92 <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5f78:	0f b6       	in	r0, 0x3f	; 63
    5f7a:	07 fc       	sbrc	r0, 7
    5f7c:	f7 cf       	rjmp	.-18     	; 0x5f6c <HardwareSerial::flush()+0x14>
    5f7e:	8c 91       	ld	r24, X
    5f80:	85 ff       	sbrs	r24, 5
    5f82:	f2 cf       	rjmp	.-28     	; 0x5f68 <HardwareSerial::flush()+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    5f84:	80 81       	ld	r24, Z
    5f86:	85 ff       	sbrs	r24, 5
    5f88:	ed cf       	rjmp	.-38     	; 0x5f64 <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    5f8a:	ce 01       	movw	r24, r28
    5f8c:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <HardwareSerial::_tx_udr_empty_irq()>
    5f90:	e9 cf       	rjmp	.-46     	; 0x5f64 <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    5f92:	df 91       	pop	r29
    5f94:	cf 91       	pop	r28
    5f96:	08 95       	ret

00005f98 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    5f98:	ef 92       	push	r14
    5f9a:	ff 92       	push	r15
    5f9c:	0f 93       	push	r16
    5f9e:	1f 93       	push	r17
    5fa0:	cf 93       	push	r28
    5fa2:	df 93       	push	r29
    5fa4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    5fa6:	81 e0       	ldi	r24, 0x01	; 1
    5fa8:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5faa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5fac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5fae:	98 13       	cpse	r25, r24
    5fb0:	16 c0       	rjmp	.+44     	; 0x5fde <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    5fb2:	e8 89       	ldd	r30, Y+16	; 0x10
    5fb4:	f9 89       	ldd	r31, Y+17	; 0x11
    5fb6:	80 81       	ld	r24, Z
    5fb8:	85 ff       	sbrs	r24, 5
    5fba:	11 c0       	rjmp	.+34     	; 0x5fde <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    5fbc:	ee 89       	ldd	r30, Y+22	; 0x16
    5fbe:	ff 89       	ldd	r31, Y+23	; 0x17
    5fc0:	60 83       	st	Z, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    5fc2:	e8 89       	ldd	r30, Y+16	; 0x10
    5fc4:	f9 89       	ldd	r31, Y+17	; 0x11
    5fc6:	80 81       	ld	r24, Z
    5fc8:	80 64       	ori	r24, 0x40	; 64
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    5fca:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    5fcc:	81 e0       	ldi	r24, 0x01	; 1
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	df 91       	pop	r29
    5fd2:	cf 91       	pop	r28
    5fd4:	1f 91       	pop	r17
    5fd6:	0f 91       	pop	r16
    5fd8:	ff 90       	pop	r15
    5fda:	ef 90       	pop	r14
    5fdc:	08 95       	ret
    5fde:	f6 2e       	mov	r15, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    5fe0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    5fe2:	10 e0       	ldi	r17, 0x00	; 0
    5fe4:	0f 5f       	subi	r16, 0xFF	; 255
    5fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    5fe8:	0f 73       	andi	r16, 0x3F	; 63
    5fea:	11 27       	eor	r17, r17
    5fec:	e0 2e       	mov	r14, r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    5fee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5ff0:	8e 11       	cpse	r24, r14
    5ff2:	0c c0       	rjmp	.+24     	; 0x600c <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	07 fc       	sbrc	r0, 7
    5ff8:	fa cf       	rjmp	.-12     	; 0x5fee <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    5ffa:	e8 89       	ldd	r30, Y+16	; 0x10
    5ffc:	f9 89       	ldd	r31, Y+17	; 0x11
    5ffe:	80 81       	ld	r24, Z
    6000:	85 ff       	sbrs	r24, 5
    6002:	f5 cf       	rjmp	.-22     	; 0x5fee <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    6004:	ce 01       	movw	r24, r28
    6006:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <HardwareSerial::_tx_udr_empty_irq()>
    600a:	f1 cf       	rjmp	.-30     	; 0x5fee <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    600c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    600e:	ec 0f       	add	r30, r28
    6010:	fd 2f       	mov	r31, r29
    6012:	f1 1d       	adc	r31, r1
    6014:	e3 5a       	subi	r30, 0xA3	; 163
    6016:	ff 4f       	sbci	r31, 0xFF	; 255
    6018:	f0 82       	st	Z, r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    601a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    601c:	ea 89       	ldd	r30, Y+18	; 0x12
    601e:	fb 89       	ldd	r31, Y+19	; 0x13
    6020:	80 81       	ld	r24, Z
    6022:	80 62       	ori	r24, 0x20	; 32
    6024:	d2 cf       	rjmp	.-92     	; 0x5fca <HardwareSerial::write(unsigned char)+0x32>

00006026 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6026:	cf 92       	push	r12
    6028:	df 92       	push	r13
    602a:	ef 92       	push	r14
    602c:	ff 92       	push	r15
    602e:	1f 93       	push	r17
    6030:	cf 93       	push	r28
    6032:	df 93       	push	r29
    6034:	ec 01       	movw	r28, r24
    6036:	6a 01       	movw	r12, r20
    6038:	7b 01       	movw	r14, r22
    603a:	12 2f       	mov	r17, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    603c:	e8 89       	ldd	r30, Y+16	; 0x10
    603e:	f9 89       	ldd	r31, Y+17	; 0x11
    6040:	82 e0       	ldi	r24, 0x02	; 2
    6042:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6044:	c1 14       	cp	r12, r1
    6046:	81 ee       	ldi	r24, 0xE1	; 225
    6048:	d8 06       	cpc	r13, r24
    604a:	e1 04       	cpc	r14, r1
    604c:	f1 04       	cpc	r15, r1
    604e:	a1 f0       	breq	.+40     	; 0x6078 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    6050:	60 e0       	ldi	r22, 0x00	; 0
    6052:	79 e0       	ldi	r23, 0x09	; 9
    6054:	8d e3       	ldi	r24, 0x3D	; 61
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	a7 01       	movw	r20, r14
    605a:	96 01       	movw	r18, r12
    605c:	0e 94 75 38 	call	0x70ea	; 0x70ea <__udivmodsi4>
    6060:	21 50       	subi	r18, 0x01	; 1
    6062:	31 09       	sbc	r19, r1
    6064:	41 09       	sbc	r20, r1
    6066:	51 09       	sbc	r21, r1
    6068:	56 95       	lsr	r21
    606a:	47 95       	ror	r20
    606c:	37 95       	ror	r19
    606e:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6070:	21 15       	cp	r18, r1
    6072:	80 e1       	ldi	r24, 0x10	; 16
    6074:	38 07       	cpc	r19, r24
    6076:	98 f0       	brcs	.+38     	; 0x609e <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    6078:	e8 89       	ldd	r30, Y+16	; 0x10
    607a:	f9 89       	ldd	r31, Y+17	; 0x11
    607c:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    607e:	60 e8       	ldi	r22, 0x80	; 128
    6080:	74 e8       	ldi	r23, 0x84	; 132
    6082:	8e e1       	ldi	r24, 0x1E	; 30
    6084:	90 e0       	ldi	r25, 0x00	; 0
    6086:	a7 01       	movw	r20, r14
    6088:	96 01       	movw	r18, r12
    608a:	0e 94 75 38 	call	0x70ea	; 0x70ea <__udivmodsi4>
    608e:	21 50       	subi	r18, 0x01	; 1
    6090:	31 09       	sbc	r19, r1
    6092:	41 09       	sbc	r20, r1
    6094:	51 09       	sbc	r21, r1
    6096:	56 95       	lsr	r21
    6098:	47 95       	ror	r20
    609a:	37 95       	ror	r19
    609c:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    609e:	ec 85       	ldd	r30, Y+12	; 0x0c
    60a0:	fd 85       	ldd	r31, Y+13	; 0x0d
    60a2:	30 83       	st	Z, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    60a4:	ee 85       	ldd	r30, Y+14	; 0x0e
    60a6:	ff 85       	ldd	r31, Y+15	; 0x0f
    60a8:	20 83       	st	Z, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    60aa:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    60ac:	ec 89       	ldd	r30, Y+20	; 0x14
    60ae:	fd 89       	ldd	r31, Y+21	; 0x15
    60b0:	10 83       	st	Z, r17
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    60b2:	ea 89       	ldd	r30, Y+18	; 0x12
    60b4:	fb 89       	ldd	r31, Y+19	; 0x13
    60b6:	80 81       	ld	r24, Z
    60b8:	88 69       	ori	r24, 0x98	; 152
    60ba:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    60bc:	ea 89       	ldd	r30, Y+18	; 0x12
    60be:	fb 89       	ldd	r31, Y+19	; 0x13
    60c0:	80 81       	ld	r24, Z
    60c2:	8f 7d       	andi	r24, 0xDF	; 223
    60c4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    60c6:	df 91       	pop	r29
    60c8:	cf 91       	pop	r28
    60ca:	1f 91       	pop	r17
    60cc:	ff 90       	pop	r15
    60ce:	ef 90       	pop	r14
    60d0:	df 90       	pop	r13
    60d2:	cf 90       	pop	r12
    60d4:	08 95       	ret

000060d6 <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    60d6:	cf 93       	push	r28
    60d8:	df 93       	push	r29
    60da:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    60dc:	e8 81       	ld	r30, Y
    60de:	f9 81       	ldd	r31, Y+1	; 0x01
    60e0:	06 80       	ldd	r0, Z+6	; 0x06
    60e2:	f7 81       	ldd	r31, Z+7	; 0x07
    60e4:	e0 2d       	mov	r30, r0
    60e6:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    60e8:	ea 89       	ldd	r30, Y+18	; 0x12
    60ea:	fb 89       	ldd	r31, Y+19	; 0x13
    60ec:	80 81       	ld	r24, Z
    60ee:	87 74       	andi	r24, 0x47	; 71
    60f0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    60f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    60f4:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    60f6:	df 91       	pop	r29
    60f8:	cf 91       	pop	r28
    60fa:	08 95       	ret

000060fc <__vector_18>:
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    60fc:	1f 92       	push	r1
    60fe:	0f 92       	push	r0
    6100:	0f b6       	in	r0, 0x3f	; 63
    6102:	0f 92       	push	r0
    6104:	11 24       	eor	r1, r1
    6106:	2f 93       	push	r18
    6108:	8f 93       	push	r24
    610a:	9f 93       	push	r25
    610c:	ef 93       	push	r30
    610e:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6110:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <Serial+0x10>
    6114:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <Serial+0x11>
    6118:	80 81       	ld	r24, Z
    611a:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <Serial+0x16>
    611e:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <Serial+0x17>
    6122:	82 fd       	sbrc	r24, 2
    6124:	1b c0       	rjmp	.+54     	; 0x615c <__vector_18+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6126:	90 81       	ld	r25, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6128:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Serial+0x19>
    612c:	8f 5f       	subi	r24, 0xFF	; 255
    612e:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6130:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <Serial+0x1a>
    6134:	82 17       	cp	r24, r18
    6136:	41 f0       	breq	.+16     	; 0x6148 <__vector_18+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    6138:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <Serial+0x19>
    613c:	f0 e0       	ldi	r31, 0x00	; 0
    613e:	ea 5a       	subi	r30, 0xAA	; 170
    6140:	fa 4f       	sbci	r31, 0xFA	; 250
    6142:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    6144:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Serial+0x19>
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    6148:	ff 91       	pop	r31
    614a:	ef 91       	pop	r30
    614c:	9f 91       	pop	r25
    614e:	8f 91       	pop	r24
    6150:	2f 91       	pop	r18
    6152:	0f 90       	pop	r0
    6154:	0f be       	out	0x3f, r0	; 63
    6156:	0f 90       	pop	r0
    6158:	1f 90       	pop	r1
    615a:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    615c:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    615e:	f4 cf       	rjmp	.-24     	; 0x6148 <__vector_18+0x4c>

00006160 <__vector_19>:
__vector_19():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6160:	1f 92       	push	r1
    6162:	0f 92       	push	r0
    6164:	0f b6       	in	r0, 0x3f	; 63
    6166:	0f 92       	push	r0
    6168:	11 24       	eor	r1, r1
    616a:	2f 93       	push	r18
    616c:	3f 93       	push	r19
    616e:	4f 93       	push	r20
    6170:	5f 93       	push	r21
    6172:	6f 93       	push	r22
    6174:	7f 93       	push	r23
    6176:	8f 93       	push	r24
    6178:	9f 93       	push	r25
    617a:	af 93       	push	r26
    617c:	bf 93       	push	r27
    617e:	ef 93       	push	r30
    6180:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    6182:	86 e5       	ldi	r24, 0x56	; 86
    6184:	95 e0       	ldi	r25, 0x05	; 5
    6186:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    618a:	ff 91       	pop	r31
    618c:	ef 91       	pop	r30
    618e:	bf 91       	pop	r27
    6190:	af 91       	pop	r26
    6192:	9f 91       	pop	r25
    6194:	8f 91       	pop	r24
    6196:	7f 91       	pop	r23
    6198:	6f 91       	pop	r22
    619a:	5f 91       	pop	r21
    619c:	4f 91       	pop	r20
    619e:	3f 91       	pop	r19
    61a0:	2f 91       	pop	r18
    61a2:	0f 90       	pop	r0
    61a4:	0f be       	out	0x3f, r0	; 63
    61a6:	0f 90       	pop	r0
    61a8:	1f 90       	pop	r1
    61aa:	18 95       	reti

000061ac <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    61ac:	86 e5       	ldi	r24, 0x56	; 86
    61ae:	95 e0       	ldi	r25, 0x05	; 5
    61b0:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <HardwareSerial::available()>
    61b4:	21 e0       	ldi	r18, 0x01	; 1
    61b6:	89 2b       	or	r24, r25
    61b8:	09 f4       	brne	.+2      	; 0x61bc <Serial0_available()+0x10>
    61ba:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    61bc:	82 2f       	mov	r24, r18
    61be:	08 95       	ret

000061c0 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    61c0:	e6 e5       	ldi	r30, 0x56	; 86
    61c2:	f5 e0       	ldi	r31, 0x05	; 5
    61c4:	13 82       	std	Z+3, r1	; 0x03
    61c6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    61c8:	88 ee       	ldi	r24, 0xE8	; 232
    61ca:	93 e0       	ldi	r25, 0x03	; 3
    61cc:	a0 e0       	ldi	r26, 0x00	; 0
    61ce:	b0 e0       	ldi	r27, 0x00	; 0
    61d0:	84 83       	std	Z+4, r24	; 0x04
    61d2:	95 83       	std	Z+5, r25	; 0x05
    61d4:	a6 83       	std	Z+6, r26	; 0x06
    61d6:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    61d8:	81 ed       	ldi	r24, 0xD1	; 209
    61da:	91 e0       	ldi	r25, 0x01	; 1
    61dc:	91 83       	std	Z+1, r25	; 0x01
    61de:	80 83       	st	Z, r24
    61e0:	85 ec       	ldi	r24, 0xC5	; 197
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	95 87       	std	Z+13, r25	; 0x0d
    61e6:	84 87       	std	Z+12, r24	; 0x0c
    61e8:	84 ec       	ldi	r24, 0xC4	; 196
    61ea:	90 e0       	ldi	r25, 0x00	; 0
    61ec:	97 87       	std	Z+15, r25	; 0x0f
    61ee:	86 87       	std	Z+14, r24	; 0x0e
    61f0:	80 ec       	ldi	r24, 0xC0	; 192
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	91 8b       	std	Z+17, r25	; 0x11
    61f6:	80 8b       	std	Z+16, r24	; 0x10
    61f8:	81 ec       	ldi	r24, 0xC1	; 193
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	93 8b       	std	Z+19, r25	; 0x13
    61fe:	82 8b       	std	Z+18, r24	; 0x12
    6200:	82 ec       	ldi	r24, 0xC2	; 194
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	95 8b       	std	Z+21, r25	; 0x15
    6206:	84 8b       	std	Z+20, r24	; 0x14
    6208:	86 ec       	ldi	r24, 0xC6	; 198
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	97 8b       	std	Z+23, r25	; 0x17
    620e:	86 8b       	std	Z+22, r24	; 0x16
    6210:	11 8e       	std	Z+25, r1	; 0x19
    6212:	12 8e       	std	Z+26, r1	; 0x1a
    6214:	13 8e       	std	Z+27, r1	; 0x1b
    6216:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    6218:	08 95       	ret

0000621a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    621a:	af 92       	push	r10
    621c:	bf 92       	push	r11
    621e:	cf 92       	push	r12
    6220:	df 92       	push	r13
    6222:	ef 92       	push	r14
    6224:	ff 92       	push	r15
    6226:	0f 93       	push	r16
    6228:	1f 93       	push	r17
    622a:	cf 93       	push	r28
    622c:	df 93       	push	r29
    622e:	6c 01       	movw	r12, r24
    6230:	7b 01       	movw	r14, r22
    6232:	8b 01       	movw	r16, r22
    6234:	04 0f       	add	r16, r20
    6236:	15 1f       	adc	r17, r21
    6238:	eb 01       	movw	r28, r22
    623a:	5e 01       	movw	r10, r28
    623c:	ae 18       	sub	r10, r14
    623e:	bf 08       	sbc	r11, r15
    6240:	c0 17       	cp	r28, r16
    6242:	d1 07       	cpc	r29, r17
    6244:	59 f0       	breq	.+22     	; 0x625c <Print::write(unsigned char const*, unsigned int)+0x42>
    6246:	69 91       	ld	r22, Y+
    6248:	d6 01       	movw	r26, r12
    624a:	ed 91       	ld	r30, X+
    624c:	fc 91       	ld	r31, X
    624e:	01 90       	ld	r0, Z+
    6250:	f0 81       	ld	r31, Z
    6252:	e0 2d       	mov	r30, r0
    6254:	c6 01       	movw	r24, r12
    6256:	09 95       	icall
    6258:	89 2b       	or	r24, r25
    625a:	79 f7       	brne	.-34     	; 0x623a <Print::write(unsigned char const*, unsigned int)+0x20>
    625c:	c5 01       	movw	r24, r10
    625e:	df 91       	pop	r29
    6260:	cf 91       	pop	r28
    6262:	1f 91       	pop	r17
    6264:	0f 91       	pop	r16
    6266:	ff 90       	pop	r15
    6268:	ef 90       	pop	r14
    626a:	df 90       	pop	r13
    626c:	cf 90       	pop	r12
    626e:	bf 90       	pop	r11
    6270:	af 90       	pop	r10
    6272:	08 95       	ret

00006274 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    6274:	fb 01       	movw	r30, r22
    6276:	01 90       	ld	r0, Z+
    6278:	00 20       	and	r0, r0
    627a:	e9 f7       	brne	.-6      	; 0x6276 <Print::write(char const*) [clone .part.2]+0x2>
    627c:	31 97       	sbiw	r30, 0x01	; 1
    627e:	af 01       	movw	r20, r30
    6280:	46 1b       	sub	r20, r22
    6282:	57 0b       	sbc	r21, r23
    6284:	dc 01       	movw	r26, r24
    6286:	ed 91       	ld	r30, X+
    6288:	fc 91       	ld	r31, X
    628a:	02 80       	ldd	r0, Z+2	; 0x02
    628c:	f3 81       	ldd	r31, Z+3	; 0x03
    628e:	e0 2d       	mov	r30, r0
    6290:	09 94       	ijmp

00006292 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    6292:	ef 92       	push	r14
    6294:	ff 92       	push	r15
    6296:	0f 93       	push	r16
    6298:	1f 93       	push	r17
    629a:	cf 93       	push	r28
    629c:	df 93       	push	r29
    629e:	8c 01       	movw	r16, r24
    62a0:	7b 01       	movw	r14, r22
    62a2:	d0 e0       	ldi	r29, 0x00	; 0
    62a4:	c0 e0       	ldi	r28, 0x00	; 0
    62a6:	f7 01       	movw	r30, r14
    62a8:	ec 0f       	add	r30, r28
    62aa:	fd 1f       	adc	r31, r29
    62ac:	64 91       	lpm	r22, Z
    62ae:	66 23       	and	r22, r22
    62b0:	61 f0       	breq	.+24     	; 0x62ca <Print::print(__FlashStringHelper const*)+0x38>
    62b2:	d8 01       	movw	r26, r16
    62b4:	ed 91       	ld	r30, X+
    62b6:	fc 91       	ld	r31, X
    62b8:	01 90       	ld	r0, Z+
    62ba:	f0 81       	ld	r31, Z
    62bc:	e0 2d       	mov	r30, r0
    62be:	c8 01       	movw	r24, r16
    62c0:	09 95       	icall
    62c2:	89 2b       	or	r24, r25
    62c4:	11 f0       	breq	.+4      	; 0x62ca <Print::print(__FlashStringHelper const*)+0x38>
    62c6:	21 96       	adiw	r28, 0x01	; 1
    62c8:	ee cf       	rjmp	.-36     	; 0x62a6 <Print::print(__FlashStringHelper const*)+0x14>
    62ca:	ce 01       	movw	r24, r28
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	1f 91       	pop	r17
    62d2:	0f 91       	pop	r16
    62d4:	ff 90       	pop	r15
    62d6:	ef 90       	pop	r14
    62d8:	08 95       	ret

000062da <Print::print(char)>:
_ZN5Print5printEc():
    62da:	dc 01       	movw	r26, r24
    62dc:	ed 91       	ld	r30, X+
    62de:	fc 91       	ld	r31, X
    62e0:	01 90       	ld	r0, Z+
    62e2:	f0 81       	ld	r31, Z
    62e4:	e0 2d       	mov	r30, r0
    62e6:	09 94       	ijmp

000062e8 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    62e8:	8f 92       	push	r8
    62ea:	9f 92       	push	r9
    62ec:	af 92       	push	r10
    62ee:	bf 92       	push	r11
    62f0:	ef 92       	push	r14
    62f2:	ff 92       	push	r15
    62f4:	0f 93       	push	r16
    62f6:	1f 93       	push	r17
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	cd b7       	in	r28, 0x3d	; 61
    62fe:	de b7       	in	r29, 0x3e	; 62
    6300:	a1 97       	sbiw	r28, 0x21	; 33
    6302:	0f b6       	in	r0, 0x3f	; 63
    6304:	f8 94       	cli
    6306:	de bf       	out	0x3e, r29	; 62
    6308:	0f be       	out	0x3f, r0	; 63
    630a:	cd bf       	out	0x3d, r28	; 61
    630c:	7c 01       	movw	r14, r24
    630e:	fa 01       	movw	r30, r20
    6310:	cb 01       	movw	r24, r22
    6312:	19 a2       	std	Y+33, r1	; 0x21
    6314:	22 30       	cpi	r18, 0x02	; 2
    6316:	08 f4       	brcc	.+2      	; 0x631a <Print::printNumber(unsigned long, unsigned char)+0x32>
    6318:	2a e0       	ldi	r18, 0x0A	; 10
    631a:	8e 01       	movw	r16, r28
    631c:	0f 5d       	subi	r16, 0xDF	; 223
    631e:	1f 4f       	sbci	r17, 0xFF	; 255
    6320:	82 2e       	mov	r8, r18
    6322:	91 2c       	mov	r9, r1
    6324:	b1 2c       	mov	r11, r1
    6326:	a1 2c       	mov	r10, r1
    6328:	bf 01       	movw	r22, r30
    632a:	a5 01       	movw	r20, r10
    632c:	94 01       	movw	r18, r8
    632e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__udivmodsi4>
    6332:	f9 01       	movw	r30, r18
    6334:	ca 01       	movw	r24, r20
    6336:	6a 30       	cpi	r22, 0x0A	; 10
    6338:	0c f5       	brge	.+66     	; 0x637c <Print::printNumber(unsigned long, unsigned char)+0x94>
    633a:	60 5d       	subi	r22, 0xD0	; 208
    633c:	d8 01       	movw	r26, r16
    633e:	6e 93       	st	-X, r22
    6340:	8d 01       	movw	r16, r26
    6342:	23 2b       	or	r18, r19
    6344:	24 2b       	or	r18, r20
    6346:	25 2b       	or	r18, r21
    6348:	79 f7       	brne	.-34     	; 0x6328 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	80 e0       	ldi	r24, 0x00	; 0
    634e:	10 97       	sbiw	r26, 0x00	; 0
    6350:	21 f0       	breq	.+8      	; 0x635a <Print::printNumber(unsigned long, unsigned char)+0x72>
    6352:	bd 01       	movw	r22, r26
    6354:	c7 01       	movw	r24, r14
    6356:	0e 94 3a 31 	call	0x6274	; 0x6274 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    635a:	a1 96       	adiw	r28, 0x21	; 33
    635c:	0f b6       	in	r0, 0x3f	; 63
    635e:	f8 94       	cli
    6360:	de bf       	out	0x3e, r29	; 62
    6362:	0f be       	out	0x3f, r0	; 63
    6364:	cd bf       	out	0x3d, r28	; 61
    6366:	df 91       	pop	r29
    6368:	cf 91       	pop	r28
    636a:	1f 91       	pop	r17
    636c:	0f 91       	pop	r16
    636e:	ff 90       	pop	r15
    6370:	ef 90       	pop	r14
    6372:	bf 90       	pop	r11
    6374:	af 90       	pop	r10
    6376:	9f 90       	pop	r9
    6378:	8f 90       	pop	r8
    637a:	08 95       	ret
    637c:	69 5c       	subi	r22, 0xC9	; 201
    637e:	de cf       	rjmp	.-68     	; 0x633c <Print::printNumber(unsigned long, unsigned char)+0x54>

00006380 <Print::print(long, int)>:
_ZN5Print5printEli():
    6380:	cf 92       	push	r12
    6382:	df 92       	push	r13
    6384:	ef 92       	push	r14
    6386:	ff 92       	push	r15
    6388:	0f 93       	push	r16
    638a:	1f 93       	push	r17
    638c:	cf 93       	push	r28
    638e:	df 93       	push	r29
    6390:	21 15       	cp	r18, r1
    6392:	31 05       	cpc	r19, r1
    6394:	81 f4       	brne	.+32     	; 0x63b6 <Print::print(long, int)+0x36>
    6396:	dc 01       	movw	r26, r24
    6398:	ed 91       	ld	r30, X+
    639a:	fc 91       	ld	r31, X
    639c:	01 90       	ld	r0, Z+
    639e:	f0 81       	ld	r31, Z
    63a0:	e0 2d       	mov	r30, r0
    63a2:	64 2f       	mov	r22, r20
    63a4:	df 91       	pop	r29
    63a6:	cf 91       	pop	r28
    63a8:	1f 91       	pop	r17
    63aa:	0f 91       	pop	r16
    63ac:	ff 90       	pop	r15
    63ae:	ef 90       	pop	r14
    63b0:	df 90       	pop	r13
    63b2:	cf 90       	pop	r12
    63b4:	09 94       	ijmp
    63b6:	2a 30       	cpi	r18, 0x0A	; 10
    63b8:	31 05       	cpc	r19, r1
    63ba:	01 f5       	brne	.+64     	; 0x63fc <Print::print(long, int)+0x7c>
    63bc:	2a e0       	ldi	r18, 0x0A	; 10
    63be:	77 ff       	sbrs	r23, 7
    63c0:	1d c0       	rjmp	.+58     	; 0x63fc <Print::print(long, int)+0x7c>
    63c2:	6a 01       	movw	r12, r20
    63c4:	7b 01       	movw	r14, r22
    63c6:	ec 01       	movw	r28, r24
    63c8:	6d e2       	ldi	r22, 0x2D	; 45
    63ca:	0e 94 6d 31 	call	0x62da	; 0x62da <Print::print(char)>
    63ce:	8c 01       	movw	r16, r24
    63d0:	44 27       	eor	r20, r20
    63d2:	55 27       	eor	r21, r21
    63d4:	ba 01       	movw	r22, r20
    63d6:	4c 19       	sub	r20, r12
    63d8:	5d 09       	sbc	r21, r13
    63da:	6e 09       	sbc	r22, r14
    63dc:	7f 09       	sbc	r23, r15
    63de:	2a e0       	ldi	r18, 0x0A	; 10
    63e0:	ce 01       	movw	r24, r28
    63e2:	0e 94 74 31 	call	0x62e8	; 0x62e8 <Print::printNumber(unsigned long, unsigned char)>
    63e6:	80 0f       	add	r24, r16
    63e8:	91 1f       	adc	r25, r17
    63ea:	df 91       	pop	r29
    63ec:	cf 91       	pop	r28
    63ee:	1f 91       	pop	r17
    63f0:	0f 91       	pop	r16
    63f2:	ff 90       	pop	r15
    63f4:	ef 90       	pop	r14
    63f6:	df 90       	pop	r13
    63f8:	cf 90       	pop	r12
    63fa:	08 95       	ret
    63fc:	df 91       	pop	r29
    63fe:	cf 91       	pop	r28
    6400:	1f 91       	pop	r17
    6402:	0f 91       	pop	r16
    6404:	ff 90       	pop	r15
    6406:	ef 90       	pop	r14
    6408:	df 90       	pop	r13
    640a:	cf 90       	pop	r12
    640c:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <Print::printNumber(unsigned long, unsigned char)>

00006410 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    6410:	21 15       	cp	r18, r1
    6412:	31 05       	cpc	r19, r1
    6414:	41 f4       	brne	.+16     	; 0x6426 <Print::print(unsigned long, int)+0x16>
    6416:	dc 01       	movw	r26, r24
    6418:	ed 91       	ld	r30, X+
    641a:	fc 91       	ld	r31, X
    641c:	01 90       	ld	r0, Z+
    641e:	f0 81       	ld	r31, Z
    6420:	e0 2d       	mov	r30, r0
    6422:	64 2f       	mov	r22, r20
    6424:	09 94       	ijmp
    6426:	0c 94 74 31 	jmp	0x62e8	; 0x62e8 <Print::printNumber(unsigned long, unsigned char)>

0000642a <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    642a:	9a 01       	movw	r18, r20
    642c:	ab 01       	movw	r20, r22
    642e:	70 e0       	ldi	r23, 0x00	; 0
    6430:	60 e0       	ldi	r22, 0x00	; 0
    6432:	0c 94 08 32 	jmp	0x6410	; 0x6410 <Print::print(unsigned long, int)>

00006436 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    6436:	2f 92       	push	r2
    6438:	3f 92       	push	r3
    643a:	4f 92       	push	r4
    643c:	5f 92       	push	r5
    643e:	6f 92       	push	r6
    6440:	7f 92       	push	r7
    6442:	8f 92       	push	r8
    6444:	9f 92       	push	r9
    6446:	af 92       	push	r10
    6448:	bf 92       	push	r11
    644a:	cf 92       	push	r12
    644c:	df 92       	push	r13
    644e:	ef 92       	push	r14
    6450:	ff 92       	push	r15
    6452:	1f 93       	push	r17
    6454:	cf 93       	push	r28
    6456:	df 93       	push	r29
    6458:	ec 01       	movw	r28, r24
    645a:	6a 01       	movw	r12, r20
    645c:	7b 01       	movw	r14, r22
    645e:	72 2e       	mov	r7, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    6460:	ab 01       	movw	r20, r22
    6462:	96 01       	movw	r18, r12
    6464:	cb 01       	movw	r24, r22
    6466:	b6 01       	movw	r22, r12
    6468:	0e 94 24 38 	call	0x7048	; 0x7048 <__unordsf2>
_ZN5Print5writeEPKc():
    646c:	6f ed       	ldi	r22, 0xDF	; 223
    646e:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    6470:	81 11       	cpse	r24, r1
    6472:	26 c0       	rjmp	.+76     	; 0x64c0 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    6474:	46 01       	movw	r8, r12
    6476:	57 01       	movw	r10, r14
    6478:	e8 94       	clt
    647a:	b7 f8       	bld	r11, 7
    647c:	2f ef       	ldi	r18, 0xFF	; 255
    647e:	3f ef       	ldi	r19, 0xFF	; 255
    6480:	4f e7       	ldi	r20, 0x7F	; 127
    6482:	5f e7       	ldi	r21, 0x7F	; 127
    6484:	c5 01       	movw	r24, r10
    6486:	b4 01       	movw	r22, r8
    6488:	0e 94 24 38 	call	0x7048	; 0x7048 <__unordsf2>
    648c:	81 11       	cpse	r24, r1
    648e:	0c c0       	rjmp	.+24     	; 0x64a8 <Print::printFloat(double, unsigned char)+0x72>
    6490:	2f ef       	ldi	r18, 0xFF	; 255
    6492:	3f ef       	ldi	r19, 0xFF	; 255
    6494:	4f e7       	ldi	r20, 0x7F	; 127
    6496:	5f e7       	ldi	r21, 0x7F	; 127
    6498:	c5 01       	movw	r24, r10
    649a:	b4 01       	movw	r22, r8
    649c:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
_ZN5Print5writeEPKc():
    64a0:	63 ee       	ldi	r22, 0xE3	; 227
    64a2:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    64a4:	18 16       	cp	r1, r24
    64a6:	64 f0       	brlt	.+24     	; 0x64c0 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    64a8:	2f ef       	ldi	r18, 0xFF	; 255
    64aa:	3f ef       	ldi	r19, 0xFF	; 255
    64ac:	4f e7       	ldi	r20, 0x7F	; 127
    64ae:	5f e4       	ldi	r21, 0x4F	; 79
    64b0:	c7 01       	movw	r24, r14
    64b2:	b6 01       	movw	r22, r12
    64b4:	0e 94 1c 37 	call	0x6e38	; 0x6e38 <__gesf2>
    64b8:	18 16       	cp	r1, r24
    64ba:	b4 f4       	brge	.+44     	; 0x64e8 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    64bc:	67 ee       	ldi	r22, 0xE7	; 231
    64be:	71 e0       	ldi	r23, 0x01	; 1
    64c0:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    64c2:	df 91       	pop	r29
    64c4:	cf 91       	pop	r28
    64c6:	1f 91       	pop	r17
    64c8:	ff 90       	pop	r15
    64ca:	ef 90       	pop	r14
    64cc:	df 90       	pop	r13
    64ce:	cf 90       	pop	r12
    64d0:	bf 90       	pop	r11
    64d2:	af 90       	pop	r10
    64d4:	9f 90       	pop	r9
    64d6:	8f 90       	pop	r8
    64d8:	7f 90       	pop	r7
    64da:	6f 90       	pop	r6
    64dc:	5f 90       	pop	r5
    64de:	4f 90       	pop	r4
    64e0:	3f 90       	pop	r3
    64e2:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    64e4:	0c 94 3a 31 	jmp	0x6274	; 0x6274 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    64e8:	2f ef       	ldi	r18, 0xFF	; 255
    64ea:	3f ef       	ldi	r19, 0xFF	; 255
    64ec:	4f e7       	ldi	r20, 0x7F	; 127
    64ee:	5f ec       	ldi	r21, 0xCF	; 207
    64f0:	c7 01       	movw	r24, r14
    64f2:	b6 01       	movw	r22, r12
    64f4:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
    64f8:	87 fd       	sbrc	r24, 7
    64fa:	e0 cf       	rjmp	.-64     	; 0x64bc <Print::printFloat(double, unsigned char)+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    64fc:	20 e0       	ldi	r18, 0x00	; 0
    64fe:	30 e0       	ldi	r19, 0x00	; 0
    6500:	a9 01       	movw	r20, r18
    6502:	c7 01       	movw	r24, r14
    6504:	b6 01       	movw	r22, r12
    6506:	0e 94 bd 35 	call	0x6b7a	; 0x6b7a <__cmpsf2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    650a:	31 2c       	mov	r3, r1
    650c:	21 2c       	mov	r2, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    650e:	87 ff       	sbrs	r24, 7
    6510:	09 c0       	rjmp	.+18     	; 0x6524 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    6512:	6d e2       	ldi	r22, 0x2D	; 45
    6514:	ce 01       	movw	r24, r28
    6516:	0e 94 6d 31 	call	0x62da	; 0x62da <Print::print(char)>
    651a:	1c 01       	movw	r2, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    651c:	f7 fa       	bst	r15, 7
    651e:	f0 94       	com	r15
    6520:	f7 f8       	bld	r15, 7
    6522:	f0 94       	com	r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6524:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6526:	60 e0       	ldi	r22, 0x00	; 0
    6528:	70 e0       	ldi	r23, 0x00	; 0
    652a:	80 e0       	ldi	r24, 0x00	; 0
    652c:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    652e:	71 16       	cp	r7, r17
    6530:	41 f0       	breq	.+16     	; 0x6542 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    6532:	20 e0       	ldi	r18, 0x00	; 0
    6534:	30 e0       	ldi	r19, 0x00	; 0
    6536:	40 e2       	ldi	r20, 0x20	; 32
    6538:	51 e4       	ldi	r21, 0x41	; 65
    653a:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <__divsf3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    653e:	1f 5f       	subi	r17, 0xFF	; 255
    6540:	f6 cf       	rjmp	.-20     	; 0x652e <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    6542:	a7 01       	movw	r20, r14
    6544:	96 01       	movw	r18, r12
    6546:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    654a:	2b 01       	movw	r4, r22
    654c:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    654e:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <__fixunssfsi>
    6552:	4b 01       	movw	r8, r22
    6554:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    6556:	2a e0       	ldi	r18, 0x0A	; 10
    6558:	bc 01       	movw	r22, r24
    655a:	a4 01       	movw	r20, r8
    655c:	ce 01       	movw	r24, r28
    655e:	0e 94 74 31 	call	0x62e8	; 0x62e8 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    6562:	7c 01       	movw	r14, r24
    6564:	e2 0c       	add	r14, r2
    6566:	f3 1c       	adc	r15, r3
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    6568:	11 23       	and	r17, r17
    656a:	b1 f1       	breq	.+108    	; 0x65d8 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    656c:	c5 01       	movw	r24, r10
    656e:	b4 01       	movw	r22, r8
    6570:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__floatunsisf>
    6574:	9b 01       	movw	r18, r22
    6576:	ac 01       	movw	r20, r24
    6578:	c3 01       	movw	r24, r6
    657a:	b2 01       	movw	r22, r4
    657c:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    6580:	4b 01       	movw	r8, r22
    6582:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    6584:	6e e2       	ldi	r22, 0x2E	; 46
    6586:	ce 01       	movw	r24, r28
    6588:	0e 94 6d 31 	call	0x62da	; 0x62da <Print::print(char)>
    658c:	e8 0e       	add	r14, r24
    658e:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    6590:	11 50       	subi	r17, 0x01	; 1
    6592:	10 f1       	brcs	.+68     	; 0x65d8 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    6594:	20 e0       	ldi	r18, 0x00	; 0
    6596:	30 e0       	ldi	r19, 0x00	; 0
    6598:	40 e2       	ldi	r20, 0x20	; 32
    659a:	51 e4       	ldi	r21, 0x41	; 65
    659c:	c5 01       	movw	r24, r10
    659e:	b4 01       	movw	r22, r8
    65a0:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <__mulsf3>
    65a4:	2b 01       	movw	r4, r22
    65a6:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    65a8:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <__fixunssfsi>
    65ac:	4b 01       	movw	r8, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    65ae:	4a e0       	ldi	r20, 0x0A	; 10
    65b0:	50 e0       	ldi	r21, 0x00	; 0
    65b2:	ce 01       	movw	r24, r28
    65b4:	0e 94 15 32 	call	0x642a	; 0x642a <Print::print(unsigned int, int)>
    65b8:	e8 0e       	add	r14, r24
    65ba:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    65bc:	b4 01       	movw	r22, r8
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	0e 94 6a 36 	call	0x6cd4	; 0x6cd4 <__floatunsisf>
    65c6:	9b 01       	movw	r18, r22
    65c8:	ac 01       	movw	r20, r24
    65ca:	c3 01       	movw	r24, r6
    65cc:	b2 01       	movw	r22, r4
    65ce:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <__subsf3>
    65d2:	4b 01       	movw	r8, r22
    65d4:	5c 01       	movw	r10, r24
    65d6:	dc cf       	rjmp	.-72     	; 0x6590 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    65d8:	c7 01       	movw	r24, r14
    65da:	df 91       	pop	r29
    65dc:	cf 91       	pop	r28
    65de:	1f 91       	pop	r17
    65e0:	ff 90       	pop	r15
    65e2:	ef 90       	pop	r14
    65e4:	df 90       	pop	r13
    65e6:	cf 90       	pop	r12
    65e8:	bf 90       	pop	r11
    65ea:	af 90       	pop	r10
    65ec:	9f 90       	pop	r9
    65ee:	8f 90       	pop	r8
    65f0:	7f 90       	pop	r7
    65f2:	6f 90       	pop	r6
    65f4:	5f 90       	pop	r5
    65f6:	4f 90       	pop	r4
    65f8:	3f 90       	pop	r3
    65fa:	2f 90       	pop	r2
    65fc:	08 95       	ret

000065fe <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    65fe:	0c 94 1b 32 	jmp	0x6436	; 0x6436 <Print::printFloat(double, unsigned char)>

00006602 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6602:	4f 92       	push	r4
    6604:	5f 92       	push	r5
    6606:	6f 92       	push	r6
    6608:	7f 92       	push	r7
    660a:	af 92       	push	r10
    660c:	bf 92       	push	r11
    660e:	cf 92       	push	r12
    6610:	df 92       	push	r13
    6612:	ef 92       	push	r14
    6614:	ff 92       	push	r15
    6616:	0f 93       	push	r16
    6618:	1f 93       	push	r17
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    661e:	cd b7       	in	r28, 0x3d	; 61
    6620:	de b7       	in	r29, 0x3e	; 62
    6622:	29 01       	movw	r4, r18
    6624:	3a 01       	movw	r6, r20
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6626:	9b 01       	movw	r18, r22
    6628:	ac 01       	movw	r20, r24
    662a:	24 19       	sub	r18, r4
    662c:	35 09       	sbc	r19, r5
    662e:	46 09       	sbc	r20, r6
    6630:	57 09       	sbc	r21, r7
    6632:	89 89       	ldd	r24, Y+17	; 0x11
    6634:	9a 89       	ldd	r25, Y+18	; 0x12
    6636:	ab 89       	ldd	r26, Y+19	; 0x13
    6638:	bc 89       	ldd	r27, Y+20	; 0x14
    663a:	bc 01       	movw	r22, r24
    663c:	cd 01       	movw	r24, r26
    663e:	6a 19       	sub	r22, r10
    6640:	7b 09       	sbc	r23, r11
    6642:	8c 09       	sbc	r24, r12
    6644:	9d 09       	sbc	r25, r13
    6646:	0e 94 65 38 	call	0x70ca	; 0x70ca <__mulsi3>
    664a:	a8 01       	movw	r20, r16
    664c:	97 01       	movw	r18, r14
    664e:	24 19       	sub	r18, r4
    6650:	35 09       	sbc	r19, r5
    6652:	46 09       	sbc	r20, r6
    6654:	57 09       	sbc	r21, r7
    6656:	0e 94 97 38 	call	0x712e	; 0x712e <__divmodsi4>
    665a:	ca 01       	movw	r24, r20
    665c:	b9 01       	movw	r22, r18
    665e:	6a 0d       	add	r22, r10
    6660:	7b 1d       	adc	r23, r11
    6662:	8c 1d       	adc	r24, r12
    6664:	9d 1d       	adc	r25, r13
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    6666:	df 91       	pop	r29
    6668:	cf 91       	pop	r28
    666a:	1f 91       	pop	r17
    666c:	0f 91       	pop	r16
    666e:	ff 90       	pop	r15
    6670:	ef 90       	pop	r14
    6672:	df 90       	pop	r13
    6674:	cf 90       	pop	r12
    6676:	bf 90       	pop	r11
    6678:	af 90       	pop	r10
    667a:	7f 90       	pop	r7
    667c:	6f 90       	pop	r6
    667e:	5f 90       	pop	r5
    6680:	4f 90       	pop	r4
    6682:	08 95       	ret

00006684 <yield>:
__empty():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    6684:	08 95       	ret

00006686 <initVariant>:
initVariant():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6686:	08 95       	ret

00006688 <main>:
main():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    6688:	0e 94 16 34 	call	0x682c	; 0x682c <init>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    668c:	0e 94 43 33 	call	0x6686	; 0x6686 <initVariant>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    6690:	0e 94 67 11 	call	0x22ce	; 0x22ce <setup>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    6694:	c0 e7       	ldi	r28, 0x70	; 112
    6696:	df e2       	ldi	r29, 0x2F	; 47
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    6698:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <loop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    669c:	20 97       	sbiw	r28, 0x00	; 0
    669e:	e1 f3       	breq	.-8      	; 0x6698 <main+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    66a0:	0e 94 70 2f 	call	0x5ee0	; 0x5ee0 <serialEventRun()>
    66a4:	f9 cf       	rjmp	.-14     	; 0x6698 <main+0x10>

000066a6 <operator new[](unsigned int)>:
_Znaj():
    66a6:	0c 94 13 39 	jmp	0x7226	; 0x7226 <malloc>

000066aa <operator delete(void*, unsigned int)>:
_ZdlPv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    66aa:	0c 94 af 39 	jmp	0x735e	; 0x735e <free>

000066ae <__vector_16>:
__vector_16():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    66ae:	1f 92       	push	r1
    66b0:	0f 92       	push	r0
    66b2:	0f b6       	in	r0, 0x3f	; 63
    66b4:	0f 92       	push	r0
    66b6:	11 24       	eor	r1, r1
    66b8:	2f 93       	push	r18
    66ba:	3f 93       	push	r19
    66bc:	8f 93       	push	r24
    66be:	9f 93       	push	r25
    66c0:	af 93       	push	r26
    66c2:	bf 93       	push	r27
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    66c4:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_millis>
    66c8:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_millis+0x1>
    66cc:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_millis+0x2>
    66d0:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    66d4:	30 91 f7 05 	lds	r19, 0x05F7	; 0x8005f7 <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    66d8:	23 e0       	ldi	r18, 0x03	; 3
    66da:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    66dc:	2d 37       	cpi	r18, 0x7D	; 125
    66de:	68 f1       	brcs	.+90     	; 0x673a <__vector_16+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    66e0:	26 e8       	ldi	r18, 0x86	; 134
    66e2:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    66e4:	02 96       	adiw	r24, 0x02	; 2
    66e6:	a1 1d       	adc	r26, r1
    66e8:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    66ea:	20 93 f7 05 	sts	0x05F7, r18	; 0x8005f7 <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    66ee:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <timer0_millis>
    66f2:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <timer0_millis+0x1>
    66f6:	a0 93 fa 05 	sts	0x05FA, r26	; 0x8005fa <timer0_millis+0x2>
    66fa:	b0 93 fb 05 	sts	0x05FB, r27	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    66fe:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <timer0_overflow_count>
    6702:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x1>
    6706:	a0 91 f5 05 	lds	r26, 0x05F5	; 0x8005f5 <timer0_overflow_count+0x2>
    670a:	b0 91 f6 05 	lds	r27, 0x05F6	; 0x8005f6 <timer0_overflow_count+0x3>
    670e:	01 96       	adiw	r24, 0x01	; 1
    6710:	a1 1d       	adc	r26, r1
    6712:	b1 1d       	adc	r27, r1
    6714:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <timer0_overflow_count>
    6718:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <timer0_overflow_count+0x1>
    671c:	a0 93 f5 05 	sts	0x05F5, r26	; 0x8005f5 <timer0_overflow_count+0x2>
    6720:	b0 93 f6 05 	sts	0x05F6, r27	; 0x8005f6 <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    6724:	bf 91       	pop	r27
    6726:	af 91       	pop	r26
    6728:	9f 91       	pop	r25
    672a:	8f 91       	pop	r24
    672c:	3f 91       	pop	r19
    672e:	2f 91       	pop	r18
    6730:	0f 90       	pop	r0
    6732:	0f be       	out	0x3f, r0	; 63
    6734:	0f 90       	pop	r0
    6736:	1f 90       	pop	r1
    6738:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    673a:	01 96       	adiw	r24, 0x01	; 1
    673c:	a1 1d       	adc	r26, r1
    673e:	b1 1d       	adc	r27, r1
    6740:	d4 cf       	rjmp	.-88     	; 0x66ea <__vector_16+0x3c>

00006742 <millis>:
millis():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    6742:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    6744:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    6746:	60 91 f8 05 	lds	r22, 0x05F8	; 0x8005f8 <timer0_millis>
    674a:	70 91 f9 05 	lds	r23, 0x05F9	; 0x8005f9 <timer0_millis+0x1>
    674e:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <timer0_millis+0x2>
    6752:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    6756:	2f bf       	out	0x3f, r18	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    6758:	08 95       	ret

0000675a <micros>:
micros():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    675a:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    675c:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    675e:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <timer0_overflow_count>
    6762:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x1>
    6766:	a0 91 f5 05 	lds	r26, 0x05F5	; 0x8005f5 <timer0_overflow_count+0x2>
    676a:	b0 91 f6 05 	lds	r27, 0x05F6	; 0x8005f6 <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    676e:	26 b5       	in	r18, 0x26	; 38
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6770:	a8 9b       	sbis	0x15, 0	; 21
    6772:	05 c0       	rjmp	.+10     	; 0x677e <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    6774:	2f 3f       	cpi	r18, 0xFF	; 255
    6776:	19 f0       	breq	.+6      	; 0x677e <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    6778:	01 96       	adiw	r24, 0x01	; 1
    677a:	a1 1d       	adc	r26, r1
    677c:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    677e:	3f bf       	out	0x3f, r19	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    6780:	ba 2f       	mov	r27, r26
    6782:	a9 2f       	mov	r26, r25
    6784:	98 2f       	mov	r25, r24
    6786:	88 27       	eor	r24, r24
    6788:	bc 01       	movw	r22, r24
    678a:	cd 01       	movw	r24, r26
    678c:	62 0f       	add	r22, r18
    678e:	71 1d       	adc	r23, r1
    6790:	81 1d       	adc	r24, r1
    6792:	91 1d       	adc	r25, r1
    6794:	42 e0       	ldi	r20, 0x02	; 2
    6796:	66 0f       	add	r22, r22
    6798:	77 1f       	adc	r23, r23
    679a:	88 1f       	adc	r24, r24
    679c:	99 1f       	adc	r25, r25
    679e:	4a 95       	dec	r20
    67a0:	d1 f7       	brne	.-12     	; 0x6796 <micros+0x3c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    67a2:	08 95       	ret

000067a4 <delay>:
delay():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    67a4:	8f 92       	push	r8
    67a6:	9f 92       	push	r9
    67a8:	af 92       	push	r10
    67aa:	bf 92       	push	r11
    67ac:	cf 92       	push	r12
    67ae:	df 92       	push	r13
    67b0:	ef 92       	push	r14
    67b2:	ff 92       	push	r15
    67b4:	6b 01       	movw	r12, r22
    67b6:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    67b8:	0e 94 ad 33 	call	0x675a	; 0x675a <micros>
    67bc:	4b 01       	movw	r8, r22
    67be:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    67c0:	c1 14       	cp	r12, r1
    67c2:	d1 04       	cpc	r13, r1
    67c4:	e1 04       	cpc	r14, r1
    67c6:	f1 04       	cpc	r15, r1
    67c8:	e9 f0       	breq	.+58     	; 0x6804 <delay+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    67ca:	0e 94 42 33 	call	0x6684	; 0x6684 <yield>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    67ce:	0e 94 ad 33 	call	0x675a	; 0x675a <micros>
    67d2:	68 19       	sub	r22, r8
    67d4:	79 09       	sbc	r23, r9
    67d6:	8a 09       	sbc	r24, r10
    67d8:	9b 09       	sbc	r25, r11
    67da:	68 3e       	cpi	r22, 0xE8	; 232
    67dc:	73 40       	sbci	r23, 0x03	; 3
    67de:	81 05       	cpc	r24, r1
    67e0:	91 05       	cpc	r25, r1
    67e2:	70 f3       	brcs	.-36     	; 0x67c0 <delay+0x1c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    67e4:	21 e0       	ldi	r18, 0x01	; 1
    67e6:	c2 1a       	sub	r12, r18
    67e8:	d1 08       	sbc	r13, r1
    67ea:	e1 08       	sbc	r14, r1
    67ec:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    67ee:	88 ee       	ldi	r24, 0xE8	; 232
    67f0:	88 0e       	add	r8, r24
    67f2:	83 e0       	ldi	r24, 0x03	; 3
    67f4:	98 1e       	adc	r9, r24
    67f6:	a1 1c       	adc	r10, r1
    67f8:	b1 1c       	adc	r11, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    67fa:	c1 14       	cp	r12, r1
    67fc:	d1 04       	cpc	r13, r1
    67fe:	e1 04       	cpc	r14, r1
    6800:	f1 04       	cpc	r15, r1
    6802:	29 f7       	brne	.-54     	; 0x67ce <delay+0x2a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    6804:	ff 90       	pop	r15
    6806:	ef 90       	pop	r14
    6808:	df 90       	pop	r13
    680a:	cf 90       	pop	r12
    680c:	bf 90       	pop	r11
    680e:	af 90       	pop	r10
    6810:	9f 90       	pop	r9
    6812:	8f 90       	pop	r8
    6814:	08 95       	ret

00006816 <delayMicroseconds>:
delayMicroseconds():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    6816:	82 30       	cpi	r24, 0x02	; 2
    6818:	91 05       	cpc	r25, r1
    681a:	38 f0       	brcs	.+14     	; 0x682a <delayMicroseconds+0x14>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    681c:	88 0f       	add	r24, r24
    681e:	99 1f       	adc	r25, r25
    6820:	88 0f       	add	r24, r24
    6822:	99 1f       	adc	r25, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    6824:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    6826:	01 97       	sbiw	r24, 0x01	; 1
    6828:	f1 f7       	brne	.-4      	; 0x6826 <delayMicroseconds+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    682a:	08 95       	ret

0000682c <init>:
init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    682c:	78 94       	sei
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    682e:	84 b5       	in	r24, 0x24	; 36
    6830:	83 60       	ori	r24, 0x03	; 3
    6832:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    6834:	85 b5       	in	r24, 0x25	; 37
    6836:	83 60       	ori	r24, 0x03	; 3
    6838:	85 bd       	out	0x25, r24	; 37
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    683a:	ee e6       	ldi	r30, 0x6E	; 110
    683c:	f0 e0       	ldi	r31, 0x00	; 0
    683e:	80 81       	ld	r24, Z
    6840:	81 60       	ori	r24, 0x01	; 1
    6842:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    6844:	e1 e8       	ldi	r30, 0x81	; 129
    6846:	f0 e0       	ldi	r31, 0x00	; 0
    6848:	82 e0       	ldi	r24, 0x02	; 2
    684a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    684c:	80 81       	ld	r24, Z
    684e:	81 60       	ori	r24, 0x01	; 1
    6850:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    6852:	e0 e8       	ldi	r30, 0x80	; 128
    6854:	f0 e0       	ldi	r31, 0x00	; 0
    6856:	80 81       	ld	r24, Z
    6858:	81 60       	ori	r24, 0x01	; 1
    685a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    685c:	e1 eb       	ldi	r30, 0xB1	; 177
    685e:	f0 e0       	ldi	r31, 0x00	; 0
    6860:	80 81       	ld	r24, Z
    6862:	84 60       	ori	r24, 0x04	; 4
    6864:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    6866:	e0 eb       	ldi	r30, 0xB0	; 176
    6868:	f0 e0       	ldi	r31, 0x00	; 0
    686a:	80 81       	ld	r24, Z
    686c:	81 60       	ori	r24, 0x01	; 1
    686e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    6870:	e1 e9       	ldi	r30, 0x91	; 145
    6872:	f0 e0       	ldi	r31, 0x00	; 0
    6874:	80 81       	ld	r24, Z
    6876:	83 60       	ori	r24, 0x03	; 3
    6878:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    687a:	e0 e9       	ldi	r30, 0x90	; 144
    687c:	f0 e0       	ldi	r31, 0x00	; 0
    687e:	80 81       	ld	r24, Z
    6880:	81 60       	ori	r24, 0x01	; 1
    6882:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    6884:	e1 ea       	ldi	r30, 0xA1	; 161
    6886:	f0 e0       	ldi	r31, 0x00	; 0
    6888:	80 81       	ld	r24, Z
    688a:	83 60       	ori	r24, 0x03	; 3
    688c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    688e:	e0 ea       	ldi	r30, 0xA0	; 160
    6890:	f0 e0       	ldi	r31, 0x00	; 0
    6892:	80 81       	ld	r24, Z
    6894:	81 60       	ori	r24, 0x01	; 1
    6896:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    6898:	87 e8       	ldi	r24, 0x87	; 135
    689a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    689e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    68a2:	08 95       	ret

000068a4 <analogRead>:
analogRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    68a4:	88 30       	cpi	r24, 0x08	; 8
    68a6:	38 f0       	brcs	.+14     	; 0x68b6 <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    68a8:	92 ef       	ldi	r25, 0xF2	; 242
    68aa:	98 0f       	add	r25, r24
    68ac:	9b 30       	cpi	r25, 0x0B	; 11
    68ae:	d8 f0       	brcs	.+54     	; 0x68e6 <analogRead+0x42>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 4)
    68b0:	89 31       	cpi	r24, 0x19	; 25
    68b2:	d8 f0       	brcs	.+54     	; 0x68ea <analogRead+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 6)
    68b4:	83 51       	subi	r24, 0x13	; 19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 12)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    68b6:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <analog_reference>
    68ba:	90 e4       	ldi	r25, 0x40	; 64
    68bc:	29 9f       	mul	r18, r25
    68be:	90 01       	movw	r18, r0
    68c0:	11 24       	eor	r1, r1
    68c2:	87 70       	andi	r24, 0x07	; 7
    68c4:	82 2b       	or	r24, r18
    68c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 12)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    68ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    68ce:	80 64       	ori	r24, 0x40	; 64
    68d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    68d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    68d8:	86 fd       	sbrc	r24, 6
    68da:	fc cf       	rjmp	.-8      	; 0x68d4 <analogRead+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    68dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    68e0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    68e4:	08 95       	ret
    68e6:	89 2f       	mov	r24, r25
    68e8:	e6 cf       	rjmp	.-52     	; 0x68b6 <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    68ea:	8f ef       	ldi	r24, 0xFF	; 255
    68ec:	e4 cf       	rjmp	.-56     	; 0x68b6 <analogRead+0x12>

000068ee <turnOffPWM>:
turnOffPWM():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    68ee:	82 50       	subi	r24, 0x02	; 2
    68f0:	8d 30       	cpi	r24, 0x0D	; 13
    68f2:	08 f0       	brcs	.+2      	; 0x68f6 <turnOffPWM+0x8>
    68f4:	3e c0       	rjmp	.+124    	; 0x6972 <turnOffPWM+0x84>
    68f6:	e8 2f       	mov	r30, r24
    68f8:	f0 e0       	ldi	r31, 0x00	; 0
    68fa:	ef 57       	subi	r30, 0x7F	; 127
    68fc:	fb 4c       	sbci	r31, 0xCB	; 203
    68fe:	0c 94 b6 38 	jmp	0x716c	; 0x716c <__tablejump2__>
    6902:	b6 34       	cpi	r27, 0x46	; 70
    6904:	ba 34       	cpi	r27, 0x4A	; 74
    6906:	8e 34       	cpi	r24, 0x4E	; 78
    6908:	94 34       	cpi	r25, 0x44	; 68
    690a:	b9 34       	cpi	r27, 0x49	; 73
    690c:	b9 34       	cpi	r27, 0x49	; 73
    690e:	98 34       	cpi	r25, 0x48	; 72
    6910:	9e 34       	cpi	r25, 0x4E	; 78
    6912:	a2 34       	cpi	r26, 0x42	; 66
    6914:	a8 34       	cpi	r26, 0x48	; 72
    6916:	b9 34       	cpi	r27, 0x49	; 73
    6918:	ac 34       	cpi	r26, 0x4C	; 76
    691a:	b2 34       	cpi	r27, 0x42	; 66
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    691c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    6920:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    6922:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    6926:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    6928:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    692c:	8f 7d       	andi	r24, 0xDF	; 223
    692e:	f9 cf       	rjmp	.-14     	; 0x6922 <turnOffPWM+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    6930:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    6934:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    6936:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    693a:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    693c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    6940:	8f 7d       	andi	r24, 0xDF	; 223
    6942:	f9 cf       	rjmp	.-14     	; 0x6936 <turnOffPWM+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    6944:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    6948:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    694a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    694e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    6950:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    6954:	8f 7d       	andi	r24, 0xDF	; 223
    6956:	f9 cf       	rjmp	.-14     	; 0x694a <turnOffPWM+0x5c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    6958:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    695c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    695e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
    6962:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    6964:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    6968:	8f 7d       	andi	r24, 0xDF	; 223
    696a:	f9 cf       	rjmp	.-14     	; 0x695e <turnOffPWM+0x70>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    696c:	84 b5       	in	r24, 0x24	; 36
    696e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    6970:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    6972:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    6974:	84 b5       	in	r24, 0x24	; 36
    6976:	8f 7d       	andi	r24, 0xDF	; 223
    6978:	fb cf       	rjmp	.-10     	; 0x6970 <turnOffPWM+0x82>

0000697a <pinMode>:
pinMode():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    697a:	cf 93       	push	r28
    697c:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    697e:	90 e0       	ldi	r25, 0x00	; 0
    6980:	fc 01       	movw	r30, r24
    6982:	ee 55       	subi	r30, 0x5E	; 94
    6984:	fc 4e       	sbci	r31, 0xEC	; 236
    6986:	24 91       	lpm	r18, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    6988:	83 54       	subi	r24, 0x43	; 67
    698a:	9c 4e       	sbci	r25, 0xEC	; 236
    698c:	fc 01       	movw	r30, r24
    698e:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    6990:	88 23       	and	r24, r24
    6992:	c9 f0       	breq	.+50     	; 0x69c6 <pinMode+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    6994:	90 e0       	ldi	r25, 0x00	; 0
    6996:	88 0f       	add	r24, r24
    6998:	99 1f       	adc	r25, r25
    699a:	fc 01       	movw	r30, r24
    699c:	e0 51       	subi	r30, 0x10	; 16
    699e:	fc 4e       	sbci	r31, 0xEC	; 236
    69a0:	a5 91       	lpm	r26, Z+
    69a2:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    69a4:	fc 01       	movw	r30, r24
    69a6:	ec 51       	subi	r30, 0x1C	; 28
    69a8:	fc 4e       	sbci	r31, 0xEC	; 236
    69aa:	c5 91       	lpm	r28, Z+
    69ac:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    69ae:	61 11       	cpse	r22, r1
    69b0:	0d c0       	rjmp	.+26     	; 0x69cc <pinMode+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    69b2:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    69b4:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    69b6:	8c 91       	ld	r24, X
    69b8:	20 95       	com	r18
    69ba:	82 23       	and	r24, r18
    69bc:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    69be:	88 81       	ld	r24, Y
    69c0:	28 23       	and	r18, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    69c2:	28 83       	st	Y, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    69c4:	9f bf       	out	0x3f, r25	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    69c6:	df 91       	pop	r29
    69c8:	cf 91       	pop	r28
    69ca:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    69cc:	62 30       	cpi	r22, 0x02	; 2
    69ce:	51 f4       	brne	.+20     	; 0x69e4 <pinMode+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    69d0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    69d2:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    69d4:	3c 91       	ld	r19, X
    69d6:	82 2f       	mov	r24, r18
    69d8:	80 95       	com	r24
    69da:	83 23       	and	r24, r19
    69dc:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    69de:	e8 81       	ld	r30, Y
    69e0:	2e 2b       	or	r18, r30
    69e2:	ef cf       	rjmp	.-34     	; 0x69c2 <pinMode+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    69e4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    69e6:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    69e8:	ec 91       	ld	r30, X
    69ea:	2e 2b       	or	r18, r30
    69ec:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    69ee:	8f bf       	out	0x3f, r24	; 63
    69f0:	ea cf       	rjmp	.-44     	; 0x69c6 <pinMode+0x4c>

000069f2 <digitalWrite>:
digitalWrite():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    69f2:	1f 93       	push	r17
    69f4:	cf 93       	push	r28
    69f6:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    69f8:	28 2f       	mov	r18, r24
    69fa:	30 e0       	ldi	r19, 0x00	; 0
    69fc:	f9 01       	movw	r30, r18
    69fe:	e9 57       	subi	r30, 0x79	; 121
    6a00:	fc 4e       	sbci	r31, 0xEC	; 236
    6a02:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    6a04:	f9 01       	movw	r30, r18
    6a06:	ee 55       	subi	r30, 0x5E	; 94
    6a08:	fc 4e       	sbci	r31, 0xEC	; 236
    6a0a:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    6a0c:	f9 01       	movw	r30, r18
    6a0e:	e3 54       	subi	r30, 0x43	; 67
    6a10:	fc 4e       	sbci	r31, 0xEC	; 236
    6a12:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    6a14:	cc 23       	and	r28, r28
    6a16:	a9 f0       	breq	.+42     	; 0x6a42 <digitalWrite+0x50>
    6a18:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6a1a:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    6a1c:	0e 94 77 34 	call	0x68ee	; 0x68ee <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    6a20:	ec 2f       	mov	r30, r28
    6a22:	f0 e0       	ldi	r31, 0x00	; 0
    6a24:	ee 0f       	add	r30, r30
    6a26:	ff 1f       	adc	r31, r31
    6a28:	ec 51       	subi	r30, 0x1C	; 28
    6a2a:	fc 4e       	sbci	r31, 0xEC	; 236
    6a2c:	a5 91       	lpm	r26, Z+
    6a2e:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    6a30:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    6a32:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    6a34:	ec 91       	ld	r30, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    6a36:	11 11       	cpse	r17, r1
    6a38:	08 c0       	rjmp	.+16     	; 0x6a4a <digitalWrite+0x58>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    6a3a:	d0 95       	com	r29
    6a3c:	de 23       	and	r29, r30
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    6a3e:	dc 93       	st	X, r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    6a40:	8f bf       	out	0x3f, r24	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    6a42:	df 91       	pop	r29
    6a44:	cf 91       	pop	r28
    6a46:	1f 91       	pop	r17
    6a48:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    6a4a:	de 2b       	or	r29, r30
    6a4c:	f8 cf       	rjmp	.-16     	; 0x6a3e <digitalWrite+0x4c>

00006a4e <digitalRead>:
digitalRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    6a4e:	cf 93       	push	r28
    6a50:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    6a52:	28 2f       	mov	r18, r24
    6a54:	30 e0       	ldi	r19, 0x00	; 0
    6a56:	f9 01       	movw	r30, r18
    6a58:	e9 57       	subi	r30, 0x79	; 121
    6a5a:	fc 4e       	sbci	r31, 0xEC	; 236
    6a5c:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6a5e:	f9 01       	movw	r30, r18
    6a60:	ee 55       	subi	r30, 0x5E	; 94
    6a62:	fc 4e       	sbci	r31, 0xEC	; 236
    6a64:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    6a66:	f9 01       	movw	r30, r18
    6a68:	e3 54       	subi	r30, 0x43	; 67
    6a6a:	fc 4e       	sbci	r31, 0xEC	; 236
    6a6c:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6a6e:	cc 23       	and	r28, r28
    6a70:	a1 f0       	breq	.+40     	; 0x6a9a <digitalRead+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6a72:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    6a74:	0e 94 77 34 	call	0x68ee	; 0x68ee <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6a78:	ec 2f       	mov	r30, r28
    6a7a:	f0 e0       	ldi	r31, 0x00	; 0
    6a7c:	ee 0f       	add	r30, r30
    6a7e:	ff 1f       	adc	r31, r31
    6a80:	e8 52       	subi	r30, 0x28	; 40
    6a82:	fc 4e       	sbci	r31, 0xEC	; 236
    6a84:	a5 91       	lpm	r26, Z+
    6a86:	b4 91       	lpm	r27, Z
    6a88:	ec 91       	ld	r30, X
    6a8a:	ed 23       	and	r30, r29
    6a8c:	81 e0       	ldi	r24, 0x01	; 1
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	09 f4       	brne	.+2      	; 0x6a94 <digitalRead+0x46>
    6a92:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    6a94:	df 91       	pop	r29
    6a96:	cf 91       	pop	r28
    6a98:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    6a9a:	80 e0       	ldi	r24, 0x00	; 0
    6a9c:	90 e0       	ldi	r25, 0x00	; 0
    6a9e:	fa cf       	rjmp	.-12     	; 0x6a94 <digitalRead+0x46>

00006aa0 <__subsf3>:
__subsf3():
    6aa0:	50 58       	subi	r21, 0x80	; 128

00006aa2 <__addsf3>:
    6aa2:	bb 27       	eor	r27, r27
    6aa4:	aa 27       	eor	r26, r26
    6aa6:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <__addsf3x>
    6aaa:	0c 94 e2 36 	jmp	0x6dc4	; 0x6dc4 <__fp_round>
__addsf3():
    6aae:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <__fp_pscA>
    6ab2:	38 f0       	brcs	.+14     	; 0x6ac2 <__addsf3+0x20>
    6ab4:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fp_pscB>
    6ab8:	20 f0       	brcs	.+8      	; 0x6ac2 <__addsf3+0x20>
    6aba:	39 f4       	brne	.+14     	; 0x6aca <__addsf3+0x28>
    6abc:	9f 3f       	cpi	r25, 0xFF	; 255
    6abe:	19 f4       	brne	.+6      	; 0x6ac6 <__addsf3+0x24>
    6ac0:	26 f4       	brtc	.+8      	; 0x6aca <__addsf3+0x28>
    6ac2:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <__fp_nan>
    6ac6:	0e f4       	brtc	.+2      	; 0x6aca <__addsf3+0x28>
    6ac8:	e0 95       	com	r30
    6aca:	e7 fb       	bst	r30, 7
    6acc:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_inf>

00006ad0 <__addsf3x>:
__addsf3x():
    6ad0:	e9 2f       	mov	r30, r25
    6ad2:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__fp_split3>
    6ad6:	58 f3       	brcs	.-42     	; 0x6aae <__addsf3+0xc>
    6ad8:	ba 17       	cp	r27, r26
    6ada:	62 07       	cpc	r22, r18
    6adc:	73 07       	cpc	r23, r19
    6ade:	84 07       	cpc	r24, r20
    6ae0:	95 07       	cpc	r25, r21
    6ae2:	20 f0       	brcs	.+8      	; 0x6aec <__addsf3x+0x1c>
    6ae4:	79 f4       	brne	.+30     	; 0x6b04 <__addsf3x+0x34>
    6ae6:	a6 f5       	brtc	.+104    	; 0x6b50 <__addsf3x+0x80>
    6ae8:	0c 94 15 37 	jmp	0x6e2a	; 0x6e2a <__fp_zero>
    6aec:	0e f4       	brtc	.+2      	; 0x6af0 <__addsf3x+0x20>
    6aee:	e0 95       	com	r30
    6af0:	0b 2e       	mov	r0, r27
    6af2:	ba 2f       	mov	r27, r26
    6af4:	a0 2d       	mov	r26, r0
    6af6:	0b 01       	movw	r0, r22
    6af8:	b9 01       	movw	r22, r18
    6afa:	90 01       	movw	r18, r0
    6afc:	0c 01       	movw	r0, r24
    6afe:	ca 01       	movw	r24, r20
    6b00:	a0 01       	movw	r20, r0
    6b02:	11 24       	eor	r1, r1
    6b04:	ff 27       	eor	r31, r31
    6b06:	59 1b       	sub	r21, r25
    6b08:	99 f0       	breq	.+38     	; 0x6b30 <__addsf3x+0x60>
    6b0a:	59 3f       	cpi	r21, 0xF9	; 249
    6b0c:	50 f4       	brcc	.+20     	; 0x6b22 <__addsf3x+0x52>
    6b0e:	50 3e       	cpi	r21, 0xE0	; 224
    6b10:	68 f1       	brcs	.+90     	; 0x6b6c <__addsf3x+0x9c>
    6b12:	1a 16       	cp	r1, r26
    6b14:	f0 40       	sbci	r31, 0x00	; 0
    6b16:	a2 2f       	mov	r26, r18
    6b18:	23 2f       	mov	r18, r19
    6b1a:	34 2f       	mov	r19, r20
    6b1c:	44 27       	eor	r20, r20
    6b1e:	58 5f       	subi	r21, 0xF8	; 248
    6b20:	f3 cf       	rjmp	.-26     	; 0x6b08 <__addsf3x+0x38>
    6b22:	46 95       	lsr	r20
    6b24:	37 95       	ror	r19
    6b26:	27 95       	ror	r18
    6b28:	a7 95       	ror	r26
    6b2a:	f0 40       	sbci	r31, 0x00	; 0
    6b2c:	53 95       	inc	r21
    6b2e:	c9 f7       	brne	.-14     	; 0x6b22 <__addsf3x+0x52>
    6b30:	7e f4       	brtc	.+30     	; 0x6b50 <__addsf3x+0x80>
    6b32:	1f 16       	cp	r1, r31
    6b34:	ba 0b       	sbc	r27, r26
    6b36:	62 0b       	sbc	r22, r18
    6b38:	73 0b       	sbc	r23, r19
    6b3a:	84 0b       	sbc	r24, r20
    6b3c:	ba f0       	brmi	.+46     	; 0x6b6c <__addsf3x+0x9c>
    6b3e:	91 50       	subi	r25, 0x01	; 1
    6b40:	a1 f0       	breq	.+40     	; 0x6b6a <__addsf3x+0x9a>
    6b42:	ff 0f       	add	r31, r31
    6b44:	bb 1f       	adc	r27, r27
    6b46:	66 1f       	adc	r22, r22
    6b48:	77 1f       	adc	r23, r23
    6b4a:	88 1f       	adc	r24, r24
    6b4c:	c2 f7       	brpl	.-16     	; 0x6b3e <__addsf3x+0x6e>
    6b4e:	0e c0       	rjmp	.+28     	; 0x6b6c <__addsf3x+0x9c>
    6b50:	ba 0f       	add	r27, r26
    6b52:	62 1f       	adc	r22, r18
    6b54:	73 1f       	adc	r23, r19
    6b56:	84 1f       	adc	r24, r20
    6b58:	48 f4       	brcc	.+18     	; 0x6b6c <__addsf3x+0x9c>
    6b5a:	87 95       	ror	r24
    6b5c:	77 95       	ror	r23
    6b5e:	67 95       	ror	r22
    6b60:	b7 95       	ror	r27
    6b62:	f7 95       	ror	r31
    6b64:	9e 3f       	cpi	r25, 0xFE	; 254
    6b66:	08 f0       	brcs	.+2      	; 0x6b6a <__addsf3x+0x9a>
    6b68:	b0 cf       	rjmp	.-160    	; 0x6aca <__addsf3+0x28>
    6b6a:	93 95       	inc	r25
    6b6c:	88 0f       	add	r24, r24
    6b6e:	08 f0       	brcs	.+2      	; 0x6b72 <__addsf3x+0xa2>
    6b70:	99 27       	eor	r25, r25
    6b72:	ee 0f       	add	r30, r30
    6b74:	97 95       	ror	r25
    6b76:	87 95       	ror	r24
    6b78:	08 95       	ret

00006b7a <__cmpsf2>:
    6b7a:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__fp_cmp>
    6b7e:	08 f4       	brcc	.+2      	; 0x6b82 <__cmpsf2+0x8>
    6b80:	81 e0       	ldi	r24, 0x01	; 1
    6b82:	08 95       	ret

00006b84 <__divsf3>:
    6b84:	0e 94 d6 35 	call	0x6bac	; 0x6bac <__divsf3x>
    6b88:	0c 94 e2 36 	jmp	0x6dc4	; 0x6dc4 <__fp_round>
    6b8c:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fp_pscB>
    6b90:	58 f0       	brcs	.+22     	; 0x6ba8 <__divsf3+0x24>
    6b92:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <__fp_pscA>
    6b96:	40 f0       	brcs	.+16     	; 0x6ba8 <__divsf3+0x24>
    6b98:	29 f4       	brne	.+10     	; 0x6ba4 <__divsf3+0x20>
    6b9a:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    6b9c:	29 f0       	breq	.+10     	; 0x6ba8 <__divsf3+0x24>
    6b9e:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_inf>
    6ba2:	51 11       	cpse	r21, r1
    6ba4:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <__fp_szero>
    6ba8:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <__fp_nan>

00006bac <__divsf3x>:
__divsf3x():
    6bac:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__fp_split3>
    6bb0:	68 f3       	brcs	.-38     	; 0x6b8c <__divsf3+0x8>

00006bb2 <__divsf3_pse>:
    6bb2:	99 23       	and	r25, r25
    6bb4:	b1 f3       	breq	.-20     	; 0x6ba2 <__divsf3+0x1e>
    6bb6:	55 23       	and	r21, r21
    6bb8:	91 f3       	breq	.-28     	; 0x6b9e <__divsf3+0x1a>
    6bba:	95 1b       	sub	r25, r21
    6bbc:	55 0b       	sbc	r21, r21
    6bbe:	bb 27       	eor	r27, r27
    6bc0:	aa 27       	eor	r26, r26
    6bc2:	62 17       	cp	r22, r18
    6bc4:	73 07       	cpc	r23, r19
    6bc6:	84 07       	cpc	r24, r20
    6bc8:	38 f0       	brcs	.+14     	; 0x6bd8 <__divsf3_pse+0x26>
    6bca:	9f 5f       	subi	r25, 0xFF	; 255
    6bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    6bce:	22 0f       	add	r18, r18
    6bd0:	33 1f       	adc	r19, r19
    6bd2:	44 1f       	adc	r20, r20
    6bd4:	aa 1f       	adc	r26, r26
    6bd6:	a9 f3       	breq	.-22     	; 0x6bc2 <__divsf3_pse+0x10>
    6bd8:	35 d0       	rcall	.+106    	; 0x6c44 <__divsf3_pse+0x92>
    6bda:	0e 2e       	mov	r0, r30
    6bdc:	3a f0       	brmi	.+14     	; 0x6bec <__divsf3_pse+0x3a>
    6bde:	e0 e8       	ldi	r30, 0x80	; 128
    6be0:	32 d0       	rcall	.+100    	; 0x6c46 <__divsf3_pse+0x94>
    6be2:	91 50       	subi	r25, 0x01	; 1
    6be4:	50 40       	sbci	r21, 0x00	; 0
    6be6:	e6 95       	lsr	r30
    6be8:	00 1c       	adc	r0, r0
    6bea:	ca f7       	brpl	.-14     	; 0x6bde <__divsf3_pse+0x2c>
    6bec:	2b d0       	rcall	.+86     	; 0x6c44 <__divsf3_pse+0x92>
    6bee:	fe 2f       	mov	r31, r30
    6bf0:	29 d0       	rcall	.+82     	; 0x6c44 <__divsf3_pse+0x92>
    6bf2:	66 0f       	add	r22, r22
    6bf4:	77 1f       	adc	r23, r23
    6bf6:	88 1f       	adc	r24, r24
    6bf8:	bb 1f       	adc	r27, r27
    6bfa:	26 17       	cp	r18, r22
    6bfc:	37 07       	cpc	r19, r23
    6bfe:	48 07       	cpc	r20, r24
    6c00:	ab 07       	cpc	r26, r27
    6c02:	b0 e8       	ldi	r27, 0x80	; 128
    6c04:	09 f0       	breq	.+2      	; 0x6c08 <__divsf3_pse+0x56>
    6c06:	bb 0b       	sbc	r27, r27
    6c08:	80 2d       	mov	r24, r0
    6c0a:	bf 01       	movw	r22, r30
    6c0c:	ff 27       	eor	r31, r31
    6c0e:	93 58       	subi	r25, 0x83	; 131
    6c10:	5f 4f       	sbci	r21, 0xFF	; 255
    6c12:	3a f0       	brmi	.+14     	; 0x6c22 <__divsf3_pse+0x70>
    6c14:	9e 3f       	cpi	r25, 0xFE	; 254
    6c16:	51 05       	cpc	r21, r1
    6c18:	78 f0       	brcs	.+30     	; 0x6c38 <__divsf3_pse+0x86>
    6c1a:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_inf>
    6c1e:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <__fp_szero>
    6c22:	5f 3f       	cpi	r21, 0xFF	; 255
    6c24:	e4 f3       	brlt	.-8      	; 0x6c1e <__divsf3_pse+0x6c>
    6c26:	98 3e       	cpi	r25, 0xE8	; 232
    6c28:	d4 f3       	brlt	.-12     	; 0x6c1e <__divsf3_pse+0x6c>
    6c2a:	86 95       	lsr	r24
    6c2c:	77 95       	ror	r23
    6c2e:	67 95       	ror	r22
    6c30:	b7 95       	ror	r27
    6c32:	f7 95       	ror	r31
    6c34:	9f 5f       	subi	r25, 0xFF	; 255
    6c36:	c9 f7       	brne	.-14     	; 0x6c2a <__divsf3_pse+0x78>
    6c38:	88 0f       	add	r24, r24
    6c3a:	91 1d       	adc	r25, r1
    6c3c:	96 95       	lsr	r25
    6c3e:	87 95       	ror	r24
    6c40:	97 f9       	bld	r25, 7
    6c42:	08 95       	ret
    6c44:	e1 e0       	ldi	r30, 0x01	; 1
    6c46:	66 0f       	add	r22, r22
    6c48:	77 1f       	adc	r23, r23
    6c4a:	88 1f       	adc	r24, r24
    6c4c:	bb 1f       	adc	r27, r27
    6c4e:	62 17       	cp	r22, r18
    6c50:	73 07       	cpc	r23, r19
    6c52:	84 07       	cpc	r24, r20
    6c54:	ba 07       	cpc	r27, r26
    6c56:	20 f0       	brcs	.+8      	; 0x6c60 <__divsf3_pse+0xae>
    6c58:	62 1b       	sub	r22, r18
    6c5a:	73 0b       	sbc	r23, r19
    6c5c:	84 0b       	sbc	r24, r20
    6c5e:	ba 0b       	sbc	r27, r26
    6c60:	ee 1f       	adc	r30, r30
    6c62:	88 f7       	brcc	.-30     	; 0x6c46 <__divsf3_pse+0x94>
    6c64:	e0 95       	com	r30
    6c66:	08 95       	ret

00006c68 <__fixsfsi>:
    6c68:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <__fixunssfsi>
    6c6c:	68 94       	set
    6c6e:	b1 11       	cpse	r27, r1
    6c70:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <__fp_szero>
    6c74:	08 95       	ret

00006c76 <__fixunssfsi>:
    6c76:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <__fp_splitA>
    6c7a:	88 f0       	brcs	.+34     	; 0x6c9e <__fixunssfsi+0x28>
    6c7c:	9f 57       	subi	r25, 0x7F	; 127
    6c7e:	98 f0       	brcs	.+38     	; 0x6ca6 <__fixunssfsi+0x30>
    6c80:	b9 2f       	mov	r27, r25
    6c82:	99 27       	eor	r25, r25
    6c84:	b7 51       	subi	r27, 0x17	; 23
    6c86:	b0 f0       	brcs	.+44     	; 0x6cb4 <__fixunssfsi+0x3e>
__fixunssfsi():
    6c88:	e1 f0       	breq	.+56     	; 0x6cc2 <__fixunssfsi+0x4c>
    6c8a:	66 0f       	add	r22, r22
    6c8c:	77 1f       	adc	r23, r23
    6c8e:	88 1f       	adc	r24, r24
    6c90:	99 1f       	adc	r25, r25
    6c92:	1a f0       	brmi	.+6      	; 0x6c9a <__fixunssfsi+0x24>
    6c94:	ba 95       	dec	r27
    6c96:	c9 f7       	brne	.-14     	; 0x6c8a <__fixunssfsi+0x14>
    6c98:	14 c0       	rjmp	.+40     	; 0x6cc2 <__fixunssfsi+0x4c>
    6c9a:	b1 30       	cpi	r27, 0x01	; 1
    6c9c:	91 f0       	breq	.+36     	; 0x6cc2 <__fixunssfsi+0x4c>
    6c9e:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <__fp_zero>
    6ca2:	b1 e0       	ldi	r27, 0x01	; 1
    6ca4:	08 95       	ret
    6ca6:	0c 94 15 37 	jmp	0x6e2a	; 0x6e2a <__fp_zero>
    6caa:	67 2f       	mov	r22, r23
    6cac:	78 2f       	mov	r23, r24
    6cae:	88 27       	eor	r24, r24
    6cb0:	b8 5f       	subi	r27, 0xF8	; 248
    6cb2:	39 f0       	breq	.+14     	; 0x6cc2 <__fixunssfsi+0x4c>
    6cb4:	b9 3f       	cpi	r27, 0xF9	; 249
    6cb6:	cc f3       	brlt	.-14     	; 0x6caa <__fixunssfsi+0x34>
    6cb8:	86 95       	lsr	r24
    6cba:	77 95       	ror	r23
    6cbc:	67 95       	ror	r22
    6cbe:	b3 95       	inc	r27
    6cc0:	d9 f7       	brne	.-10     	; 0x6cb8 <__fixunssfsi+0x42>
    6cc2:	3e f4       	brtc	.+14     	; 0x6cd2 <__fixunssfsi+0x5c>
    6cc4:	90 95       	com	r25
    6cc6:	80 95       	com	r24
    6cc8:	70 95       	com	r23
    6cca:	61 95       	neg	r22
    6ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    6cce:	8f 4f       	sbci	r24, 0xFF	; 255
    6cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    6cd2:	08 95       	ret

00006cd4 <__floatunsisf>:
__floatunsisf():
    6cd4:	e8 94       	clt
    6cd6:	09 c0       	rjmp	.+18     	; 0x6cea <__floatsisf+0x12>

00006cd8 <__floatsisf>:
    6cd8:	97 fb       	bst	r25, 7
    6cda:	3e f4       	brtc	.+14     	; 0x6cea <__floatsisf+0x12>
    6cdc:	90 95       	com	r25
    6cde:	80 95       	com	r24
    6ce0:	70 95       	com	r23
    6ce2:	61 95       	neg	r22
    6ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cea:	99 23       	and	r25, r25
    6cec:	a9 f0       	breq	.+42     	; 0x6d18 <__floatsisf+0x40>
    6cee:	f9 2f       	mov	r31, r25
    6cf0:	96 e9       	ldi	r25, 0x96	; 150
    6cf2:	bb 27       	eor	r27, r27
    6cf4:	93 95       	inc	r25
    6cf6:	f6 95       	lsr	r31
    6cf8:	87 95       	ror	r24
    6cfa:	77 95       	ror	r23
    6cfc:	67 95       	ror	r22
    6cfe:	b7 95       	ror	r27
    6d00:	f1 11       	cpse	r31, r1
    6d02:	f8 cf       	rjmp	.-16     	; 0x6cf4 <__floatsisf+0x1c>
    6d04:	fa f4       	brpl	.+62     	; 0x6d44 <__floatsisf+0x6c>
    6d06:	bb 0f       	add	r27, r27
    6d08:	11 f4       	brne	.+4      	; 0x6d0e <__floatsisf+0x36>
    6d0a:	60 ff       	sbrs	r22, 0
    6d0c:	1b c0       	rjmp	.+54     	; 0x6d44 <__floatsisf+0x6c>
    6d0e:	6f 5f       	subi	r22, 0xFF	; 255
    6d10:	7f 4f       	sbci	r23, 0xFF	; 255
    6d12:	8f 4f       	sbci	r24, 0xFF	; 255
    6d14:	9f 4f       	sbci	r25, 0xFF	; 255
    6d16:	16 c0       	rjmp	.+44     	; 0x6d44 <__floatsisf+0x6c>
    6d18:	88 23       	and	r24, r24
    6d1a:	11 f0       	breq	.+4      	; 0x6d20 <__floatsisf+0x48>
    6d1c:	96 e9       	ldi	r25, 0x96	; 150
    6d1e:	11 c0       	rjmp	.+34     	; 0x6d42 <__floatsisf+0x6a>
    6d20:	77 23       	and	r23, r23
    6d22:	21 f0       	breq	.+8      	; 0x6d2c <__floatsisf+0x54>
    6d24:	9e e8       	ldi	r25, 0x8E	; 142
    6d26:	87 2f       	mov	r24, r23
    6d28:	76 2f       	mov	r23, r22
    6d2a:	05 c0       	rjmp	.+10     	; 0x6d36 <__floatsisf+0x5e>
    6d2c:	66 23       	and	r22, r22
    6d2e:	71 f0       	breq	.+28     	; 0x6d4c <__floatsisf+0x74>
    6d30:	96 e8       	ldi	r25, 0x86	; 134
    6d32:	86 2f       	mov	r24, r22
    6d34:	70 e0       	ldi	r23, 0x00	; 0
    6d36:	60 e0       	ldi	r22, 0x00	; 0
    6d38:	2a f0       	brmi	.+10     	; 0x6d44 <__floatsisf+0x6c>
    6d3a:	9a 95       	dec	r25
    6d3c:	66 0f       	add	r22, r22
    6d3e:	77 1f       	adc	r23, r23
    6d40:	88 1f       	adc	r24, r24
    6d42:	da f7       	brpl	.-10     	; 0x6d3a <__floatsisf+0x62>
    6d44:	88 0f       	add	r24, r24
    6d46:	96 95       	lsr	r25
    6d48:	87 95       	ror	r24
    6d4a:	97 f9       	bld	r25, 7
    6d4c:	08 95       	ret

00006d4e <__fp_cmp>:
__fp_cmp():
    6d4e:	99 0f       	add	r25, r25
    6d50:	00 08       	sbc	r0, r0
    6d52:	55 0f       	add	r21, r21
    6d54:	aa 0b       	sbc	r26, r26
    6d56:	e0 e8       	ldi	r30, 0x80	; 128
    6d58:	fe ef       	ldi	r31, 0xFE	; 254
    6d5a:	16 16       	cp	r1, r22
    6d5c:	17 06       	cpc	r1, r23
    6d5e:	e8 07       	cpc	r30, r24
    6d60:	f9 07       	cpc	r31, r25
    6d62:	c0 f0       	brcs	.+48     	; 0x6d94 <__fp_cmp+0x46>
    6d64:	12 16       	cp	r1, r18
    6d66:	13 06       	cpc	r1, r19
    6d68:	e4 07       	cpc	r30, r20
    6d6a:	f5 07       	cpc	r31, r21
    6d6c:	98 f0       	brcs	.+38     	; 0x6d94 <__fp_cmp+0x46>
    6d6e:	62 1b       	sub	r22, r18
    6d70:	73 0b       	sbc	r23, r19
    6d72:	84 0b       	sbc	r24, r20
    6d74:	95 0b       	sbc	r25, r21
    6d76:	39 f4       	brne	.+14     	; 0x6d86 <__fp_cmp+0x38>
    6d78:	0a 26       	eor	r0, r26
    6d7a:	61 f0       	breq	.+24     	; 0x6d94 <__fp_cmp+0x46>
    6d7c:	23 2b       	or	r18, r19
    6d7e:	24 2b       	or	r18, r20
    6d80:	25 2b       	or	r18, r21
    6d82:	21 f4       	brne	.+8      	; 0x6d8c <__fp_cmp+0x3e>
    6d84:	08 95       	ret
    6d86:	0a 26       	eor	r0, r26
    6d88:	09 f4       	brne	.+2      	; 0x6d8c <__fp_cmp+0x3e>
    6d8a:	a1 40       	sbci	r26, 0x01	; 1
    6d8c:	a6 95       	lsr	r26
    6d8e:	8f ef       	ldi	r24, 0xFF	; 255
    6d90:	81 1d       	adc	r24, r1
    6d92:	81 1d       	adc	r24, r1
    6d94:	08 95       	ret

00006d96 <__fp_inf>:
__fp_inf():
    6d96:	97 f9       	bld	r25, 7
    6d98:	9f 67       	ori	r25, 0x7F	; 127
    6d9a:	80 e8       	ldi	r24, 0x80	; 128
    6d9c:	70 e0       	ldi	r23, 0x00	; 0
    6d9e:	60 e0       	ldi	r22, 0x00	; 0
    6da0:	08 95       	ret

00006da2 <__fp_nan>:
__fp_nan():
    6da2:	9f ef       	ldi	r25, 0xFF	; 255
    6da4:	80 ec       	ldi	r24, 0xC0	; 192
    6da6:	08 95       	ret

00006da8 <__fp_pscA>:
__fp_pscA():
    6da8:	00 24       	eor	r0, r0
    6daa:	0a 94       	dec	r0
    6dac:	16 16       	cp	r1, r22
    6dae:	17 06       	cpc	r1, r23
    6db0:	18 06       	cpc	r1, r24
    6db2:	09 06       	cpc	r0, r25
    6db4:	08 95       	ret

00006db6 <__fp_pscB>:
__fp_pscB():
    6db6:	00 24       	eor	r0, r0
    6db8:	0a 94       	dec	r0
    6dba:	12 16       	cp	r1, r18
    6dbc:	13 06       	cpc	r1, r19
    6dbe:	14 06       	cpc	r1, r20
    6dc0:	05 06       	cpc	r0, r21
    6dc2:	08 95       	ret

00006dc4 <__fp_round>:
__fp_round():
    6dc4:	09 2e       	mov	r0, r25
    6dc6:	03 94       	inc	r0
    6dc8:	00 0c       	add	r0, r0
    6dca:	11 f4       	brne	.+4      	; 0x6dd0 <__fp_round+0xc>
    6dcc:	88 23       	and	r24, r24
    6dce:	52 f0       	brmi	.+20     	; 0x6de4 <__fp_round+0x20>
    6dd0:	bb 0f       	add	r27, r27
    6dd2:	40 f4       	brcc	.+16     	; 0x6de4 <__fp_round+0x20>
    6dd4:	bf 2b       	or	r27, r31
    6dd6:	11 f4       	brne	.+4      	; 0x6ddc <__fp_round+0x18>
    6dd8:	60 ff       	sbrs	r22, 0
    6dda:	04 c0       	rjmp	.+8      	; 0x6de4 <__fp_round+0x20>
    6ddc:	6f 5f       	subi	r22, 0xFF	; 255
    6dde:	7f 4f       	sbci	r23, 0xFF	; 255
    6de0:	8f 4f       	sbci	r24, 0xFF	; 255
    6de2:	9f 4f       	sbci	r25, 0xFF	; 255
    6de4:	08 95       	ret

00006de6 <__fp_split3>:
__fp_split3():
    6de6:	57 fd       	sbrc	r21, 7
    6de8:	90 58       	subi	r25, 0x80	; 128
    6dea:	44 0f       	add	r20, r20
    6dec:	55 1f       	adc	r21, r21
    6dee:	59 f0       	breq	.+22     	; 0x6e06 <__fp_splitA+0x10>
    6df0:	5f 3f       	cpi	r21, 0xFF	; 255
    6df2:	71 f0       	breq	.+28     	; 0x6e10 <__fp_splitA+0x1a>
    6df4:	47 95       	ror	r20

00006df6 <__fp_splitA>:
    6df6:	88 0f       	add	r24, r24
    6df8:	97 fb       	bst	r25, 7
    6dfa:	99 1f       	adc	r25, r25
    6dfc:	61 f0       	breq	.+24     	; 0x6e16 <__fp_splitA+0x20>
    6dfe:	9f 3f       	cpi	r25, 0xFF	; 255
    6e00:	79 f0       	breq	.+30     	; 0x6e20 <__fp_splitA+0x2a>
    6e02:	87 95       	ror	r24
    6e04:	08 95       	ret
    6e06:	12 16       	cp	r1, r18
    6e08:	13 06       	cpc	r1, r19
    6e0a:	14 06       	cpc	r1, r20
    6e0c:	55 1f       	adc	r21, r21
    6e0e:	f2 cf       	rjmp	.-28     	; 0x6df4 <__fp_split3+0xe>
    6e10:	46 95       	lsr	r20
    6e12:	f1 df       	rcall	.-30     	; 0x6df6 <__fp_splitA>
    6e14:	08 c0       	rjmp	.+16     	; 0x6e26 <__fp_splitA+0x30>
    6e16:	16 16       	cp	r1, r22
    6e18:	17 06       	cpc	r1, r23
    6e1a:	18 06       	cpc	r1, r24
    6e1c:	99 1f       	adc	r25, r25
    6e1e:	f1 cf       	rjmp	.-30     	; 0x6e02 <__fp_splitA+0xc>
    6e20:	86 95       	lsr	r24
    6e22:	71 05       	cpc	r23, r1
    6e24:	61 05       	cpc	r22, r1
    6e26:	08 94       	sec
    6e28:	08 95       	ret

00006e2a <__fp_zero>:
__fp_zero():
    6e2a:	e8 94       	clt

00006e2c <__fp_szero>:
    6e2c:	bb 27       	eor	r27, r27
    6e2e:	66 27       	eor	r22, r22
    6e30:	77 27       	eor	r23, r23
    6e32:	cb 01       	movw	r24, r22
    6e34:	97 f9       	bld	r25, 7
    6e36:	08 95       	ret

00006e38 <__gesf2>:
__gesf2():
    6e38:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__fp_cmp>
    6e3c:	08 f4       	brcc	.+2      	; 0x6e40 <__gesf2+0x8>
    6e3e:	8f ef       	ldi	r24, 0xFF	; 255
    6e40:	08 95       	ret
    6e42:	16 f0       	brts	.+4      	; 0x6e48 <__gesf2+0x10>
    6e44:	0c 94 29 38 	jmp	0x7052	; 0x7052 <__fp_mpack>
    6e48:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <__fp_nan>
    6e4c:	68 94       	set
    6e4e:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_inf>

00006e52 <log>:
log():
    6e52:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <__fp_splitA>
    6e56:	a8 f3       	brcs	.-22     	; 0x6e42 <__gesf2+0xa>
    6e58:	99 23       	and	r25, r25
    6e5a:	c1 f3       	breq	.-16     	; 0x6e4c <__gesf2+0x14>
    6e5c:	ae f3       	brts	.-22     	; 0x6e48 <__gesf2+0x10>
    6e5e:	df 93       	push	r29
    6e60:	cf 93       	push	r28
    6e62:	1f 93       	push	r17
    6e64:	0f 93       	push	r16
    6e66:	ff 92       	push	r15
    6e68:	c9 2f       	mov	r28, r25
    6e6a:	dd 27       	eor	r29, r29
    6e6c:	88 23       	and	r24, r24
    6e6e:	2a f0       	brmi	.+10     	; 0x6e7a <log+0x28>
    6e70:	21 97       	sbiw	r28, 0x01	; 1
    6e72:	66 0f       	add	r22, r22
    6e74:	77 1f       	adc	r23, r23
    6e76:	88 1f       	adc	r24, r24
    6e78:	da f7       	brpl	.-10     	; 0x6e70 <log+0x1e>
    6e7a:	20 e0       	ldi	r18, 0x00	; 0
    6e7c:	30 e0       	ldi	r19, 0x00	; 0
    6e7e:	40 e8       	ldi	r20, 0x80	; 128
    6e80:	5f eb       	ldi	r21, 0xBF	; 191
    6e82:	9f e3       	ldi	r25, 0x3F	; 63
    6e84:	88 39       	cpi	r24, 0x98	; 152
    6e86:	20 f0       	brcs	.+8      	; 0x6e90 <log+0x3e>
    6e88:	80 3e       	cpi	r24, 0xE0	; 224
    6e8a:	38 f0       	brcs	.+14     	; 0x6e9a <log+0x48>
    6e8c:	21 96       	adiw	r28, 0x01	; 1
    6e8e:	8f 77       	andi	r24, 0x7F	; 127
    6e90:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    6e94:	e4 eb       	ldi	r30, 0xB4	; 180
    6e96:	f0 e0       	ldi	r31, 0x00	; 0
    6e98:	04 c0       	rjmp	.+8      	; 0x6ea2 <log+0x50>
    6e9a:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <__addsf3>
    6e9e:	e1 ee       	ldi	r30, 0xE1	; 225
    6ea0:	f0 e0       	ldi	r31, 0x00	; 0
    6ea2:	0e 94 3e 38 	call	0x707c	; 0x707c <__fp_powser>
    6ea6:	8b 01       	movw	r16, r22
    6ea8:	be 01       	movw	r22, r28
    6eaa:	ec 01       	movw	r28, r24
    6eac:	fb 2e       	mov	r15, r27
    6eae:	6f 57       	subi	r22, 0x7F	; 127
    6eb0:	71 09       	sbc	r23, r1
    6eb2:	75 95       	asr	r23
    6eb4:	77 1f       	adc	r23, r23
    6eb6:	88 0b       	sbc	r24, r24
    6eb8:	99 0b       	sbc	r25, r25
    6eba:	0e 94 6c 36 	call	0x6cd8	; 0x6cd8 <__floatsisf>
    6ebe:	28 e1       	ldi	r18, 0x18	; 24
    6ec0:	32 e7       	ldi	r19, 0x72	; 114
    6ec2:	41 e3       	ldi	r20, 0x31	; 49
    6ec4:	5f e3       	ldi	r21, 0x3F	; 63
    6ec6:	0e 94 84 37 	call	0x6f08	; 0x6f08 <__mulsf3x>
    6eca:	af 2d       	mov	r26, r15
    6ecc:	98 01       	movw	r18, r16
    6ece:	ae 01       	movw	r20, r28
    6ed0:	ff 90       	pop	r15
    6ed2:	0f 91       	pop	r16
    6ed4:	1f 91       	pop	r17
    6ed6:	cf 91       	pop	r28
    6ed8:	df 91       	pop	r29
    6eda:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <__addsf3x>
    6ede:	0c 94 e2 36 	jmp	0x6dc4	; 0x6dc4 <__fp_round>

00006ee2 <__mulsf3>:
    6ee2:	0e 94 84 37 	call	0x6f08	; 0x6f08 <__mulsf3x>
    6ee6:	0c 94 e2 36 	jmp	0x6dc4	; 0x6dc4 <__fp_round>
    6eea:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <__fp_pscA>
    6eee:	38 f0       	brcs	.+14     	; 0x6efe <__mulsf3+0x1c>
    6ef0:	0e 94 db 36 	call	0x6db6	; 0x6db6 <__fp_pscB>
__mulsf3():
    6ef4:	20 f0       	brcs	.+8      	; 0x6efe <__mulsf3+0x1c>
    6ef6:	95 23       	and	r25, r21
    6ef8:	11 f0       	breq	.+4      	; 0x6efe <__mulsf3+0x1c>
    6efa:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_inf>
    6efe:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <__fp_nan>
    6f02:	11 24       	eor	r1, r1
    6f04:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <__fp_szero>

00006f08 <__mulsf3x>:
__mulsf3x():
    6f08:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__fp_split3>
    6f0c:	70 f3       	brcs	.-36     	; 0x6eea <__mulsf3+0x8>

00006f0e <__mulsf3_pse>:
    6f0e:	95 9f       	mul	r25, r21
    6f10:	c1 f3       	breq	.-16     	; 0x6f02 <__mulsf3+0x20>
    6f12:	95 0f       	add	r25, r21
    6f14:	50 e0       	ldi	r21, 0x00	; 0
    6f16:	55 1f       	adc	r21, r21
    6f18:	62 9f       	mul	r22, r18
    6f1a:	f0 01       	movw	r30, r0
    6f1c:	72 9f       	mul	r23, r18
    6f1e:	bb 27       	eor	r27, r27
    6f20:	f0 0d       	add	r31, r0
    6f22:	b1 1d       	adc	r27, r1
    6f24:	63 9f       	mul	r22, r19
    6f26:	aa 27       	eor	r26, r26
    6f28:	f0 0d       	add	r31, r0
    6f2a:	b1 1d       	adc	r27, r1
    6f2c:	aa 1f       	adc	r26, r26
    6f2e:	64 9f       	mul	r22, r20
    6f30:	66 27       	eor	r22, r22
    6f32:	b0 0d       	add	r27, r0
    6f34:	a1 1d       	adc	r26, r1
    6f36:	66 1f       	adc	r22, r22
    6f38:	82 9f       	mul	r24, r18
    6f3a:	22 27       	eor	r18, r18
    6f3c:	b0 0d       	add	r27, r0
    6f3e:	a1 1d       	adc	r26, r1
    6f40:	62 1f       	adc	r22, r18
    6f42:	73 9f       	mul	r23, r19
    6f44:	b0 0d       	add	r27, r0
    6f46:	a1 1d       	adc	r26, r1
    6f48:	62 1f       	adc	r22, r18
    6f4a:	83 9f       	mul	r24, r19
    6f4c:	a0 0d       	add	r26, r0
    6f4e:	61 1d       	adc	r22, r1
    6f50:	22 1f       	adc	r18, r18
    6f52:	74 9f       	mul	r23, r20
    6f54:	33 27       	eor	r19, r19
    6f56:	a0 0d       	add	r26, r0
    6f58:	61 1d       	adc	r22, r1
    6f5a:	23 1f       	adc	r18, r19
    6f5c:	84 9f       	mul	r24, r20
    6f5e:	60 0d       	add	r22, r0
    6f60:	21 1d       	adc	r18, r1
    6f62:	82 2f       	mov	r24, r18
    6f64:	76 2f       	mov	r23, r22
    6f66:	6a 2f       	mov	r22, r26
    6f68:	11 24       	eor	r1, r1
    6f6a:	9f 57       	subi	r25, 0x7F	; 127
    6f6c:	50 40       	sbci	r21, 0x00	; 0
    6f6e:	9a f0       	brmi	.+38     	; 0x6f96 <__mulsf3_pse+0x88>
    6f70:	f1 f0       	breq	.+60     	; 0x6fae <__mulsf3_pse+0xa0>
    6f72:	88 23       	and	r24, r24
    6f74:	4a f0       	brmi	.+18     	; 0x6f88 <__mulsf3_pse+0x7a>
    6f76:	ee 0f       	add	r30, r30
    6f78:	ff 1f       	adc	r31, r31
    6f7a:	bb 1f       	adc	r27, r27
    6f7c:	66 1f       	adc	r22, r22
    6f7e:	77 1f       	adc	r23, r23
    6f80:	88 1f       	adc	r24, r24
    6f82:	91 50       	subi	r25, 0x01	; 1
    6f84:	50 40       	sbci	r21, 0x00	; 0
    6f86:	a9 f7       	brne	.-22     	; 0x6f72 <__mulsf3_pse+0x64>
    6f88:	9e 3f       	cpi	r25, 0xFE	; 254
    6f8a:	51 05       	cpc	r21, r1
    6f8c:	80 f0       	brcs	.+32     	; 0x6fae <__mulsf3_pse+0xa0>
    6f8e:	0c 94 cb 36 	jmp	0x6d96	; 0x6d96 <__fp_inf>
    6f92:	0c 94 16 37 	jmp	0x6e2c	; 0x6e2c <__fp_szero>
    6f96:	5f 3f       	cpi	r21, 0xFF	; 255
    6f98:	e4 f3       	brlt	.-8      	; 0x6f92 <__mulsf3_pse+0x84>
    6f9a:	98 3e       	cpi	r25, 0xE8	; 232
    6f9c:	d4 f3       	brlt	.-12     	; 0x6f92 <__mulsf3_pse+0x84>
    6f9e:	86 95       	lsr	r24
    6fa0:	77 95       	ror	r23
    6fa2:	67 95       	ror	r22
    6fa4:	b7 95       	ror	r27
    6fa6:	f7 95       	ror	r31
    6fa8:	e7 95       	ror	r30
    6faa:	9f 5f       	subi	r25, 0xFF	; 255
    6fac:	c1 f7       	brne	.-16     	; 0x6f9e <__mulsf3_pse+0x90>
    6fae:	fe 2b       	or	r31, r30
    6fb0:	88 0f       	add	r24, r24
    6fb2:	91 1d       	adc	r25, r1
    6fb4:	96 95       	lsr	r25
    6fb6:	87 95       	ror	r24
    6fb8:	97 f9       	bld	r25, 7
    6fba:	08 95       	ret
    6fbc:	19 f4       	brne	.+6      	; 0x6fc4 <__mulsf3_pse+0xb6>
    6fbe:	16 f4       	brtc	.+4      	; 0x6fc4 <__mulsf3_pse+0xb6>
    6fc0:	0c 94 d1 36 	jmp	0x6da2	; 0x6da2 <__fp_nan>
    6fc4:	0c 94 29 38 	jmp	0x7052	; 0x7052 <__fp_mpack>

00006fc8 <sqrt>:
    6fc8:	0e 94 fb 36 	call	0x6df6	; 0x6df6 <__fp_splitA>
    6fcc:	b8 f3       	brcs	.-18     	; 0x6fbc <__mulsf3_pse+0xae>
    6fce:	99 23       	and	r25, r25
    6fd0:	c9 f3       	breq	.-14     	; 0x6fc4 <__mulsf3_pse+0xb6>
    6fd2:	b6 f3       	brts	.-20     	; 0x6fc0 <__mulsf3_pse+0xb2>
    6fd4:	9f 57       	subi	r25, 0x7F	; 127
    6fd6:	55 0b       	sbc	r21, r21
    6fd8:	87 ff       	sbrs	r24, 7
sqrt():
    6fda:	0e 94 37 38 	call	0x706e	; 0x706e <__fp_norm2>
    6fde:	00 24       	eor	r0, r0
    6fe0:	a0 e6       	ldi	r26, 0x60	; 96
    6fe2:	40 ea       	ldi	r20, 0xA0	; 160
    6fe4:	90 01       	movw	r18, r0
    6fe6:	80 58       	subi	r24, 0x80	; 128
    6fe8:	56 95       	lsr	r21
    6fea:	97 95       	ror	r25
    6fec:	28 f4       	brcc	.+10     	; 0x6ff8 <sqrt+0x30>
    6fee:	80 5c       	subi	r24, 0xC0	; 192
    6ff0:	66 0f       	add	r22, r22
    6ff2:	77 1f       	adc	r23, r23
    6ff4:	88 1f       	adc	r24, r24
    6ff6:	20 f0       	brcs	.+8      	; 0x7000 <sqrt+0x38>
    6ff8:	26 17       	cp	r18, r22
    6ffa:	37 07       	cpc	r19, r23
    6ffc:	48 07       	cpc	r20, r24
    6ffe:	30 f4       	brcc	.+12     	; 0x700c <sqrt+0x44>
    7000:	62 1b       	sub	r22, r18
    7002:	73 0b       	sbc	r23, r19
    7004:	84 0b       	sbc	r24, r20
    7006:	20 29       	or	r18, r0
    7008:	31 29       	or	r19, r1
    700a:	4a 2b       	or	r20, r26
    700c:	a6 95       	lsr	r26
    700e:	17 94       	ror	r1
    7010:	07 94       	ror	r0
    7012:	20 25       	eor	r18, r0
    7014:	31 25       	eor	r19, r1
    7016:	4a 27       	eor	r20, r26
    7018:	58 f7       	brcc	.-42     	; 0x6ff0 <sqrt+0x28>
    701a:	66 0f       	add	r22, r22
    701c:	77 1f       	adc	r23, r23
    701e:	88 1f       	adc	r24, r24
    7020:	20 f0       	brcs	.+8      	; 0x702a <sqrt+0x62>
    7022:	26 17       	cp	r18, r22
    7024:	37 07       	cpc	r19, r23
    7026:	48 07       	cpc	r20, r24
    7028:	30 f4       	brcc	.+12     	; 0x7036 <sqrt+0x6e>
    702a:	62 0b       	sbc	r22, r18
    702c:	73 0b       	sbc	r23, r19
    702e:	84 0b       	sbc	r24, r20
    7030:	20 0d       	add	r18, r0
    7032:	31 1d       	adc	r19, r1
    7034:	41 1d       	adc	r20, r1
    7036:	a0 95       	com	r26
    7038:	81 f7       	brne	.-32     	; 0x701a <sqrt+0x52>
    703a:	b9 01       	movw	r22, r18
    703c:	84 2f       	mov	r24, r20
    703e:	91 58       	subi	r25, 0x81	; 129
    7040:	88 0f       	add	r24, r24
    7042:	96 95       	lsr	r25
    7044:	87 95       	ror	r24
    7046:	08 95       	ret

00007048 <__unordsf2>:
    7048:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <__fp_cmp>
    704c:	88 0b       	sbc	r24, r24
    704e:	99 0b       	sbc	r25, r25
    7050:	08 95       	ret

00007052 <__fp_mpack>:
    7052:	9f 3f       	cpi	r25, 0xFF	; 255
__fp_mpack():
    7054:	31 f0       	breq	.+12     	; 0x7062 <__fp_mpack_finite+0xc>

00007056 <__fp_mpack_finite>:
    7056:	91 50       	subi	r25, 0x01	; 1
    7058:	20 f4       	brcc	.+8      	; 0x7062 <__fp_mpack_finite+0xc>
    705a:	87 95       	ror	r24
    705c:	77 95       	ror	r23
    705e:	67 95       	ror	r22
    7060:	b7 95       	ror	r27
    7062:	88 0f       	add	r24, r24
    7064:	91 1d       	adc	r25, r1
    7066:	96 95       	lsr	r25
    7068:	87 95       	ror	r24
    706a:	97 f9       	bld	r25, 7
    706c:	08 95       	ret

0000706e <__fp_norm2>:
__fp_norm2():
    706e:	91 50       	subi	r25, 0x01	; 1
    7070:	50 40       	sbci	r21, 0x00	; 0
    7072:	66 0f       	add	r22, r22
    7074:	77 1f       	adc	r23, r23
    7076:	88 1f       	adc	r24, r24
    7078:	d2 f7       	brpl	.-12     	; 0x706e <__fp_norm2>
    707a:	08 95       	ret

0000707c <__fp_powser>:
__fp_powser():
    707c:	df 93       	push	r29
    707e:	cf 93       	push	r28
    7080:	1f 93       	push	r17
    7082:	0f 93       	push	r16
    7084:	ff 92       	push	r15
    7086:	ef 92       	push	r14
    7088:	df 92       	push	r13
    708a:	7b 01       	movw	r14, r22
    708c:	8c 01       	movw	r16, r24
    708e:	68 94       	set
    7090:	06 c0       	rjmp	.+12     	; 0x709e <__fp_powser+0x22>
    7092:	da 2e       	mov	r13, r26
    7094:	ef 01       	movw	r28, r30
    7096:	0e 94 84 37 	call	0x6f08	; 0x6f08 <__mulsf3x>
    709a:	fe 01       	movw	r30, r28
    709c:	e8 94       	clt
    709e:	a5 91       	lpm	r26, Z+
    70a0:	25 91       	lpm	r18, Z+
    70a2:	35 91       	lpm	r19, Z+
    70a4:	45 91       	lpm	r20, Z+
    70a6:	55 91       	lpm	r21, Z+
    70a8:	a6 f3       	brts	.-24     	; 0x7092 <__fp_powser+0x16>
    70aa:	ef 01       	movw	r28, r30
    70ac:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <__addsf3x>
    70b0:	fe 01       	movw	r30, r28
    70b2:	97 01       	movw	r18, r14
    70b4:	a8 01       	movw	r20, r16
    70b6:	da 94       	dec	r13
    70b8:	69 f7       	brne	.-38     	; 0x7094 <__fp_powser+0x18>
    70ba:	df 90       	pop	r13
    70bc:	ef 90       	pop	r14
    70be:	ff 90       	pop	r15
    70c0:	0f 91       	pop	r16
    70c2:	1f 91       	pop	r17
    70c4:	cf 91       	pop	r28
    70c6:	df 91       	pop	r29
    70c8:	08 95       	ret

000070ca <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    70ca:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    70cc:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    70ce:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    70d0:	0e 94 d2 38 	call	0x71a4	; 0x71a4 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    70d4:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    70d6:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    70d8:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    70da:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    70dc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    70de:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    70e0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    70e2:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    70e4:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    70e6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    70e8:	08 95       	ret

000070ea <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    70ea:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    70ec:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    70ee:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    70f0:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    70f2:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    70f4:	0d c0       	rjmp	.+26     	; 0x7110 <__udivmodsi4_ep>

000070f6 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    70f6:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    70f8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    70fa:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    70fc:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    70fe:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    7100:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    7102:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    7104:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    7106:	20 f0       	brcs	.+8      	; 0x7110 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    7108:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    710a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    710c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    710e:	f5 0b       	sbc	r31, r21

00007110 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    7110:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    7112:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    7114:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    7116:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    7118:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    711a:	69 f7       	brne	.-38     	; 0x70f6 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    711c:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    711e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    7120:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    7122:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    7124:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    7126:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    7128:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    712a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    712c:	08 95       	ret

0000712e <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    712e:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    7130:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    7132:	1e f4       	brtc	.+6      	; 0x713a <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    7134:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    7136:	0e 94 ae 38 	call	0x715c	; 0x715c <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    713a:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    713c:	07 d0       	rcall	.+14     	; 0x714c <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    713e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    7142:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    7144:	03 d0       	rcall	.+6      	; 0x714c <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    7146:	4e f4       	brtc	.+18     	; 0x715a <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    7148:	0c 94 ae 38 	jmp	0x715c	; 0x715c <__negsi2>

0000714c <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    714c:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    714e:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    7150:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    7152:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    7154:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    7156:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    7158:	5f 4f       	sbci	r21, 0xFF	; 255

0000715a <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    715a:	08 95       	ret

0000715c <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    715c:	90 95       	com	r25
    715e:	80 95       	com	r24
    7160:	70 95       	com	r23
    7162:	61 95       	neg	r22
    7164:	7f 4f       	sbci	r23, 0xFF	; 255
    7166:	8f 4f       	sbci	r24, 0xFF	; 255
    7168:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    716a:	08 95       	ret

0000716c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    716c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    716e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    7170:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    7172:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    7174:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    7176:	09 94       	ijmp

00007178 <__bswapsi2>:
__bswapsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3092
    7178:	69 27       	eor	r22, r25
    717a:	96 27       	eor	r25, r22
    717c:	69 27       	eor	r22, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3093
    717e:	78 27       	eor	r23, r24
    7180:	87 27       	eor	r24, r23
    7182:	78 27       	eor	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3094
    7184:	08 95       	ret

00007186 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    7186:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    7188:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    718a:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    718c:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    718e:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    7190:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    7192:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    7194:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    7196:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    7198:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    719a:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    719c:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    719e:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    71a0:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    71a2:	08 95       	ret

000071a4 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    71a4:	0e 94 c3 38 	call	0x7186	; 0x7186 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    71a8:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    71aa:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    71ac:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    71ae:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    71b0:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    71b2:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    71b4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    71b6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    71b8:	08 95       	ret

000071ba <__ashldi3>:
__ashldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    71ba:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    71bc:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    71be:	90 f0       	brcs	.+36     	; 0x71e4 <__ashldi3+0x2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    71c0:	98 2f       	mov	r25, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    71c2:	87 2f       	mov	r24, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    71c4:	76 2f       	mov	r23, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    71c6:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    71c8:	54 2f       	mov	r21, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    71ca:	43 2f       	mov	r20, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    71cc:	32 2f       	mov	r19, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    71ce:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    71d0:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    71d2:	f4 cf       	rjmp	.-24     	; 0x71bc <__ashldi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    71d4:	22 0f       	add	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    71d6:	33 1f       	adc	r19, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    71d8:	44 1f       	adc	r20, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    71da:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    71dc:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    71de:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    71e0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    71e2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    71e4:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    71e6:	b2 f7       	brpl	.-20     	; 0x71d4 <__ashldi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    71e8:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    71ea:	08 95       	ret

000071ec <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    71ec:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    71ee:	10 94       	com	r1

000071f0 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    71f0:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    71f2:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    71f4:	98 f0       	brcs	.+38     	; 0x721c <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    71f6:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    71f8:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    71fa:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    71fc:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    71fe:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    7200:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    7202:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    7204:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    7206:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    7208:	f4 cf       	rjmp	.-24     	; 0x71f2 <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    720a:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    720c:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    720e:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    7210:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    7212:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    7214:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    7216:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    7218:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    721a:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    721c:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    721e:	aa f7       	brpl	.-22     	; 0x720a <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    7220:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    7222:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    7224:	08 95       	ret

00007226 <malloc>:
malloc():
    7226:	0f 93       	push	r16
    7228:	1f 93       	push	r17
    722a:	cf 93       	push	r28
    722c:	df 93       	push	r29
    722e:	82 30       	cpi	r24, 0x02	; 2
    7230:	91 05       	cpc	r25, r1
    7232:	10 f4       	brcc	.+4      	; 0x7238 <malloc+0x12>
    7234:	82 e0       	ldi	r24, 0x02	; 2
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <__flp>
    723c:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <__flp+0x1>
    7240:	30 e0       	ldi	r19, 0x00	; 0
    7242:	20 e0       	ldi	r18, 0x00	; 0
    7244:	b0 e0       	ldi	r27, 0x00	; 0
    7246:	a0 e0       	ldi	r26, 0x00	; 0
    7248:	30 97       	sbiw	r30, 0x00	; 0
    724a:	99 f4       	brne	.+38     	; 0x7272 <malloc+0x4c>
    724c:	21 15       	cp	r18, r1
    724e:	31 05       	cpc	r19, r1
    7250:	09 f4       	brne	.+2      	; 0x7254 <malloc+0x2e>
    7252:	4a c0       	rjmp	.+148    	; 0x72e8 <malloc+0xc2>
    7254:	28 1b       	sub	r18, r24
    7256:	39 0b       	sbc	r19, r25
    7258:	24 30       	cpi	r18, 0x04	; 4
    725a:	31 05       	cpc	r19, r1
    725c:	d8 f5       	brcc	.+118    	; 0x72d4 <malloc+0xae>
    725e:	8a 81       	ldd	r24, Y+2	; 0x02
    7260:	9b 81       	ldd	r25, Y+3	; 0x03
    7262:	61 15       	cp	r22, r1
    7264:	71 05       	cpc	r23, r1
    7266:	89 f1       	breq	.+98     	; 0x72ca <malloc+0xa4>
    7268:	fb 01       	movw	r30, r22
    726a:	93 83       	std	Z+3, r25	; 0x03
    726c:	82 83       	std	Z+2, r24	; 0x02
    726e:	fe 01       	movw	r30, r28
    7270:	11 c0       	rjmp	.+34     	; 0x7294 <malloc+0x6e>
    7272:	40 81       	ld	r20, Z
    7274:	51 81       	ldd	r21, Z+1	; 0x01
    7276:	02 81       	ldd	r16, Z+2	; 0x02
    7278:	13 81       	ldd	r17, Z+3	; 0x03
    727a:	48 17       	cp	r20, r24
    727c:	59 07       	cpc	r21, r25
    727e:	e0 f0       	brcs	.+56     	; 0x72b8 <malloc+0x92>
    7280:	48 17       	cp	r20, r24
    7282:	59 07       	cpc	r21, r25
    7284:	99 f4       	brne	.+38     	; 0x72ac <malloc+0x86>
    7286:	10 97       	sbiw	r26, 0x00	; 0
    7288:	61 f0       	breq	.+24     	; 0x72a2 <malloc+0x7c>
    728a:	12 96       	adiw	r26, 0x02	; 2
    728c:	0c 93       	st	X, r16
    728e:	12 97       	sbiw	r26, 0x02	; 2
    7290:	13 96       	adiw	r26, 0x03	; 3
    7292:	1c 93       	st	X, r17
    7294:	32 96       	adiw	r30, 0x02	; 2
    7296:	cf 01       	movw	r24, r30
    7298:	df 91       	pop	r29
    729a:	cf 91       	pop	r28
    729c:	1f 91       	pop	r17
    729e:	0f 91       	pop	r16
    72a0:	08 95       	ret
    72a2:	00 93 fe 05 	sts	0x05FE, r16	; 0x8005fe <__flp>
    72a6:	10 93 ff 05 	sts	0x05FF, r17	; 0x8005ff <__flp+0x1>
    72aa:	f4 cf       	rjmp	.-24     	; 0x7294 <malloc+0x6e>
    72ac:	21 15       	cp	r18, r1
    72ae:	31 05       	cpc	r19, r1
    72b0:	51 f0       	breq	.+20     	; 0x72c6 <malloc+0xa0>
    72b2:	42 17       	cp	r20, r18
    72b4:	53 07       	cpc	r21, r19
    72b6:	38 f0       	brcs	.+14     	; 0x72c6 <malloc+0xa0>
    72b8:	a9 01       	movw	r20, r18
    72ba:	db 01       	movw	r26, r22
    72bc:	9a 01       	movw	r18, r20
    72be:	bd 01       	movw	r22, r26
    72c0:	df 01       	movw	r26, r30
    72c2:	f8 01       	movw	r30, r16
    72c4:	c1 cf       	rjmp	.-126    	; 0x7248 <malloc+0x22>
    72c6:	ef 01       	movw	r28, r30
    72c8:	f9 cf       	rjmp	.-14     	; 0x72bc <malloc+0x96>
    72ca:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <__flp+0x1>
    72ce:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <__flp>
    72d2:	cd cf       	rjmp	.-102    	; 0x726e <malloc+0x48>
    72d4:	fe 01       	movw	r30, r28
    72d6:	e2 0f       	add	r30, r18
    72d8:	f3 1f       	adc	r31, r19
    72da:	81 93       	st	Z+, r24
    72dc:	91 93       	st	Z+, r25
    72de:	22 50       	subi	r18, 0x02	; 2
    72e0:	31 09       	sbc	r19, r1
    72e2:	39 83       	std	Y+1, r19	; 0x01
    72e4:	28 83       	st	Y, r18
    72e6:	d7 cf       	rjmp	.-82     	; 0x7296 <malloc+0x70>
    72e8:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    72ec:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    72f0:	23 2b       	or	r18, r19
    72f2:	41 f4       	brne	.+16     	; 0x7304 <malloc+0xde>
    72f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    72f8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    72fc:	30 93 fd 05 	sts	0x05FD, r19	; 0x8005fd <__brkval+0x1>
    7300:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <__brkval>
    7304:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7308:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    730c:	21 15       	cp	r18, r1
    730e:	31 05       	cpc	r19, r1
    7310:	41 f4       	brne	.+16     	; 0x7322 <malloc+0xfc>
    7312:	2d b7       	in	r18, 0x3d	; 61
    7314:	3e b7       	in	r19, 0x3e	; 62
    7316:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    731a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    731e:	24 1b       	sub	r18, r20
    7320:	35 0b       	sbc	r19, r21
    7322:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <__brkval>
    7326:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <__brkval+0x1>
    732a:	e2 17       	cp	r30, r18
    732c:	f3 07       	cpc	r31, r19
    732e:	a0 f4       	brcc	.+40     	; 0x7358 <malloc+0x132>
    7330:	2e 1b       	sub	r18, r30
    7332:	3f 0b       	sbc	r19, r31
    7334:	28 17       	cp	r18, r24
    7336:	39 07       	cpc	r19, r25
    7338:	78 f0       	brcs	.+30     	; 0x7358 <malloc+0x132>
    733a:	ac 01       	movw	r20, r24
    733c:	4e 5f       	subi	r20, 0xFE	; 254
    733e:	5f 4f       	sbci	r21, 0xFF	; 255
    7340:	24 17       	cp	r18, r20
    7342:	35 07       	cpc	r19, r21
    7344:	48 f0       	brcs	.+18     	; 0x7358 <malloc+0x132>
    7346:	4e 0f       	add	r20, r30
    7348:	5f 1f       	adc	r21, r31
    734a:	50 93 fd 05 	sts	0x05FD, r21	; 0x8005fd <__brkval+0x1>
    734e:	40 93 fc 05 	sts	0x05FC, r20	; 0x8005fc <__brkval>
    7352:	81 93       	st	Z+, r24
    7354:	91 93       	st	Z+, r25
    7356:	9f cf       	rjmp	.-194    	; 0x7296 <malloc+0x70>
    7358:	f0 e0       	ldi	r31, 0x00	; 0
    735a:	e0 e0       	ldi	r30, 0x00	; 0
    735c:	9c cf       	rjmp	.-200    	; 0x7296 <malloc+0x70>

0000735e <free>:
free():
    735e:	cf 93       	push	r28
    7360:	df 93       	push	r29
    7362:	00 97       	sbiw	r24, 0x00	; 0
    7364:	e9 f0       	breq	.+58     	; 0x73a0 <free+0x42>
    7366:	fc 01       	movw	r30, r24
    7368:	32 97       	sbiw	r30, 0x02	; 2
    736a:	13 82       	std	Z+3, r1	; 0x03
    736c:	12 82       	std	Z+2, r1	; 0x02
    736e:	a0 91 fe 05 	lds	r26, 0x05FE	; 0x8005fe <__flp>
    7372:	b0 91 ff 05 	lds	r27, 0x05FF	; 0x8005ff <__flp+0x1>
    7376:	ed 01       	movw	r28, r26
    7378:	30 e0       	ldi	r19, 0x00	; 0
    737a:	20 e0       	ldi	r18, 0x00	; 0
    737c:	10 97       	sbiw	r26, 0x00	; 0
    737e:	a1 f4       	brne	.+40     	; 0x73a8 <free+0x4a>
    7380:	20 81       	ld	r18, Z
    7382:	31 81       	ldd	r19, Z+1	; 0x01
    7384:	82 0f       	add	r24, r18
    7386:	93 1f       	adc	r25, r19
    7388:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    738c:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    7390:	28 17       	cp	r18, r24
    7392:	39 07       	cpc	r19, r25
    7394:	09 f0       	breq	.+2      	; 0x7398 <free+0x3a>
    7396:	61 c0       	rjmp	.+194    	; 0x745a <free+0xfc>
    7398:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__brkval+0x1>
    739c:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__brkval>
    73a0:	df 91       	pop	r29
    73a2:	cf 91       	pop	r28
    73a4:	08 95       	ret
    73a6:	ea 01       	movw	r28, r20
    73a8:	ce 17       	cp	r28, r30
    73aa:	df 07       	cpc	r29, r31
    73ac:	e8 f5       	brcc	.+122    	; 0x7428 <free+0xca>
    73ae:	4a 81       	ldd	r20, Y+2	; 0x02
    73b0:	5b 81       	ldd	r21, Y+3	; 0x03
    73b2:	9e 01       	movw	r18, r28
    73b4:	41 15       	cp	r20, r1
    73b6:	51 05       	cpc	r21, r1
    73b8:	b1 f7       	brne	.-20     	; 0x73a6 <free+0x48>
    73ba:	e9 01       	movw	r28, r18
    73bc:	fb 83       	std	Y+3, r31	; 0x03
    73be:	ea 83       	std	Y+2, r30	; 0x02
    73c0:	49 91       	ld	r20, Y+
    73c2:	59 91       	ld	r21, Y+
    73c4:	c4 0f       	add	r28, r20
    73c6:	d5 1f       	adc	r29, r21
    73c8:	ec 17       	cp	r30, r28
    73ca:	fd 07       	cpc	r31, r29
    73cc:	61 f4       	brne	.+24     	; 0x73e6 <free+0x88>
    73ce:	80 81       	ld	r24, Z
    73d0:	91 81       	ldd	r25, Z+1	; 0x01
    73d2:	02 96       	adiw	r24, 0x02	; 2
    73d4:	84 0f       	add	r24, r20
    73d6:	95 1f       	adc	r25, r21
    73d8:	e9 01       	movw	r28, r18
    73da:	99 83       	std	Y+1, r25	; 0x01
    73dc:	88 83       	st	Y, r24
    73de:	82 81       	ldd	r24, Z+2	; 0x02
    73e0:	93 81       	ldd	r25, Z+3	; 0x03
    73e2:	9b 83       	std	Y+3, r25	; 0x03
    73e4:	8a 83       	std	Y+2, r24	; 0x02
    73e6:	f0 e0       	ldi	r31, 0x00	; 0
    73e8:	e0 e0       	ldi	r30, 0x00	; 0
    73ea:	12 96       	adiw	r26, 0x02	; 2
    73ec:	8d 91       	ld	r24, X+
    73ee:	9c 91       	ld	r25, X
    73f0:	13 97       	sbiw	r26, 0x03	; 3
    73f2:	00 97       	sbiw	r24, 0x00	; 0
    73f4:	b9 f5       	brne	.+110    	; 0x7464 <free+0x106>
    73f6:	2d 91       	ld	r18, X+
    73f8:	3c 91       	ld	r19, X
    73fa:	11 97       	sbiw	r26, 0x01	; 1
    73fc:	cd 01       	movw	r24, r26
    73fe:	02 96       	adiw	r24, 0x02	; 2
    7400:	82 0f       	add	r24, r18
    7402:	93 1f       	adc	r25, r19
    7404:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    7408:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    740c:	28 17       	cp	r18, r24
    740e:	39 07       	cpc	r19, r25
    7410:	39 f6       	brne	.-114    	; 0x73a0 <free+0x42>
    7412:	30 97       	sbiw	r30, 0x00	; 0
    7414:	51 f5       	brne	.+84     	; 0x746a <free+0x10c>
    7416:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <__flp+0x1>
    741a:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <__flp>
    741e:	b0 93 fd 05 	sts	0x05FD, r27	; 0x8005fd <__brkval+0x1>
    7422:	a0 93 fc 05 	sts	0x05FC, r26	; 0x8005fc <__brkval>
    7426:	bc cf       	rjmp	.-136    	; 0x73a0 <free+0x42>
    7428:	d3 83       	std	Z+3, r29	; 0x03
    742a:	c2 83       	std	Z+2, r28	; 0x02
    742c:	40 81       	ld	r20, Z
    742e:	51 81       	ldd	r21, Z+1	; 0x01
    7430:	84 0f       	add	r24, r20
    7432:	95 1f       	adc	r25, r21
    7434:	c8 17       	cp	r28, r24
    7436:	d9 07       	cpc	r29, r25
    7438:	61 f4       	brne	.+24     	; 0x7452 <free+0xf4>
    743a:	4e 5f       	subi	r20, 0xFE	; 254
    743c:	5f 4f       	sbci	r21, 0xFF	; 255
    743e:	88 81       	ld	r24, Y
    7440:	99 81       	ldd	r25, Y+1	; 0x01
    7442:	48 0f       	add	r20, r24
    7444:	59 1f       	adc	r21, r25
    7446:	51 83       	std	Z+1, r21	; 0x01
    7448:	40 83       	st	Z, r20
    744a:	8a 81       	ldd	r24, Y+2	; 0x02
    744c:	9b 81       	ldd	r25, Y+3	; 0x03
    744e:	93 83       	std	Z+3, r25	; 0x03
    7450:	82 83       	std	Z+2, r24	; 0x02
    7452:	21 15       	cp	r18, r1
    7454:	31 05       	cpc	r19, r1
    7456:	09 f0       	breq	.+2      	; 0x745a <free+0xfc>
    7458:	b0 cf       	rjmp	.-160    	; 0x73ba <free+0x5c>
    745a:	f0 93 ff 05 	sts	0x05FF, r31	; 0x8005ff <__flp+0x1>
    745e:	e0 93 fe 05 	sts	0x05FE, r30	; 0x8005fe <__flp>
    7462:	9e cf       	rjmp	.-196    	; 0x73a0 <free+0x42>
    7464:	fd 01       	movw	r30, r26
    7466:	dc 01       	movw	r26, r24
    7468:	c0 cf       	rjmp	.-128    	; 0x73ea <free+0x8c>
    746a:	13 82       	std	Z+3, r1	; 0x03
    746c:	12 82       	std	Z+2, r1	; 0x02
    746e:	d7 cf       	rjmp	.-82     	; 0x741e <free+0xc0>

00007470 <memset>:
memset():
    7470:	dc 01       	movw	r26, r24
    7472:	01 c0       	rjmp	.+2      	; 0x7476 <memset+0x6>
    7474:	6d 93       	st	X+, r22
    7476:	41 50       	subi	r20, 0x01	; 1
    7478:	50 40       	sbci	r21, 0x00	; 0
    747a:	e0 f7       	brcc	.-8      	; 0x7474 <memset+0x4>
    747c:	08 95       	ret

0000747e <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:91
    747e:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:92
    7480:	fe cf       	rjmp	.-4      	; 0x747e <eeprom_read_byte>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:95
    7482:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:101
    7484:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:102
    7486:	f8 9a       	sbi	0x1f, 0	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:103
    7488:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:104
    748a:	80 b5       	in	r24, 0x20	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:105
    748c:	08 95       	ret

0000748e <eeprom_write_byte>:
eeprom_write_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:42
    748e:	26 2f       	mov	r18, r22

00007490 <eeprom_write_r18>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:162
    7490:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:163
    7492:	fe cf       	rjmp	.-4      	; 0x7490 <eeprom_write_r18>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:167
    7494:	1f ba       	out	0x1f, r1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:174
    7496:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:180
    7498:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:181
    749a:	20 bd       	out	0x20, r18	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:182
    749c:	0f b6       	in	r0, 0x3f	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:183
    749e:	f8 94       	cli
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:184
    74a0:	fa 9a       	sbi	0x1f, 2	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:185
    74a2:	f9 9a       	sbi	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:186
    74a4:	0f be       	out	0x3f, r0	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:187
    74a6:	01 96       	adiw	r24, 0x01	; 1
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:188
    74a8:	08 95       	ret

000074aa <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    74aa:	1a e0       	ldi	r17, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    74ac:	c2 e0       	ldi	r28, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    74ae:	da e0       	ldi	r29, 0x0A	; 10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    74b0:	04 c0       	rjmp	.+8      	; 0x74ba <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    74b2:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    74b4:	0e 94 b6 38 	call	0x716c	; 0x716c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    74b8:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    74ba:	c4 30       	cpi	r28, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    74bc:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    74be:	c9 f7       	brne	.-14     	; 0x74b2 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    74c0:	f8 94       	cli

000074c2 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    74c2:	ff cf       	rjmp	.-2      	; 0x74c2 <__stop_program>
