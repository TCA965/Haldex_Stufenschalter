
C:\Users\Thaddaeus\AppData\Local\Temp\arduino\sketches\3ED67F4AD4DF242D66896738D9F27E5F/Haldex_Stufenschalter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
../../../../crt1/gcrt1.S:65
       0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__vector_3>
../../../../crt1/gcrt1.S:70
      10:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 0a 36 	jmp	0x6c14	; 0x6c14 <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 2a 33 	jmp	0x6654	; 0x6654 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 5c 33 	jmp	0x66b8	; 0x66b8 <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 12 2e 	jmp	0x5c24	; 0x5c24 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 bf 30 	jmp	0x617e	; 0x617e <__vector_40>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 35 09 	jmp	0x126a	; 0x126a <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__trampolines_end>:
__trampolines_end():
     10e:	55 6e       	ori	r21, 0xE5	; 229
     110:	74 65       	ori	r23, 0x54	; 84
     112:	72 62       	ori	r23, 0x22	; 34
     114:	72 65       	ori	r23, 0x52	; 82
     116:	63 68       	ori	r22, 0x83	; 131
     118:	75 6e       	ori	r23, 0xE5	; 229
     11a:	67 20       	and	r6, r7
     11c:	53 74       	andi	r21, 0x43	; 67
     11e:	65 70       	andi	r22, 0x05	; 5
     120:	70 65       	ori	r23, 0x50	; 80
     122:	72 00       	.word	0x0072	; ????

00000124 <LeseTMCStatus(bool)::__c>:
     124:	46 65 68 6c 65 72 21 00                             Fehler!.

0000012c <LeseTMCStatus(bool)::__c>:
     12c:	4b 75 72 7a 73 63 68 6c 75 73 73 20 53 74 65 70     Kurzschluss Step
     13c:	70 65 72 00                                         per.

00000140 <LeseTMCStatus(bool)::__c>:
     140:	46 65 68 6c 65 72 21 00                             Fehler!.

00000148 <LeseTMCStatus(bool)::__c>:
     148:	4b 75 72 7a 73 63 68 6c 75 73 73 20 6e 61 63 68     Kurzschluss nach
     158:	20 4d 61 73 73 65 00                                 Masse.

0000015f <LeseTMCStatus(bool)::__c>:
     15f:	46 65 68 6c 65 72 21 00                             Fehler!.

00000167 <LeseTMCStatus(bool)::__c>:
     167:	4d 6f 74 6f 72 74 72 65 69 62 65 72 00              Motortreiber.

00000174 <LeseTMCStatus(bool)::__c>:
     174:	c3 9c 62 65 72 74 65 6d 70 65 72 61 74 75 72 00     ..bertemperatur.

00000184 <LeseTMCStatus(bool)::__c>:
     184:	46 65 68 6c 65 72 21 00                             Fehler!.

0000018c <LeseEingaenge()::__c>:
     18c:	62 65 69 6d 20 6e 61 65 63 68 73 74 65 6e 20 53     beim naechsten S
     19c:	74 61 72 74 00                                      tart.

000001a1 <LeseEingaenge()::__c>:
     1a1:	48 61 6c 64 65 78 20 41 75 74 6f 74 75 6e 65 00     Haldex Autotune.

000001b1 <SchreibeDisplay()::__c>:
     1b1:	43 00                                               C.

000001b3 <SchreibeDisplay()::__c>:
     1b3:	20 00                                                .

000001b5 <SchreibeDisplay()::__c>:
     1b5:	6c 74 65 6d 70 65 72 61 74 75 72 20 00              ltemperatur .

000001c2 <SchreibeDisplay()::__c>:
     1c2:	62 65 72 74 65 6d 70 65 72 61 74 75 72 00           bertemperatur.

000001d0 <SchreibeDisplay()::__c>:
     1d0:	48 61 75 70 74 73 63 68 61 6c 74 65 72 20 61 75     Hauptschalter au
     1e0:	73 00                                               s.

000001e2 <SchreibeDisplay()::__c>:
     1e2:	74 69 67 74 00                                      tigt.

000001e7 <SchreibeDisplay()::__c>:
     1e7:	42 72 65 6d 73 65 20 62 65 74 00                    Bremse bet.

000001f2 <SchreibeDisplay()::__c>:
     1f2:	74 69 67 74 00                                      tigt.

000001f7 <SchreibeDisplay()::__c>:
     1f7:	48 61 6e 64 62 72 65 6d 73 65 20 62 65 74 00        Handbremse bet.

00000206 <SchreibeDisplay()::__c>:
     206:	20 25 00                                             %.

00000209 <SchreibeDisplay()::__c>:
     209:	48 41 4c 44 45 58 00                                HALDEX.

00000210 <loop::__c>:
     210:	56 6f 72 6c 61 64 65 70 75 6d 70 65 00              Vorladepumpe.

0000021d <loop::__c>:
     21d:	46 65 68 6c 65 72 21 00                             Fehler!.

00000225 <setup::__c>:
     225:	20 73 74 65 70 73 00                                 steps.

0000022c <setup::__c>:
     22c:	48 61 6c 64 65 78 20 41 75 74 6f 74 75 6e 65 00     Haldex Autotune.

0000023c <setup::__c>:
     23c:	48 61 6c 64 65 78 20 41 75 74 6f 74 75 6e 65 00     Haldex Autotune.

0000024c <setup::__c>:
     24c:	61 6c 6c 72 61 64 62 75 73 2e 63 6f 6d 00           allradbus.com.

0000025a <setup::__c>:
     25a:	54 43 41 39 36 35 00                                TCA965.

00000261 <setup::__c>:
     261:	48 61 6c 64 65 78 20 43 6f 6e 74 72 6f 6c 6c 65     Haldex Controlle
     271:	72 00                                               r.

00000273 <u8g2_font_helvR08_tf>:
     273:	bf 00 03 02 04 04 02 04 05 0b 0d ff fe 08 fe 08     ................
     283:	fe 01 53 02 bd 08 67 20 05 00 e6 04 21 06 81 e3     ..S...g ....!...
     293:	c4 25 22 07 23 3b 45 a2 04 23 10 76 a2 55 92 25     .%".#;E..#.v.U.%
     2a3:	d1 20 25 c9 20 25 59 12 01 24 10 a5 9e 55 b6 54     . %. %Y..$...U.T
     2b3:	94 6c 4b a2 44 a9 6c 11 00 25 10 88 62 8e d4 92     .lK.D.l..%..b...
     2c3:	29 79 9c 27 5a 12 95 14 00 26 0d 86 23 8e 16 b5     )y.'Z....&..#...
     2d3:	69 51 a2 25 91 29 27 06 21 ba 84 00 28 0b a3 1a     iQ.%.)'.!...(...
     2e3:	55 12 25 51 5b 94 05 29 0c a3 1b 45 16 65 51 4b     U.%Q[..)...E.eQK
     2f3:	94 44 00 2a 07 33 36 45 d2 01 2b 0a 55 a6 55 18     .D.*.36E..+.U.U.
     303:	0d 52 18 01 2c 07 32 da 4c a2 00 2d 06 13 2e c5     .R..,.2.L..-....
     313:	00 2e 06 11 e3 44 00 2f 0a 83 e2 54 25 6a 89 22     .....D./...T%j."
     323:	00 30 0a 85 a2 cd 92 f9 96 2c 00 31 07 82 a3 cd     .0.......,.1....
     333:	d2 07 32 0c 85 a2 cd 92 85 25 29 0b 07 01 33 0c     ..2......%)...3.
     343:	85 a2 cd 92 85 91 1a 6a c9 02 34 0e 85 a2 5d 26     .......j..4...]&
     353:	25 51 52 4a 06 2d 4c 00 35 0c 85 a2 cd 90 84 e1     %QRJ.-L.5.......
     363:	1a 6a c9 02 36 0c 85 a2 cd 92 89 43 92 d9 92 05     .j..6......C....
     373:	37 0b 85 a2 c5 20 66 c5 2c ac 01 38 0c 85 a2 cd     7.... f.,..8....
     383:	92 69 c9 92 d9 92 05 39 0c 85 a2 cd 92 d9 92 21     .i.....9.......!
     393:	d4 92 05 3a 06 61 e3 44 18 3b 09 82 da 4c 0e 25     ...:.a.D.;...L.%
     3a3:	0a 00 3c 07 53 a7 55 52 2b 3d 08 34 6a c5 10 0e     ..<.S.UR+=.4j...
     3b3:	01 3e 08 53 a7 45 56 29 01 3f 0b 84 a3 8d 12 65     .>.S.EV).?.....e
     3c3:	51 2d 8f 00 40 16 9a de de 20 a6 51 a4 24 52 49     Q-..@.... .Q.$RI
     3d3:	c9 22 25 aa 44 8a 96 63 83 06 41 0e 87 e2 5d 9c     ."%.D..c..A...].
     3e3:	26 61 92 95 06 25 55 03 42 0d 85 e3 c5 90 64 da     &a...%U.B.....d.
     3f3:	a0 64 b6 41 01 43 0c 86 23 ce 90 84 6a c7 64 48     .d.A.C..#...j.dH
     403:	00 44 0d 86 23 c6 10 65 49 e8 2d 19 22 00 45 0a     .D..#..eI.-.".E.
     413:	85 e3 c5 31 1c c6 e2 20 46 0a 85 a3 c5 31 1c 92     ...1... F....1..
     423:	b0 11 47 0c 86 23 ce 90 84 6a 6d 14 93 41 48 0a     ..G..#...jm..AH.
     433:	86 23 46 68 1c 06 d1 31 49 06 81 e3 c4 41 4a 09     .#Fh...1I....AJ.
     443:	84 62 5d 6f 52 a2 00 4b 0d 85 e3 45 26 25 a5 a9     .b]oR..K...E&%..
     453:	12 25 99 16 4c 08 84 a3 45 d6 b7 21 4d 10 87 63     .%..L...E..!M..c
     463:	46 ba 0d d9 52 51 2a 52 24 45 52 01 4e 0f 86 23     F...RQ*R$ER.N..#
     473:	86 b6 29 91 12 49 89 94 68 9b 00 4f 0b 86 23 ce     ..)..I..h..O..#.
     483:	90 84 3e 26 43 02 50 0c 85 e3 c5 90 64 da a0 84     ..>&C.P.....d...
     493:	8d 00 51 12 97 1f ce 10 85 49 98 84 49 98 44 49     ..Q......I..I.DI
     4a3:	4d 1a f4 00 52 0c 85 e3 c5 90 64 da a0 64 6e 01     M...R.....d..dn.
     4b3:	53 0c 85 e3 cd 92 a9 ab a6 25 0b 00 54 09 85 62     S........%..T..b
     4c3:	c5 20 85 7d 02 55 0a 86 23 46 e8 c7 64 48 00 56     . .}.U..#F..dH.V
     4d3:	0f 87 e2 45 aa 26 59 94 45 59 25 4c d2 0c 57 10     ...E.&Y.EY%L..W.
     4e3:	89 62 46 96 69 95 a8 2f 6d c5 2c cc 22 00 58 0d     .bF.i../m.,.".X.
     4f3:	85 e3 45 a6 25 b5 4a 94 d4 b4 00 59 0e 87 e2 45     ..E.%.J....Y...E
     503:	9a 64 51 56 09 93 34 ae 01 5a 0b 85 e3 c5 20 66     .dQV..4..Z.... f
     513:	c5 ac 38 08 5b 08 a2 db c4 d2 2f 02 5c 0a 83 e2     ..8.[...../.\...
     523:	44 94 45 6d 51 00 5d 08 a2 da 84 d2 2f 03 5e 0a     D.EmQ.]...../.^.
     533:	55 ae 55 98 25 51 52 0b 5f 06 16 9a c5 01 60 06     U.U.%QR._.....`.
     543:	22 fe 44 14 61 0c 65 62 c5 1a 2d 51 12 45 4a 00     ".D.a.eb..-Q.EJ.
     553:	62 0c 85 a2 45 58 31 69 da a4 28 00 63 0a 64 62     b...EX1i..(.c.db
     563:	8d 12 69 a5 44 01 64 0a 85 a2 65 c5 b4 99 14 25     ..i.D.d...e....%
     573:	65 0b 64 62 8d 12 0d 5b 94 28 00 66 0a 84 22 95     e.db...[.(.f..".
     583:	12 4d 59 27 00 67 0c 85 9a 8d 69 33 29 4a 98 2c     .MY'.g....i3)J.,
     593:	00 68 0a 85 a2 45 58 31 69 6e 01 69 07 81 a2 44     .h...EX1in.i...D
     5a3:	32 0c 6a 09 a2 99 4c 96 f4 a2 00 6b 0c 84 62 45     2.j...L....k..bE
     5b3:	56 52 12 29 29 49 01 6c 06 81 a2 c4 41 6d 0e 67     VR.))I.l....Am.g
     5c3:	22 c6 a2 44 91 14 49 91 14 49 05 6e 09 65 a2 45     "..D..I..I.n.e.E
     5d3:	62 d2 dc 02 6f 0a 65 a2 cd 92 b9 25 0b 00 70 0c     b...o.e....%..p.
     5e3:	85 9a 45 62 d2 b4 49 51 c2 10 71 0a 85 9a 8d 69     ..Eb..IQ..q....i
     5f3:	33 29 4a 58 72 09 63 22 45 b2 44 4d 00 73 0b 64     3)JXr.c"E.DM.s.d
     603:	62 8d 12 25 a2 94 28 00 74 0a 83 22 4d 94 2c 51     b..%..(.t.."M.,Q
     613:	93 00 75 08 64 62 45 e4 29 19 76 0c 65 a2 45 a6     ..u.dbE.).v.e.E.
     623:	25 a5 24 0b 23 00 77 0e 67 22 46 14 49 95 a6 a4     %.$.#.w.g"F.I...
     633:	96 84 49 04 78 0a 65 a2 45 96 d4 2a 35 2d 79 0e     ..I.x.e.E..*5-y.
     643:	85 59 4d 94 44 49 29 c9 b4 30 d2 00 7a 0a 64 62     .YM.DI)..0..z.db
     653:	c5 90 45 6d 43 00 7b 0a a3 da 54 12 55 b2 a8 2d     ..EmC.{...T.U..-
     663:	7c 07 a1 db c4 43 00 7d 0b a3 da 44 16 d5 92 a8     |....C.}...D....
     673:	25 02 7e 07 26 ee 8d 64 01 a0 05 00 e6 04 a1 07     %.~.&..d........
     683:	81 db 44 32 0c a2 0e 85 9f 5d b4 54 94 28 89 92     ..D2.....].T.(..
     693:	ca 94 01 a3 0c 85 a2 95 54 c9 b6 b0 a4 28 00 a4     ........T....(..
     6a3:	0c 64 66 45 94 28 91 94 28 51 00 a5 0d 85 a2 45     .dfE.(..(Q.....E
     6b3:	66 4b 2a 83 14 0d 52 04 a6 08 a1 db c4 10 0d 01     fK*...R.........
     6c3:	a7 0f a5 9a cd 92 8d 4b 34 44 c9 b8 25 0b 00 a8     .......K4D..%...
     6d3:	06 13 fe 44 12 a9 0e 77 63 d6 56 89 14 25 93 94     ...D...wc.V..%..
     6e3:	5a 36 01 aa 08 53 2e c5 a4 64 03 ab 0a 55 a2 55     Z6...S...d...U.U
     6f3:	d2 5b 92 25 01 ac 07 35 eb c5 20 16 ad 06 13 2e     .[.%...5.. .....
     703:	c5 00 ae 0d 77 63 d6 56 49 16 93 d2 2d 9b 00 af     ....wc.VI...-...
     713:	06 13 fe c4 00 b0 09 44 32 8d 12 49 89 02 b1 0b     .......D2..I....
     723:	75 a2 55 18 0d 52 98 0f 02 b2 07 43 f2 cc 52 19     u.U..R.....C..R.
     733:	b3 08 43 f2 c4 92 2d 00 b4 06 22 fe 8c 02 b5 0a     ..C...-...".....
     743:	84 5a 45 e4 69 d8 32 00 b6 15 a6 9a cd 30 28 c9     .ZE.i.2......0(.
     753:	92 2c 91 92 25 59 92 25 59 92 25 09 00 b7 06 12     .,..%Y.%Y.%.....
     763:	ee 84 00 b8 06 22 da cc 00 b9 06 42 f2 cc 52 ba     .....".....B..R.
     773:	09 53 2e c5 90 0c d9 00 bb 0b 55 a2 45 92 25 59     .S........U.E.%Y
     783:	d2 13 00 bc 12 89 62 4e 96 69 61 94 46 79 16 46     ......bN.ia.Fy.F
     793:	5a 34 44 61 02 bd 10 88 62 4e 16 69 a5 30 8a 23     Z4Da....bN.i.0.#
     7a3:	2d 29 65 a5 01 be 12 89 62 c6 9e a5 51 26 e5 48     -)e.....b...Q&.H
     7b3:	14 46 62 32 44 61 02 bf 0b 84 9b 55 9e 45 b5 28     .Fb2Da.....U.E.(
     7c3:	51 00 c0 10 b7 e2 55 9e c3 d5 24 4c b2 d2 a0 a4     Q.....U...$L....
     7d3:	6a 00 c1 10 b7 e2 65 9a c3 d5 24 4c b2 d2 a0 a4     j.....e...$L....
     7e3:	6a 00 c2 11 b7 e2 5d 9a e4 68 9c 26 61 92 95 06     j.....]..h.&a...
     7f3:	25 55 03 c3 12 b7 e2 5d 92 25 39 1a a7 49 98 64     %U.....].%9..I.d
     803:	a5 41 49 d5 00 c4 10 a7 e2 55 92 a3 71 9a 84 49     .AI......U..q..I
     813:	56 1a 94 54 0d c5 10 b7 e2 5d 9a a4 71 35 09 93     V..T.....]..q5..
     823:	ac 34 28 a9 1a c6 12 89 a2 de b0 c9 49 9c 0c 4a     .4(.........I..J
     833:	94 0e 61 16 66 83 00 c7 0d a6 1b ce 90 84 6a c7     ..a.f.........j.
     843:	64 08 43 09 c8 0c b5 e3 4d 9a 0f 63 38 8c c5 41     d.C.....M..c8..A
     853:	c9 0c b5 e3 5d 7d 18 c3 61 2c 0e 02 ca 0d b5 e3     ....]}..a,......
     863:	55 96 c4 c3 18 0e 63 71 10 cb 0c a5 e3 4d 79 18     U.....cq.....My.
     873:	c3 61 2c 0e 02 cc 09 b2 e2 44 94 25 fd 00 cd 09     .a,......D.%....
     883:	b2 e3 8c 96 f4 0b 00 ce 09 b3 e2 4c 63 d4 2f 00     ...........Lc./.
     893:	cf 09 a3 e2 44 12 46 fd 02 d0 11 87 22 ce 90 95     ....D.F....."...
     8a3:	c2 41 4a c2 24 4c b2 68 88 00 d1 12 b6 23 56 12     .AJ.$L.h.....#V.
     8b3:	25 39 a2 6d 4a a4 44 52 22 25 da 26 d2 0e b6 23     %9.mJ.DR"%.&...#
     8c3:	56 9c 43 43 12 fa 98 0c 09 00 d3 0d b6 23 66 1d     V.CC.........#f.
     8d3:	1a 92 d0 c7 64 48 00 d4 0e b6 23 56 98 e4 d0 90     ....dH....#V....
     8e3:	84 3e 26 43 02 d5 0f b6 23 56 12 25 39 34 24 a1     .>&C....#V.%94$.
     8f3:	8f c9 90 00 d6 0e a6 23 4e 94 23 43 12 fa 98 0c     .......#N.#C....
     903:	09 00 d7 0a 55 a6 45 96 d4 2a b5 00 d8 12 a6 1f     ....U.E..*......
     913:	6e 32 24 d9 94 48 89 12 29 d1 96 0c 49 0a d9 0c     n2$..H..)...I...
     923:	b6 23 56 9c 23 a1 1f 93 21 01 da 0c b6 23 66 1d     .#V.#...!....#f.
     933:	09 fd 98 0c 09 00 db 0d b6 23 56 98 e4 48 e8 c7     .........#V..H..
     943:	64 48 00 dc 0b a6 23 4e 94 87 7e 4c 86 04 dd 10     dH....#N..~L....
     953:	b7 e2 65 9a 63 69 92 45 59 25 4c d2 b8 06 de 0d     ..e.ci.EY%L.....
     963:	85 e3 45 18 0e 49 a6 0d 4a 18 02 df 0b 84 62 8d     ..E..I..J.....b.
     973:	12 59 4a 2e 09 00 e0 0d 95 62 4d 9a af d1 12 25     .YJ......bM....%
     983:	51 a4 04 e1 0e 95 62 55 96 23 6b b4 44 49 14 29     Q.....bU.#k.DI.)
     993:	01 e2 0e 95 62 55 96 c4 6b b4 44 49 14 29 01 e3     ....bU..k.DI.)..
     9a3:	0d 95 62 4d f7 35 5a a2 24 8a 94 00 e4 0c 85 62     ..bM.5Z.$......b
     9b3:	4d 79 8d 96 28 89 22 25 e5 0f 95 62 55 96 64 d1     My..(."%...bU.d.
     9c3:	1a 2d 51 12 45 4a 00 e6 0e 67 22 c6 22 46 c9 30     .-Q.EJ...g"."F.0
     9d3:	44 59 54 b1 00 e7 0c 84 5a 8d 12 69 a5 44 8b 14     DYT.....Z..i.D..
     9e3:	00 e8 0c 94 62 4d 18 2b d1 b0 45 89 02 e9 0c 94     ....bM.+..E.....
     9f3:	62 55 5d 89 86 2d 4a 14 00 ea 0d 94 62 4d 94 c4     bU]..-J.....bM..
     a03:	4a 34 6c 51 a2 00 eb 0c 84 62 45 12 2b d1 b0 45     J4lQ.....bE.+..E
     a13:	89 02 ec 08 92 a1 44 94 25 3d ed 08 92 a2 8c 96     ......D.%=......
     a23:	f4 02 ee 09 93 a1 4c 63 d4 0b 00 ef 09 83 a1 44     ......Lc.......D
     a33:	12 46 bd 00 f0 0d 95 a2 4d 38 48 d1 a0 b9 25 0b     .F......M8H...%.
     a43:	00 f1 0a 94 62 4d a2 a4 4b e4 29 f2 0c 95 a2 4d     ....bM..K.)....M
     a53:	9a 23 4b e6 96 2c 00 f3 0b 95 a2 5d 1d 59 32 b7     .#K..,.....].Y2.
     a63:	64 01 f4 0c 95 a2 55 96 e4 4b e6 96 2c 00 f5 0b     d.....U..K..,...
     a73:	95 a2 55 d2 be 64 6e c9 02 f6 0a 85 a2 4d 7d c9     ..U..dn......M}.
     a83:	dc 92 05 f7 09 55 a6 55 3e e8 11 00 f8 0d 67 a1     .....U.U>.....g.
     a93:	d5 52 92 92 92 54 4b 92 09 f9 0a 94 62 4d 98 46     .R...TK.....bM.F
     aa3:	9e 92 01 fa 0a 94 62 5d 94 46 9e 92 01 fb 0a 94     ......b].F......
     ab3:	62 4d 94 a4 91 a7 64 fc 0a 84 62 45 92 46 9e 92     bM....d...bE.F..
     ac3:	01 fd 0f b5 59 65 96 47 49 94 94 92 4c 0b 23 0d     ....Ye.GI...L.#.
     ad3:	fe 0d a5 9a 45 58 31 69 da a4 28 61 08 ff 0f a5     ....EX1i..(a....
     ae3:	59 4d 3d 4a a2 a4 94 64 5a 18 69 00 00 00 00 04     YM=J...dZ.i.....
     af3:	ff ff 00 00                                         ....

00000af7 <u8g2_font_helvB14_tr>:
     af7:	5f 00 03 03 05 05 03 05 06 12 12 ff fc 0e fc 0e     _...............
     b07:	fc 02 25 04 ad 06 84 20 06 00 30 96 00 21 0a c3     ..%.... ..0..!..
     b17:	15 96 f8 50 11 1e 04 22 0a a5 34 9f 90 70 19 45     ...P..."..4..p.E
     b27:	00 23 1d ab 11 ae 94 88 25 62 89 ec 30 39 cc 24     .#......%b..09.$
     b37:	62 89 58 22 3b 4c 0e 33 89 58 22 96 08 01 24 1d     b.X";L.3.X"...$.
     b47:	0a d2 a9 0d db 0e 91 51 44 32 0a 8e a2 65 73 35     .......QD2...es5
     b57:	64 09 59 42 93 43 cc 1c 07 45 01 25 1e ad 15 c2     d.YB.C...E.%....
     b67:	21 8a 6c 22 6d 22 51 d0 22 a5 c8 81 71 a0 84 2a     !.l"m"Q."...q..*
     b77:	31 86 d4 44 da 4c 42 0a 00 26 1d cd 15 ba a3 43     1..D.LB..&.....C
     b87:	cc a3 a9 50 3a 92 d7 41 33 99 49 34 32 09 69 d2     ...P:..A3.I42.i.
     b97:	d9 ac 76 99 d5 06 27 08 a2 34 93 38 48 00 28 0f     ..v...'..4.8H.(.
     ba7:	46 96 9d 1b cd 64 33 d9 fe 28 1c 0a 17 29 12 46     F....d3..(...).F
     bb7:	92 9d 18 0e 85 43 e1 6c bf c9 66 b2 d1 0c 00 2a     .....C.l..f....*
     bc7:	0f c7 14 a7 8b 49 22 92 da 4c 22 8a 45 00 2b 0d     .....I"..L".E.+.
     bd7:	08 35 ae 13 ab 1d 0e 32 b1 1a 00 2c 0a c3 b4 95     .5.....2...,....
     be7:	38 48 28 21 00 2d 07 65 90 9a 78 08 2e 07 63 14     8H(!.-.e..x...c.
     bf7:	96 38 08 2f 10 c5 11 96 d3 34 92 29 8d 64 a2 91     .8./.....4.).d..
     c07:	4c 0d 00 30 0f a9 11 aa 1b 9e 26 6b fe 36 59 3a     L..0......&k.6Y:
     c17:	ce 00 31 0b a6 15 aa 1b 1d 0e b2 fd 03 32 12 a9     ..1..........2..
     c27:	11 aa aa 5d 66 b6 f1 74 58 ab 51 97 0f 07 02 33     ...]f..tX.Q....3
     c37:	13 a9 11 aa aa 5d 46 93 99 78 48 2d 93 6d 26 ca     .....]F..xH-.m&.
     c47:	ad 04 34 15 a9 11 aa 9d 12 6b 36 c9 68 32 12 4d     ..4......k6.h2.M
     c57:	46 93 c3 81 3a 5e 01 35 15 a9 11 aa 38 44 0e 91     F...:^.5....8D..
     c67:	f1 f8 74 88 8c c8 63 9b e9 50 32 01 36 14 a9 11     ..t...c..P2.6...
     c77:	aa 32 1d 22 b3 f2 64 74 88 90 8c 8d a6 c9 ad 04     .2."..dt........
     c87:	37 10 a9 11 aa 78 20 4f 97 a7 e3 e9 78 3a 5e 05     7....x O....x:^.
     c97:	38 12 a9 11 aa aa 5d 66 6e 93 5b 6d b2 e6 36 b9     8.....]fn.[m..6.
     ca7:	95 00 39 14 a9 11 aa aa 5d 46 c6 46 13 e5 10 9a     ..9.....]F.F....
     cb7:	8c 6b 93 43 c8 04 3a 0a 43 15 9a 38 c8 a1 07 01     .k.C..:.C..8....
     cc7:	3b 0c a3 b5 99 38 c8 a1 07 09 25 04 3c 0d 29 15     ;....8....%.<.).
     cd7:	ae 1e 96 6a c4 39 b9 79 00 3d 0b a9 74 ae 78 a0     ...j.9.y.=..t.x.
     ce7:	83 0e 07 02 3e 0d 29 15 ae 18 37 d3 87 b4 52 71     ....>.)...7...Rq
     cf7:	0c 3f 11 c8 15 aa b1 1c 48 a6 e1 90 b8 ba 0e 9e     .?......H.......
     d07:	ae 01 40 2a 30 b6 c9 bd 1f 88 54 d2 1c a4 36 91     ..@*0.....T...6.
     d17:	98 4e 34 91 8c 24 93 91 14 49 6a 12 91 9a 64 72     .N4..$...Ij...dr
     d27:	18 8d 28 c3 39 9c 0e 3e c8 41 47 00 41 19 cc 15     ..(.9..>.AG.A...
     d37:	ba a4 43 e8 66 91 58 24 1d 0d 47 43 b5 e1 e8 30     ..C.f.X$..GC...0
     d47:	3a 4c c6 ce 03 42 1a cb 19 ba 38 1e 44 33 ca 70     :L...B....8.D3.p
     d57:	32 9c cc 46 07 d1 61 32 bc 3a 1e 2e 87 18 00 43     2..F..a2.:.....C
     d67:	1b cc 15 ba ac 1e 44 b4 d1 f4 6a 07 cd 41 73 d0     ......D...j..As.
     d77:	1c 44 9d 4c 27 b4 d9 41 5a 03 44 16 cc 15 ba 38     .D.L'..AZ.D....8
     d87:	04 0f a3 21 65 3a 19 fb eb 64 48 39 8c 0e 41 00     ...!e:...dH9..A.
     d97:	45 11 ca 19 b6 f8 20 df 7e 90 1c 24 f3 ed 87 83     E..... .~..$....
     da7:	01 46 0f ca 15 b2 f8 20 df 7e 90 1c 24 f3 bd 03     .F..... .~..$...
     db7:	47 1b cc 15 be ac 1e 44 b4 d1 f4 6a 07 cd 41 b3     G......D...j..A.
     dc7:	83 ec 30 9d 4c 27 34 d2 61 66 11 48 0d cc 15 ba     ..0.L'4.af.H....
     dd7:	18 fb f9 f0 41 ec e7 01 49 07 c3 15 96 f8 07 4a     ....A...I......J
     de7:	0d c9 11 aa de 9f 6d b6 0b e5 56 02 4b 1b cd 15     ......m...V.K...
     df7:	ba 98 52 86 a4 19 6d 44 9c 50 cf f6 f3 84 3a 22     ..R...mD.P....:"
     e07:	ce 68 43 d2 94 32 26 4c 0b c9 15 ae 18 ef 7f 3e     .hC..2&L.......>
     e17:	1c 08 4d 21 ce 15 c2 98 43 ec 90 f3 21 7c 10 1e     ..M!....C...!|..
     e27:	86 87 e1 21 22 92 58 44 12 8b 48 62 22 99 48 36     ...!".XD..Hb".H6
     e37:	99 4d 36 4e 1a cc 15 ba 18 5f 1f 82 07 99 45 66     .M6N....._....Ef
     e47:	19 99 44 a6 89 4d 62 3c 04 0f d1 f3 00 4f 16 cd     ..D..Mb<.....O..
     e57:	15 be 2c 1f 64 4c d3 09 f5 ee fd 4a 99 8e 68 b4     ..,.dL.....J..h.
     e67:	83 b8 08 50 19 cb 15 b6 38 c4 0e 93 e1 d5 e3 e1     ...P....8.......
     e77:	72 88 cd 21 73 c8 1c 32 87 cc 21 00 51 1a ed f5     r..!s..2..!.Q...
     e87:	bd 2c 1f 64 4c d3 09 f5 ee fd 24 a1 8c 4c a4 da     .,.dL.....$..L..
     e97:	41 7c 88 03 25 00 52 1e cc 15 ba 38 04 0f a3 21     A|..%.R....8...!
     ea7:	65 3a 99 4e 86 94 c3 e8 20 1b 8e a6 93 e9 64 3a     e:.N.... .....d:
     eb7:	99 4e a6 04 53 16 cb 15 b6 ba 1d 24 b4 eb 1d 62     .N..S......$...b
     ec7:	3e db 21 57 eb 8d 72 90 9d 00 54 1c cb 11 ae f8     >.!W..r...T.....
     ed7:	10 9c 43 e6 90 39 64 0e 99 43 e6 90 39 64 0e 99     ..C..9d..C..9d..
     ee7:	43 e6 90 39 64 08 55 0e cc 15 ba 18 fb 3f 4f 86     C..9d.U......?O.
     ef7:	a3 c3 d0 06 56 1e cd 11 b6 98 db 27 d3 d1 74 26     ....V......'..t&
     f07:	15 ce 86 b3 e9 64 3c 99 4b e4 90 3a a4 0e 9a c3     .....d<.K..:....
     f17:	a6 00 57 1d cf 15 c6 98 cd 6c 33 db cc b6 32 da     ..W......l3...2.
     f27:	bf a8 cc 24 1a 25 1a 2b d5 d9 78 36 9e cd 00 58     ...$.%.+..x6...X
     f37:	19 cc 11 b2 18 9b 27 c3 11 a3 48 6c a7 9b 45 d2     ......'...Hl..E.
     f47:	d1 6c 38 1a 4e c6 e6 01 59 1c cd 11 b6 98 db 27     .l8.N...Y......'
     f57:	d3 d9 e2 6c 3a 19 4f e6 75 d0 1c 36 87 cd 61 73     ...l:.O.u..6..as
     f67:	d8 1c 36 05 5a 10 ca 15 b2 78 b0 8f d7 c7 db c7     ..6.Z....x......
     f77:	eb 87 83 01 5b 0b 45 96 99 38 98 f6 ff 74 18 5c     ....[.E..8...t.\
     f87:	0d c5 11 96 90 a9 cd b4 cd d4 66 1a 5d 0b 45 92     ..........f.].E.
     f97:	99 38 8c f6 ff 74 30 5e 0f ea d0 aa 94 93 a9 22     .8...t0^......."
     fa7:	d9 68 24 94 0c 07 5f 07 4a 90 a9 78 30 60 07 65     .h$..._.J..x0`.e
     fb7:	70 97 98 2d 61 13 4a 15 ae 2a de 64 63 da 89 b2     p..-a.J..*.dc...
     fc7:	36 19 51 2a 23 0a 01 62 14 ca 15 b2 98 ef 42 3a     6.Q*#..b......B:
     fd7:	48 48 93 a1 c7 d3 e4 20 99 90 00 63 10 49 15 ae     HH..... ...c.I..
     fe7:	a3 1d 22 23 f3 f6 d1 e4 10 23 01 64 13 ca 15 b2     .."#.....#.d....
     ff7:	df 89 32 39 48 46 47 8f 93 11 e5 20 a2 0c 65 11     ..29HFG.... ..e.
    1007:	49 15 ae a3 9d 46 c6 c3 83 7c 34 39 c4 48 00 66     I....F...|49.H.f
    1017:	0e c7 11 9e 23 95 86 a3 c3 69 b8 9f 00 67 18 ca     ....#....i...g..
    1027:	95 b1 a2 4c 0e 92 d1 d1 e3 64 44 39 88 28 f3 c9     ...L.....dD9.(..
    1037:	68 74 08 d2 00 68 0d c9 15 ae 18 ef 42 39 98 6c     ht...h......B9.l
    1047:	fe 36 69 0a c3 15 96 38 c8 0e 1f 04 6a 0c 45 8e     .6i....8....j.E.
    1057:	95 da 3e da 7f 3a 54 00 6b 12 c9 15 aa 18 ef 34     ..>..:T.k......4
    1067:	59 b2 15 8b b6 c9 68 65 74 1b 6c 07 c3 15 96 f8     Y.....het.l.....
    1077:	07 6d 18 4f 15 c6 98 90 28 87 43 89 64 9b d9 66     .m.O....(.C.d..f
    1087:	b6 99 6d 66 9b d9 66 b6 05 6e 0c 49 15 ae 98 50     ..mf..f..n.I...P
    1097:	0e 26 9b bf 0d 6f 11 4a 15 b2 23 1e 42 2b 43 8f     .&...o.J..#.B+C.
    10a7:	93 d1 e8 10 a4 01 70 15 ca 95 b1 98 90 0e 12 d2     ......p.........
    10b7:	64 e8 f1 34 39 48 26 a4 f9 76 00 71 13 ca 95 b1     d..49H&..v.q....
    10c7:	a2 4c 0e 92 d1 d1 e3 64 44 39 88 28 f3 1d 72 0b     .L.....dD9.(..r.
    10d7:	46 15 9e 98 1c 0e b3 7d 03 73 10 49 15 ae 32 1d     F......}.s.I..2.
    10e7:	68 e6 43 ec 6c 3b 90 4c 00 74 0d a6 11 9a 99 2d     h.C.l;.L.t.....-
    10f7:	1d 2a b3 bd 95 08 75 0b 49 15 ae 98 f9 a7 83 85     .*....u.I.......
    1107:	32 76 11 49 11 a6 98 b9 4d 96 26 a3 c9 ac 58 1d     2v.I....M.&...X.
    1117:	cf 00 77 19 4f 11 be 98 cd 6c 33 db ca 68 4b 65     ..w.O....l3..hKe
    1127:	34 51 99 55 8a 34 ea 6c 3c 9b 01 78 11 49 15 ae     4Q.U.4.l<..x.I..
    1137:	98 d9 26 6b d5 69 6d 32 9a ac d9 06 79 14 c9 95     ..&k.im2....y...
    1147:	ad 98 b9 4d 96 26 a3 c9 ac 58 1d 2f 4b a9 53 00     ...M.&...X./K.S.
    1157:	7a 0c 48 15 aa 78 90 0e f7 7a 38 08 7b 0d 47 96     z.H..x...z8.{.G.
    1167:	a1 9c 2d ee b6 ba b8 d7 05 7c 08 42 96 95 f8 43     ..-......|.B...C
    1177:	00 7d 0e 47 92 a1 98 2e ee ba b6 b8 b7 45 00 7e     .}.G.........E.~
    1187:	0a 69 94 ae 21 1d 4c 14 00 00 00 00 04 ff ff 00     .i..!.L.........
	...

00001198 <digital_pin_to_timer_PGM>:
    1198:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000011b3 <digital_pin_to_bit_mask_PGM>:
    11b3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    11c3:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

000011ce <digital_pin_to_port_PGM>:
    11ce:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    11de:	03 03 03 03 02 02 03 05 05 05 05                    ...........

000011e9 <port_to_input_PGM>:
    11e9:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

000011f5 <port_to_output_PGM>:
    11f5:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

00001201 <port_to_mode_PGM>:
    1201:	00 00 00 00 24 00 27 00 2a 00 2d 00 00              ....$.'.*.-..

0000120e <__ctors_start>:
__ctors_start():
    120e:	d7 14       	cp	r13, r7
    1210:	8f 2c       	mov	r8, r15
    1212:	3c 2f       	mov	r19, r28
    1214:	8c 33       	cpi	r24, 0x3C	; 60

00001216 <__ctors_end>:
__ctors_end():
    1216:	e4 2c       	mov	r14, r4
    1218:	91 2f       	mov	r25, r17

0000121a <__dtors_end>:
__init():
../../../../crt1/gcrt1.S:230
    121a:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
    121c:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
    121e:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
    1220:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
    1222:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
    1224:	cd bf       	out	0x3d, r28	; 61

00001226 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
    1226:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
    1228:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
    122a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
    122c:	ea e2       	ldi	r30, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
    122e:	fa e7       	ldi	r31, 0x7A	; 122
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
    1232:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
    1234:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
    1236:	ac 3e       	cpi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
    1238:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
    123a:	d9 f7       	brne	.-10     	; 0x1232 <__do_copy_data+0xc>

0000123c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    123c:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    123e:	ac ee       	ldi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    1240:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <.do_clear_bss_start>

00001244 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    1244:	1d 92       	st	X+, r1

00001246 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    1246:	a0 30       	cpi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    1248:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    124a:	e1 f7       	brne	.-8      	; 0x1244 <.do_clear_bss_loop>

0000124c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    124c:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    124e:	cb e0       	ldi	r28, 0x0B	; 11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    1250:	d9 e0       	ldi	r29, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    1252:	04 c0       	rjmp	.+8      	; 0x125c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    1254:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    1256:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    1258:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    125c:	c7 30       	cpi	r28, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    125e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
    1262:	0e 94 f7 35 	call	0x6bee	; 0x6bee <main>
../../../../crt1/gcrt1.S:315
    1266:	0c 94 08 3d 	jmp	0x7a10	; 0x7a10 <__do_global_dtors>

0000126a <__bad_interrupt>:
__vector_30():
../../../../crt1/gcrt1.S:209
    126a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000126e <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	08 95       	ret

00001274 <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1274:	08 95       	ret

00001276 <U8G2::write(unsigned char const*, unsigned int)>:
_ZN4U8G25writeEPKhj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:356
	
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	6c 01       	movw	r12, r24
    1288:	eb 01       	movw	r28, r22
    128a:	7b 01       	movw	r14, r22
    128c:	e4 0e       	add	r14, r20
    128e:	f5 1e       	adc	r15, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:357
      size_t cnt = 0;
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:358
      while( size > 0 ) {
    1294:	ce 15       	cp	r28, r14
    1296:	df 05       	cpc	r29, r15
    1298:	61 f0       	breq	.+24     	; 0x12b2 <U8G2::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:359
	cnt += write(*buffer++); 
    129a:	69 91       	ld	r22, Y+
    129c:	d6 01       	movw	r26, r12
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	01 90       	ld	r0, Z+
    12a4:	f0 81       	ld	r31, Z
    12a6:	e0 2d       	mov	r30, r0
    12a8:	c6 01       	movw	r24, r12
    12aa:	09 95       	icall
    12ac:	08 0f       	add	r16, r24
    12ae:	19 1f       	adc	r17, r25
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:358
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
    12b0:	f1 cf       	rjmp	.-30     	; 0x1294 <U8G2::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:363
	cnt += write(*buffer++); 
	size--;
      }
      return cnt;
    }
    12b2:	c8 01       	movw	r24, r16
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	08 95       	ret

000012c6 <U8G2::write(unsigned char)>:
_ZN4U8G25writeEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:318
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);
#endif

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:319
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
    12d8:	6c 01       	movw	r12, r24
    12da:	24 e0       	ldi	r18, 0x04	; 4
    12dc:	c2 0e       	add	r12, r18
    12de:	d1 1c       	adc	r13, r1
    12e0:	fc 01       	movw	r30, r24
    12e2:	e0 57       	subi	r30, 0x70	; 112
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	01 90       	ld	r0, Z+
    12e8:	f0 81       	ld	r31, Z
    12ea:	e0 2d       	mov	r30, r0
    12ec:	c6 01       	movw	r24, r12
    12ee:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:321
      
      if ( e < 0x0fffe )
    12f0:	8e 3f       	cpi	r24, 0xFE	; 254
    12f2:	ef ef       	ldi	r30, 0xFF	; 255
    12f4:	9e 07       	cpc	r25, r30
    12f6:	d8 f4       	brcc	.+54     	; 0x132e <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:323
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
    12f8:	8e 01       	movw	r16, r28
    12fa:	0c 56       	subi	r16, 0x6C	; 108
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	f8 01       	movw	r30, r16
    1300:	40 81       	ld	r20, Z
    1302:	51 81       	ldd	r21, Z+1	; 0x01
    1304:	7e 01       	movw	r14, r28
    1306:	f2 e9       	ldi	r31, 0x92	; 146
    1308:	ef 0e       	add	r14, r31
    130a:	f1 1c       	adc	r15, r1
    130c:	f7 01       	movw	r30, r14
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	9c 01       	movw	r18, r24
    1314:	c6 01       	movw	r24, r12
    1316:	0e 94 00 24 	call	0x4800	; 0x4800 <u8g2_DrawGlyph>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:326
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
    131a:	c0 59       	subi	r28, 0x90	; 144
    131c:	df 4f       	sbci	r29, 0xFF	; 255
    131e:	28 81       	ld	r18, Y
    1320:	21 30       	cpi	r18, 0x01	; 1
    1322:	c1 f0       	breq	.+48     	; 0x1354 <U8G2::write(unsigned char)+0x8e>
    1324:	78 f0       	brcs	.+30     	; 0x1344 <U8G2::write(unsigned char)+0x7e>
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	b9 f0       	breq	.+46     	; 0x1358 <U8G2::write(unsigned char)+0x92>
    132a:	23 30       	cpi	r18, 0x03	; 3
    132c:	e9 f0       	breq	.+58     	; 0x1368 <U8G2::write(unsigned char)+0xa2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:354
	
	
	
      }
      return 1;
     }
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:329
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
    1344:	f7 01       	movw	r30, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:332
	    break;
	  case 1:
	    ty += delta;
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	91 83       	std	Z+1, r25	; 0x01
    1350:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:333
	    break;
    1352:	ed cf       	rjmp	.-38     	; 0x132e <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:332
	{
	  case 0:
	    tx += delta;
	    break;
	  case 1:
	    ty += delta;
    1354:	f8 01       	movw	r30, r16
    1356:	f7 cf       	rjmp	.-18     	; 0x1346 <U8G2::write(unsigned char)+0x80>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:335
	    break;
	  case 2:
	    tx -= delta;
    1358:	f7 01       	movw	r30, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 3:
	    ty -= delta;
    135a:	20 81       	ld	r18, Z
    135c:	31 81       	ldd	r19, Z+1	; 0x01
    135e:	28 1b       	sub	r18, r24
    1360:	39 0b       	sbc	r19, r25
    1362:	31 83       	std	Z+1, r19	; 0x01
    1364:	20 83       	st	Z, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:339
	    break;
    1366:	e3 cf       	rjmp	.-58     	; 0x132e <U8G2::write(unsigned char)+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
    1368:	f8 01       	movw	r30, r16
    136a:	f7 cf       	rjmp	.-18     	; 0x135a <U8G2::write(unsigned char)+0x94>

0000136c <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
    1376:	ec 01       	movw	r28, r24
    1378:	f6 2e       	mov	r15, r22
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    137a:	08 81       	ld	r16, Y
    137c:	19 81       	ldd	r17, Y+1	; 0x01
    137e:	c8 01       	movw	r24, r16
    1380:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <eeprom_read_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1384:	f8 16       	cp	r15, r24
    1386:	21 f0       	breq	.+8      	; 0x1390 <EERef::update(unsigned char)+0x24>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1388:	6f 2d       	mov	r22, r15
    138a:	c8 01       	movw	r24, r16
    138c:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <eeprom_write_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59 (discriminator 4)
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    1390:	ce 01       	movw	r24, r28
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	08 95       	ret

0000139e <__vector_3>:
__vector_3():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:71
bool TMCFehler = false;
bool PumpeFehler = false;

// Interrupt-Routine
// Interrupt Vector für Port B (PCINT0_vect)
ISR(PCINT0_vect) {
    139e:	1f 92       	push	r1
    13a0:	0f 92       	push	r0
    13a2:	0f b6       	in	r0, 0x3f	; 63
    13a4:	0f 92       	push	r0
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:73
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    13c0:	8c e0       	ldi	r24, 0x0C	; 12
    13c2:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    13c6:	89 2b       	or	r24, r25
    13c8:	b1 f1       	breq	.+108    	; 0x1436 <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:73 (discriminator 1)
    13ca:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    13ce:	81 11       	cpse	r24, r1
    13d0:	32 c0       	rjmp	.+100    	; 0x1436 <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:74
    ZustandBremse = true;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:78
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    ZustandBremse = false;
    ZustandBearbeitet = false;
    13d8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:82
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    13dc:	8b e0       	ldi	r24, 0x0B	; 11
    13de:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    13e2:	89 2b       	or	r24, r25
    13e4:	21 f4       	brne	.+8      	; 0x13ee <__vector_3+0x50>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:82 (discriminator 1)
    13e6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    13ea:	88 23       	and	r24, r24
    13ec:	81 f1       	breq	.+96     	; 0x144e <__vector_3+0xb0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:85
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    13ee:	8b e0       	ldi	r24, 0x0B	; 11
    13f0:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    13f4:	89 2b       	or	r24, r25
    13f6:	89 f5       	brne	.+98     	; 0x145a <__vector_3+0xbc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:91
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    13f8:	8a e0       	ldi	r24, 0x0A	; 10
    13fa:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    13fe:	89 2b       	or	r24, r25
    1400:	21 f4       	brne	.+8      	; 0x140a <__vector_3+0x6c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:91 (discriminator 1)
    1402:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    1406:	88 23       	and	r24, r24
    1408:	79 f1       	breq	.+94     	; 0x1468 <__vector_3+0xca>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:94
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    140a:	8a e0       	ldi	r24, 0x0A	; 10
    140c:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1410:	89 2b       	or	r24, r25
    1412:	81 f5       	brne	.+96     	; 0x1474 <__vector_3+0xd6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:98
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}
    1414:	ff 91       	pop	r31
    1416:	ef 91       	pop	r30
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	9f 91       	pop	r25
    141e:	8f 91       	pop	r24
    1420:	7f 91       	pop	r23
    1422:	6f 91       	pop	r22
    1424:	5f 91       	pop	r21
    1426:	4f 91       	pop	r20
    1428:	3f 91       	pop	r19
    142a:	2f 91       	pop	r18
    142c:	0f 90       	pop	r0
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	0f 90       	pop	r0
    1432:	1f 90       	pop	r1
    1434:	18 95       	reti
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:76
ISR(PCINT0_vect) {
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    ZustandBremse = true;
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    1436:	8c e0       	ldi	r24, 0x0C	; 12
    1438:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    143c:	89 2b       	or	r24, r25
    143e:	71 f6       	brne	.-100    	; 0x13dc <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:76 (discriminator 1)
    1440:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    1444:	88 23       	and	r24, r24
    1446:	51 f2       	breq	.-108    	; 0x13dc <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:77
    ZustandBremse = false;
    1448:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <ZustandBremse>
    144c:	c5 cf       	rjmp	.-118    	; 0x13d8 <__vector_3+0x3a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:83
    ZustandBearbeitet = false;
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    ZustandHandbremse = true;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:87
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
    1454:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
    1458:	cf cf       	rjmp	.-98     	; 0x13f8 <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:85 (discriminator 1)

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    145a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    145e:	88 23       	and	r24, r24
    1460:	59 f2       	breq	.-106    	; 0x13f8 <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:86
    ZustandHandbremse = false;
    1462:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <ZustandHandbremse>
    1466:	f6 cf       	rjmp	.-20     	; 0x1454 <__vector_3+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:92
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    ZustandHauptschalter = true;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:96
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
    146e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:98
  }
}
    1472:	d0 cf       	rjmp	.-96     	; 0x1414 <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:94 (discriminator 1)

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    1474:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    1478:	88 23       	and	r24, r24
    147a:	61 f2       	breq	.-104    	; 0x1414 <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:95
    ZustandHauptschalter = false;
    147c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <ZustandHauptschalter>
    1480:	f6 cf       	rjmp	.-20     	; 0x146e <__vector_3+0xd0>

00001482 <SchreibeDisplay()>:
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:351
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}

void SchreibeDisplay() {
    1482:	2f 92       	push	r2
    1484:	3f 92       	push	r3
    1486:	4f 92       	push	r4
    1488:	5f 92       	push	r5
    148a:	6f 92       	push	r6
    148c:	7f 92       	push	r7
    148e:	8f 92       	push	r8
    1490:	9f 92       	push	r9
    1492:	af 92       	push	r10
    1494:	bf 92       	push	r11
    1496:	cf 92       	push	r12
    1498:	df 92       	push	r13
    149a:	ef 92       	push	r14
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:352
  if (!PumpeFehler && !TMCFehler) {
    14a6:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
    14aa:	81 11       	cpse	r24, r1
    14ac:	86 c1       	rjmp	.+780    	; 0x17ba <SchreibeDisplay()+0x338>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:352 (discriminator 1)
    14ae:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    14b2:	81 11       	cpse	r24, r1
    14b4:	82 c1       	rjmp	.+772    	; 0x17ba <SchreibeDisplay()+0x338>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:353
    int BreiteBox = map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 118);
    14b6:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    14ba:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    14be:	0f 2c       	mov	r0, r15
    14c0:	00 0c       	add	r0, r0
    14c2:	00 0b       	sbc	r16, r16
    14c4:	11 0b       	sbc	r17, r17
    14c6:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    14ca:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    14ce:	03 2e       	mov	r0, r19
    14d0:	00 0c       	add	r0, r0
    14d2:	44 0b       	sbc	r20, r20
    14d4:	55 0b       	sbc	r21, r21
    14d6:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    14da:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    14de:	07 2e       	mov	r0, r23
    14e0:	00 0c       	add	r0, r0
    14e2:	88 0b       	sbc	r24, r24
    14e4:	99 0b       	sbc	r25, r25
    14e6:	1f 92       	push	r1
    14e8:	1f 92       	push	r1
    14ea:	1f 92       	push	r1
    14ec:	e6 e7       	ldi	r30, 0x76	; 118
    14ee:	ef 93       	push	r30
    14f0:	a1 2c       	mov	r10, r1
    14f2:	b1 2c       	mov	r11, r1
    14f4:	65 01       	movw	r12, r10
    14f6:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
    14fa:	2b 01       	movw	r4, r22
    14fc:	4b 01       	movw	r8, r22
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    14fe:	84 e1       	ldi	r24, 0x14	; 20
    1500:	92 e0       	ldi	r25, 0x02	; 2
    1502:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    150e:	c5 e0       	ldi	r28, 0x05	; 5
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	8f e2       	ldi	r24, 0x2F	; 47
    1514:	28 2e       	mov	r2, r24
    1516:	31 2c       	mov	r3, r1
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    1518:	20 e8       	ldi	r18, 0x80	; 128
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	40 e0       	ldi	r20, 0x00	; 0
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	84 e1       	ldi	r24, 0x14	; 20
    1526:	92 e0       	ldi	r25, 0x02	; 2
    1528:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <u8g2_DrawHLine>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    152c:	63 e7       	ldi	r22, 0x73	; 115
    152e:	72 e0       	ldi	r23, 0x02	; 2
    1530:	84 e1       	ldi	r24, 0x14	; 20
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1538:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    153c:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    1540:	8b e0       	ldi	r24, 0x0B	; 11
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <u8g2+0x95>
    1548:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:359
    u8g2.firstPage();
    do {
      u8g2.drawHLine(0, 0, 128);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(5, 11);
      u8g2.print(F("HALDEX"));
    154c:	69 e0       	ldi	r22, 0x09	; 9
    154e:	72 e0       	ldi	r23, 0x02	; 2
    1550:	80 e1       	ldi	r24, 0x10	; 16
    1552:	92 e0       	ldi	r25, 0x02	; 2
    1554:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawFrameEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:227
    void drawVLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t h) { u8g2_DrawVLine(&u8g2, x, y, h); }
    void drawHVLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir) {
      u8g2_DrawHVLine(&u8g2, x, y, len, dir); }
    
    /* u8g2_box.c */
    void drawFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawFrame(&u8g2, x, y, w, h); }
    1558:	0f e0       	ldi	r16, 0x0F	; 15
    155a:	10 e0       	ldi	r17, 0x00	; 0
    155c:	26 e7       	ldi	r18, 0x76	; 118
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4f e0       	ldi	r20, 0x0F	; 15
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	65 e0       	ldi	r22, 0x05	; 5
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	84 e1       	ldi	r24, 0x14	; 20
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	0e 94 25 20 	call	0x404a	; 0x404a <u8g2_DrawFrame>
_ZN4U8G28drawLineEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:244
    void drawEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawEllipse(&u8g2, x0, y0, rx, ry, opt); }
    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }    

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2) 
      { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
    1570:	00 e1       	ldi	r16, 0x10	; 16
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	2b e4       	ldi	r18, 0x4B	; 75
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4f e0       	ldi	r20, 0x0F	; 15
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	6b e4       	ldi	r22, 0x4B	; 75
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	84 e1       	ldi	r24, 0x14	; 20
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
    1588:	04 e1       	ldi	r16, 0x14	; 20
    158a:	10 e0       	ldi	r17, 0x00	; 0
    158c:	2b e4       	ldi	r18, 0x4B	; 75
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	43 e1       	ldi	r20, 0x13	; 19
    1592:	50 e0       	ldi	r21, 0x00	; 0
    1594:	6b e4       	ldi	r22, 0x4B	; 75
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	84 e1       	ldi	r24, 0x14	; 20
    159a:	92 e0       	ldi	r25, 0x02	; 2
    159c:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
    15a0:	08 e1       	ldi	r16, 0x18	; 24
    15a2:	10 e0       	ldi	r17, 0x00	; 0
    15a4:	2b e4       	ldi	r18, 0x4B	; 75
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	47 e1       	ldi	r20, 0x17	; 23
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	6b e4       	ldi	r22, 0x4B	; 75
    15ae:	70 e0       	ldi	r23, 0x00	; 0
    15b0:	84 e1       	ldi	r24, 0x14	; 20
    15b2:	92 e0       	ldi	r25, 0x02	; 2
    15b4:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
    15b8:	0c e1       	ldi	r16, 0x1C	; 28
    15ba:	10 e0       	ldi	r17, 0x00	; 0
    15bc:	2b e4       	ldi	r18, 0x4B	; 75
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4b e1       	ldi	r20, 0x1B	; 27
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	6b e4       	ldi	r22, 0x4B	; 75
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	84 e1       	ldi	r24, 0x14	; 20
    15ca:	92 e0       	ldi	r25, 0x02	; 2
    15cc:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    15d0:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    15d4:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    15d8:	30 92 a5 02 	sts	0x02A5, r3	; 0x8002a5 <u8g2+0x95>
    15dc:	20 92 a4 02 	sts	0x02A4, r2	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:369
      u8g2.drawLine(75, 23, 75, 24);
      u8g2.drawLine(75, 27, 75, 28);

      u8g2.setCursor(5, 47);

      if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur) {
    15e0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    15e4:	81 11       	cpse	r24, r1
    15e6:	fc c0       	rjmp	.+504    	; 0x17e0 <SchreibeDisplay()+0x35e>
    15e8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    15ec:	81 11       	cpse	r24, r1
    15ee:	f8 c0       	rjmp	.+496    	; 0x17e0 <SchreibeDisplay()+0x35e>
    15f0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    15f4:	81 11       	cpse	r24, r1
    15f6:	f4 c0       	rjmp	.+488    	; 0x17e0 <SchreibeDisplay()+0x35e>
    15f8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    15fc:	81 11       	cpse	r24, r1
    15fe:	f0 c0       	rjmp	.+480    	; 0x17e0 <SchreibeDisplay()+0x35e>
_ZN4U8G27drawBoxEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:229
      u8g2_DrawHVLine(&u8g2, x, y, len, dir); }
    
    /* u8g2_box.c */
    void drawFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawFrame(&u8g2, x, y, w, h); }
    void drawRFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r) { u8g2_DrawRFrame(&u8g2, x, y, w, h,r); }
    void drawBox(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawBox(&u8g2, x, y, w, h); }
    1600:	0f e0       	ldi	r16, 0x0F	; 15
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	92 01       	movw	r18, r4
    1606:	4f e0       	ldi	r20, 0x0F	; 15
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	65 e0       	ldi	r22, 0x05	; 5
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	84 e1       	ldi	r24, 0x14	; 20
    1610:	92 e0       	ldi	r25, 0x02	; 2
    1612:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <u8g2_DrawBox>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:372

        u8g2.drawBox(5, 15, BreiteBox, 15);
        if (BreiteBox >= 71) {
    1616:	97 e4       	ldi	r25, 0x47	; 71
    1618:	89 16       	cp	r8, r25
    161a:	91 04       	cpc	r9, r1
    161c:	d4 f1       	brlt	.+116    	; 0x1692 <SchreibeDisplay()+0x210>
_ZN4U8G212setDrawColorEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	84 e1       	ldi	r24, 0x14	; 20
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g2_SetDrawColor>
_ZN4U8G28drawLineEjjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:244
    void drawEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawEllipse(&u8g2, x0, y0, rx, ry, opt); }
    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }    

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2) 
      { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
    1628:	00 e1       	ldi	r16, 0x10	; 16
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	2b e4       	ldi	r18, 0x4B	; 75
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	4f e0       	ldi	r20, 0x0F	; 15
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	6b e4       	ldi	r22, 0x4B	; 75
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	84 e1       	ldi	r24, 0x14	; 20
    163a:	92 e0       	ldi	r25, 0x02	; 2
    163c:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
    1640:	04 e1       	ldi	r16, 0x14	; 20
    1642:	10 e0       	ldi	r17, 0x00	; 0
    1644:	2b e4       	ldi	r18, 0x4B	; 75
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	43 e1       	ldi	r20, 0x13	; 19
    164a:	50 e0       	ldi	r21, 0x00	; 0
    164c:	6b e4       	ldi	r22, 0x4B	; 75
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	84 e1       	ldi	r24, 0x14	; 20
    1652:	92 e0       	ldi	r25, 0x02	; 2
    1654:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
    1658:	08 e1       	ldi	r16, 0x18	; 24
    165a:	10 e0       	ldi	r17, 0x00	; 0
    165c:	2b e4       	ldi	r18, 0x4B	; 75
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	47 e1       	ldi	r20, 0x17	; 23
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	6b e4       	ldi	r22, 0x4B	; 75
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	84 e1       	ldi	r24, 0x14	; 20
    166a:	92 e0       	ldi	r25, 0x02	; 2
    166c:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
    1670:	0c e1       	ldi	r16, 0x1C	; 28
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	2b e4       	ldi	r18, 0x4B	; 75
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	4b e1       	ldi	r20, 0x1B	; 27
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	6b e4       	ldi	r22, 0x4B	; 75
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	84 e1       	ldi	r24, 0x14	; 20
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	0e 94 02 26 	call	0x4c04	; 0x4c04 <u8g2_DrawLine>
_ZN4U8G212setDrawColorEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	84 e1       	ldi	r24, 0x14	; 20
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <u8g2_SetDrawColor>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1692:	67 ef       	ldi	r22, 0xF7	; 247
    1694:	7a e0       	ldi	r23, 0x0A	; 10
    1696:	84 e1       	ldi	r24, 0x14	; 20
    1698:	92 e0       	ldi	r25, 0x02	; 2
    169a:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:382
          u8g2.drawLine(75, 27, 75, 28);
          u8g2.setDrawColor(1);
        }

        u8g2.setFont(u8g2_font_helvB14_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
    169e:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    16a2:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    16a6:	0f 2c       	mov	r0, r15
    16a8:	00 0c       	add	r0, r0
    16aa:	00 0b       	sbc	r16, r16
    16ac:	11 0b       	sbc	r17, r17
    16ae:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    16b2:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    16b6:	03 2e       	mov	r0, r19
    16b8:	00 0c       	add	r0, r0
    16ba:	44 0b       	sbc	r20, r20
    16bc:	55 0b       	sbc	r21, r21
    16be:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    16c2:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    16c6:	07 2e       	mov	r0, r23
    16c8:	00 0c       	add	r0, r0
    16ca:	88 0b       	sbc	r24, r24
    16cc:	99 0b       	sbc	r25, r25
    16ce:	1f 92       	push	r1
    16d0:	1f 92       	push	r1
    16d2:	1f 92       	push	r1
    16d4:	e4 e6       	ldi	r30, 0x64	; 100
    16d6:	ef 93       	push	r30
    16d8:	a1 2c       	mov	r10, r1
    16da:	b1 2c       	mov	r11, r1
    16dc:	65 01       	movw	r12, r10
    16de:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
    16e2:	ab 01       	movw	r20, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	2a e0       	ldi	r18, 0x0A	; 10
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	80 e1       	ldi	r24, 0x10	; 16
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	0e 94 6c 34 	call	0x68d8	; 0x68d8 <Print::print(long, int)>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    16f2:	63 e7       	ldi	r22, 0x73	; 115
    16f4:	72 e0       	ldi	r23, 0x02	; 2
    16f6:	84 e1       	ldi	r24, 0x14	; 20
    16f8:	92 e0       	ldi	r25, 0x02	; 2
    16fa:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:384
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
    16fe:	66 e0       	ldi	r22, 0x06	; 6
    1700:	72 e0       	ldi	r23, 0x02	; 2
    1702:	80 e1       	ldi	r24, 0x10	; 16
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    1712:	20 e8       	ldi	r18, 0x80	; 128
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	41 e3       	ldi	r20, 0x31	; 49
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	84 e1       	ldi	r24, 0x14	; 20
    1720:	92 e0       	ldi	r25, 0x02	; 2
    1722:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <u8g2_DrawHLine>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1726:	63 e7       	ldi	r22, 0x73	; 115
    1728:	72 e0       	ldi	r23, 0x02	; 2
    172a:	84 e1       	ldi	r24, 0x14	; 20
    172c:	92 e0       	ldi	r25, 0x02	; 2
    172e:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1732:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    1736:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    173a:	8d e3       	ldi	r24, 0x3D	; 61
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <u8g2+0x95>
    1742:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:408
      }

      u8g2.drawHLine(0, 49, 128);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(5, 61);
      u8g2.write(0xD6);
    1746:	66 ed       	ldi	r22, 0xD6	; 214
    1748:	80 e1       	ldi	r24, 0x10	; 16
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:409
      u8g2.print(F("ltemperatur "));
    1750:	65 eb       	ldi	r22, 0xB5	; 181
    1752:	71 e0       	ldi	r23, 0x01	; 1
    1754:	80 e1       	ldi	r24, 0x10	; 16
    1756:	92 e0       	ldi	r25, 0x02	; 2
    1758:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:410
      u8g2.print(Temperatur, 0);
    175c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <Temperatur>
    1760:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <Temperatur+0x1>
    1764:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Temperatur+0x2>
    1768:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <Temperatur+0x3>
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	80 e1       	ldi	r24, 0x10	; 16
    1772:	92 e0       	ldi	r25, 0x02	; 2
    1774:	0e 94 b2 35 	call	0x6b64	; 0x6b64 <Print::print(double, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:411
      u8g2.print(F(" "));
    1778:	63 eb       	ldi	r22, 0xB3	; 179
    177a:	71 e0       	ldi	r23, 0x01	; 1
    177c:	80 e1       	ldi	r24, 0x10	; 16
    177e:	92 e0       	ldi	r25, 0x02	; 2
    1780:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:412
      u8g2.write(0xB0);
    1784:	60 eb       	ldi	r22, 0xB0	; 176
    1786:	80 e1       	ldi	r24, 0x10	; 16
    1788:	92 e0       	ldi	r25, 0x02	; 2
    178a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:413
      u8g2.print(F("C"));
    178e:	61 eb       	ldi	r22, 0xB1	; 177
    1790:	71 e0       	ldi	r23, 0x01	; 1
    1792:	80 e1       	ldi	r24, 0x10	; 16
    1794:	92 e0       	ldi	r25, 0x02	; 2
    1796:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    179a:	20 e8       	ldi	r18, 0x80	; 128
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4f e3       	ldi	r20, 0x3F	; 63
    17a0:	50 e0       	ldi	r21, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	84 e1       	ldi	r24, 0x14	; 20
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <u8g2_DrawHLine>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    17ae:	84 e1       	ldi	r24, 0x14	; 20
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:416
      u8g2.drawHLine(0, 63, 128);

    } while (u8g2.nextPage());
    17b6:	81 11       	cpse	r24, r1
    17b8:	af ce       	rjmp	.-674    	; 0x1518 <SchreibeDisplay()+0x96>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:418
  }
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	bf 90       	pop	r11
    17cc:	af 90       	pop	r10
    17ce:	9f 90       	pop	r9
    17d0:	8f 90       	pop	r8
    17d2:	7f 90       	pop	r7
    17d4:	6f 90       	pop	r6
    17d6:	5f 90       	pop	r5
    17d8:	4f 90       	pop	r4
    17da:	3f 90       	pop	r3
    17dc:	2f 90       	pop	r2
    17de:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:386
        u8g2.setFont(u8g2_font_helvB14_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
      } else {
        if (ZustandHandbremse) {
    17e0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    17e4:	88 23       	and	r24, r24
    17e6:	89 f0       	breq	.+34     	; 0x180a <SchreibeDisplay()+0x388>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:387
          u8g2.print(F("Handbremse bet"));
    17e8:	67 ef       	ldi	r22, 0xF7	; 247
    17ea:	71 e0       	ldi	r23, 0x01	; 1
    17ec:	80 e1       	ldi	r24, 0x10	; 16
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:388
          u8g2.write(0xE4);
    17f4:	64 ee       	ldi	r22, 0xE4	; 228
    17f6:	80 e1       	ldi	r24, 0x10	; 16
    17f8:	92 e0       	ldi	r25, 0x02	; 2
    17fa:	0e 94 63 09 	call	0x12c6	; 0x12c6 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:389
          u8g2.print(F("tigt"));
    17fe:	62 ef       	ldi	r22, 0xF2	; 242
    1800:	71 e0       	ldi	r23, 0x01	; 1
    1802:	80 e1       	ldi	r24, 0x10	; 16
    1804:	92 e0       	ldi	r25, 0x02	; 2
    1806:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:391
        }
        if (ZustandBremse) {
    180a:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    180e:	88 23       	and	r24, r24
    1810:	89 f0       	breq	.+34     	; 0x1834 <SchreibeDisplay()+0x3b2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:392
          u8g2.print(F("Bremse bet"));
    1812:	67 ee       	ldi	r22, 0xE7	; 231
    1814:	71 e0       	ldi	r23, 0x01	; 1
    1816:	80 e1       	ldi	r24, 0x10	; 16
    1818:	92 e0       	ldi	r25, 0x02	; 2
    181a:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:393
          u8g2.write(0xE4);
    181e:	64 ee       	ldi	r22, 0xE4	; 228
    1820:	80 e1       	ldi	r24, 0x10	; 16
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 63 09 	call	0x12c6	; 0x12c6 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:394
          u8g2.print(F("tigt"));
    1828:	62 ee       	ldi	r22, 0xE2	; 226
    182a:	71 e0       	ldi	r23, 0x01	; 1
    182c:	80 e1       	ldi	r24, 0x10	; 16
    182e:	92 e0       	ldi	r25, 0x02	; 2
    1830:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:396
        }
        if (ZustandHauptschalter) {
    1834:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    1838:	88 23       	and	r24, r24
    183a:	31 f0       	breq	.+12     	; 0x1848 <SchreibeDisplay()+0x3c6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:397
          u8g2.print(F("Hauptschalter aus"));
    183c:	60 ed       	ldi	r22, 0xD0	; 208
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	80 e1       	ldi	r24, 0x10	; 16
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:399
        }
        if (ZustandTemperatur) {
    1848:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    184c:	88 23       	and	r24, r24
    184e:	09 f4       	brne	.+2      	; 0x1852 <SchreibeDisplay()+0x3d0>
    1850:	60 cf       	rjmp	.-320    	; 0x1712 <SchreibeDisplay()+0x290>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:400
          u8g2.write(0xDC);
    1852:	6c ed       	ldi	r22, 0xDC	; 220
    1854:	80 e1       	ldi	r24, 0x10	; 16
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	0e 94 63 09 	call	0x12c6	; 0x12c6 <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:401
          u8g2.print(F("bertemperatur"));
    185c:	62 ec       	ldi	r22, 0xC2	; 194
    185e:	71 e0       	ldi	r23, 0x01	; 1
    1860:	80 e1       	ldi	r24, 0x10	; 16
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
    1868:	54 cf       	rjmp	.-344    	; 0x1712 <SchreibeDisplay()+0x290>

0000186a <LeseTMCStatus(bool)>:
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:464
  }

  LeseTMCStatus(false);
}

void LeseTMCStatus(bool PruefeOpenLoad) {
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	c8 2f       	mov	r28, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:465
  TMCStatus = stepper_driver.getStatus();
    187c:	8a ef       	ldi	r24, 0xFA	; 250
    187e:	92 e0       	ldi	r25, 0x02	; 2
    1880:	0e 94 99 17 	call	0x2f32	; 0x2f32 <TMC2209::getStatus()>
    1884:	60 93 f6 02 	sts	0x02F6, r22	; 0x8002f6 <TMCStatus>
    1888:	70 93 f7 02 	sts	0x02F7, r23	; 0x8002f7 <TMCStatus+0x1>
    188c:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <TMCStatus+0x2>
    1890:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <TMCStatus+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:467

  if (TMCStatus.over_temperature_shutdown == 1) {
    1894:	61 ff       	sbrs	r22, 1
    1896:	51 c0       	rjmp	.+162    	; 0x193a <LeseTMCStatus(bool)+0xd0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:468
    TMCFehler = true;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    189e:	84 e1       	ldi	r24, 0x14	; 20
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    18a6:	2f e0       	ldi	r18, 0x0F	; 15
    18a8:	c2 2e       	mov	r12, r18
    18aa:	d1 2c       	mov	r13, r1
    18ac:	38 e2       	ldi	r19, 0x28	; 40
    18ae:	e3 2e       	mov	r14, r19
    18b0:	f1 2c       	mov	r15, r1
    18b2:	02 e3       	ldi	r16, 0x32	; 50
    18b4:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    18b6:	67 ef       	ldi	r22, 0xF7	; 247
    18b8:	7a e0       	ldi	r23, 0x0A	; 10
    18ba:	84 e1       	ldi	r24, 0x14	; 20
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    18c2:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    18c6:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    18ca:	d0 92 a5 02 	sts	0x02A5, r13	; 0x8002a5 <u8g2+0x95>
    18ce:	c0 92 a4 02 	sts	0x02A4, r12	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:473
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    18d2:	64 e8       	ldi	r22, 0x84	; 132
    18d4:	71 e0       	ldi	r23, 0x01	; 1
    18d6:	80 e1       	ldi	r24, 0x10	; 16
    18d8:	92 e0       	ldi	r25, 0x02	; 2
    18da:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    18de:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    18e2:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    18e6:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    18ea:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    18ee:	63 e7       	ldi	r22, 0x73	; 115
    18f0:	72 e0       	ldi	r23, 0x02	; 2
    18f2:	84 e1       	ldi	r24, 0x14	; 20
    18f4:	92 e0       	ldi	r25, 0x02	; 2
    18f6:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:476
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Übertemperatur"));
    18fa:	64 e7       	ldi	r22, 0x74	; 116
    18fc:	71 e0       	ldi	r23, 0x01	; 1
    18fe:	80 e1       	ldi	r24, 0x10	; 16
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1906:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    190a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    190e:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1912:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:478
      u8g2.setCursor(0, 50);
      u8g2.print(F("Motortreiber"));
    1916:	67 e6       	ldi	r22, 0x67	; 103
    1918:	71 e0       	ldi	r23, 0x01	; 1
    191a:	80 e1       	ldi	r24, 0x10	; 16
    191c:	92 e0       	ldi	r25, 0x02	; 2
    191e:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1922:	84 e1       	ldi	r24, 0x14	; 20
    1924:	92 e0       	ldi	r25, 0x02	; 2
    1926:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:479
    } while (u8g2.nextPage());
    192a:	81 11       	cpse	r24, r1
    192c:	c4 cf       	rjmp	.-120    	; 0x18b6 <LeseTMCStatus(bool)+0x4c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:480
    delay(10000);
    192e:	60 e1       	ldi	r22, 0x10	; 16
    1930:	77 e2       	ldi	r23, 0x27	; 39
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:483
  }

  if (TMCStatus.short_to_ground_a == 1 || TMCStatus.short_to_ground_b == 1) {
    193a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    193e:	8c 70       	andi	r24, 0x0C	; 12
    1940:	09 f4       	brne	.+2      	; 0x1944 <LeseTMCStatus(bool)+0xda>
    1942:	40 c0       	rjmp	.+128    	; 0x19c4 <LeseTMCStatus(bool)+0x15a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:484
    TMCFehler = true;
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    194a:	84 e1       	ldi	r24, 0x14	; 20
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1952:	9f e0       	ldi	r25, 0x0F	; 15
    1954:	e9 2e       	mov	r14, r25
    1956:	f1 2c       	mov	r15, r1
    1958:	08 e2       	ldi	r16, 0x28	; 40
    195a:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    195c:	67 ef       	ldi	r22, 0xF7	; 247
    195e:	7a e0       	ldi	r23, 0x0A	; 10
    1960:	84 e1       	ldi	r24, 0x14	; 20
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1968:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    196c:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1970:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    1974:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:489
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1978:	6f e5       	ldi	r22, 0x5F	; 95
    197a:	71 e0       	ldi	r23, 0x01	; 1
    197c:	80 e1       	ldi	r24, 0x10	; 16
    197e:	92 e0       	ldi	r25, 0x02	; 2
    1980:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1984:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1988:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    198c:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1990:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1994:	63 e7       	ldi	r22, 0x73	; 115
    1996:	72 e0       	ldi	r23, 0x02	; 2
    1998:	84 e1       	ldi	r24, 0x14	; 20
    199a:	92 e0       	ldi	r25, 0x02	; 2
    199c:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:492
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Kurzschluss nach Masse"));
    19a0:	68 e4       	ldi	r22, 0x48	; 72
    19a2:	71 e0       	ldi	r23, 0x01	; 1
    19a4:	80 e1       	ldi	r24, 0x10	; 16
    19a6:	92 e0       	ldi	r25, 0x02	; 2
    19a8:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    19ac:	84 e1       	ldi	r24, 0x14	; 20
    19ae:	92 e0       	ldi	r25, 0x02	; 2
    19b0:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:493
    } while (u8g2.nextPage());
    19b4:	81 11       	cpse	r24, r1
    19b6:	d2 cf       	rjmp	.-92     	; 0x195c <LeseTMCStatus(bool)+0xf2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:494
    delay(10000);
    19b8:	60 e1       	ldi	r22, 0x10	; 16
    19ba:	77 e2       	ldi	r23, 0x27	; 39
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:497
  }

  if (TMCStatus.low_side_short_a == 1 || TMCStatus.low_side_short_b == 1) {
    19c4:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    19c8:	80 73       	andi	r24, 0x30	; 48
    19ca:	09 f4       	brne	.+2      	; 0x19ce <LeseTMCStatus(bool)+0x164>
    19cc:	40 c0       	rjmp	.+128    	; 0x1a4e <LeseTMCStatus(bool)+0x1e4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:498
    TMCFehler = true;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    19d4:	84 e1       	ldi	r24, 0x14	; 20
    19d6:	92 e0       	ldi	r25, 0x02	; 2
    19d8:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19dc:	8f e0       	ldi	r24, 0x0F	; 15
    19de:	e8 2e       	mov	r14, r24
    19e0:	f1 2c       	mov	r15, r1
    19e2:	08 e2       	ldi	r16, 0x28	; 40
    19e4:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    19e6:	67 ef       	ldi	r22, 0xF7	; 247
    19e8:	7a e0       	ldi	r23, 0x0A	; 10
    19ea:	84 e1       	ldi	r24, 0x14	; 20
    19ec:	92 e0       	ldi	r25, 0x02	; 2
    19ee:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19f2:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    19f6:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    19fa:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    19fe:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:503
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1a02:	60 e4       	ldi	r22, 0x40	; 64
    1a04:	71 e0       	ldi	r23, 0x01	; 1
    1a06:	80 e1       	ldi	r24, 0x10	; 16
    1a08:	92 e0       	ldi	r25, 0x02	; 2
    1a0a:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1a0e:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1a12:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1a16:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1a1a:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1a1e:	63 e7       	ldi	r22, 0x73	; 115
    1a20:	72 e0       	ldi	r23, 0x02	; 2
    1a22:	84 e1       	ldi	r24, 0x14	; 20
    1a24:	92 e0       	ldi	r25, 0x02	; 2
    1a26:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:506
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Kurzschluss Stepper"));
    1a2a:	6c e2       	ldi	r22, 0x2C	; 44
    1a2c:	71 e0       	ldi	r23, 0x01	; 1
    1a2e:	80 e1       	ldi	r24, 0x10	; 16
    1a30:	92 e0       	ldi	r25, 0x02	; 2
    1a32:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a36:	84 e1       	ldi	r24, 0x14	; 20
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:507
    } while (u8g2.nextPage());
    1a3e:	81 11       	cpse	r24, r1
    1a40:	d2 cf       	rjmp	.-92     	; 0x19e6 <LeseTMCStatus(bool)+0x17c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:508
    delay(10000);
    1a42:	60 e1       	ldi	r22, 0x10	; 16
    1a44:	77 e2       	ldi	r23, 0x27	; 39
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:510
  }
  if ((TMCStatus.open_load_a == 1 || TMCStatus.open_load_b == 1) && PruefeOpenLoad) {
    1a4e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <TMCStatus>
    1a52:	80 7c       	andi	r24, 0xC0	; 192
    1a54:	09 f4       	brne	.+2      	; 0x1a58 <LeseTMCStatus(bool)+0x1ee>
    1a56:	4a c0       	rjmp	.+148    	; 0x1aec <LeseTMCStatus(bool)+0x282>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:510 (discriminator 1)
    1a58:	cc 23       	and	r28, r28
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <LeseTMCStatus(bool)+0x1f4>
    1a5c:	47 c0       	rjmp	.+142    	; 0x1aec <LeseTMCStatus(bool)+0x282>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:511
    TMCFehler = true;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <TMCFehler>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1a64:	84 e1       	ldi	r24, 0x14	; 20
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a6c:	0f e0       	ldi	r16, 0x0F	; 15
    1a6e:	10 e0       	ldi	r17, 0x00	; 0
    1a70:	c8 e2       	ldi	r28, 0x28	; 40
    1a72:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1a74:	67 ef       	ldi	r22, 0xF7	; 247
    1a76:	7a e0       	ldi	r23, 0x0A	; 10
    1a78:	84 e1       	ldi	r24, 0x14	; 20
    1a7a:	92 e0       	ldi	r25, 0x02	; 2
    1a7c:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a80:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1a84:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1a88:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1a8c:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:516
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1a90:	64 e2       	ldi	r22, 0x24	; 36
    1a92:	71 e0       	ldi	r23, 0x01	; 1
    1a94:	80 e1       	ldi	r24, 0x10	; 16
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1a9c:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1aa0:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1aa4:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    1aa8:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1aac:	63 e7       	ldi	r22, 0x73	; 115
    1aae:	72 e0       	ldi	r23, 0x02	; 2
    1ab0:	84 e1       	ldi	r24, 0x14	; 20
    1ab2:	92 e0       	ldi	r25, 0x02	; 2
    1ab4:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:519
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Unterbrechung Stepper"));
    1ab8:	6e e0       	ldi	r22, 0x0E	; 14
    1aba:	71 e0       	ldi	r23, 0x01	; 1
    1abc:	80 e1       	ldi	r24, 0x10	; 16
    1abe:	92 e0       	ldi	r25, 0x02	; 2
    1ac0:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1ac4:	84 e1       	ldi	r24, 0x14	; 20
    1ac6:	92 e0       	ldi	r25, 0x02	; 2
    1ac8:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:520
    } while (u8g2.nextPage());
    1acc:	81 11       	cpse	r24, r1
    1ace:	d2 cf       	rjmp	.-92     	; 0x1a74 <LeseTMCStatus(bool)+0x20a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:521
    delay(10000);
    1ad0:	60 e1       	ldi	r22, 0x10	; 16
    1ad2:	77 e2       	ldi	r23, 0x27	; 39
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:523
  }
}
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	ff 90       	pop	r15
    1ae2:	ef 90       	pop	r14
    1ae4:	df 90       	pop	r13
    1ae6:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:521
      u8g2.print(F("Fehler!"));
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Unterbrechung Stepper"));
    } while (u8g2.nextPage());
    delay(10000);
    1ae8:	0c 94 85 36 	jmp	0x6d0a	; 0x6d0a <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:523
  }
}
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	08 95       	ret

00001afe <BerechneTemperatur(int)>:
_Z18BerechneTemperaturi():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:525

void BerechneTemperatur(int temp) {
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:526
  int Vo = map(temp, 0, 1023, 1023, 0);
    1b12:	bc 01       	movw	r22, r24
    1b14:	99 0f       	add	r25, r25
    1b16:	88 0b       	sbc	r24, r24
    1b18:	99 0b       	sbc	r25, r25
    1b1a:	1f 92       	push	r1
    1b1c:	1f 92       	push	r1
    1b1e:	1f 92       	push	r1
    1b20:	1f 92       	push	r1
    1b22:	aa 24       	eor	r10, r10
    1b24:	aa 94       	dec	r10
    1b26:	23 e0       	ldi	r18, 0x03	; 3
    1b28:	b2 2e       	mov	r11, r18
    1b2a:	c1 2c       	mov	r12, r1
    1b2c:	d1 2c       	mov	r13, r1
    1b2e:	ee 24       	eor	r14, r14
    1b30:	ea 94       	dec	r14
    1b32:	13 e0       	ldi	r17, 0x03	; 3
    1b34:	f1 2e       	mov	r15, r17
    1b36:	00 e0       	ldi	r16, 0x00	; 0
    1b38:	10 e0       	ldi	r17, 0x00	; 0
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	a9 01       	movw	r20, r18
    1b40:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:527
  R2 = R1 * (1023.0 / (float)Vo - 1.0);
    1b44:	07 2e       	mov	r0, r23
    1b46:	00 0c       	add	r0, r0
    1b48:	88 0b       	sbc	r24, r24
    1b4a:	99 0b       	sbc	r25, r25
    1b4c:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
    1b50:	9b 01       	movw	r18, r22
    1b52:	ac 01       	movw	r20, r24
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 ec       	ldi	r23, 0xC0	; 192
    1b58:	8f e7       	ldi	r24, 0x7F	; 127
    1b5a:	94 e4       	ldi	r25, 0x44	; 68
    1b5c:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    1b6c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <R1>
    1b70:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <R1+0x1>
    1b74:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <R1+0x2>
    1b78:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <R1+0x3>
    1b7c:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1b80:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <R2>
    1b84:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <R2+0x1>
    1b88:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <R2+0x2>
    1b8c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <R2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:528
  logR2 = log(R2);
    1b90:	0e 94 dc 39 	call	0x73b8	; 0x73b8 <log>
    1b94:	6b 01       	movw	r12, r22
    1b96:	7c 01       	movw	r14, r24
    1b98:	c0 92 0c 02 	sts	0x020C, r12	; 0x80020c <logR2>
    1b9c:	d0 92 0d 02 	sts	0x020D, r13	; 0x80020d <logR2+0x1>
    1ba0:	e0 92 0e 02 	sts	0x020E, r14	; 0x80020e <logR2+0x2>
    1ba4:	f0 92 0f 02 	sts	0x020F, r15	; 0x80020f <logR2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:529
  Temperatur = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
    1ba8:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <c2>
    1bac:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <c2+0x1>
    1bb0:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <c2+0x2>
    1bb4:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <c2+0x3>
    1bb8:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1bbc:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <c1>
    1bc0:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <c1+0x1>
    1bc4:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <c1+0x2>
    1bc8:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <c1+0x3>
    1bcc:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    1bd0:	4b 01       	movw	r8, r22
    1bd2:	5c 01       	movw	r10, r24
    1bd4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <c3>
    1bd8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <c3+0x1>
    1bdc:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <c3+0x2>
    1be0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <c3+0x3>
    1be4:	c7 01       	movw	r24, r14
    1be6:	b6 01       	movw	r22, r12
    1be8:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1bec:	a7 01       	movw	r20, r14
    1bee:	96 01       	movw	r18, r12
    1bf0:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1bf4:	a7 01       	movw	r20, r14
    1bf6:	96 01       	movw	r18, r12
    1bf8:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1bfc:	9b 01       	movw	r18, r22
    1bfe:	ac 01       	movw	r20, r24
    1c00:	c5 01       	movw	r24, r10
    1c02:	b4 01       	movw	r22, r8
    1c04:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	80 e8       	ldi	r24, 0x80	; 128
    1c12:	9f e3       	ldi	r25, 0x3F	; 63
    1c14:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:530
  Temperatur = Temperatur - 273.15;
    1c18:	23 e3       	ldi	r18, 0x33	; 51
    1c1a:	33 e9       	ldi	r19, 0x93	; 147
    1c1c:	48 e8       	ldi	r20, 0x88	; 136
    1c1e:	53 e4       	ldi	r21, 0x43	; 67
    1c20:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    1c24:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <Temperatur>
    1c28:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <Temperatur+0x1>
    1c2c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <Temperatur+0x2>
    1c30:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <Temperatur+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:531
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	bf 90       	pop	r11
    1c4a:	af 90       	pop	r10
    1c4c:	9f 90       	pop	r9
    1c4e:	8f 90       	pop	r8
    1c50:	08 95       	ret

00001c52 <BerechneSperrgradPoti(int)>:
_Z21BerechneSperrgradPotii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:535



int BerechneSperrgradPoti(int poti) {
    1c52:	4f 92       	push	r4
    1c54:	5f 92       	push	r5
    1c56:	6f 92       	push	r6
    1c58:	7f 92       	push	r7
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:536
  float SperrgradRAW = map(poti, 0, 1020, 0, 100);
    1c6e:	bc 01       	movw	r22, r24
    1c70:	99 0f       	add	r25, r25
    1c72:	88 0b       	sbc	r24, r24
    1c74:	99 0b       	sbc	r25, r25
    1c76:	1f 92       	push	r1
    1c78:	1f 92       	push	r1
    1c7a:	1f 92       	push	r1
    1c7c:	24 e6       	ldi	r18, 0x64	; 100
    1c7e:	2f 93       	push	r18
    1c80:	a1 2c       	mov	r10, r1
    1c82:	b1 2c       	mov	r11, r1
    1c84:	65 01       	movw	r12, r10
    1c86:	1c ef       	ldi	r17, 0xFC	; 252
    1c88:	e1 2e       	mov	r14, r17
    1c8a:	13 e0       	ldi	r17, 0x03	; 3
    1c8c:	f1 2e       	mov	r15, r17
    1c8e:	00 e0       	ldi	r16, 0x00	; 0
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
    1c9c:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:537
  SperrgradRAW = SperrgradRAW / 100;
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	48 ec       	ldi	r20, 0xC8	; 200
    1ca6:	52 e4       	ldi	r21, 0x42	; 66
    1ca8:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    1cac:	6b 01       	movw	r12, r22
    1cae:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:538
  float SperrgradRAWKorrigiert = 0.9 * (SperrgradRAW * SperrgradRAW * SperrgradRAW) - 1.3 * (SperrgradRAW * SperrgradRAW) + 1.35 * SperrgradRAW + 0.03;
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	9b 01       	movw	r18, r22
    1cb4:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1cb8:	4b 01       	movw	r8, r22
    1cba:	5c 01       	movw	r10, r24
    1cbc:	a7 01       	movw	r20, r14
    1cbe:	96 01       	movw	r18, r12
    1cc0:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1cc4:	26 e6       	ldi	r18, 0x66	; 102
    1cc6:	36 e6       	ldi	r19, 0x66	; 102
    1cc8:	46 e6       	ldi	r20, 0x66	; 102
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1cd0:	2b 01       	movw	r4, r22
    1cd2:	3c 01       	movw	r6, r24
    1cd4:	26 e6       	ldi	r18, 0x66	; 102
    1cd6:	36 e6       	ldi	r19, 0x66	; 102
    1cd8:	46 ea       	ldi	r20, 0xA6	; 166
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	c5 01       	movw	r24, r10
    1cde:	b4 01       	movw	r22, r8
    1ce0:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1ce4:	9b 01       	movw	r18, r22
    1ce6:	ac 01       	movw	r20, r24
    1ce8:	c3 01       	movw	r24, r6
    1cea:	b2 01       	movw	r22, r4
    1cec:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    1cf0:	4b 01       	movw	r8, r22
    1cf2:	5c 01       	movw	r10, r24
    1cf4:	2d ec       	ldi	r18, 0xCD	; 205
    1cf6:	3c ec       	ldi	r19, 0xCC	; 204
    1cf8:	4c ea       	ldi	r20, 0xAC	; 172
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	b6 01       	movw	r22, r12
    1d00:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1d04:	9b 01       	movw	r18, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	c5 01       	movw	r24, r10
    1d0a:	b4 01       	movw	r22, r8
    1d0c:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    1d10:	2f e8       	ldi	r18, 0x8F	; 143
    1d12:	32 ec       	ldi	r19, 0xC2	; 194
    1d14:	45 ef       	ldi	r20, 0xF5	; 245
    1d16:	5c e3       	ldi	r21, 0x3C	; 60
    1d18:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:539
  SperrgradRAWKorrigiert = SperrgradRAWKorrigiert * 100;
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	48 ec       	ldi	r20, 0xC8	; 200
    1d22:	52 e4       	ldi	r21, 0x42	; 66
    1d24:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:540
  int temp = (int)SperrgradRAWKorrigiert;
    1d28:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__fixsfsi>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:543
  if (temp < 0)
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
    1d2c:	a0 90 a6 02 	lds	r10, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    1d30:	b0 90 a7 02 	lds	r11, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    1d34:	0b 2c       	mov	r0, r11
    1d36:	00 0c       	add	r0, r0
    1d38:	cc 08       	sbc	r12, r12
    1d3a:	dd 08       	sbc	r13, r13
    1d3c:	77 ff       	sbrs	r23, 7
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <BerechneSperrgradPoti(int)+0xf2>
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	07 2e       	mov	r0, r23
    1d46:	00 0c       	add	r0, r0
    1d48:	88 0b       	sbc	r24, r24
    1d4a:	99 0b       	sbc	r25, r25
    1d4c:	00 91 ae 02 	lds	r16, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    1d50:	10 91 af 02 	lds	r17, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    1d54:	01 2e       	mov	r0, r17
    1d56:	00 0c       	add	r0, r0
    1d58:	22 0b       	sbc	r18, r18
    1d5a:	33 0b       	sbc	r19, r19
    1d5c:	3f 93       	push	r19
    1d5e:	2f 93       	push	r18
    1d60:	1f 93       	push	r17
    1d62:	0f 93       	push	r16
    1d64:	12 e6       	ldi	r17, 0x62	; 98
    1d66:	e1 2e       	mov	r14, r17
    1d68:	f1 2c       	mov	r15, r1
    1d6a:	00 e0       	ldi	r16, 0x00	; 0
    1d6c:	10 e0       	ldi	r17, 0x00	; 0
    1d6e:	23 e0       	ldi	r18, 0x03	; 3
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e0       	ldi	r20, 0x00	; 0
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:544
  return temp;
    1d7a:	2d b7       	in	r18, 0x3d	; 61
    1d7c:	3e b7       	in	r19, 0x3e	; 62
    1d7e:	28 5f       	subi	r18, 0xF8	; 248
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	3e bf       	out	0x3e, r19	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	2d bf       	out	0x3d, r18	; 61
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:545
}
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	9f 90       	pop	r9
    1da0:	8f 90       	pop	r8
    1da2:	7f 90       	pop	r7
    1da4:	6f 90       	pop	r6
    1da6:	5f 90       	pop	r5
    1da8:	4f 90       	pop	r4
    1daa:	08 95       	ret

00001dac <LeseEingaenge()>:
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:420

    } while (u8g2.nextPage());
  }
}

void LeseEingaenge() {
    1dac:	cf 92       	push	r12
    1dae:	df 92       	push	r13
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:422
  // Lese Eingaenge
  BerechneTemperatur(analogRead(IO_Temperatur));
    1dbc:	8e e0       	ldi	r24, 0x0E	; 14
    1dbe:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <analogRead>
    1dc2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <BerechneTemperatur(int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:424

  if (!digitalRead(IO_Eingabe_50) && !digitalRead(IO_Eingabe_75)) {
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1dcc:	89 2b       	or	r24, r25
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <LeseEingaenge()+0x26>
    1dd0:	40 c0       	rjmp	.+128    	; 0x1e52 <LeseEingaenge()+0xa6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:424 (discriminator 1)
    1dd2:	83 e0       	ldi	r24, 0x03	; 3
    1dd4:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1dd8:	89 2b       	or	r24, r25
    1dda:	d9 f5       	brne	.+118    	; 0x1e52 <LeseEingaenge()+0xa6>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1ddc:	84 e1       	ldi	r24, 0x14	; 20
    1dde:	92 e0       	ldi	r25, 0x02	; 2
    1de0:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1de4:	04 e1       	ldi	r16, 0x14	; 20
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	c2 e3       	ldi	r28, 0x32	; 50
    1dea:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1dec:	63 e7       	ldi	r22, 0x73	; 115
    1dee:	72 e0       	ldi	r23, 0x02	; 2
    1df0:	84 e1       	ldi	r24, 0x14	; 20
    1df2:	92 e0       	ldi	r25, 0x02	; 2
    1df4:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1df8:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1dfc:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1e00:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    1e04:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:429
    u8g2.firstPage();
      do {
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.setCursor(0, 20);
        u8g2.print(F("Haldex Autotune"));
    1e08:	61 ea       	ldi	r22, 0xA1	; 161
    1e0a:	71 e0       	ldi	r23, 0x01	; 1
    1e0c:	80 e1       	ldi	r24, 0x10	; 16
    1e0e:	92 e0       	ldi	r25, 0x02	; 2
    1e10:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1e14:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    1e18:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    1e1c:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    1e20:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:431
        u8g2.setCursor(0, 50);
        u8g2.print(F("beim naechsten Start"));
    1e24:	6c e8       	ldi	r22, 0x8C	; 140
    1e26:	71 e0       	ldi	r23, 0x01	; 1
    1e28:	80 e1       	ldi	r24, 0x10	; 16
    1e2a:	92 e0       	ldi	r25, 0x02	; 2
    1e2c:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1e30:	84 e1       	ldi	r24, 0x14	; 20
    1e32:	92 e0       	ldi	r25, 0x02	; 2
    1e34:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:432
      } while (u8g2.nextPage());
    1e38:	81 11       	cpse	r24, r1
    1e3a:	d8 cf       	rjmp	.-80     	; 0x1dec <LeseEingaenge()+0x40>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:433
      delay(2000);
    1e3c:	60 ed       	ldi	r22, 0xD0	; 208
    1e3e:	77 e0       	ldi	r23, 0x07	; 7
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <eeprom_write_byte>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:437
    EEPROM.write(0, 0);
  }

  if (!digitalRead(IO_Eingabe_25)) {
    1e52:	8f e0       	ldi	r24, 0x0F	; 15
    1e54:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1e58:	89 2b       	or	r24, r25
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <LeseEingaenge()+0xb2>
    1e5c:	47 c0       	rjmp	.+142    	; 0x1eec <LeseEingaenge()+0x140>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:438
    Sperrgrad = BerechneSperrgradPoti(235);
    1e5e:	8b ee       	ldi	r24, 0xEB	; 235
    1e60:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:445
    Sperrgrad = BerechneSperrgradPoti(550);
  } else if (!digitalRead(IO_Eingabe_75)) {
    Sperrgrad = BerechneSperrgradPoti(840);
  } else if (!digitalRead(IO_Eingabe_100)) {
    Sperrgrad = BerechneSperrgradPoti(1023);
  } else Sperrgrad = BerechneSperrgradPoti(0);
    1e62:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <BerechneSperrgradPoti(int)>
    1e66:	90 93 f7 01 	sts	0x01F7, r25	; 0x8001f7 <Sperrgrad+0x1>
    1e6a:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <Sperrgrad>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:451

  

  // Anpassung des Sperrgrades über die Öltemperatur:
  // Bei wärmer werdendem Öl, wird das Ventil weiter geschlossen
  TempOffset = (Temperatur - 20) / 2;
    1e6e:	c0 90 04 02 	lds	r12, 0x0204	; 0x800204 <Temperatur>
    1e72:	d0 90 05 02 	lds	r13, 0x0205	; 0x800205 <Temperatur+0x1>
    1e76:	e0 90 06 02 	lds	r14, 0x0206	; 0x800206 <Temperatur+0x2>
    1e7a:	f0 90 07 02 	lds	r15, 0x0207	; 0x800207 <Temperatur+0x3>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 ea       	ldi	r20, 0xA0	; 160
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	c7 01       	movw	r24, r14
    1e88:	b6 01       	movw	r22, r12
    1e8a:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    1e9a:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__fixsfsi>
    1e9e:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <TempOffset+0x1>
    1ea2:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <TempOffset>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:454

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	48 ec       	ldi	r20, 0xC8	; 200
    1eac:	52 e4       	ldi	r21, 0x42	; 66
    1eae:	c7 01       	movw	r24, r14
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	0e 94 cf 39 	call	0x739e	; 0x739e <__gesf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	24 f4       	brge	.+8      	; 0x1ec2 <LeseEingaenge()+0x116>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:454 (discriminator 1)
    1eba:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1ebe:	88 23       	and	r24, r24
    1ec0:	81 f1       	breq	.+96     	; 0x1f22 <LeseEingaenge()+0x176>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:457
    ZustandTemperatur = true;
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4e eb       	ldi	r20, 0xBE	; 190
    1ec8:	52 e4       	ldi	r21, 0x42	; 66
    1eca:	c7 01       	movw	r24, r14
    1ecc:	b6 01       	movw	r22, r12
    1ece:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    1ed2:	18 16       	cp	r1, r24
    1ed4:	64 f5       	brge	.+88     	; 0x1f2e <LeseEingaenge()+0x182>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:461
    ZustandTemperatur = false;
  }

  LeseTMCStatus(false);
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:462
}
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:461
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    ZustandTemperatur = false;
  }

  LeseTMCStatus(false);
    1ee8:	0c 94 35 0c 	jmp	0x186a	; 0x186a <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:439
    EEPROM.write(0, 0);
  }

  if (!digitalRead(IO_Eingabe_25)) {
    Sperrgrad = BerechneSperrgradPoti(235);
  } else if (!digitalRead(IO_Eingabe_50)) {
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1ef2:	89 2b       	or	r24, r25
    1ef4:	19 f4       	brne	.+6      	; 0x1efc <LeseEingaenge()+0x150>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:440
    Sperrgrad = BerechneSperrgradPoti(550);
    1ef6:	86 e2       	ldi	r24, 0x26	; 38
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	b3 cf       	rjmp	.-154    	; 0x1e62 <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:441
  } else if (!digitalRead(IO_Eingabe_75)) {
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1f02:	89 2b       	or	r24, r25
    1f04:	19 f4       	brne	.+6      	; 0x1f0c <LeseEingaenge()+0x160>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:442
    Sperrgrad = BerechneSperrgradPoti(840);
    1f06:	88 e4       	ldi	r24, 0x48	; 72
    1f08:	93 e0       	ldi	r25, 0x03	; 3
    1f0a:	ab cf       	rjmp	.-170    	; 0x1e62 <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:443
  } else if (!digitalRead(IO_Eingabe_100)) {
    1f0c:	81 e1       	ldi	r24, 0x11	; 17
    1f0e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    1f12:	89 2b       	or	r24, r25
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <LeseEingaenge()+0x170>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:444
    Sperrgrad = BerechneSperrgradPoti(1023);
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	93 e0       	ldi	r25, 0x03	; 3
    1f1a:	a3 cf       	rjmp	.-186    	; 0x1e62 <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:445
  } else Sperrgrad = BerechneSperrgradPoti(0);
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	a0 cf       	rjmp	.-192    	; 0x1e62 <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:455
  // Bei wärmer werdendem Öl, wird das Ventil weiter geschlossen
  TempOffset = (Temperatur - 20) / 2;

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    ZustandTemperatur = true;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ZustandTemperatur>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:456
    ZustandBearbeitet = false;
    1f28:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
    1f2c:	d4 cf       	rjmp	.-88     	; 0x1ed6 <LeseEingaenge()+0x12a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:457 (discriminator 1)
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    1f2e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    1f32:	88 23       	and	r24, r24
    1f34:	81 f2       	breq	.-96     	; 0x1ed6 <LeseEingaenge()+0x12a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:458
    ZustandTemperatur = false;
    1f36:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <ZustandTemperatur>
    1f3a:	cd cf       	rjmp	.-102    	; 0x1ed6 <LeseEingaenge()+0x12a>

00001f3c <loop>:
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:237
  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
}

void loop() {
    1f3c:	af 92       	push	r10
    1f3e:	bf 92       	push	r11
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:239
  // Lese Eingänge alle 250 ms
  if (millis() - MillisLeseEingaenge >= IntervalLeseEingaenge) {
    1f50:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <millis>
    1f54:	00 91 00 02 	lds	r16, 0x0200	; 0x800200 <MillisLeseEingaenge>
    1f58:	10 91 01 02 	lds	r17, 0x0201	; 0x800201 <MillisLeseEingaenge+0x1>
    1f5c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <MillisLeseEingaenge+0x2>
    1f60:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <MillisLeseEingaenge+0x3>
    1f64:	60 1b       	sub	r22, r16
    1f66:	71 0b       	sbc	r23, r17
    1f68:	82 0b       	sbc	r24, r18
    1f6a:	93 0b       	sbc	r25, r19
    1f6c:	6a 3f       	cpi	r22, 0xFA	; 250
    1f6e:	71 05       	cpc	r23, r1
    1f70:	81 05       	cpc	r24, r1
    1f72:	91 05       	cpc	r25, r1
    1f74:	60 f0       	brcs	.+24     	; 0x1f8e <loop+0x52>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:240
    MillisLeseEingaenge = millis();
    1f76:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <millis>
    1f7a:	60 93 00 02 	sts	0x0200, r22	; 0x800200 <MillisLeseEingaenge>
    1f7e:	70 93 01 02 	sts	0x0201, r23	; 0x800201 <MillisLeseEingaenge+0x1>
    1f82:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <MillisLeseEingaenge+0x2>
    1f86:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <MillisLeseEingaenge+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:241
    LeseEingaenge();
    1f8a:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <LeseEingaenge()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:245
  }

  // Lese Eingänge alle 250 ms
  if (millis() - MillisSchreibe >= IntervalSchreibe) {
    1f8e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <millis>
    1f92:	00 91 fc 01 	lds	r16, 0x01FC	; 0x8001fc <MillisSchreibe>
    1f96:	10 91 fd 01 	lds	r17, 0x01FD	; 0x8001fd <MillisSchreibe+0x1>
    1f9a:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <MillisSchreibe+0x2>
    1f9e:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <MillisSchreibe+0x3>
    1fa2:	60 1b       	sub	r22, r16
    1fa4:	71 0b       	sbc	r23, r17
    1fa6:	82 0b       	sbc	r24, r18
    1fa8:	93 0b       	sbc	r25, r19
    1faa:	64 36       	cpi	r22, 0x64	; 100
    1fac:	71 05       	cpc	r23, r1
    1fae:	81 05       	cpc	r24, r1
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	f8 f0       	brcs	.+62     	; 0x1ff2 <loop+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:246
    MillisSchreibe = millis();
    1fb4:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <millis>
    1fb8:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <MillisSchreibe>
    1fbc:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <MillisSchreibe+0x1>
    1fc0:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <MillisSchreibe+0x2>
    1fc4:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <MillisSchreibe+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:247
    if ((stepper.distanceToGo() * stepper.distanceToGo()) < 4) {
    1fc8:	82 eb       	ldi	r24, 0xB2	; 178
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <AccelStepper::distanceToGo()>
    1fd0:	6b 01       	movw	r12, r22
    1fd2:	7c 01       	movw	r14, r24
    1fd4:	82 eb       	ldi	r24, 0xB2	; 178
    1fd6:	92 e0       	ldi	r25, 0x02	; 2
    1fd8:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <AccelStepper::distanceToGo()>
    1fdc:	a7 01       	movw	r20, r14
    1fde:	96 01       	movw	r18, r12
    1fe0:	0e 94 18 3b 	call	0x7630	; 0x7630 <__mulsi3>
    1fe4:	64 30       	cpi	r22, 0x04	; 4
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	81 05       	cpc	r24, r1
    1fea:	91 05       	cpc	r25, r1
    1fec:	14 f4       	brge	.+4      	; 0x1ff2 <loop+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:248
      SchreibeDisplay();
    1fee:	0e 94 41 0a 	call	0x1482	; 0x1482 <SchreibeDisplay()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:253
    }
  }

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    1ff2:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <millis>
    1ff6:	00 91 f8 01 	lds	r16, 0x01F8	; 0x8001f8 <MillisLED>
    1ffa:	10 91 f9 01 	lds	r17, 0x01F9	; 0x8001f9 <MillisLED+0x1>
    1ffe:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <MillisLED+0x2>
    2002:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <MillisLED+0x3>
    2006:	60 1b       	sub	r22, r16
    2008:	71 0b       	sbc	r23, r17
    200a:	82 0b       	sbc	r24, r18
    200c:	93 0b       	sbc	r25, r19
    200e:	64 3f       	cpi	r22, 0xF4	; 244
    2010:	71 40       	sbci	r23, 0x01	; 1
    2012:	81 05       	cpc	r24, r1
    2014:	91 05       	cpc	r25, r1
    2016:	08 f4       	brcc	.+2      	; 0x201a <loop+0xde>
    2018:	3f c0       	rjmp	.+126    	; 0x2098 <loop+0x15c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:254
    MillisLED = millis();
    201a:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <millis>
    201e:	60 93 f8 01 	sts	0x01F8, r22	; 0x8001f8 <MillisLED>
    2022:	70 93 f9 01 	sts	0x01F9, r23	; 0x8001f9 <MillisLED+0x1>
    2026:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <MillisLED+0x2>
    202a:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <MillisLED+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:255
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) >= 60) {
    202e:	e0 90 ae 02 	lds	r14, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    2032:	f0 90 af 02 	lds	r15, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    2036:	0f 2c       	mov	r0, r15
    2038:	00 0c       	add	r0, r0
    203a:	00 0b       	sbc	r16, r16
    203c:	11 0b       	sbc	r17, r17
    203e:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    2042:	30 91 a7 02 	lds	r19, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2046:	03 2e       	mov	r0, r19
    2048:	00 0c       	add	r0, r0
    204a:	44 0b       	sbc	r20, r20
    204c:	55 0b       	sbc	r21, r21
    204e:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <Sperrgrad>
    2052:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    2056:	07 2e       	mov	r0, r23
    2058:	00 0c       	add	r0, r0
    205a:	88 0b       	sbc	r24, r24
    205c:	99 0b       	sbc	r25, r25
    205e:	1f 92       	push	r1
    2060:	1f 92       	push	r1
    2062:	1f 92       	push	r1
    2064:	e4 e6       	ldi	r30, 0x64	; 100
    2066:	ef 93       	push	r30
    2068:	a1 2c       	mov	r10, r1
    206a:	b1 2c       	mov	r11, r1
    206c:	65 01       	movw	r12, r10
    206e:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	6c 33       	cpi	r22, 0x3C	; 60
    207c:	71 05       	cpc	r23, r1
    207e:	81 05       	cpc	r24, r1
    2080:	91 05       	cpc	r25, r1
    2082:	34 f0       	brlt	.+12     	; 0x2090 <loop+0x154>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:256
      if (digitalRead(IO_LED_Sperrgrad))
    2084:	8d e0       	ldi	r24, 0x0D	; 13
    2086:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:259
        digitalWrite(IO_LED_Sperrgrad, LOW);
      else
        digitalWrite(IO_LED_Sperrgrad, HIGH);
    208a:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:256

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    MillisLED = millis();
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) >= 60) {
      if (digitalRead(IO_LED_Sperrgrad))
    208c:	89 2b       	or	r24, r25
    208e:	09 f0       	breq	.+2      	; 0x2092 <loop+0x156>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:257
        digitalWrite(IO_LED_Sperrgrad, LOW);
    2090:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:259
      else
        digitalWrite(IO_LED_Sperrgrad, HIGH);
    2092:	8d e0       	ldi	r24, 0x0D	; 13
    2094:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:266
      digitalWrite(IO_LED_Sperrgrad, LOW);
    }
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    2098:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    209c:	81 11       	cpse	r24, r1
    209e:	2c c0       	rjmp	.+88     	; 0x20f8 <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:266 (discriminator 2)
    20a0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    20a4:	81 11       	cpse	r24, r1
    20a6:	28 c0       	rjmp	.+80     	; 0x20f8 <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:266 (discriminator 4)
    20a8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    20ac:	81 11       	cpse	r24, r1
    20ae:	24 c0       	rjmp	.+72     	; 0x20f8 <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:274
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
      ZustandBearbeitet = true;
      stepper.setCurrentPosition(0);
    }
  } else if (ZustandHauptschalter) {
    20b0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    20b4:	88 23       	and	r24, r24
    20b6:	09 f4       	brne	.+2      	; 0x20ba <loop+0x17e>
    20b8:	6f c0       	rjmp	.+222    	; 0x2198 <loop+0x25c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:276
    // Wenn der Hauptschalter aus ist, Stepper und Pumpe stromlos machen
    digitalWrite(IO_Enable, HIGH);
    20ba:	61 e0       	ldi	r22, 0x01	; 1
    20bc:	84 e0       	ldi	r24, 0x04	; 4
    20be:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:277
    digitalWrite(IO_Pumpe, LOW);
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	87 e1       	ldi	r24, 0x17	; 23
    20c6:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:279
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    20ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    20ce:	81 11       	cpse	r24, r1
    20d0:	25 c0       	rjmp	.+74     	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:280
      ZustandBearbeitet = true;
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:281
      stepper.setCurrentPosition(0);
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	ba 01       	movw	r22, r20
    20de:	82 eb       	ldi	r24, 0xB2	; 178
    20e0:	92 e0       	ldi	r25, 0x02	; 2
    20e2:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:282
      stepper.setSpeed(1000);
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	50 e0       	ldi	r21, 0x00	; 0
    20ea:	6a e7       	ldi	r22, 0x7A	; 122
    20ec:	74 e4       	ldi	r23, 0x44	; 68
    20ee:	82 eb       	ldi	r24, 0xB2	; 178
    20f0:	92 e0       	ldi	r25, 0x02	; 2
    20f2:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <AccelStepper::setSpeed(float)>
    20f6:	12 c0       	rjmp	.+36     	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:268
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    // Wenn Bremse, Handbremse oder Übertemperatur vorhanden sind, Stepper stromlos machen
    digitalWrite(IO_Enable, HIGH);
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	84 e0       	ldi	r24, 0x04	; 4
    20fc:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:270
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    2100:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    2104:	81 11       	cpse	r24, r1
    2106:	0a c0       	rjmp	.+20     	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:271
      ZustandBearbeitet = true;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:272
      stepper.setCurrentPosition(0);
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	50 e0       	ldi	r21, 0x00	; 0
    2112:	ba 01       	movw	r22, r20
    2114:	82 eb       	ldi	r24, 0xB2	; 178
    2116:	92 e0       	ldi	r25, 0x02	; 2
    2118:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:308
      }
    }
  }

  // Fehler im Treiber des Schrittmotors
  if (TMCFehler) {
    211c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    2120:	88 23       	and	r24, r24
    2122:	41 f0       	breq	.+16     	; 0x2134 <loop+0x1f8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:310
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	84 e0       	ldi	r24, 0x04	; 4
    2128:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:311
    digitalWrite(IO_Pumpe, LOW);
    212c:	60 e0       	ldi	r22, 0x00	; 0
    212e:	87 e1       	ldi	r24, 0x17	; 23
    2130:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:316
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    2134:	89 e0       	ldi	r24, 0x09	; 9
    2136:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    213a:	89 2b       	or	r24, r25
    213c:	09 f4       	brne	.+2      	; 0x2140 <loop+0x204>
    213e:	a1 c0       	rjmp	.+322    	; 0x2282 <loop+0x346>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:333
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Vorladepumpe"));

    } while (u8g2.nextPage());
  } else {
    PumpeFehler = false;
    2140:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
    2144:	20 91 f6 01 	lds	r18, 0x01F6	; 0x8001f6 <Sperrgrad>
    2148:	30 91 f7 01 	lds	r19, 0x01F7	; 0x8001f7 <Sperrgrad+0x1>
    214c:	40 91 f2 01 	lds	r20, 0x01F2	; 0x8001f2 <TempOffset>
    2150:	50 91 f3 01 	lds	r21, 0x01F3	; 0x8001f3 <TempOffset+0x1>
    2154:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    2158:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:340



  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    215c:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    2160:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2164:	77 ff       	sbrs	r23, 7
    2166:	db c0       	rjmp	.+438    	; 0x231e <loop+0x3e2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:341
    SperrgradKompensiert = Sperrgrad - TempOffset;
    2168:	24 1b       	sub	r18, r20
    216a:	35 0b       	sbc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:342
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
    216c:	ac 01       	movw	r20, r24
    216e:	4c 5f       	subi	r20, 0xFC	; 252
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	42 17       	cp	r20, r18
    2174:	53 07       	cpc	r21, r19
    2176:	0c f0       	brlt	.+2      	; 0x217a <loop+0x23e>
    2178:	cc c0       	rjmp	.+408    	; 0x2312 <loop+0x3d6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:345
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    217a:	30 93 f5 01 	sts	0x01F5, r19	; 0x8001f5 <SperrgradKompensiert+0x1>
    217e:	20 93 f4 01 	sts	0x01F4, r18	; 0x8001f4 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:349
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	bf 90       	pop	r11
    2194:	af 90       	pop	r10
    2196:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:287
      stepper.setSpeed(1000);
    }
  }
  // Kein Abschaltgrund liegt vor
  // Stepper aktivieren, Vorladepumpe einschalten
  else if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur && !TMCFehler) {
    2198:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandBremse>
    219c:	81 11       	cpse	r24, r1
    219e:	be cf       	rjmp	.-132    	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:287 (discriminator 1)
    21a0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHandbremse>
    21a4:	81 11       	cpse	r24, r1
    21a6:	ba cf       	rjmp	.-140    	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:287 (discriminator 3)
    21a8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandHauptschalter>
    21ac:	81 11       	cpse	r24, r1
    21ae:	b6 cf       	rjmp	.-148    	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:287 (discriminator 5)
    21b0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ZustandTemperatur>
    21b4:	81 11       	cpse	r24, r1
    21b6:	b2 cf       	rjmp	.-156    	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:287 (discriminator 7)
    21b8:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <TMCFehler>
    21bc:	81 11       	cpse	r24, r1
    21be:	b2 cf       	rjmp	.-156    	; 0x2124 <loop+0x1e8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:288
    digitalWrite(IO_Enable, LOW);
    21c0:	60 e0       	ldi	r22, 0x00	; 0
    21c2:	84 e0       	ldi	r24, 0x04	; 4
    21c4:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:289
    digitalWrite(IO_Pumpe, HIGH);
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	87 e1       	ldi	r24, 0x17	; 23
    21cc:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:290
    stepper.moveTo(SperrgradKompensiert);
    21d0:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    21d4:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    21d8:	05 2e       	mov	r0, r21
    21da:	00 0c       	add	r0, r0
    21dc:	66 0b       	sbc	r22, r22
    21de:	77 0b       	sbc	r23, r23
    21e0:	82 eb       	ldi	r24, 0xB2	; 178
    21e2:	92 e0       	ldi	r25, 0x02	; 2
    21e4:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:291
    stepper.setSpeed(1000);
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	6a e7       	ldi	r22, 0x7A	; 122
    21ee:	74 e4       	ldi	r23, 0x44	; 68
    21f0:	82 eb       	ldi	r24, 0xB2	; 178
    21f2:	92 e0       	ldi	r25, 0x02	; 2
    21f4:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:292
    stepper.runSpeedToPosition();
    21f8:	82 eb       	ldi	r24, 0xB2	; 178
    21fa:	92 e0       	ldi	r25, 0x02	; 2
    21fc:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:295

    // Sofern der Zustand gewechselt hat, Stepper aktivieren und zur alten Position fahren
    if (!ZustandBearbeitet) {
    2200:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    2204:	81 11       	cpse	r24, r1
    2206:	8a cf       	rjmp	.-236    	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:296
      stepper.setCurrentPosition(0);
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	ba 01       	movw	r22, r20
    220e:	82 eb       	ldi	r24, 0xB2	; 178
    2210:	92 e0       	ldi	r25, 0x02	; 2
    2212:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:297
      stepper.setSpeed(1000);
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	50 e0       	ldi	r21, 0x00	; 0
    221a:	6a e7       	ldi	r22, 0x7A	; 122
    221c:	74 e4       	ldi	r23, 0x44	; 68
    221e:	82 eb       	ldi	r24, 0xB2	; 178
    2220:	92 e0       	ldi	r25, 0x02	; 2
    2222:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:298
      ZustandBearbeitet = true;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:299
      stepper.moveTo(SperrgradKompensiert);
    222c:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    2230:	50 91 f5 01 	lds	r21, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    2234:	05 2e       	mov	r0, r21
    2236:	00 0c       	add	r0, r0
    2238:	66 0b       	sbc	r22, r22
    223a:	77 0b       	sbc	r23, r23
    223c:	82 eb       	ldi	r24, 0xB2	; 178
    223e:	92 e0       	ldi	r25, 0x02	; 2
    2240:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:300
      stepper.setSpeed(1000);
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	6a e7       	ldi	r22, 0x7A	; 122
    224a:	74 e4       	ldi	r23, 0x44	; 68
    224c:	82 eb       	ldi	r24, 0xB2	; 178
    224e:	92 e0       	ldi	r25, 0x02	; 2
    2250:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:301
      while (stepper.currentPosition() != SperrgradKompensiert) {
    2254:	82 eb       	ldi	r24, 0xB2	; 178
    2256:	92 e0       	ldi	r25, 0x02	; 2
    2258:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <AccelStepper::currentPosition()>
    225c:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <SperrgradKompensiert>
    2260:	30 91 f5 01 	lds	r19, 0x01F5	; 0x8001f5 <SperrgradKompensiert+0x1>
    2264:	89 01       	movw	r16, r18
    2266:	33 0f       	add	r19, r19
    2268:	22 0b       	sbc	r18, r18
    226a:	33 0b       	sbc	r19, r19
    226c:	60 17       	cp	r22, r16
    226e:	71 07       	cpc	r23, r17
    2270:	82 07       	cpc	r24, r18
    2272:	93 07       	cpc	r25, r19
    2274:	09 f4       	brne	.+2      	; 0x2278 <loop+0x33c>
    2276:	52 cf       	rjmp	.-348    	; 0x211c <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:302
        stepper.runSpeedToPosition();
    2278:	82 eb       	ldi	r24, 0xB2	; 178
    227a:	92 e0       	ldi	r25, 0x02	; 2
    227c:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:301
      stepper.setCurrentPosition(0);
      stepper.setSpeed(1000);
      ZustandBearbeitet = true;
      stepper.moveTo(SperrgradKompensiert);
      stepper.setSpeed(1000);
      while (stepper.currentPosition() != SperrgradKompensiert) {
    2280:	e9 cf       	rjmp	.-46     	; 0x2254 <loop+0x318>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:316 (discriminator 1)
    digitalWrite(IO_Pumpe, LOW);
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    2282:	87 e1       	ldi	r24, 0x17	; 23
    2284:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    2288:	89 2b       	or	r24, r25
    228a:	09 f4       	brne	.+2      	; 0x228e <loop+0x352>
    228c:	59 cf       	rjmp	.-334    	; 0x2140 <loop+0x204>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:317
    PumpeFehler = true;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:319
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    2294:	61 e0       	ldi	r22, 0x01	; 1
    2296:	84 e0       	ldi	r24, 0x04	; 4
    2298:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:320
    digitalWrite(IO_Pumpe, LOW);
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	87 e1       	ldi	r24, 0x17	; 23
    22a0:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    22a4:	84 e1       	ldi	r24, 0x14	; 20
    22a6:	92 e0       	ldi	r25, 0x02	; 2
    22a8:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    22ac:	cf e0       	ldi	r28, 0x0F	; 15
    22ae:	d0 e0       	ldi	r29, 0x00	; 0
    22b0:	09 e1       	ldi	r16, 0x19	; 25
    22b2:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    22b4:	67 ef       	ldi	r22, 0xF7	; 247
    22b6:	7a e0       	ldi	r23, 0x0A	; 10
    22b8:	84 e1       	ldi	r24, 0x14	; 20
    22ba:	92 e0       	ldi	r25, 0x02	; 2
    22bc:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    22c0:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    22c4:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    22c8:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    22cc:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:326
    u8g2.firstPage();
    do {

      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    22d0:	6d e1       	ldi	r22, 0x1D	; 29
    22d2:	72 e0       	ldi	r23, 0x02	; 2
    22d4:	80 e1       	ldi	r24, 0x10	; 16
    22d6:	92 e0       	ldi	r25, 0x02	; 2
    22d8:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    22dc:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    22e0:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    22e4:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    22e8:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    22ec:	63 e7       	ldi	r22, 0x73	; 115
    22ee:	72 e0       	ldi	r23, 0x02	; 2
    22f0:	84 e1       	ldi	r24, 0x14	; 20
    22f2:	92 e0       	ldi	r25, 0x02	; 2
    22f4:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:329
      u8g2.setCursor(0, 25);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Vorladepumpe"));
    22f8:	60 e1       	ldi	r22, 0x10	; 16
    22fa:	72 e0       	ldi	r23, 0x02	; 2
    22fc:	80 e1       	ldi	r24, 0x10	; 16
    22fe:	92 e0       	ldi	r25, 0x02	; 2
    2300:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2304:	84 e1       	ldi	r24, 0x14	; 20
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:331

    } while (u8g2.nextPage());
    230c:	81 11       	cpse	r24, r1
    230e:	d2 cf       	rjmp	.-92     	; 0x22b4 <loop+0x378>
    2310:	19 cf       	rjmp	.-462    	; 0x2144 <loop+0x208>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:343
  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
    2312:	05 96       	adiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:347
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    2314:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <SperrgradKompensiert+0x1>
    2318:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:349
  }
}
    231c:	32 cf       	rjmp	.-412    	; 0x2182 <loop+0x246>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:345
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    231e:	24 0f       	add	r18, r20
    2320:	35 1f       	adc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:346
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    2322:	ac 01       	movw	r20, r24
    2324:	44 50       	subi	r20, 0x04	; 4
    2326:	51 09       	sbc	r21, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:347
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    2328:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:346
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    232a:	24 17       	cp	r18, r20
    232c:	35 07       	cpc	r19, r21
    232e:	94 f7       	brge	.-28     	; 0x2314 <loop+0x3d8>
    2330:	24 cf       	rjmp	.-440    	; 0x217a <loop+0x23e>

00002332 <autoHome(int)>:
_Z8autoHomei():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:547
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
  return temp;
}

int autoHome(int pos) {
    2332:	8f 92       	push	r8
    2334:	9f 92       	push	r9
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	df 92       	push	r13
    233e:	ef 92       	push	r14
    2340:	ff 92       	push	r15
    2342:	6c 01       	movw	r12, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:548
  LeseTMCStatus(true);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	0e 94 35 0c 	call	0x186a	; 0x186a <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:549
  digitalWrite(IO_Enable, LOW);
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	84 e0       	ldi	r24, 0x04	; 4
    234e:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:550
  stepper.setCurrentPosition(0);
    2352:	40 e0       	ldi	r20, 0x00	; 0
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	ba 01       	movw	r22, r20
    2358:	82 eb       	ldi	r24, 0xB2	; 178
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:552
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
    2360:	0d 2c       	mov	r0, r13
    2362:	00 0c       	add	r0, r0
    2364:	ee 08       	sbc	r14, r14
    2366:	ff 08       	sbc	r15, r15
    2368:	b7 01       	movw	r22, r14
    236a:	a6 01       	movw	r20, r12
    236c:	82 eb       	ldi	r24, 0xB2	; 178
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:554
  // Fahre langsam
  stepper.setSpeed(400);
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	50 e0       	ldi	r21, 0x00	; 0
    2378:	68 ec       	ldi	r22, 0xC8	; 200
    237a:	73 e4       	ldi	r23, 0x43	; 67
    237c:	82 eb       	ldi	r24, 0xB2	; 178
    237e:	92 e0       	ldi	r25, 0x02	; 2
    2380:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:556
  // Die ersten Schritte ohne StallGuard
  while (stepper.currentPosition() != (pos * 0.1)) {
    2384:	82 eb       	ldi	r24, 0xB2	; 178
    2386:	92 e0       	ldi	r25, 0x02	; 2
    2388:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <AccelStepper::currentPosition()>
    238c:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
    2390:	4b 01       	movw	r8, r22
    2392:	5c 01       	movw	r10, r24
    2394:	c7 01       	movw	r24, r14
    2396:	b6 01       	movw	r22, r12
    2398:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
    239c:	2d ec       	ldi	r18, 0xCD	; 205
    239e:	3c ec       	ldi	r19, 0xCC	; 204
    23a0:	4c ec       	ldi	r20, 0xCC	; 204
    23a2:	5d e3       	ldi	r21, 0x3D	; 61
    23a4:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    23a8:	9b 01       	movw	r18, r22
    23aa:	ac 01       	movw	r20, r24
    23ac:	c5 01       	movw	r24, r10
    23ae:	b4 01       	movw	r22, r8
    23b0:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	29 f0       	breq	.+10     	; 0x23c2 <autoHome(int)+0x90>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:557
    stepper.runSpeedToPosition();
    23b8:	82 eb       	ldi	r24, 0xB2	; 178
    23ba:	92 e0       	ldi	r25, 0x02	; 2
    23bc:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:556
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
  // Fahre langsam
  stepper.setSpeed(400);
  // Die ersten Schritte ohne StallGuard
  while (stepper.currentPosition() != (pos * 0.1)) {
    23c0:	e1 cf       	rjmp	.-62     	; 0x2384 <autoHome(int)+0x52>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:560
    stepper.runSpeedToPosition();
  }
  // Wenn der Stepper in Bewegung ist, StallGuard laufend auslesen
  while (stepper.currentPosition() != pos) {
    23c2:	82 eb       	ldi	r24, 0xB2	; 178
    23c4:	92 e0       	ldi	r25, 0x02	; 2
    23c6:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <AccelStepper::currentPosition()>
    23ca:	c6 16       	cp	r12, r22
    23cc:	d7 06       	cpc	r13, r23
    23ce:	e8 06       	cpc	r14, r24
    23d0:	f9 06       	cpc	r15, r25
    23d2:	c1 f0       	breq	.+48     	; 0x2404 <autoHome(int)+0xd2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:562

    stepper.runSpeedToPosition();
    23d4:	82 eb       	ldi	r24, 0xB2	; 178
    23d6:	92 e0       	ldi	r25, 0x02	; 2
    23d8:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:563
    int stall_guard_result = stepper_driver.getStallGuardResult();
    23dc:	8a ef       	ldi	r24, 0xFA	; 250
    23de:	92 e0       	ldi	r25, 0x02	; 2
    23e0:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <TMC2209::getStallGuardResult()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:565
    // Wenn der Rückgabewert des Stallguards höher als die Schwelle ist, blockiert der Motor
    if ((stall_guard_result < (STALL_GUARD_THRESHOLD * 2))) {
    23e4:	44 97       	sbiw	r24, 0x14	; 20
    23e6:	6c f7       	brge	.-38     	; 0x23c2 <autoHome(int)+0x90>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:568
      
      // Ermittelten Wert nach oben geben
      return stepper.currentPosition();
    23e8:	82 eb       	ldi	r24, 0xB2	; 178
    23ea:	92 e0       	ldi	r25, 0x02	; 2
    23ec:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <AccelStepper::currentPosition()>
    23f0:	cb 01       	movw	r24, r22
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:572
    }
  }
        return 0;
}
    23f2:	ff 90       	pop	r15
    23f4:	ef 90       	pop	r14
    23f6:	df 90       	pop	r13
    23f8:	cf 90       	pop	r12
    23fa:	bf 90       	pop	r11
    23fc:	af 90       	pop	r10
    23fe:	9f 90       	pop	r9
    2400:	8f 90       	pop	r8
    2402:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:571
      
      // Ermittelten Wert nach oben geben
      return stepper.currentPosition();
    }
  }
        return 0;
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	f4 cf       	rjmp	.-24     	; 0x23f2 <autoHome(int)+0xc0>

0000240a <eepromWriteInt(int, int)>:
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:574
}

void eepromWriteInt(int adr, int wert) {
    240a:	ff 92       	push	r15
    240c:	0f 93       	push	r16
    240e:	1f 93       	push	r17
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	00 d0       	rcall	.+0      	; 0x2416 <eepromWriteInt(int, int)+0xc>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	8c 01       	movw	r16, r24
    241c:	f7 2e       	mov	r15, r23
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    2422:	ce 01       	movw	r24, r28
    2424:	01 96       	adiw	r24, 0x01	; 1
    2426:	0e 94 b6 09 	call	0x136c	; 0x136c <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:579
  byte low, high;
  low = wert & 0xFF;
  high = (wert >> 8) & 0xFF;
  EEPROM.update(adr, low);
  EEPROM.update(adr + 1, high);
    242a:	0f 5f       	subi	r16, 0xFF	; 255
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    242e:	1a 83       	std	Y+2, r17	; 0x02
    2430:	09 83       	std	Y+1, r16	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    2432:	6f 2d       	mov	r22, r15
    2434:	ce 01       	movw	r24, r28
    2436:	01 96       	adiw	r24, 0x01	; 1
    2438:	0e 94 b6 09 	call	0x136c	; 0x136c <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:581
  return;
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	df 91       	pop	r29
    2442:	cf 91       	pop	r28
    2444:	1f 91       	pop	r17
    2446:	0f 91       	pop	r16
    2448:	ff 90       	pop	r15
    244a:	08 95       	ret

0000244c <eepromReadInt(int)>:
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:583

int eepromReadInt(int adr) {
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	ec 01       	movw	r28, r24
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2454:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <eeprom_read_byte>
    2458:	18 2f       	mov	r17, r24
    245a:	ce 01       	movw	r24, r28
    245c:	01 96       	adiw	r24, 0x01	; 1
    245e:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <eeprom_read_byte>
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:587
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	98 2f       	mov	r25, r24
    2466:	88 27       	eor	r24, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:588
    2468:	81 0f       	add	r24, r17
    246a:	91 1d       	adc	r25, r1
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	1f 91       	pop	r17
    2472:	08 95       	ret

00002474 <setup>:
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:100
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}

void setup() {
    2474:	ef 92       	push	r14
    2476:	ff 92       	push	r15
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
_ZN4U8G211setBusClockEm():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:77
    void sendF(const char *fmt, ...) 
      { va_list va; va_start(va, fmt); u8x8_cad_vsendf(u8g2_GetU8x8(&u8g2), fmt, va); va_end(va); }


    uint32_t getBusClock(void) { return u8g2_GetU8x8(&u8g2)->bus_clock; }
    void setBusClock(uint32_t clock_speed) { u8g2_GetU8x8(&u8g2)->bus_clock = clock_speed; }
    2480:	80 ea       	ldi	r24, 0xA0	; 160
    2482:	96 e8       	ldi	r25, 0x86	; 134
    2484:	a1 e0       	ldi	r26, 0x01	; 1
    2486:	b0 e0       	ldi	r27, 0x00	; 0
    2488:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <u8g2+0x10>
    248c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <u8g2+0x11>
    2490:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <u8g2+0x12>
    2494:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <u8g2+0x13>
_ZN4U8G211initDisplayEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:119
    /* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
    /* U8X8_MSG_GPIO_MENU_HOME */
    uint8_t getMenuEvent(void) { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

    void initDisplay(void) {
      u8g2_InitDisplay(&u8g2); }
    2498:	84 e1       	ldi	r24, 0x14	; 20
    249a:	92 e0       	ldi	r25, 0x02	; 2
    249c:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <u8x8_InitDisplay>
_ZN4U8G212clearDisplayEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:127
    /* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */       
    void initInterface(void) {          
      u8g2_InitInterface(&u8g2); }
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    24a0:	84 e1       	ldi	r24, 0x14	; 20
    24a2:	92 e0       	ldi	r25, 0x02	; 2
    24a4:	0e 94 1a 21 	call	0x4234	; 0x4234 <u8g2_ClearDisplay>
_ZN4U8G212setPowerSaveEh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:130
      
    void setPowerSave(uint8_t is_enable) {
      u8g2_SetPowerSave(&u8g2, is_enable); }
    24a8:	60 e0       	ldi	r22, 0x00	; 0
    24aa:	84 e1       	ldi	r24, 0x14	; 20
    24ac:	92 e0       	ldi	r25, 0x02	; 2
    24ae:	0e 94 88 2a 	call	0x5510	; 0x5510 <u8x8_SetPowerSave>
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    24b2:	63 e7       	ldi	r22, 0x73	; 115
    24b4:	72 e0       	ldi	r23, 0x02	; 2
    24b6:	84 e1       	ldi	r24, 0x14	; 20
    24b8:	92 e0       	ldi	r25, 0x02	; 2
    24ba:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    24be:	84 e1       	ldi	r24, 0x14	; 20
    24c0:	92 e0       	ldi	r25, 0x02	; 2
    24c2:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    24c6:	bc e0       	ldi	r27, 0x0C	; 12
    24c8:	eb 2e       	mov	r14, r27
    24ca:	f1 2c       	mov	r15, r1
    24cc:	08 e2       	ldi	r16, 0x28	; 40
    24ce:	10 e0       	ldi	r17, 0x00	; 0
    24d0:	cc e3       	ldi	r28, 0x3C	; 60
    24d2:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    24d4:	63 e7       	ldi	r22, 0x73	; 115
    24d6:	72 e0       	ldi	r23, 0x02	; 2
    24d8:	84 e1       	ldi	r24, 0x14	; 20
    24da:	92 e0       	ldi	r25, 0x02	; 2
    24dc:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    24e0:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    24e4:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    24e8:	f0 92 a5 02 	sts	0x02A5, r15	; 0x8002a5 <u8g2+0x95>
    24ec:	e0 92 a4 02 	sts	0x02A4, r14	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:109
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.setCursor(0, 12);
    u8g2.print(F("Haldex Controller"));
    24f0:	61 e6       	ldi	r22, 0x61	; 97
    24f2:	72 e0       	ldi	r23, 0x02	; 2
    24f4:	80 e1       	ldi	r24, 0x10	; 16
    24f6:	92 e0       	ldi	r25, 0x02	; 2
    24f8:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    24fc:	20 e8       	ldi	r18, 0x80	; 128
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4c e0       	ldi	r20, 0x0C	; 12
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	60 e0       	ldi	r22, 0x00	; 0
    2508:	84 e1       	ldi	r24, 0x14	; 20
    250a:	92 e0       	ldi	r25, 0x02	; 2
    250c:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <u8g2_DrawHLine>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2510:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2514:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    2518:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    251c:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:112
    u8g2.drawHLine(0, 12, 128);
    u8g2.setCursor(0, 40);
    u8g2.print(F("TCA965"));
    2520:	6a e5       	ldi	r22, 0x5A	; 90
    2522:	72 e0       	ldi	r23, 0x02	; 2
    2524:	80 e1       	ldi	r24, 0x10	; 16
    2526:	92 e0       	ldi	r25, 0x02	; 2
    2528:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    252c:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    2530:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    2534:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    2538:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:114
    u8g2.setCursor(0, 60);
    u8g2.print(F("allradbus.com"));
    253c:	6c e4       	ldi	r22, 0x4C	; 76
    253e:	72 e0       	ldi	r23, 0x02	; 2
    2540:	80 e1       	ldi	r24, 0x10	; 16
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2548:	84 e1       	ldi	r24, 0x14	; 20
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:116

  } while (u8g2.nextPage());
    2550:	81 11       	cpse	r24, r1
    2552:	c0 cf       	rjmp	.-128    	; 0x24d4 <setup+0x60>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:119

  // Konfiguriere Stepper
  stepper_driver.setup(serial_stream);
    2554:	10 e0       	ldi	r17, 0x00	; 0
    2556:	00 e0       	ldi	r16, 0x00	; 0
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	32 ec       	ldi	r19, 0xC2	; 194
    255c:	41 e0       	ldi	r20, 0x01	; 1
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	66 e5       	ldi	r22, 0x56	; 86
    2562:	75 e0       	ldi	r23, 0x05	; 5
    2564:	8a ef       	ldi	r24, 0xFA	; 250
    2566:	92 e0       	ldi	r25, 0x02	; 2
    2568:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:120
  stepper_driver.setRunCurrent(60);
    256c:	6c e3       	ldi	r22, 0x3C	; 60
    256e:	8a ef       	ldi	r24, 0xFA	; 250
    2570:	92 e0       	ldi	r25, 0x02	; 2
    2572:	0e 94 0c 18 	call	0x3018	; 0x3018 <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:121
  stepper_driver.setHoldCurrent(40);
    2576:	68 e2       	ldi	r22, 0x28	; 40
    2578:	8a ef       	ldi	r24, 0xFA	; 250
    257a:	92 e0       	ldi	r25, 0x02	; 2
    257c:	0e 94 1c 18 	call	0x3038	; 0x3038 <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:122
  stepper_driver.enableAutomaticCurrentScaling();
    2580:	8a ef       	ldi	r24, 0xFA	; 250
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	0e 94 b3 18 	call	0x3166	; 0x3166 <TMC2209::enableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:123
  stepper_driver.enableAutomaticGradientAdaptation();
    2588:	8a ef       	ldi	r24, 0xFA	; 250
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	0e 94 bf 18 	call	0x317e	; 0x317e <TMC2209::enableAutomaticGradientAdaptation()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:124
  stepper_driver.setStallGuardThreshold(STALL_GUARD_THRESHOLD);
    2590:	6a e0       	ldi	r22, 0x0A	; 10
    2592:	8a ef       	ldi	r24, 0xFA	; 250
    2594:	92 e0       	ldi	r25, 0x02	; 2
    2596:	0e 94 00 16 	call	0x2c00	; 0x2c00 <TMC2209::setStallGuardThreshold(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:125
  stepper_driver.setMicrostepsPerStep(4);
    259a:	64 e0       	ldi	r22, 0x04	; 4
    259c:	70 e0       	ldi	r23, 0x00	; 0
    259e:	8a ef       	ldi	r24, 0xFA	; 250
    25a0:	92 e0       	ldi	r25, 0x02	; 2
    25a2:	0e 94 90 18 	call	0x3120	; 0x3120 <TMC2209::setMicrostepsPerStep(unsigned int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:126
  stepper_driver.setStandstillMode(TMC2209::BRAKING);
    25a6:	63 e0       	ldi	r22, 0x03	; 3
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	8a ef       	ldi	r24, 0xFA	; 250
    25ac:	92 e0       	ldi	r25, 0x02	; 2
    25ae:	0e 94 a7 18 	call	0x314e	; 0x314e <TMC2209::setStandstillMode(TMC2209::StandstillMode)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:127
  stepper_driver.setCoolStepDurationThreshold(COOL_STEP_DURATION_THRESHOLD);
    25b2:	40 ed       	ldi	r20, 0xD0	; 208
    25b4:	57 e0       	ldi	r21, 0x07	; 7
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	8a ef       	ldi	r24, 0xFA	; 250
    25bc:	92 e0       	ldi	r25, 0x02	; 2
    25be:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <TMC2209::setCoolStepDurationThreshold(unsigned long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:128
  stepper.setMaxSpeed(4000);
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	6a e7       	ldi	r22, 0x7A	; 122
    25c8:	75 e4       	ldi	r23, 0x45	; 69
    25ca:	82 eb       	ldi	r24, 0xB2	; 178
    25cc:	92 e0       	ldi	r25, 0x02	; 2
    25ce:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <AccelStepper::setMaxSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:129
  stepper.setAcceleration(4000);
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	6a e7       	ldi	r22, 0x7A	; 122
    25d8:	75 e4       	ldi	r23, 0x45	; 69
    25da:	82 eb       	ldi	r24, 0xB2	; 178
    25dc:	92 e0       	ldi	r25, 0x02	; 2
    25de:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <AccelStepper::setAcceleration(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:132

  // Konfiguriere I/O
  pinMode(IO_Enable, OUTPUT);
    25e2:	61 e0       	ldi	r22, 0x01	; 1
    25e4:	84 e0       	ldi	r24, 0x04	; 4
    25e6:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:133
  pinMode(IO_Step, OUTPUT);
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	86 e0       	ldi	r24, 0x06	; 6
    25ee:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:134
  pinMode(IO_Direction, OUTPUT);
    25f2:	61 e0       	ldi	r22, 0x01	; 1
    25f4:	85 e0       	ldi	r24, 0x05	; 5
    25f6:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:135
  pinMode(IO_Eingabe_25, INPUT_PULLUP);
    25fa:	62 e0       	ldi	r22, 0x02	; 2
    25fc:	8f e0       	ldi	r24, 0x0F	; 15
    25fe:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:136
  pinMode(IO_Eingabe_50, INPUT_PULLUP);
    2602:	62 e0       	ldi	r22, 0x02	; 2
    2604:	82 e0       	ldi	r24, 0x02	; 2
    2606:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:137
  pinMode(IO_Eingabe_75, INPUT_PULLUP);
    260a:	62 e0       	ldi	r22, 0x02	; 2
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:138
  pinMode(IO_Eingabe_100, INPUT_PULLUP);
    2612:	62 e0       	ldi	r22, 0x02	; 2
    2614:	81 e1       	ldi	r24, 0x11	; 17
    2616:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:139
  pinMode(IO_Temperatur, INPUT);
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	8e e0       	ldi	r24, 0x0E	; 14
    261e:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:140
  pinMode(IO_Bremse, INPUT);
    2622:	60 e0       	ldi	r22, 0x00	; 0
    2624:	8c e0       	ldi	r24, 0x0C	; 12
    2626:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:141
  pinMode(IO_Handbremse, INPUT_PULLUP);
    262a:	62 e0       	ldi	r22, 0x02	; 2
    262c:	8b e0       	ldi	r24, 0x0B	; 11
    262e:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:142
  pinMode(IO_Hauptschalter, INPUT);
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	8a e0       	ldi	r24, 0x0A	; 10
    2636:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:143
  pinMode(IO_Diagnose_Pumpe, INPUT);
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	89 e0       	ldi	r24, 0x09	; 9
    263e:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:144
  pinMode(IO_Pumpe, OUTPUT);
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	87 e1       	ldi	r24, 0x17	; 23
    2646:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:145
  pinMode(IO_LED_Sperrgrad, OUTPUT);
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	8d e0       	ldi	r24, 0x0D	; 13
    264e:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:147

  if (digitalRead(IO_Bremse))
    2652:	8c e0       	ldi	r24, 0x0C	; 12
    2654:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    2658:	89 2b       	or	r24, r25
    265a:	19 f0       	breq	.+6      	; 0x2662 <setup+0x1ee>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:148
    ZustandBremse = true;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:149
  if (!digitalRead(IO_Handbremse))
    2662:	8b e0       	ldi	r24, 0x0B	; 11
    2664:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    2668:	89 2b       	or	r24, r25
    266a:	19 f4       	brne	.+6      	; 0x2672 <setup+0x1fe>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:150
    ZustandHandbremse = true;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:151
  if (!digitalRead(IO_Hauptschalter))
    2672:	8a e0       	ldi	r24, 0x0A	; 10
    2674:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    2678:	89 2b       	or	r24, r25
    267a:	19 f4       	brne	.+6      	; 0x2682 <setup+0x20e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:152
    ZustandHauptschalter = true;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:155

  // PinChange Interrupt konfigurieren
  PCICR = (1 << PCIE0);                                    // enable PCINT[23:16] interrupts
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:156
  PCMSK0 = (1 << PCINT4) | (1 << PCINT3) | (1 << PCINT2);  // PB4 = PCINT4 | PB2 = PCINT2
    2688:	8c e1       	ldi	r24, 0x1C	; 28
    268a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:159

  // Aktiviere Endstufen in TMC2209
  digitalWrite(IO_Enable, LOW);
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	84 e0       	ldi	r24, 0x04	; 4
    2692:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:161
  // Aktiviere TMC2209
  stepper_driver.enable();
    2696:	8a ef       	ldi	r24, 0xFA	; 250
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	0e 94 3d 18 	call	0x307a	; 0x307a <TMC2209::enable()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:163

  delay(250);
    269e:	6a ef       	ldi	r22, 0xFA	; 250
    26a0:	70 e0       	ldi	r23, 0x00	; 0
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:164
  LeseTMCStatus(true);
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	0e 94 35 0c 	call	0x186a	; 0x186a <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:165
  delay(250);
    26b0:	6a ef       	ldi	r22, 0xFA	; 250
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0e 94 f2 3c 	call	0x79e4	; 0x79e4 <eeprom_read_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:168

  // Prüfe, ob AutoTune durchgeführt werden soll
  if (EEPROM.read(0) != 123) {
    26c4:	8b 37       	cpi	r24, 0x7B	; 123
    26c6:	09 f4       	brne	.+2      	; 0x26ca <setup+0x256>
    26c8:	41 c1       	rjmp	.+642    	; 0x294c <setup+0x4d8>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    26ca:	84 e1       	ldi	r24, 0x14	; 20
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    26d2:	c4 e1       	ldi	r28, 0x14	; 20
    26d4:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    26d6:	63 e7       	ldi	r22, 0x73	; 115
    26d8:	72 e0       	ldi	r23, 0x02	; 2
    26da:	84 e1       	ldi	r24, 0x14	; 20
    26dc:	92 e0       	ldi	r25, 0x02	; 2
    26de:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    26e2:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    26e6:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    26ea:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    26ee:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:174

      u8g2.firstPage();
      do {
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.setCursor(20, 20);
        u8g2.print(F("Haldex Autotune"));
    26f2:	6c e3       	ldi	r22, 0x3C	; 60
    26f4:	72 e0       	ldi	r23, 0x02	; 2
    26f6:	80 e1       	ldi	r24, 0x10	; 16
    26f8:	92 e0       	ldi	r25, 0x02	; 2
    26fa:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    26fe:	84 e1       	ldi	r24, 0x14	; 20
    2700:	92 e0       	ldi	r25, 0x02	; 2
    2702:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:175
      } while (u8g2.nextPage());
    2706:	81 11       	cpse	r24, r1
    2708:	e6 cf       	rjmp	.-52     	; 0x26d6 <setup+0x262>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:179
      

    // Lasse Stepper 400 Steps in Positive Richtung laufen und erwarte Rückgabewert
    SchrittzahlMaximum = autoHome(-400);
    270a:	80 e7       	ldi	r24, 0x70	; 112
    270c:	9e ef       	ldi	r25, 0xFE	; 254
    270e:	0e 94 99 11 	call	0x2332	; 0x2332 <autoHome(int)>
    2712:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    2716:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:182

    // Wenn der Rückgabewert kleiner als 50 Steps ist, scheint die Drehrichtung falsch zu sein
    if (SchrittzahlMaximum > -50) {
    271a:	8f 3c       	cpi	r24, 0xCF	; 207
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	44 f0       	brlt	.+16     	; 0x2730 <setup+0x2bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:184
      // Lasse den Stepper nun also 400 Steps in negative Richtung laufen
      SchrittzahlMaximum = autoHome(400);
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	0e 94 99 11 	call	0x2332	; 0x2332 <autoHome(int)>
    2728:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    272c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
_ZN4U8G29firstPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    2730:	84 e1       	ldi	r24, 0x14	; 20
    2732:	92 e0       	ldi	r25, 0x02	; 2
    2734:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2738:	c4 e1       	ldi	r28, 0x14	; 20
    273a:	d0 e0       	ldi	r29, 0x00	; 0
    273c:	02 e3       	ldi	r16, 0x32	; 50
    273e:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    2740:	63 e7       	ldi	r22, 0x73	; 115
    2742:	72 e0       	ldi	r23, 0x02	; 2
    2744:	84 e1       	ldi	r24, 0x14	; 20
    2746:	92 e0       	ldi	r25, 0x02	; 2
    2748:	0e 94 b3 24 	call	0x4966	; 0x4966 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    274c:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    2750:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    2754:	d0 93 a5 02 	sts	0x02A5, r29	; 0x8002a5 <u8g2+0x95>
    2758:	c0 93 a4 02 	sts	0x02A4, r28	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:190
    }
    u8g2.firstPage();
      do {
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.setCursor(20, 20);
        u8g2.print(F("Haldex Autotune"));
    275c:	6c e2       	ldi	r22, 0x2C	; 44
    275e:	72 e0       	ldi	r23, 0x02	; 2
    2760:	80 e1       	ldi	r24, 0x10	; 16
    2762:	92 e0       	ldi	r25, 0x02	; 2
    2764:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:386
    2768:	d0 93 a3 02 	sts	0x02A3, r29	; 0x8002a3 <u8g2+0x93>
    276c:	c0 93 a2 02 	sts	0x02A2, r28	; 0x8002a2 <u8g2+0x92>
    2770:	10 93 a5 02 	sts	0x02A5, r17	; 0x8002a5 <u8g2+0x95>
    2774:	00 93 a4 02 	sts	0x02A4, r16	; 0x8002a4 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:192
        u8g2.setCursor(20, 50);
        u8g2.print(SchrittzahlMaximum);
    2778:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    277c:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    2780:	4a e0       	ldi	r20, 0x0A	; 10
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	80 e1       	ldi	r24, 0x10	; 16
    2786:	92 e0       	ldi	r25, 0x02	; 2
    2788:	0e 94 b4 34 	call	0x6968	; 0x6968 <Print::print(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:193
        u8g2.print(F(" steps"));
    278c:	65 e2       	ldi	r22, 0x25	; 37
    278e:	72 e0       	ldi	r23, 0x02	; 2
    2790:	80 e1       	ldi	r24, 0x10	; 16
    2792:	92 e0       	ldi	r25, 0x02	; 2
    2794:	0e 94 f5 33 	call	0x67ea	; 0x67ea <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2798:	84 e1       	ldi	r24, 0x14	; 20
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:194
      } while (u8g2.nextPage());
    27a0:	81 11       	cpse	r24, r1
    27a2:	ce cf       	rjmp	.-100    	; 0x2740 <setup+0x2cc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:195
      delay(2000);
    27a4:	60 ed       	ldi	r22, 0xD0	; 208
    27a6:	77 e0       	ldi	r23, 0x07	; 7
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:197

    if (SchrittzahlMaximum < -50) {
    27b0:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    27b4:	90 91 b1 02 	lds	r25, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    27b8:	8e 3c       	cpi	r24, 0xCE	; 206
    27ba:	2f ef       	ldi	r18, 0xFF	; 255
    27bc:	92 07       	cpc	r25, r18
    27be:	0c f0       	brlt	.+2      	; 0x27c2 <setup+0x34e>
    27c0:	8e c0       	rjmp	.+284    	; 0x28de <setup+0x46a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:198
      Schrittzahl0Prozent = -100;
    27c2:	2c e9       	ldi	r18, 0x9C	; 156
    27c4:	3f ef       	ldi	r19, 0xFF	; 255
    27c6:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    27ca:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:199
      Schrittzahl100Prozent = SchrittzahlMaximum + 60;
    27ce:	9c 01       	movw	r18, r24
    27d0:	24 5c       	subi	r18, 0xC4	; 196
    27d2:	3f 4f       	sbci	r19, 0xFF	; 255
    27d4:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <Schrittzahl100Prozent+0x1>
    27d8:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:200
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    27dc:	80 56       	subi	r24, 0x60	; 96
    27de:	9f 4f       	sbci	r25, 0xFF	; 255
    27e0:	ac 01       	movw	r20, r24
    27e2:	97 ff       	sbrs	r25, 7
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <setup+0x376>
    27e6:	4f 5f       	subi	r20, 0xFF	; 255
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	55 95       	asr	r21
    27ec:	47 95       	ror	r20
    27ee:	44 56       	subi	r20, 0x64	; 100
    27f0:	51 09       	sbc	r21, r1
    27f2:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <Schrittzahl50Prozent+0x1>
    27f6:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:201
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    27fa:	24 1b       	sub	r18, r20
    27fc:	35 0b       	sbc	r19, r21
    27fe:	37 ff       	sbrs	r19, 7
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <setup+0x392>
    2802:	2f 5f       	subi	r18, 0xFF	; 255
    2804:	3f 4f       	sbci	r19, 0xFF	; 255
    2806:	35 95       	asr	r19
    2808:	27 95       	ror	r18
    280a:	24 0f       	add	r18, r20
    280c:	35 1f       	adc	r19, r21
    280e:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <Schrittzahl75Prozent+0x1>
    2812:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:202
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2816:	97 fd       	sbrc	r25, 7
    2818:	03 96       	adiw	r24, 0x03	; 3
    281a:	95 95       	asr	r25
    281c:	87 95       	ror	r24
    281e:	95 95       	asr	r25
    2820:	87 95       	ror	r24
    2822:	84 56       	subi	r24, 0x64	; 100
    2824:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:209
    } else if (SchrittzahlMaximum > 50) {
      Schrittzahl0Prozent = 100;
      Schrittzahl100Prozent = SchrittzahlMaximum - 60;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2826:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    282a:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <Schrittzahl25Prozent>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    282e:	6b e7       	ldi	r22, 0x7B	; 123
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <eeprom_write_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:212
      EEPROM.write(0, 123);
    }
    eepromWriteInt(2, Schrittzahl0Prozent);
    2838:	60 91 a6 02 	lds	r22, 0x02A6	; 0x8002a6 <Schrittzahl0Prozent>
    283c:	70 91 a7 02 	lds	r23, 0x02A7	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2840:	82 e0       	ldi	r24, 0x02	; 2
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 05 12 	call	0x240a	; 0x240a <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:213
    eepromWriteInt(4, Schrittzahl25Prozent);
    2848:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <Schrittzahl25Prozent>
    284c:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    2850:	84 e0       	ldi	r24, 0x04	; 4
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	0e 94 05 12 	call	0x240a	; 0x240a <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:214
    eepromWriteInt(6, Schrittzahl50Prozent);
    2858:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <Schrittzahl50Prozent>
    285c:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <Schrittzahl50Prozent+0x1>
    2860:	86 e0       	ldi	r24, 0x06	; 6
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 05 12 	call	0x240a	; 0x240a <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:215
    eepromWriteInt(8, Schrittzahl75Prozent);
    2868:	60 91 ac 02 	lds	r22, 0x02AC	; 0x8002ac <Schrittzahl75Prozent>
    286c:	70 91 ad 02 	lds	r23, 0x02AD	; 0x8002ad <Schrittzahl75Prozent+0x1>
    2870:	88 e0       	ldi	r24, 0x08	; 8
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 05 12 	call	0x240a	; 0x240a <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:216
    eepromWriteInt(10, Schrittzahl100Prozent);
    2878:	60 91 ae 02 	lds	r22, 0x02AE	; 0x8002ae <Schrittzahl100Prozent>
    287c:	70 91 af 02 	lds	r23, 0x02AF	; 0x8002af <Schrittzahl100Prozent+0x1>
    2880:	8a e0       	ldi	r24, 0x0A	; 10
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	0e 94 05 12 	call	0x240a	; 0x240a <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:217
    eepromWriteInt(12, SchrittzahlMaximum);
    2888:	60 91 b0 02 	lds	r22, 0x02B0	; 0x8002b0 <SchrittzahlMaximum>
    288c:	70 91 b1 02 	lds	r23, 0x02B1	; 0x8002b1 <SchrittzahlMaximum+0x1>
    2890:	8c e0       	ldi	r24, 0x0C	; 12
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	0e 94 05 12 	call	0x240a	; 0x240a <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:228
    Schrittzahl75Prozent = eepromReadInt(8);
    Schrittzahl100Prozent = eepromReadInt(10);
    SchrittzahlMaximum = eepromReadInt(12);
  }

  digitalWrite(IO_Enable, HIGH);
    2898:	61 e0       	ldi	r22, 0x01	; 1
    289a:	84 e0       	ldi	r24, 0x04	; 4
    289c:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:229
  stepper.setCurrentPosition(0);
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	50 e0       	ldi	r21, 0x00	; 0
    28a4:	ba 01       	movw	r22, r20
    28a6:	82 eb       	ldi	r24, 0xB2	; 178
    28a8:	92 e0       	ldi	r25, 0x02	; 2
    28aa:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:230
  stepper.setSpeed(1000);
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	6a e7       	ldi	r22, 0x7A	; 122
    28b4:	74 e4       	ldi	r23, 0x44	; 68
    28b6:	82 eb       	ldi	r24, 0xB2	; 178
    28b8:	92 e0       	ldi	r25, 0x02	; 2
    28ba:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:233

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
    28be:	6c e3       	ldi	r22, 0x3C	; 60
    28c0:	8a ef       	ldi	r24, 0xFA	; 250
    28c2:	92 e0       	ldi	r25, 0x02	; 2
    28c4:	0e 94 0c 18 	call	0x3018	; 0x3018 <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:234
  stepper_driver.setHoldCurrent(40);
    28c8:	68 e2       	ldi	r22, 0x28	; 40
    28ca:	8a ef       	ldi	r24, 0xFA	; 250
    28cc:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:235
}
    28ce:	df 91       	pop	r29
    28d0:	cf 91       	pop	r28
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:234
  stepper.setCurrentPosition(0);
  stepper.setSpeed(1000);

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
    28da:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:204
      Schrittzahl100Prozent = SchrittzahlMaximum + 60;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      EEPROM.write(0, 123);
    } else if (SchrittzahlMaximum > 50) {
    28de:	83 33       	cpi	r24, 0x33	; 51
    28e0:	91 05       	cpc	r25, r1
    28e2:	0c f4       	brge	.+2      	; 0x28e6 <setup+0x472>
    28e4:	a9 cf       	rjmp	.-174    	; 0x2838 <setup+0x3c4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:205
      Schrittzahl0Prozent = 100;
    28e6:	24 e6       	ldi	r18, 0x64	; 100
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	30 93 a7 02 	sts	0x02A7, r19	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    28ee:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:206
      Schrittzahl100Prozent = SchrittzahlMaximum - 60;
    28f2:	9c 01       	movw	r18, r24
    28f4:	2c 53       	subi	r18, 0x3C	; 60
    28f6:	31 09       	sbc	r19, r1
    28f8:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <Schrittzahl100Prozent+0x1>
    28fc:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:207
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2900:	80 5a       	subi	r24, 0xA0	; 160
    2902:	91 09       	sbc	r25, r1
    2904:	ac 01       	movw	r20, r24
    2906:	97 ff       	sbrs	r25, 7
    2908:	02 c0       	rjmp	.+4      	; 0x290e <setup+0x49a>
    290a:	4f 5f       	subi	r20, 0xFF	; 255
    290c:	5f 4f       	sbci	r21, 0xFF	; 255
    290e:	55 95       	asr	r21
    2910:	47 95       	ror	r20
    2912:	4c 59       	subi	r20, 0x9C	; 156
    2914:	5f 4f       	sbci	r21, 0xFF	; 255
    2916:	50 93 ab 02 	sts	0x02AB, r21	; 0x8002ab <Schrittzahl50Prozent+0x1>
    291a:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:208
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    291e:	24 1b       	sub	r18, r20
    2920:	35 0b       	sbc	r19, r21
    2922:	37 ff       	sbrs	r19, 7
    2924:	02 c0       	rjmp	.+4      	; 0x292a <setup+0x4b6>
    2926:	2f 5f       	subi	r18, 0xFF	; 255
    2928:	3f 4f       	sbci	r19, 0xFF	; 255
    292a:	35 95       	asr	r19
    292c:	27 95       	ror	r18
    292e:	24 0f       	add	r18, r20
    2930:	35 1f       	adc	r19, r21
    2932:	30 93 ad 02 	sts	0x02AD, r19	; 0x8002ad <Schrittzahl75Prozent+0x1>
    2936:	20 93 ac 02 	sts	0x02AC, r18	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:209
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    293a:	97 fd       	sbrc	r25, 7
    293c:	03 96       	adiw	r24, 0x03	; 3
    293e:	95 95       	asr	r25
    2940:	87 95       	ror	r24
    2942:	95 95       	asr	r25
    2944:	87 95       	ror	r24
    2946:	8c 59       	subi	r24, 0x9C	; 156
    2948:	9f 4f       	sbci	r25, 0xFF	; 255
    294a:	6d cf       	rjmp	.-294    	; 0x2826 <setup+0x3b2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:220
    eepromWriteInt(8, Schrittzahl75Prozent);
    eepromWriteInt(10, Schrittzahl100Prozent);
    eepromWriteInt(12, SchrittzahlMaximum);
  } else {
    // Wenn nicht, nehme Werte aus dem EEPROM
    Schrittzahl0Prozent = eepromReadInt(2);
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 26 12 	call	0x244c	; 0x244c <eepromReadInt(int)>
    2954:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <Schrittzahl0Prozent+0x1>
    2958:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:221
    Schrittzahl25Prozent = eepromReadInt(4);
    295c:	84 e0       	ldi	r24, 0x04	; 4
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 26 12 	call	0x244c	; 0x244c <eepromReadInt(int)>
    2964:	90 93 a9 02 	sts	0x02A9, r25	; 0x8002a9 <Schrittzahl25Prozent+0x1>
    2968:	80 93 a8 02 	sts	0x02A8, r24	; 0x8002a8 <Schrittzahl25Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:222
    Schrittzahl50Prozent = eepromReadInt(6);
    296c:	86 e0       	ldi	r24, 0x06	; 6
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 26 12 	call	0x244c	; 0x244c <eepromReadInt(int)>
    2974:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <Schrittzahl50Prozent+0x1>
    2978:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:223
    Schrittzahl75Prozent = eepromReadInt(8);
    297c:	88 e0       	ldi	r24, 0x08	; 8
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	0e 94 26 12 	call	0x244c	; 0x244c <eepromReadInt(int)>
    2984:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <Schrittzahl75Prozent+0x1>
    2988:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:224
    Schrittzahl100Prozent = eepromReadInt(10);
    298c:	8a e0       	ldi	r24, 0x0A	; 10
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 26 12 	call	0x244c	; 0x244c <eepromReadInt(int)>
    2994:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <Schrittzahl100Prozent+0x1>
    2998:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:225
    SchrittzahlMaximum = eepromReadInt(12);
    299c:	8c e0       	ldi	r24, 0x0C	; 12
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	0e 94 26 12 	call	0x244c	; 0x244c <eepromReadInt(int)>
    29a4:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <SchrittzahlMaximum+0x1>
    29a8:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <SchrittzahlMaximum>
    29ac:	75 cf       	rjmp	.-278    	; 0x2898 <setup+0x424>

000029ae <_GLOBAL__sub_I_serial_stream>:
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:588
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    29ae:	cf 92       	push	r12
    29b0:	ef 92       	push	r14
    29b2:	0f 93       	push	r16
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:28
#define IO_LED_Sperrgrad 13
#define IO_Pumpe 23

// TMC2209
HardwareSerial &serial_stream = Serial;
TMC2209 stepper_driver;
    29b8:	8a ef       	ldi	r24, 0xFA	; 250
    29ba:	92 e0       	ldi	r25, 0x02	; 2
    29bc:	0e 94 20 15 	call	0x2a40	; 0x2a40 <TMC2209::TMC2209()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:31
TMC2209::Status TMCStatus;

AccelStepper stepper(1, IO_Step, IO_Direction);
    29c0:	cc 24       	eor	r12, r12
    29c2:	c3 94       	inc	r12
    29c4:	85 e0       	ldi	r24, 0x05	; 5
    29c6:	e8 2e       	mov	r14, r24
    29c8:	04 e0       	ldi	r16, 0x04	; 4
    29ca:	25 e0       	ldi	r18, 0x05	; 5
    29cc:	46 e0       	ldi	r20, 0x06	; 6
    29ce:	61 e0       	ldi	r22, 0x01	; 1
    29d0:	82 eb       	ldi	r24, 0xB2	; 178
    29d2:	92 e0       	ldi	r25, 0x02	; 2
    29d4:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    29d8:	c0 e1       	ldi	r28, 0x10	; 16
    29da:	d2 e0       	ldi	r29, 0x02	; 2
    29dc:	1b 82       	std	Y+3, r1	; 0x03
    29de:	1a 82       	std	Y+2, r1	; 0x02
_ZN4U8G2C4Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:68
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    29e0:	8c e1       	ldi	r24, 0x1C	; 28
    29e2:	91 e0       	ldi	r25, 0x01	; 1
    29e4:	99 83       	std	Y+1, r25	; 0x01
    29e6:	88 83       	st	Y, r24
    29e8:	8b e4       	ldi	r24, 0x4B	; 75
    29ea:	98 e2       	ldi	r25, 0x28	; 40
    29ec:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <u8g2+0x91>
    29f0:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <u8g2+0x90>
_ZN4U8G24homeEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:382
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    29f4:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <u8g2+0x93>
    29f8:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <u8g2+0x92>
    29fc:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <u8g2+0x95>
    2a00:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <u8g2+0x94>
    2a04:	84 e1       	ldi	r24, 0x14	; 20
    2a06:	92 e0       	ldi	r25, 0x02	; 2
    2a08:	0e 94 55 28 	call	0x50aa	; 0x50aa <u8x8_utf8_init>
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2893
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_sw_i2c, u8x8_gpio_and_delay_arduino);
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SH1106_128X64_NONAME_2_HW_I2C : public U8G2 {
  public: U8G2_SH1106_128X64_NONAME_2_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    2a0c:	88 e2       	ldi	r24, 0x28	; 40
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	99 83       	std	Y+1, r25	; 0x01
    2a12:	88 83       	st	Y, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2894
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_hw_i2c, u8x8_gpio_and_delay_arduino);
    2a14:	24 e3       	ldi	r18, 0x34	; 52
    2a16:	3f e1       	ldi	r19, 0x1F	; 31
    2a18:	45 ea       	ldi	r20, 0xA5	; 165
    2a1a:	5f e1       	ldi	r21, 0x1F	; 31
    2a1c:	60 e5       	ldi	r22, 0x50	; 80
    2a1e:	71 e0       	ldi	r23, 0x01	; 1
    2a20:	84 e1       	ldi	r24, 0x14	; 20
    2a22:	92 e0       	ldi	r25, 0x02	; 2
    2a24:	0e 94 30 21 	call	0x4260	; 0x4260 <u8g2_Setup_sh1106_i2c_128x64_noname_2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    u8x8_SetPin_HW_I2C(getU8x8(), reset, clock, data);
    2a28:	2f ef       	ldi	r18, 0xFF	; 255
    2a2a:	4f ef       	ldi	r20, 0xFF	; 255
    2a2c:	6f ef       	ldi	r22, 0xFF	; 255
    2a2e:	84 e1       	ldi	r24, 0x14	; 20
    2a30:	92 e0       	ldi	r25, 0x02	; 2
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:588
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	0f 91       	pop	r16
    2a38:	ef 90       	pop	r14
    2a3a:	cf 90       	pop	r12
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    2a3c:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>

00002a40 <TMC2209::TMC2209()>:
_ZN7TMC2209C2Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:956
  write(ADDRESS_CHOPCONF, chopper_config_.bytes);
}

uint32_t TMC2209::readChopperConfigBytes()
{
  return read(ADDRESS_CHOPCONF);
    2a40:	fc 01       	movw	r30, r24
    2a42:	83 e0       	ldi	r24, 0x03	; 3
    2a44:	82 8f       	std	Z+26, r24	; 0x1a
    2a46:	11 82       	std	Z+1, r1	; 0x01
    2a48:	10 82       	st	Z, r1
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	92 ec       	ldi	r25, 0xC2	; 194
    2a4e:	a1 e0       	ldi	r26, 0x01	; 1
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	82 83       	std	Z+2, r24	; 0x02
    2a54:	93 83       	std	Z+3, r25	; 0x03
    2a56:	a4 83       	std	Z+4, r26	; 0x04
    2a58:	b5 83       	std	Z+5, r27	; 0x05
    2a5a:	16 82       	std	Z+6, r1	; 0x06
    2a5c:	8f ef       	ldi	r24, 0xFF	; 255
    2a5e:	9f ef       	ldi	r25, 0xFF	; 255
    2a60:	90 87       	std	Z+8, r25	; 0x08
    2a62:	87 83       	std	Z+7, r24	; 0x07
    2a64:	15 8a       	std	Z+21, r1	; 0x15
    2a66:	08 95       	ret

00002a68 <TMC2209::serialAvailable()>:
_ZN7TMC220915serialAvailableEv():
    2a68:	dc 01       	movw	r26, r24
    2a6a:	8d 91       	ld	r24, X+
    2a6c:	9c 91       	ld	r25, X
    2a6e:	00 97       	sbiw	r24, 0x00	; 0
    2a70:	39 f0       	breq	.+14     	; 0x2a80 <TMC2209::serialAvailable()+0x18>
    2a72:	dc 01       	movw	r26, r24
    2a74:	ed 91       	ld	r30, X+
    2a76:	fc 91       	ld	r31, X
    2a78:	00 84       	ldd	r0, Z+8	; 0x08
    2a7a:	f1 85       	ldd	r31, Z+9	; 0x09
    2a7c:	e0 2d       	mov	r30, r0
    2a7e:	09 94       	ijmp
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	08 95       	ret

00002a86 <TMC2209::serialWrite(unsigned char)>:
_ZN7TMC220911serialWriteEh():
    2a86:	dc 01       	movw	r26, r24
    2a88:	8d 91       	ld	r24, X+
    2a8a:	9c 91       	ld	r25, X
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	39 f0       	breq	.+14     	; 0x2a9e <TMC2209::serialWrite(unsigned char)+0x18>
    2a90:	dc 01       	movw	r26, r24
    2a92:	ed 91       	ld	r30, X+
    2a94:	fc 91       	ld	r31, X
    2a96:	01 90       	ld	r0, Z+
    2a98:	f0 81       	ld	r31, Z
    2a9a:	e0 2d       	mov	r30, r0
    2a9c:	09 94       	ijmp
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	08 95       	ret

00002aa4 <TMC2209::serialRead()>:
_ZN7TMC220910serialReadEv():
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	8d 91       	ld	r24, X+
    2aa8:	9c 91       	ld	r25, X
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	39 f0       	breq	.+14     	; 0x2abc <TMC2209::serialRead()+0x18>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	ed 91       	ld	r30, X+
    2ab2:	fc 91       	ld	r31, X
    2ab4:	02 84       	ldd	r0, Z+10	; 0x0a
    2ab6:	f3 85       	ldd	r31, Z+11	; 0x0b
    2ab8:	e0 2d       	mov	r30, r0
    2aba:	09 94       	ijmp
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	08 95       	ret

00002ac2 <TMC2209::serialFlush()>:
_ZN7TMC220911serialFlushEv():
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	8d 91       	ld	r24, X+
    2ac6:	9c 91       	ld	r25, X
    2ac8:	00 97       	sbiw	r24, 0x00	; 0
    2aca:	39 f0       	breq	.+14     	; 0x2ada <TMC2209::serialFlush()+0x18>
    2acc:	dc 01       	movw	r26, r24
    2ace:	ed 91       	ld	r30, X+
    2ad0:	fc 91       	ld	r31, X
    2ad2:	06 80       	ldd	r0, Z+6	; 0x06
    2ad4:	f7 81       	ldd	r31, Z+7	; 0x07
    2ad6:	e0 2d       	mov	r30, r0
    2ad8:	09 94       	ijmp
    2ada:	08 95       	ret

00002adc <TMC2209::reverseData(unsigned long)>:
_ZN7TMC220911reverseDataEm():
    2adc:	cb 01       	movw	r24, r22
    2ade:	ba 01       	movw	r22, r20
    2ae0:	0e 94 6f 3b 	call	0x76de	; 0x76de <__bswapsi2>
    2ae4:	08 95       	ret

00002ae6 <TMC2209::write(unsigned char, unsigned long)>:
_ZN7TMC22095writeEhm():
    2ae6:	7f 92       	push	r7
    2ae8:	8f 92       	push	r8
    2aea:	9f 92       	push	r9
    2aec:	af 92       	push	r10
    2aee:	bf 92       	push	r11
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	28 97       	sbiw	r28, 0x08	; 8
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	7c 01       	movw	r14, r24
    2b12:	16 2f       	mov	r17, r22
    2b14:	ba 01       	movw	r22, r20
    2b16:	a9 01       	movw	r20, r18
    2b18:	85 e0       	ldi	r24, 0x05	; 5
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	f7 01       	movw	r30, r14
    2b1e:	b6 80       	ldd	r11, Z+6	; 0x06
    2b20:	ba 82       	std	Y+2, r11	; 0x02
    2b22:	1f 77       	andi	r17, 0x7F	; 127
    2b24:	10 68       	ori	r17, 0x80	; 128
    2b26:	1b 83       	std	Y+3, r17	; 0x03
    2b28:	c7 01       	movw	r24, r14
    2b2a:	0e 94 6e 15 	call	0x2adc	; 0x2adc <TMC2209::reverseData(unsigned long)>
    2b2e:	6c 83       	std	Y+4, r22	; 0x04
    2b30:	7d 83       	std	Y+5, r23	; 0x05
    2b32:	8e 83       	std	Y+6, r24	; 0x06
    2b34:	9f 83       	std	Y+7, r25	; 0x07
_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h():
    2b36:	f6 2f       	mov	r31, r22
    2b38:	a7 2e       	mov	r10, r23
    2b3a:	98 2e       	mov	r9, r24
    2b3c:	89 2e       	mov	r8, r25
    2b3e:	e0 e0       	ldi	r30, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	87 e0       	ldi	r24, 0x07	; 7
    2b46:	78 2e       	mov	r7, r24
    2b48:	25 e0       	ldi	r18, 0x05	; 5
    2b4a:	3b 2d       	mov	r19, r11
    2b4c:	41 2f       	mov	r20, r17
    2b4e:	5f 2f       	mov	r21, r31
    2b50:	6a 2d       	mov	r22, r10
    2b52:	79 2d       	mov	r23, r9
    2b54:	88 2d       	mov	r24, r8
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0a 2f       	mov	r16, r26
    2b5a:	0e 94 ab 3b 	call	0x7756	; 0x7756 <__lshrdi3>
    2b5e:	38 e0       	ldi	r19, 0x08	; 8
    2b60:	8e 2f       	mov	r24, r30
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	42 2f       	mov	r20, r18
    2b66:	50 e0       	ldi	r21, 0x00	; 0
    2b68:	bc 01       	movw	r22, r24
    2b6a:	66 0f       	add	r22, r22
    2b6c:	67 2f       	mov	r22, r23
    2b6e:	66 1f       	adc	r22, r22
    2b70:	77 0b       	sbc	r23, r23
    2b72:	20 fb       	bst	r18, 0
    2b74:	cc 24       	eor	r12, r12
    2b76:	c0 f8       	bld	r12, 0
    2b78:	d1 2c       	mov	r13, r1
    2b7a:	ee 0f       	add	r30, r30
    2b7c:	6c 15       	cp	r22, r12
    2b7e:	7d 05       	cpc	r23, r13
    2b80:	21 f0       	breq	.+8      	; 0x2b8a <TMC2209::write(unsigned char, unsigned long)+0xa4>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	e8 2f       	mov	r30, r24
    2b88:	e7 25       	eor	r30, r7
    2b8a:	55 95       	asr	r21
    2b8c:	47 95       	ror	r20
    2b8e:	24 2f       	mov	r18, r20
    2b90:	31 50       	subi	r19, 0x01	; 1
    2b92:	31 f7       	brne	.-52     	; 0x2b60 <TMC2209::write(unsigned char, unsigned long)+0x7a>
    2b94:	18 96       	adiw	r26, 0x08	; 8
    2b96:	a8 33       	cpi	r26, 0x38	; 56
    2b98:	b1 05       	cpc	r27, r1
    2b9a:	b1 f6       	brne	.-84     	; 0x2b48 <TMC2209::write(unsigned char, unsigned long)+0x62>
_ZN7TMC22095writeEhm():
    2b9c:	e8 87       	std	Y+8, r30	; 0x08
    2b9e:	d1 2c       	mov	r13, r1
    2ba0:	c1 2c       	mov	r12, r1
_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h():
    2ba2:	29 81       	ldd	r18, Y+1	; 0x01
    2ba4:	3a 81       	ldd	r19, Y+2	; 0x02
    2ba6:	4b 81       	ldd	r20, Y+3	; 0x03
    2ba8:	5c 81       	ldd	r21, Y+4	; 0x04
    2baa:	6d 81       	ldd	r22, Y+5	; 0x05
    2bac:	7e 81       	ldd	r23, Y+6	; 0x06
    2bae:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb0:	98 85       	ldd	r25, Y+8	; 0x08
    2bb2:	0c 2d       	mov	r16, r12
    2bb4:	0e 94 ab 3b 	call	0x7756	; 0x7756 <__lshrdi3>
    2bb8:	62 2f       	mov	r22, r18
    2bba:	c7 01       	movw	r24, r14
    2bbc:	0e 94 43 15 	call	0x2a86	; 0x2a86 <TMC2209::serialWrite(unsigned char)>
    2bc0:	f8 e0       	ldi	r31, 0x08	; 8
    2bc2:	cf 0e       	add	r12, r31
    2bc4:	d1 1c       	adc	r13, r1
    2bc6:	80 e4       	ldi	r24, 0x40	; 64
    2bc8:	c8 16       	cp	r12, r24
    2bca:	d1 04       	cpc	r13, r1
    2bcc:	51 f7       	brne	.-44     	; 0x2ba2 <TMC2209::write(unsigned char, unsigned long)+0xbc>
_ZN7TMC22095writeEhm():
    2bce:	28 96       	adiw	r28, 0x08	; 8
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	1f 91       	pop	r17
    2be0:	0f 91       	pop	r16
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	bf 90       	pop	r11
    2bec:	af 90       	pop	r10
    2bee:	9f 90       	pop	r9
    2bf0:	8f 90       	pop	r8
    2bf2:	7f 90       	pop	r7
    2bf4:	08 95       	ret

00002bf6 <TMC2209::setCoolStepDurationThreshold(unsigned long)>:
_ZN7TMC220928setCoolStepDurationThresholdEm():
    2bf6:	9a 01       	movw	r18, r20
    2bf8:	ab 01       	movw	r20, r22
    2bfa:	64 e1       	ldi	r22, 0x14	; 20
    2bfc:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>

00002c00 <TMC2209::setStallGuardThreshold(unsigned char)>:
_ZN7TMC220922setStallGuardThresholdEh():
    2c00:	26 2f       	mov	r18, r22
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	60 e4       	ldi	r22, 0x40	; 64
    2c0a:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>

00002c0e <TMC2209::setRegistersToDefaults()>:
_ZN7TMC220922setRegistersToDefaultsEv():
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	ec 01       	movw	r28, r24
    2c14:	1d 86       	std	Y+13, r1	; 0x0d
    2c16:	1e 86       	std	Y+14, r1	; 0x0e
    2c18:	1f 86       	std	Y+15, r1	; 0x0f
    2c1a:	18 8a       	std	Y+16, r1	; 0x10
    2c1c:	80 e1       	ldi	r24, 0x10	; 16
    2c1e:	8d 87       	std	Y+13, r24	; 0x0d
    2c20:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c22:	8f 61       	ori	r24, 0x1F	; 31
    2c24:	8e 87       	std	Y+14, r24	; 0x0e
    2c26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c28:	80 7f       	andi	r24, 0xF0	; 240
    2c2a:	81 60       	ori	r24, 0x01	; 1
    2c2c:	8f 87       	std	Y+15, r24	; 0x0f
    2c2e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c30:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c32:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c34:	58 89       	ldd	r21, Y+16	; 0x10
    2c36:	60 e1       	ldi	r22, 0x10	; 16
    2c38:	ce 01       	movw	r24, r28
    2c3a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2c3e:	83 e5       	ldi	r24, 0x53	; 83
    2c40:	8e 8b       	std	Y+22, r24	; 0x16
    2c42:	1f 8a       	std	Y+23, r1	; 0x17
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	88 8f       	std	Y+24, r24	; 0x18
    2c48:	80 e1       	ldi	r24, 0x10	; 16
    2c4a:	89 8f       	std	Y+25, r24	; 0x19
    2c4c:	2e 89       	ldd	r18, Y+22	; 0x16
    2c4e:	3f 89       	ldd	r19, Y+23	; 0x17
    2c50:	48 8d       	ldd	r20, Y+24	; 0x18
    2c52:	59 8d       	ldd	r21, Y+25	; 0x19
    2c54:	6c e6       	ldi	r22, 0x6C	; 108
    2c56:	ce 01       	movw	r24, r28
    2c58:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2c5c:	84 e2       	ldi	r24, 0x24	; 36
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	ad e0       	ldi	r26, 0x0D	; 13
    2c62:	b1 ec       	ldi	r27, 0xC1	; 193
    2c64:	8b 8f       	std	Y+27, r24	; 0x1b
    2c66:	9c 8f       	std	Y+28, r25	; 0x1c
    2c68:	ad 8f       	std	Y+29, r26	; 0x1d
    2c6a:	be 8f       	std	Y+30, r27	; 0x1e
    2c6c:	24 e2       	ldi	r18, 0x24	; 36
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4d e0       	ldi	r20, 0x0D	; 13
    2c72:	51 ec       	ldi	r21, 0xC1	; 193
    2c74:	60 e7       	ldi	r22, 0x70	; 112
    2c76:	ce 01       	movw	r24, r28
    2c78:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2c7c:	19 8a       	std	Y+17, r1	; 0x11
    2c7e:	1a 8a       	std	Y+18, r1	; 0x12
    2c80:	1b 8a       	std	Y+19, r1	; 0x13
    2c82:	1c 8a       	std	Y+20, r1	; 0x14
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	a9 01       	movw	r20, r18
    2c8a:	62 e4       	ldi	r22, 0x42	; 66
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2c92:	24 e1       	ldi	r18, 0x14	; 20
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e0       	ldi	r20, 0x00	; 0
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	61 e1       	ldi	r22, 0x11	; 17
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	63 e1       	ldi	r22, 0x13	; 19
    2caa:	ce 01       	movw	r24, r28
    2cac:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	a9 01       	movw	r20, r18
    2cb6:	62 e2       	ldi	r22, 0x22	; 34
    2cb8:	ce 01       	movw	r24, r28
    2cba:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	64 e1       	ldi	r22, 0x14	; 20
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	a9 01       	movw	r20, r18
    2cd2:	60 e4       	ldi	r22, 0x40	; 64
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	a9 01       	movw	r20, r18
    2ce0:	62 e4       	ldi	r22, 0x42	; 66
    2ce2:	ce 01       	movw	r24, r28
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>

00002cec <TMC2209::read(unsigned char)>:
_ZN7TMC22094readEh():
    2cec:	8f 92       	push	r8
    2cee:	9f 92       	push	r9
    2cf0:	af 92       	push	r10
    2cf2:	bf 92       	push	r11
    2cf4:	df 92       	push	r13
    2cf6:	ef 92       	push	r14
    2cf8:	ff 92       	push	r15
    2cfa:	0f 93       	push	r16
    2cfc:	1f 93       	push	r17
    2cfe:	cf 93       	push	r28
    2d00:	df 93       	push	r29
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	28 97       	sbiw	r28, 0x08	; 8
    2d08:	0f b6       	in	r0, 0x3f	; 63
    2d0a:	f8 94       	cli
    2d0c:	de bf       	out	0x3e, r29	; 62
    2d0e:	0f be       	out	0x3f, r0	; 63
    2d10:	cd bf       	out	0x3d, r28	; 61
    2d12:	7c 01       	movw	r14, r24
    2d14:	45 e0       	ldi	r20, 0x05	; 5
    2d16:	84 2e       	mov	r8, r20
    2d18:	91 2c       	mov	r9, r1
    2d1a:	a1 2c       	mov	r10, r1
    2d1c:	b1 2c       	mov	r11, r1
    2d1e:	fc 01       	movw	r30, r24
    2d20:	96 80       	ldd	r9, Z+6	; 0x06
    2d22:	6f 77       	andi	r22, 0x7F	; 127
    2d24:	8a 2d       	mov	r24, r10
    2d26:	80 78       	andi	r24, 0x80	; 128
    2d28:	a8 2e       	mov	r10, r24
    2d2a:	a6 2a       	or	r10, r22
    2d2c:	e8 94       	clt
    2d2e:	a7 f8       	bld	r10, 7
_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h():
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	e0 e0       	ldi	r30, 0x00	; 0
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	57 e0       	ldi	r21, 0x07	; 7
    2d38:	d5 2e       	mov	r13, r21
    2d3a:	b5 01       	movw	r22, r10
    2d3c:	a4 01       	movw	r20, r8
    2d3e:	0e 2e       	mov	r0, r30
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <TMC2209::read(unsigned char)+0x5e>
    2d42:	76 95       	lsr	r23
    2d44:	67 95       	ror	r22
    2d46:	57 95       	ror	r21
    2d48:	47 95       	ror	r20
    2d4a:	0a 94       	dec	r0
    2d4c:	d2 f7       	brpl	.-12     	; 0x2d42 <TMC2209::read(unsigned char)+0x56>
    2d4e:	58 e0       	ldi	r21, 0x08	; 8
    2d50:	68 2f       	mov	r22, r24
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	a4 2f       	mov	r26, r20
    2d56:	b0 e0       	ldi	r27, 0x00	; 0
    2d58:	8b 01       	movw	r16, r22
    2d5a:	00 0f       	add	r16, r16
    2d5c:	01 2f       	mov	r16, r17
    2d5e:	00 1f       	adc	r16, r16
    2d60:	11 0b       	sbc	r17, r17
    2d62:	24 2f       	mov	r18, r20
    2d64:	21 70       	andi	r18, 0x01	; 1
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	88 0f       	add	r24, r24
    2d6a:	02 17       	cp	r16, r18
    2d6c:	13 07       	cpc	r17, r19
    2d6e:	21 f0       	breq	.+8      	; 0x2d78 <TMC2209::read(unsigned char)+0x8c>
    2d70:	cb 01       	movw	r24, r22
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	8d 25       	eor	r24, r13
    2d78:	b5 95       	asr	r27
    2d7a:	a7 95       	ror	r26
    2d7c:	4a 2f       	mov	r20, r26
    2d7e:	51 50       	subi	r21, 0x01	; 1
    2d80:	39 f7       	brne	.-50     	; 0x2d50 <TMC2209::read(unsigned char)+0x64>
    2d82:	38 96       	adiw	r30, 0x08	; 8
    2d84:	e8 31       	cpi	r30, 0x18	; 24
    2d86:	f1 05       	cpc	r31, r1
    2d88:	c1 f6       	brne	.-80     	; 0x2d3a <TMC2209::read(unsigned char)+0x4e>
_ZN7TMC22094readEh():
    2d8a:	b8 2e       	mov	r11, r24
_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h():
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <TMC2209::serialFlush()>
    2d92:	c7 01       	movw	r24, r14
    2d94:	0e 94 34 15 	call	0x2a68	; 0x2a68 <TMC2209::serialAvailable()>
    2d98:	18 16       	cp	r1, r24
    2d9a:	19 06       	cpc	r1, r25
    2d9c:	24 f4       	brge	.+8      	; 0x2da6 <TMC2209::read(unsigned char)+0xba>
    2d9e:	c7 01       	movw	r24, r14
    2da0:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TMC2209::serialRead()>
    2da4:	f6 cf       	rjmp	.-20     	; 0x2d92 <TMC2209::read(unsigned char)+0xa6>
    2da6:	10 e0       	ldi	r17, 0x00	; 0
    2da8:	00 e0       	ldi	r16, 0x00	; 0
    2daa:	c5 01       	movw	r24, r10
    2dac:	b4 01       	movw	r22, r8
    2dae:	00 2e       	mov	r0, r16
    2db0:	04 c0       	rjmp	.+8      	; 0x2dba <TMC2209::read(unsigned char)+0xce>
    2db2:	96 95       	lsr	r25
    2db4:	87 95       	ror	r24
    2db6:	77 95       	ror	r23
    2db8:	67 95       	ror	r22
    2dba:	0a 94       	dec	r0
    2dbc:	d2 f7       	brpl	.-12     	; 0x2db2 <TMC2209::read(unsigned char)+0xc6>
    2dbe:	c7 01       	movw	r24, r14
    2dc0:	0e 94 43 15 	call	0x2a86	; 0x2a86 <TMC2209::serialWrite(unsigned char)>
    2dc4:	08 5f       	subi	r16, 0xF8	; 248
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	00 32       	cpi	r16, 0x20	; 32
    2dca:	11 05       	cpc	r17, r1
    2dcc:	71 f7       	brne	.-36     	; 0x2daa <TMC2209::read(unsigned char)+0xbe>
    2dce:	c7 01       	movw	r24, r14
    2dd0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <TMC2209::serialFlush()>
    2dd4:	81 2c       	mov	r8, r1
    2dd6:	91 2c       	mov	r9, r1
    2dd8:	54 01       	movw	r10, r8
    2dda:	c7 01       	movw	r24, r14
    2ddc:	0e 94 34 15 	call	0x2a68	; 0x2a68 <TMC2209::serialAvailable()>
    2de0:	04 97       	sbiw	r24, 0x04	; 4
    2de2:	8c f4       	brge	.+34     	; 0x2e06 <TMC2209::read(unsigned char)+0x11a>
    2de4:	f0 ea       	ldi	r31, 0xA0	; 160
    2de6:	8f 16       	cp	r8, r31
    2de8:	ff e0       	ldi	r31, 0x0F	; 15
    2dea:	9f 06       	cpc	r9, r31
    2dec:	a1 04       	cpc	r10, r1
    2dee:	b1 04       	cpc	r11, r1
    2df0:	e9 f0       	breq	.+58     	; 0x2e2c <TMC2209::read(unsigned char)+0x140>
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <delayMicroseconds>
    2dfa:	8f ef       	ldi	r24, 0xFF	; 255
    2dfc:	88 1a       	sub	r8, r24
    2dfe:	98 0a       	sbc	r9, r24
    2e00:	a8 0a       	sbc	r10, r24
    2e02:	b8 0a       	sbc	r11, r24
    2e04:	ea cf       	rjmp	.-44     	; 0x2dda <TMC2209::read(unsigned char)+0xee>
    2e06:	e0 ea       	ldi	r30, 0xA0	; 160
    2e08:	8e 16       	cp	r8, r30
    2e0a:	ef e0       	ldi	r30, 0x0F	; 15
    2e0c:	9e 06       	cpc	r9, r30
    2e0e:	a1 04       	cpc	r10, r1
    2e10:	b1 04       	cpc	r11, r1
    2e12:	61 f0       	breq	.+24     	; 0x2e2c <TMC2209::read(unsigned char)+0x140>
    2e14:	c7 01       	movw	r24, r14
    2e16:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TMC2209::serialRead()>
    2e1a:	c7 01       	movw	r24, r14
    2e1c:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TMC2209::serialRead()>
    2e20:	c7 01       	movw	r24, r14
    2e22:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TMC2209::serialRead()>
    2e26:	c7 01       	movw	r24, r14
    2e28:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TMC2209::serialRead()>
    2e2c:	81 2c       	mov	r8, r1
    2e2e:	91 2c       	mov	r9, r1
    2e30:	54 01       	movw	r10, r8
_ZN7TMC22094readEh():
    2e32:	c7 01       	movw	r24, r14
    2e34:	0e 94 34 15 	call	0x2a68	; 0x2a68 <TMC2209::serialAvailable()>
    2e38:	08 97       	sbiw	r24, 0x08	; 8
    2e3a:	94 f4       	brge	.+36     	; 0x2e60 <TMC2209::read(unsigned char)+0x174>
    2e3c:	f0 e1       	ldi	r31, 0x10	; 16
    2e3e:	8f 16       	cp	r8, r31
    2e40:	f7 e2       	ldi	r31, 0x27	; 39
    2e42:	9f 06       	cpc	r9, r31
    2e44:	a1 04       	cpc	r10, r1
    2e46:	b1 04       	cpc	r11, r1
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <TMC2209::read(unsigned char)+0x160>
    2e4a:	5e c0       	rjmp	.+188    	; 0x2f08 <TMC2209::read(unsigned char)+0x21c>
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <delayMicroseconds>
    2e54:	8f ef       	ldi	r24, 0xFF	; 255
    2e56:	88 1a       	sub	r8, r24
    2e58:	98 0a       	sbc	r9, r24
    2e5a:	a8 0a       	sbc	r10, r24
    2e5c:	b8 0a       	sbc	r11, r24
    2e5e:	e9 cf       	rjmp	.-46     	; 0x2e32 <TMC2209::read(unsigned char)+0x146>
    2e60:	e0 e1       	ldi	r30, 0x10	; 16
    2e62:	8e 16       	cp	r8, r30
    2e64:	e7 e2       	ldi	r30, 0x27	; 39
    2e66:	9e 06       	cpc	r9, r30
    2e68:	a1 04       	cpc	r10, r1
    2e6a:	b1 04       	cpc	r11, r1
    2e6c:	09 f4       	brne	.+2      	; 0x2e70 <TMC2209::read(unsigned char)+0x184>
    2e6e:	4c c0       	rjmp	.+152    	; 0x2f08 <TMC2209::read(unsigned char)+0x21c>
    2e70:	19 82       	std	Y+1, r1	; 0x01
    2e72:	1a 82       	std	Y+2, r1	; 0x02
    2e74:	1b 82       	std	Y+3, r1	; 0x03
    2e76:	1c 82       	std	Y+4, r1	; 0x04
    2e78:	1d 82       	std	Y+5, r1	; 0x05
    2e7a:	1e 82       	std	Y+6, r1	; 0x06
    2e7c:	1f 82       	std	Y+7, r1	; 0x07
    2e7e:	18 86       	std	Y+8, r1	; 0x08
    2e80:	b1 2c       	mov	r11, r1
    2e82:	a1 2c       	mov	r10, r1
    2e84:	c7 01       	movw	r24, r14
    2e86:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <TMC2209::serialRead()>
    2e8a:	9c 01       	movw	r18, r24
    2e8c:	93 2f       	mov	r25, r19
    2e8e:	99 0f       	add	r25, r25
    2e90:	99 0b       	sbc	r25, r25
    2e92:	49 2f       	mov	r20, r25
    2e94:	59 2f       	mov	r21, r25
    2e96:	69 2f       	mov	r22, r25
    2e98:	79 2f       	mov	r23, r25
    2e9a:	89 2f       	mov	r24, r25
    2e9c:	0a 2d       	mov	r16, r10
    2e9e:	0e 94 90 3b 	call	0x7720	; 0x7720 <__ashldi3>
    2ea2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ea4:	2f 2b       	or	r18, r31
    2ea6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea8:	3f 2b       	or	r19, r31
    2eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2eac:	e4 2b       	or	r30, r20
    2eae:	4c 81       	ldd	r20, Y+4	; 0x04
    2eb0:	45 2b       	or	r20, r21
    2eb2:	5d 81       	ldd	r21, Y+5	; 0x05
    2eb4:	56 2b       	or	r21, r22
    2eb6:	6e 81       	ldd	r22, Y+6	; 0x06
    2eb8:	67 2b       	or	r22, r23
    2eba:	7f 81       	ldd	r23, Y+7	; 0x07
    2ebc:	78 2b       	or	r23, r24
    2ebe:	88 85       	ldd	r24, Y+8	; 0x08
    2ec0:	98 2b       	or	r25, r24
    2ec2:	29 83       	std	Y+1, r18	; 0x01
    2ec4:	3a 83       	std	Y+2, r19	; 0x02
    2ec6:	eb 83       	std	Y+3, r30	; 0x03
    2ec8:	4c 83       	std	Y+4, r20	; 0x04
    2eca:	5d 83       	std	Y+5, r21	; 0x05
    2ecc:	6e 83       	std	Y+6, r22	; 0x06
    2ece:	7f 83       	std	Y+7, r23	; 0x07
    2ed0:	98 87       	std	Y+8, r25	; 0x08
    2ed2:	f8 e0       	ldi	r31, 0x08	; 8
    2ed4:	af 0e       	add	r10, r31
    2ed6:	b1 1c       	adc	r11, r1
    2ed8:	80 e4       	ldi	r24, 0x40	; 64
    2eda:	a8 16       	cp	r10, r24
    2edc:	b1 04       	cpc	r11, r1
    2ede:	91 f6       	brne	.-92     	; 0x2e84 <TMC2209::read(unsigned char)+0x198>
    2ee0:	c7 01       	movw	r24, r14
    2ee2:	28 96       	adiw	r28, 0x08	; 8
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	f8 94       	cli
    2ee8:	de bf       	out	0x3e, r29	; 62
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	cd bf       	out	0x3d, r28	; 61
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	df 90       	pop	r13
    2efc:	bf 90       	pop	r11
    2efe:	af 90       	pop	r10
    2f00:	9f 90       	pop	r9
    2f02:	8f 90       	pop	r8
    2f04:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <TMC2209::reverseData(unsigned long)>
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	28 96       	adiw	r28, 0x08	; 8
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	ff 90       	pop	r15
    2f24:	ef 90       	pop	r14
    2f26:	df 90       	pop	r13
    2f28:	bf 90       	pop	r11
    2f2a:	af 90       	pop	r10
    2f2c:	9f 90       	pop	r9
    2f2e:	8f 90       	pop	r8
    2f30:	08 95       	ret

00002f32 <TMC2209::getStatus()>:
_ZN7TMC22099getStatusEv():
    2f32:	6f e6       	ldi	r22, 0x6F	; 111
    2f34:	0e 94 76 16 	call	0x2cec	; 0x2cec <TMC2209::read(unsigned char)>
    2f38:	08 95       	ret

00002f3a <TMC2209::getStallGuardResult()>:
_ZN7TMC220919getStallGuardResultEv():
    2f3a:	61 e4       	ldi	r22, 0x41	; 65
    2f3c:	0e 94 76 16 	call	0x2cec	; 0x2cec <TMC2209::read(unsigned char)>
    2f40:	cb 01       	movw	r24, r22
    2f42:	08 95       	ret

00002f44 <TMC2209::percentToCurrentSetting(unsigned char)>:
_ZN7TMC220923percentToCurrentSettingEh():
    2f44:	af 92       	push	r10
    2f46:	bf 92       	push	r11
    2f48:	cf 92       	push	r12
    2f4a:	df 92       	push	r13
    2f4c:	ef 92       	push	r14
    2f4e:	ff 92       	push	r15
    2f50:	0f 93       	push	r16
    2f52:	1f 93       	push	r17
    2f54:	70 e0       	ldi	r23, 0x00	; 0
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	65 36       	cpi	r22, 0x65	; 101
    2f5c:	71 05       	cpc	r23, r1
    2f5e:	81 05       	cpc	r24, r1
    2f60:	91 05       	cpc	r25, r1
    2f62:	20 f0       	brcs	.+8      	; 0x2f6c <TMC2209::percentToCurrentSetting(unsigned char)+0x28>
    2f64:	64 e6       	ldi	r22, 0x64	; 100
    2f66:	70 e0       	ldi	r23, 0x00	; 0
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	1f 92       	push	r1
    2f6e:	1f 92       	push	r1
    2f70:	1f 92       	push	r1
    2f72:	2f e1       	ldi	r18, 0x1F	; 31
    2f74:	2f 93       	push	r18
    2f76:	a1 2c       	mov	r10, r1
    2f78:	b1 2c       	mov	r11, r1
    2f7a:	65 01       	movw	r12, r10
    2f7c:	14 e6       	ldi	r17, 0x64	; 100
    2f7e:	e1 2e       	mov	r14, r17
    2f80:	f1 2c       	mov	r15, r1
    2f82:	00 e0       	ldi	r16, 0x00	; 0
    2f84:	10 e0       	ldi	r17, 0x00	; 0
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	a9 01       	movw	r20, r18
    2f8c:	0e 94 b4 35 	call	0x6b68	; 0x6b68 <map(long, long, long, long, long)>
    2f90:	86 2f       	mov	r24, r22
    2f92:	0f 90       	pop	r0
    2f94:	0f 90       	pop	r0
    2f96:	0f 90       	pop	r0
    2f98:	0f 90       	pop	r0
    2f9a:	1f 91       	pop	r17
    2f9c:	0f 91       	pop	r16
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	df 90       	pop	r13
    2fa4:	cf 90       	pop	r12
    2fa6:	bf 90       	pop	r11
    2fa8:	af 90       	pop	r10
    2faa:	08 95       	ret

00002fac <TMC2209::writeStoredGlobalConfig()>:
_ZN7TMC220923writeStoredGlobalConfigEv():
    2fac:	fc 01       	movw	r30, r24
    2fae:	21 85       	ldd	r18, Z+9	; 0x09
    2fb0:	32 85       	ldd	r19, Z+10	; 0x0a
    2fb2:	43 85       	ldd	r20, Z+11	; 0x0b
    2fb4:	54 85       	ldd	r21, Z+12	; 0x0c
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>

00002fbc <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>:
_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE():
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	66 83       	std	Z+6, r22	; 0x06
    2fc0:	80 ec       	ldi	r24, 0xC0	; 192
    2fc2:	81 87       	std	Z+9, r24	; 0x09
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	82 87       	std	Z+10, r24	; 0x0a
    2fc8:	13 86       	std	Z+11, r1	; 0x0b
    2fca:	14 86       	std	Z+12, r1	; 0x0c
    2fcc:	cf 01       	movw	r24, r30
    2fce:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <TMC2209::writeStoredGlobalConfig()>

00002fd2 <TMC2209::writeStoredDriverCurrent()>:
_ZN7TMC220924writeStoredDriverCurrentEv():
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	ec 01       	movw	r28, r24
    2fd8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fda:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fdc:	4f 85       	ldd	r20, Y+15	; 0x0f
    2fde:	58 89       	ldd	r21, Y+16	; 0x10
    2fe0:	60 e1       	ldi	r22, 0x10	; 16
    2fe2:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    2fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe8:	9f 71       	andi	r25, 0x1F	; 31
    2fea:	8a 89       	ldd	r24, Y+18	; 0x12
    2fec:	94 31       	cpi	r25, 0x14	; 20
    2fee:	78 f0       	brcs	.+30     	; 0x300e <TMC2209::writeStoredDriverCurrent()+0x3c>
    2ff0:	80 68       	ori	r24, 0x80	; 128
    2ff2:	8a 8b       	std	Y+18, r24	; 0x12
    2ff4:	8d 89       	ldd	r24, Y+21	; 0x15
    2ff6:	88 23       	and	r24, r24
    2ff8:	61 f0       	breq	.+24     	; 0x3012 <TMC2209::writeStoredDriverCurrent()+0x40>
    2ffa:	29 89       	ldd	r18, Y+17	; 0x11
    2ffc:	3a 89       	ldd	r19, Y+18	; 0x12
    2ffe:	4b 89       	ldd	r20, Y+19	; 0x13
    3000:	5c 89       	ldd	r21, Y+20	; 0x14
    3002:	62 e4       	ldi	r22, 0x42	; 66
    3004:	ce 01       	movw	r24, r28
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>
    300e:	8f 77       	andi	r24, 0x7F	; 127
    3010:	f0 cf       	rjmp	.-32     	; 0x2ff2 <TMC2209::writeStoredDriverCurrent()+0x20>
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	08 95       	ret

00003018 <TMC2209::setRunCurrent(unsigned char)>:
_ZN7TMC220913setRunCurrentEh():
    3018:	cf 93       	push	r28
    301a:	df 93       	push	r29
    301c:	ec 01       	movw	r28, r24
    301e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <TMC2209::percentToCurrentSetting(unsigned char)>
    3022:	98 2f       	mov	r25, r24
    3024:	9f 71       	andi	r25, 0x1F	; 31
    3026:	8e 85       	ldd	r24, Y+14	; 0x0e
    3028:	80 7e       	andi	r24, 0xE0	; 224
    302a:	89 2b       	or	r24, r25
    302c:	8e 87       	std	Y+14, r24	; 0x0e
    302e:	ce 01       	movw	r24, r28
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <TMC2209::writeStoredDriverCurrent()>

00003038 <TMC2209::setHoldCurrent(unsigned char)>:
_ZN7TMC220914setHoldCurrentEh():
    3038:	cf 93       	push	r28
    303a:	df 93       	push	r29
    303c:	ec 01       	movw	r28, r24
    303e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <TMC2209::percentToCurrentSetting(unsigned char)>
    3042:	98 2f       	mov	r25, r24
    3044:	9f 71       	andi	r25, 0x1F	; 31
    3046:	8d 85       	ldd	r24, Y+13	; 0x0d
    3048:	80 7e       	andi	r24, 0xE0	; 224
    304a:	89 2b       	or	r24, r25
    304c:	8d 87       	std	Y+13, r24	; 0x0d
    304e:	ce 01       	movw	r24, r28
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <TMC2209::writeStoredDriverCurrent()>

00003058 <TMC2209::minimizeMotorCurrent()>:
_ZN7TMC220920minimizeMotorCurrentEv():
    3058:	fc 01       	movw	r30, r24
    305a:	26 85       	ldd	r18, Z+14	; 0x0e
    305c:	20 7e       	andi	r18, 0xE0	; 224
    305e:	26 87       	std	Z+14, r18	; 0x0e
    3060:	25 85       	ldd	r18, Z+13	; 0x0d
    3062:	20 7e       	andi	r18, 0xE0	; 224
    3064:	25 87       	std	Z+13, r18	; 0x0d
    3066:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <TMC2209::writeStoredDriverCurrent()>

0000306a <TMC2209::writeStoredChopperConfig()>:
_ZN7TMC220924writeStoredChopperConfigEv():
    306a:	fc 01       	movw	r30, r24
    306c:	26 89       	ldd	r18, Z+22	; 0x16
    306e:	37 89       	ldd	r19, Z+23	; 0x17
    3070:	40 8d       	ldd	r20, Z+24	; 0x18
    3072:	51 8d       	ldd	r21, Z+25	; 0x19
    3074:	6c e6       	ldi	r22, 0x6C	; 108
    3076:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>

0000307a <TMC2209::enable()>:
_ZN7TMC22096enableEv():
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	ec 01       	movw	r28, r24
    3080:	8f 81       	ldd	r24, Y+7	; 0x07
    3082:	98 85       	ldd	r25, Y+8	; 0x08
    3084:	97 fd       	sbrc	r25, 7
    3086:	03 c0       	rjmp	.+6      	; 0x308e <TMC2209::enable()+0x14>
    3088:	60 e0       	ldi	r22, 0x00	; 0
    308a:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
    308e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3090:	9f 70       	andi	r25, 0x0F	; 15
    3092:	8e 89       	ldd	r24, Y+22	; 0x16
    3094:	80 7f       	andi	r24, 0xF0	; 240
    3096:	89 2b       	or	r24, r25
    3098:	8e 8b       	std	Y+22, r24	; 0x16
    309a:	ce 01       	movw	r24, r28
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	0c 94 35 18 	jmp	0x306a	; 0x306a <TMC2209::writeStoredChopperConfig()>

000030a4 <TMC2209::disable()>:
_ZN7TMC22097disableEv():
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	ec 01       	movw	r28, r24
    30aa:	8f 81       	ldd	r24, Y+7	; 0x07
    30ac:	98 85       	ldd	r25, Y+8	; 0x08
    30ae:	97 fd       	sbrc	r25, 7
    30b0:	03 c0       	rjmp	.+6      	; 0x30b8 <TMC2209::disable()+0x14>
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
    30b8:	8e 89       	ldd	r24, Y+22	; 0x16
    30ba:	80 7f       	andi	r24, 0xF0	; 240
    30bc:	8e 8b       	std	Y+22, r24	; 0x16
    30be:	ce 01       	movw	r24, r28
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	0c 94 35 18 	jmp	0x306a	; 0x306a <TMC2209::writeStoredChopperConfig()>

000030c8 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>:
_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh():
    30c8:	dc 01       	movw	r26, r24
    30ca:	59 96       	adiw	r26, 0x19	; 25
    30cc:	9c 91       	ld	r25, X
    30ce:	59 97       	sbiw	r26, 0x19	; 25
    30d0:	68 30       	cpi	r22, 0x08	; 8
    30d2:	20 f5       	brcc	.+72     	; 0x311c <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x54>
    30d4:	e6 2f       	mov	r30, r22
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	ef 58       	subi	r30, 0x8F	; 143
    30da:	f7 4e       	sbci	r31, 0xE7	; 231
    30dc:	90 7f       	andi	r25, 0xF0	; 240
    30de:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <__tablejump2__>
    30e2:	79 18       	sub	r7, r9
    30e4:	80 18       	sub	r8, r0
    30e6:	82 18       	sub	r8, r2
    30e8:	84 18       	sub	r8, r4
    30ea:	86 18       	sub	r8, r6
    30ec:	88 18       	sub	r8, r8
    30ee:	8a 18       	sub	r8, r10
    30f0:	8c 18       	sub	r8, r12
    30f2:	98 60       	ori	r25, 0x08	; 8
    30f4:	59 96       	adiw	r26, 0x19	; 25
    30f6:	9c 93       	st	X, r25
    30f8:	59 97       	sbiw	r26, 0x19	; 25
    30fa:	cd 01       	movw	r24, r26
    30fc:	0c 94 35 18 	jmp	0x306a	; 0x306a <TMC2209::writeStoredChopperConfig()>
    3100:	97 60       	ori	r25, 0x07	; 7
    3102:	f8 cf       	rjmp	.-16     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    3104:	96 60       	ori	r25, 0x06	; 6
    3106:	f6 cf       	rjmp	.-20     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    3108:	95 60       	ori	r25, 0x05	; 5
    310a:	f4 cf       	rjmp	.-24     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    310c:	94 60       	ori	r25, 0x04	; 4
    310e:	f2 cf       	rjmp	.-28     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    3110:	93 60       	ori	r25, 0x03	; 3
    3112:	f0 cf       	rjmp	.-32     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    3114:	92 60       	ori	r25, 0x02	; 2
    3116:	ee cf       	rjmp	.-36     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    3118:	91 60       	ori	r25, 0x01	; 1
    311a:	ec cf       	rjmp	.-40     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    311c:	90 7f       	andi	r25, 0xF0	; 240
    311e:	ea cf       	rjmp	.-44     	; 0x30f4 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>

00003120 <TMC2209::setMicrostepsPerStep(unsigned int)>:
_ZN7TMC220920setMicrostepsPerStepEj():
    3120:	9b 01       	movw	r18, r22
    3122:	36 95       	lsr	r19
    3124:	27 95       	ror	r18
    3126:	70 e0       	ldi	r23, 0x00	; 0
    3128:	60 e0       	ldi	r22, 0x00	; 0
    312a:	21 15       	cp	r18, r1
    312c:	31 05       	cpc	r19, r1
    312e:	29 f0       	breq	.+10     	; 0x313a <TMC2209::setMicrostepsPerStep(unsigned int)+0x1a>
    3130:	36 95       	lsr	r19
    3132:	27 95       	ror	r18
    3134:	6f 5f       	subi	r22, 0xFF	; 255
    3136:	7f 4f       	sbci	r23, 0xFF	; 255
    3138:	f8 cf       	rjmp	.-16     	; 0x312a <TMC2209::setMicrostepsPerStep(unsigned int)+0xa>
    313a:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>

0000313e <TMC2209::writeStoredPwmConfig()>:
_ZN7TMC220920writeStoredPwmConfigEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:961
}

void TMC2209::writeStoredPwmConfig()
{
  write(ADDRESS_PWMCONF, pwm_config_.bytes);
    313e:	fc 01       	movw	r30, r24
    3140:	23 8d       	ldd	r18, Z+27	; 0x1b
    3142:	34 8d       	ldd	r19, Z+28	; 0x1c
    3144:	45 8d       	ldd	r20, Z+29	; 0x1d
    3146:	56 8d       	ldd	r21, Z+30	; 0x1e
    3148:	60 e7       	ldi	r22, 0x70	; 112
    314a:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <TMC2209::write(unsigned char, unsigned long)>

0000314e <TMC2209::setStandstillMode(TMC2209::StandstillMode)>:
_ZN7TMC220917setStandstillModeENS_14StandstillModeE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:240
  global_config_.shaft = 0;
  writeStoredGlobalConfig();
}

void TMC2209::setStandstillMode(TMC2209::StandstillMode mode)
{
    314e:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:241
  pwm_config_.freewheel = mode;
    3150:	63 70       	andi	r22, 0x03	; 3
    3152:	96 2f       	mov	r25, r22
    3154:	92 95       	swap	r25
    3156:	90 7f       	andi	r25, 0xF0	; 240
    3158:	65 8d       	ldd	r22, Z+29	; 0x1d
    315a:	6f 7c       	andi	r22, 0xCF	; 207
    315c:	69 2b       	or	r22, r25
    315e:	65 8f       	std	Z+29, r22	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:242
  writeStoredPwmConfig();
    3160:	cf 01       	movw	r24, r30
    3162:	0c 94 9f 18 	jmp	0x313e	; 0x313e <TMC2209::writeStoredPwmConfig()>

00003166 <TMC2209::enableAutomaticCurrentScaling()>:
_ZN7TMC220929enableAutomaticCurrentScalingEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:247
}

void TMC2209::enableAutomaticCurrentScaling()
{
  pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
    3166:	fc 01       	movw	r30, r24
    3168:	25 8d       	ldd	r18, Z+29	; 0x1d
    316a:	24 60       	ori	r18, 0x04	; 4
    316c:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:248
  writeStoredPwmConfig();
    316e:	0c 94 9f 18 	jmp	0x313e	; 0x313e <TMC2209::writeStoredPwmConfig()>

00003172 <TMC2209::disableAutomaticCurrentScaling()>:
_ZN7TMC220930disableAutomaticCurrentScalingEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:253
}

void TMC2209::disableAutomaticCurrentScaling()
{
  pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
    3172:	fc 01       	movw	r30, r24
    3174:	25 8d       	ldd	r18, Z+29	; 0x1d
    3176:	2b 7f       	andi	r18, 0xFB	; 251
    3178:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:254
  writeStoredPwmConfig();
    317a:	0c 94 9f 18 	jmp	0x313e	; 0x313e <TMC2209::writeStoredPwmConfig()>

0000317e <TMC2209::enableAutomaticGradientAdaptation()>:
_ZN7TMC220933enableAutomaticGradientAdaptationEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:259
}

void TMC2209::enableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
    317e:	fc 01       	movw	r30, r24
    3180:	25 8d       	ldd	r18, Z+29	; 0x1d
    3182:	28 60       	ori	r18, 0x08	; 8
    3184:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:260
  writeStoredPwmConfig();
    3186:	0c 94 9f 18 	jmp	0x313e	; 0x313e <TMC2209::writeStoredPwmConfig()>

0000318a <TMC2209::disableAutomaticGradientAdaptation()>:
_ZN7TMC220934disableAutomaticGradientAdaptationEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:265
}

void TMC2209::disableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
    318a:	fc 01       	movw	r30, r24
    318c:	25 8d       	ldd	r18, Z+29	; 0x1d
    318e:	27 7f       	andi	r18, 0xF7	; 247
    3190:	25 8f       	std	Z+29, r18	; 0x1d
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:266
  writeStoredPwmConfig();
    3192:	0c 94 9f 18 	jmp	0x313e	; 0x313e <TMC2209::writeStoredPwmConfig()>

00003196 <TMC2209::initialize(long, TMC2209::SerialAddress)>:
_ZN7TMC220910initializeElNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:595
}

// private
void TMC2209::initialize(long serial_baud_rate,
  SerialAddress serial_address)
{
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:596
  serial_baud_rate_ = serial_baud_rate;
    319c:	4a 83       	std	Y+2, r20	; 0x02
    319e:	5b 83       	std	Y+3, r21	; 0x03
    31a0:	6c 83       	std	Y+4, r22	; 0x04
    31a2:	7d 83       	std	Y+5, r23	; 0x05
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:598

  setOperationModeToSerial(serial_address);
    31a4:	b9 01       	movw	r22, r18
    31a6:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:599
  setRegistersToDefaults();
    31aa:	ce 01       	movw	r24, r28
    31ac:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <TMC2209::setRegistersToDefaults()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:601

  minimizeMotorCurrent();
    31b0:	ce 01       	movw	r24, r28
    31b2:	0e 94 2c 18 	call	0x3058	; 0x3058 <TMC2209::minimizeMotorCurrent()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:602
  disable();
    31b6:	ce 01       	movw	r24, r28
    31b8:	0e 94 52 18 	call	0x30a4	; 0x30a4 <TMC2209::disable()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:603
  disableAutomaticCurrentScaling();
    31bc:	ce 01       	movw	r24, r28
    31be:	0e 94 b9 18 	call	0x3172	; 0x3172 <TMC2209::disableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:604
  disableAutomaticGradientAdaptation();
    31c2:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:605
}
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:604
  setRegistersToDefaults();

  minimizeMotorCurrent();
  disable();
  disableAutomaticCurrentScaling();
  disableAutomaticGradientAdaptation();
    31c8:	0c 94 c5 18 	jmp	0x318a	; 0x318a <TMC2209::disableAutomaticGradientAdaptation()>

000031cc <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>:
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:70
}
#else
void TMC2209::setup(HardwareSerial & serial,
  long serial_baud_rate,
  SerialAddress serial_address)
{
    31cc:	cf 92       	push	r12
    31ce:	df 92       	push	r13
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	ec 01       	movw	r28, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	69 01       	movw	r12, r18
    31e2:	7a 01       	movw	r14, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:71
  hardware_serial_ptr_ = &serial;
    31e4:	79 83       	std	Y+1, r23	; 0x01
    31e6:	68 83       	st	Y, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:72
  hardware_serial_ptr_->end();
    31e8:	0e 94 17 33 	call	0x662e	; 0x662e <HardwareSerial::end()>
_ZN14HardwareSerial5beginEm():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    31ec:	26 e0       	ldi	r18, 0x06	; 6
    31ee:	b7 01       	movw	r22, r14
    31f0:	a6 01       	movw	r20, r12
    31f2:	88 81       	ld	r24, Y
    31f4:	99 81       	ldd	r25, Y+1	; 0x01
    31f6:	0e 94 bf 32 	call	0x657e	; 0x657e <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:75
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    31fa:	98 01       	movw	r18, r16
    31fc:	b7 01       	movw	r22, r14
    31fe:	a6 01       	movw	r20, r12
    3200:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:76
}
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
C:\Users\Thaddaeus\Documents\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:75
{
  hardware_serial_ptr_ = &serial;
  hardware_serial_ptr_->end();
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    3212:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <TMC2209::initialize(long, TMC2209::SerialAddress)>

00003216 <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD2Ev():
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:644
// Blocks until the target position is reached and stopped
void AccelStepper::runToPosition()
{
    while (run())
	YIELD; // Let system housekeeping occur
}
    3216:	08 95       	ret

00003218 <AccelStepper::computeNewSpeed()>:
_ZN12AccelStepper15computeNewSpeedEv():
    3218:	4f 92       	push	r4
    321a:	5f 92       	push	r5
    321c:	6f 92       	push	r6
    321e:	7f 92       	push	r7
    3220:	8f 92       	push	r8
    3222:	9f 92       	push	r9
    3224:	af 92       	push	r10
    3226:	bf 92       	push	r11
    3228:	cf 92       	push	r12
    322a:	df 92       	push	r13
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	ec 01       	movw	r28, r24
_ZN12AccelStepper12distanceToGoEv():
    323a:	cc 88       	ldd	r12, Y+20	; 0x14
    323c:	dd 88       	ldd	r13, Y+21	; 0x15
    323e:	ee 88       	ldd	r14, Y+22	; 0x16
    3240:	ff 88       	ldd	r15, Y+23	; 0x17
    3242:	88 89       	ldd	r24, Y+16	; 0x10
    3244:	99 89       	ldd	r25, Y+17	; 0x11
    3246:	aa 89       	ldd	r26, Y+18	; 0x12
    3248:	bb 89       	ldd	r27, Y+19	; 0x13
    324a:	c8 1a       	sub	r12, r24
    324c:	d9 0a       	sbc	r13, r25
    324e:	ea 0a       	sbc	r14, r26
    3250:	fb 0a       	sbc	r15, r27
_ZN12AccelStepper15computeNewSpeedEv():
    3252:	68 8d       	ldd	r22, Y+24	; 0x18
    3254:	79 8d       	ldd	r23, Y+25	; 0x19
    3256:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3258:	9b 8d       	ldd	r25, Y+27	; 0x1b
    325a:	9b 01       	movw	r18, r22
    325c:	ac 01       	movw	r20, r24
    325e:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    3262:	4b 01       	movw	r8, r22
    3264:	5c 01       	movw	r10, r24
    3266:	68 a1       	ldd	r22, Y+32	; 0x20
    3268:	79 a1       	ldd	r23, Y+33	; 0x21
    326a:	8a a1       	ldd	r24, Y+34	; 0x22
    326c:	9b a1       	ldd	r25, Y+35	; 0x23
    326e:	9b 01       	movw	r18, r22
    3270:	ac 01       	movw	r20, r24
    3272:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    3276:	9b 01       	movw	r18, r22
    3278:	ac 01       	movw	r20, r24
    327a:	c5 01       	movw	r24, r10
    327c:	b4 01       	movw	r22, r8
    327e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    3282:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__fixsfsi>
    3286:	c1 14       	cp	r12, r1
    3288:	d1 04       	cpc	r13, r1
    328a:	e1 04       	cpc	r14, r1
    328c:	f1 04       	cpc	r15, r1
    328e:	09 f0       	breq	.+2      	; 0x3292 <AccelStepper::computeNewSpeed()+0x7a>
    3290:	b6 c0       	rjmp	.+364    	; 0x33fe <AccelStepper::computeNewSpeed()+0x1e6>
    3292:	62 30       	cpi	r22, 0x02	; 2
    3294:	71 05       	cpc	r23, r1
    3296:	81 05       	cpc	r24, r1
    3298:	91 05       	cpc	r25, r1
    329a:	0c f0       	brlt	.+2      	; 0x329e <AccelStepper::computeNewSpeed()+0x86>
    329c:	d0 c0       	rjmp	.+416    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    329e:	1b 82       	std	Y+3, r1	; 0x03
    32a0:	1c 82       	std	Y+4, r1	; 0x04
    32a2:	1d 82       	std	Y+5, r1	; 0x05
    32a4:	1e 82       	std	Y+6, r1	; 0x06
    32a6:	18 8e       	std	Y+24, r1	; 0x18
    32a8:	19 8e       	std	Y+25, r1	; 0x19
    32aa:	1a 8e       	std	Y+26, r1	; 0x1a
    32ac:	1b 8e       	std	Y+27, r1	; 0x1b
    32ae:	1c aa       	std	Y+52, r1	; 0x34
    32b0:	1d aa       	std	Y+53, r1	; 0x35
    32b2:	1e aa       	std	Y+54, r1	; 0x36
    32b4:	1f aa       	std	Y+55, r1	; 0x37
    32b6:	c1 2c       	mov	r12, r1
    32b8:	d1 2c       	mov	r13, r1
    32ba:	76 01       	movw	r14, r12
    32bc:	c7 01       	movw	r24, r14
    32be:	b6 01       	movw	r22, r12
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	cf 90       	pop	r12
    32d0:	bf 90       	pop	r11
    32d2:	af 90       	pop	r10
    32d4:	9f 90       	pop	r9
    32d6:	8f 90       	pop	r8
    32d8:	7f 90       	pop	r7
    32da:	6f 90       	pop	r6
    32dc:	5f 90       	pop	r5
    32de:	4f 90       	pop	r4
    32e0:	08 95       	ret
    32e2:	10 16       	cp	r1, r16
    32e4:	11 06       	cpc	r1, r17
    32e6:	12 06       	cpc	r1, r18
    32e8:	13 06       	cpc	r1, r19
    32ea:	b4 f4       	brge	.+44     	; 0x3318 <AccelStepper::computeNewSpeed()+0x100>
    32ec:	6c 15       	cp	r22, r12
    32ee:	7d 05       	cpc	r23, r13
    32f0:	8e 05       	cpc	r24, r14
    32f2:	9f 05       	cpc	r25, r15
    32f4:	1c f4       	brge	.+6      	; 0x32fc <AccelStepper::computeNewSpeed()+0xe4>
    32f6:	2a 81       	ldd	r18, Y+2	; 0x02
    32f8:	21 11       	cpse	r18, r1
    32fa:	a1 c0       	rjmp	.+322    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    32fc:	9b 01       	movw	r18, r22
    32fe:	ac 01       	movw	r20, r24
    3300:	88 27       	eor	r24, r24
    3302:	99 27       	eor	r25, r25
    3304:	dc 01       	movw	r26, r24
    3306:	82 1b       	sub	r24, r18
    3308:	93 0b       	sbc	r25, r19
    330a:	a4 0b       	sbc	r26, r20
    330c:	b5 0b       	sbc	r27, r21
    330e:	8c ab       	std	Y+52, r24	; 0x34
    3310:	9d ab       	std	Y+53, r25	; 0x35
    3312:	ae ab       	std	Y+54, r26	; 0x36
    3314:	bf ab       	std	Y+55, r27	; 0x37
    3316:	93 c0       	rjmp	.+294    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    3318:	01 15       	cp	r16, r1
    331a:	11 05       	cpc	r17, r1
    331c:	21 05       	cpc	r18, r1
    331e:	31 05       	cpc	r19, r1
    3320:	09 f4       	brne	.+2      	; 0x3324 <AccelStepper::computeNewSpeed()+0x10c>
    3322:	8d c0       	rjmp	.+282    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    3324:	6c 15       	cp	r22, r12
    3326:	7d 05       	cpc	r23, r13
    3328:	8e 05       	cpc	r24, r14
    332a:	9f 05       	cpc	r25, r15
    332c:	0c f0       	brlt	.+2      	; 0x3330 <AccelStepper::computeNewSpeed()+0x118>
    332e:	87 c0       	rjmp	.+270    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    3330:	8a 81       	ldd	r24, Y+2	; 0x02
    3332:	88 23       	and	r24, r24
    3334:	09 f4       	brne	.+2      	; 0x3338 <AccelStepper::computeNewSpeed()+0x120>
    3336:	83 c0       	rjmp	.+262    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    3338:	30 95       	com	r19
    333a:	20 95       	com	r18
    333c:	10 95       	com	r17
    333e:	01 95       	neg	r16
    3340:	1f 4f       	sbci	r17, 0xFF	; 255
    3342:	2f 4f       	sbci	r18, 0xFF	; 255
    3344:	3f 4f       	sbci	r19, 0xFF	; 255
    3346:	0c ab       	std	Y+52, r16	; 0x34
    3348:	1d ab       	std	Y+53, r17	; 0x35
    334a:	2e ab       	std	Y+54, r18	; 0x36
    334c:	3f ab       	std	Y+55, r19	; 0x37
    334e:	77 c0       	rjmp	.+238    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    3350:	01 15       	cp	r16, r1
    3352:	11 05       	cpc	r17, r1
    3354:	21 05       	cpc	r18, r1
    3356:	31 05       	cpc	r19, r1
    3358:	09 f4       	brne	.+2      	; 0x335c <AccelStepper::computeNewSpeed()+0x144>
    335a:	71 c0       	rjmp	.+226    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    335c:	88 24       	eor	r8, r8
    335e:	99 24       	eor	r9, r9
    3360:	54 01       	movw	r10, r8
    3362:	8c 18       	sub	r8, r12
    3364:	9d 08       	sbc	r9, r13
    3366:	ae 08       	sbc	r10, r14
    3368:	bf 08       	sbc	r11, r15
    336a:	68 15       	cp	r22, r8
    336c:	79 05       	cpc	r23, r9
    336e:	8a 05       	cpc	r24, r10
    3370:	9b 05       	cpc	r25, r11
    3372:	0c f0       	brlt	.+2      	; 0x3376 <AccelStepper::computeNewSpeed()+0x15e>
    3374:	64 c0       	rjmp	.+200    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	81 11       	cpse	r24, r1
    337a:	61 c0       	rjmp	.+194    	; 0x343e <AccelStepper::computeNewSpeed()+0x226>
    337c:	dd cf       	rjmp	.-70     	; 0x3338 <AccelStepper::computeNewSpeed()+0x120>
    337e:	cc ac       	ldd	r12, Y+60	; 0x3c
    3380:	dd ac       	ldd	r13, Y+61	; 0x3d
    3382:	ee ac       	ldd	r14, Y+62	; 0x3e
    3384:	ff ac       	ldd	r15, Y+63	; 0x3f
    3386:	a7 01       	movw	r20, r14
    3388:	96 01       	movw	r18, r12
    338a:	c7 01       	movw	r24, r14
    338c:	b6 01       	movw	r22, r12
    338e:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    3392:	2b 01       	movw	r4, r22
    3394:	3c 01       	movw	r6, r24
    3396:	c5 01       	movw	r24, r10
    3398:	b4 01       	movw	r22, r8
    339a:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	40 e8       	ldi	r20, 0x80	; 128
    33a4:	50 e4       	ldi	r21, 0x40	; 64
    33a6:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    33b6:	9b 01       	movw	r18, r22
    33b8:	ac 01       	movw	r20, r24
    33ba:	c3 01       	movw	r24, r6
    33bc:	b2 01       	movw	r22, r4
    33be:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    33c2:	9b 01       	movw	r18, r22
    33c4:	ac 01       	movw	r20, r24
    33c6:	c7 01       	movw	r24, r14
    33c8:	b6 01       	movw	r22, r12
    33ca:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    33ce:	3b 01       	movw	r6, r22
    33d0:	6c 01       	movw	r12, r24
    33d2:	fe 01       	movw	r30, r28
    33d4:	e0 5c       	subi	r30, 0xC0	; 192
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	e0 80       	ld	r14, Z
    33da:	f1 80       	ldd	r15, Z+1	; 0x01
    33dc:	02 81       	ldd	r16, Z+2	; 0x02
    33de:	13 81       	ldd	r17, Z+3	; 0x03
    33e0:	97 01       	movw	r18, r14
    33e2:	a8 01       	movw	r20, r16
    33e4:	0e 94 cf 39 	call	0x739e	; 0x739e <__gesf2>
    33e8:	18 16       	cp	r1, r24
    33ea:	14 f4       	brge	.+4      	; 0x33f0 <AccelStepper::computeNewSpeed()+0x1d8>
    33ec:	73 01       	movw	r14, r6
    33ee:	86 01       	movw	r16, r12
    33f0:	c7 01       	movw	r24, r14
    33f2:	d8 01       	movw	r26, r16
    33f4:	8c af       	std	Y+60, r24	; 0x3c
    33f6:	9d af       	std	Y+61, r25	; 0x3d
    33f8:	ae af       	std	Y+62, r26	; 0x3e
    33fa:	bf af       	std	Y+63, r27	; 0x3f
    33fc:	3a c0       	rjmp	.+116    	; 0x3472 <AccelStepper::computeNewSpeed()+0x25a>
    33fe:	0c a9       	ldd	r16, Y+52	; 0x34
    3400:	1d a9       	ldd	r17, Y+53	; 0x35
    3402:	2e a9       	ldd	r18, Y+54	; 0x36
    3404:	3f a9       	ldd	r19, Y+55	; 0x37
    3406:	1c 14       	cp	r1, r12
    3408:	1d 04       	cpc	r1, r13
    340a:	1e 04       	cpc	r1, r14
    340c:	1f 04       	cpc	r1, r15
    340e:	0c f4       	brge	.+2      	; 0x3412 <AccelStepper::computeNewSpeed()+0x1fa>
    3410:	68 cf       	rjmp	.-304    	; 0x32e2 <AccelStepper::computeNewSpeed()+0xca>
    3412:	10 16       	cp	r1, r16
    3414:	11 06       	cpc	r1, r17
    3416:	12 06       	cpc	r1, r18
    3418:	13 06       	cpc	r1, r19
    341a:	0c f0       	brlt	.+2      	; 0x341e <AccelStepper::computeNewSpeed()+0x206>
    341c:	99 cf       	rjmp	.-206    	; 0x3350 <AccelStepper::computeNewSpeed()+0x138>
    341e:	00 27       	eor	r16, r16
    3420:	11 27       	eor	r17, r17
    3422:	98 01       	movw	r18, r16
    3424:	0c 19       	sub	r16, r12
    3426:	1d 09       	sbc	r17, r13
    3428:	2e 09       	sbc	r18, r14
    342a:	3f 09       	sbc	r19, r15
    342c:	60 17       	cp	r22, r16
    342e:	71 07       	cpc	r23, r17
    3430:	82 07       	cpc	r24, r18
    3432:	93 07       	cpc	r25, r19
    3434:	0c f0       	brlt	.+2      	; 0x3438 <AccelStepper::computeNewSpeed()+0x220>
    3436:	62 cf       	rjmp	.-316    	; 0x32fc <AccelStepper::computeNewSpeed()+0xe4>
    3438:	2a 81       	ldd	r18, Y+2	; 0x02
    343a:	21 11       	cpse	r18, r1
    343c:	5f cf       	rjmp	.-322    	; 0x32fc <AccelStepper::computeNewSpeed()+0xe4>
    343e:	8c a8       	ldd	r8, Y+52	; 0x34
    3440:	9d a8       	ldd	r9, Y+53	; 0x35
    3442:	ae a8       	ldd	r10, Y+54	; 0x36
    3444:	bf a8       	ldd	r11, Y+55	; 0x37
    3446:	81 14       	cp	r8, r1
    3448:	91 04       	cpc	r9, r1
    344a:	a1 04       	cpc	r10, r1
    344c:	b1 04       	cpc	r11, r1
    344e:	09 f0       	breq	.+2      	; 0x3452 <AccelStepper::computeNewSpeed()+0x23a>
    3450:	96 cf       	rjmp	.-212    	; 0x337e <AccelStepper::computeNewSpeed()+0x166>
    3452:	88 ad       	ldd	r24, Y+56	; 0x38
    3454:	99 ad       	ldd	r25, Y+57	; 0x39
    3456:	aa ad       	ldd	r26, Y+58	; 0x3a
    3458:	bb ad       	ldd	r27, Y+59	; 0x3b
    345a:	8c af       	std	Y+60, r24	; 0x3c
    345c:	9d af       	std	Y+61, r25	; 0x3d
    345e:	ae af       	std	Y+62, r26	; 0x3e
    3460:	bf af       	std	Y+63, r27	; 0x3f
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	1c 14       	cp	r1, r12
    3466:	1d 04       	cpc	r1, r13
    3468:	1e 04       	cpc	r1, r14
    346a:	1f 04       	cpc	r1, r15
    346c:	0c f0       	brlt	.+2      	; 0x3470 <AccelStepper::computeNewSpeed()+0x258>
    346e:	80 e0       	ldi	r24, 0x00	; 0
    3470:	8a 83       	std	Y+2, r24	; 0x02
    3472:	3f ef       	ldi	r19, 0xFF	; 255
    3474:	83 1a       	sub	r8, r19
    3476:	93 0a       	sbc	r9, r19
    3478:	a3 0a       	sbc	r10, r19
    347a:	b3 0a       	sbc	r11, r19
    347c:	8c aa       	std	Y+52, r8	; 0x34
    347e:	9d aa       	std	Y+53, r9	; 0x35
    3480:	ae aa       	std	Y+54, r10	; 0x36
    3482:	bf aa       	std	Y+55, r11	; 0x37
    3484:	8c ac       	ldd	r8, Y+60	; 0x3c
    3486:	9d ac       	ldd	r9, Y+61	; 0x3d
    3488:	ae ac       	ldd	r10, Y+62	; 0x3e
    348a:	bf ac       	ldd	r11, Y+63	; 0x3f
    348c:	c5 01       	movw	r24, r10
    348e:	b4 01       	movw	r22, r8
    3490:	0e 94 ee 38 	call	0x71dc	; 0x71dc <__fixunssfsi>
    3494:	6b 01       	movw	r12, r22
    3496:	7c 01       	movw	r14, r24
    3498:	cb 82       	std	Y+3, r12	; 0x03
    349a:	dc 82       	std	Y+4, r13	; 0x04
    349c:	ed 82       	std	Y+5, r14	; 0x05
    349e:	fe 82       	std	Y+6, r15	; 0x06
    34a0:	a5 01       	movw	r20, r10
    34a2:	94 01       	movw	r18, r8
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	74 e2       	ldi	r23, 0x24	; 36
    34a8:	84 e7       	ldi	r24, 0x74	; 116
    34aa:	99 e4       	ldi	r25, 0x49	; 73
    34ac:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    34b0:	68 8f       	std	Y+24, r22	; 0x18
    34b2:	79 8f       	std	Y+25, r23	; 0x19
    34b4:	8a 8f       	std	Y+26, r24	; 0x1a
    34b6:	9b 8f       	std	Y+27, r25	; 0x1b
    34b8:	2a 81       	ldd	r18, Y+2	; 0x02
    34ba:	21 11       	cpse	r18, r1
    34bc:	ff ce       	rjmp	.-514    	; 0x32bc <AccelStepper::computeNewSpeed()+0xa4>
    34be:	90 58       	subi	r25, 0x80	; 128
    34c0:	68 8f       	std	Y+24, r22	; 0x18
    34c2:	79 8f       	std	Y+25, r23	; 0x19
    34c4:	8a 8f       	std	Y+26, r24	; 0x1a
    34c6:	9b 8f       	std	Y+27, r25	; 0x1b
    34c8:	f9 ce       	rjmp	.-526    	; 0x32bc <AccelStepper::computeNewSpeed()+0xa4>

000034ca <AccelStepper::step(long)>:
_ZN12AccelStepper4stepEl():
    34ca:	dc 01       	movw	r26, r24
    34cc:	17 96       	adiw	r26, 0x07	; 7
    34ce:	ec 91       	ld	r30, X
    34d0:	17 97       	sbiw	r26, 0x07	; 7
    34d2:	e9 30       	cpi	r30, 0x09	; 9
    34d4:	08 f0       	brcs	.+2      	; 0x34d8 <AccelStepper::step(long)+0xe>
    34d6:	38 c0       	rjmp	.+112    	; 0x3548 <AccelStepper::step(long)+0x7e>
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	ef 58       	subi	r30, 0x8F	; 143
    34dc:	f5 4e       	sbci	r31, 0xE5	; 229
    34de:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <__tablejump2__>
    34e2:	7a 1a       	sub	r7, r26
    34e4:	80 1a       	sub	r8, r16
    34e6:	86 1a       	sub	r8, r22
    34e8:	8c 1a       	sub	r8, r28
    34ea:	92 1a       	sub	r9, r18
    34ec:	a4 1a       	sub	r10, r20
    34ee:	98 1a       	sub	r9, r24
    34f0:	a4 1a       	sub	r10, r20
    34f2:	9e 1a       	sub	r9, r30
    34f4:	ed 91       	ld	r30, X+
    34f6:	fc 91       	ld	r31, X
    34f8:	06 84       	ldd	r0, Z+14	; 0x0e
    34fa:	f7 85       	ldd	r31, Z+15	; 0x0f
    34fc:	e0 2d       	mov	r30, r0
    34fe:	09 94       	ijmp
    3500:	ed 91       	ld	r30, X+
    3502:	fc 91       	ld	r31, X
    3504:	00 88       	ldd	r0, Z+16	; 0x10
    3506:	f1 89       	ldd	r31, Z+17	; 0x11
    3508:	e0 2d       	mov	r30, r0
    350a:	f9 cf       	rjmp	.-14     	; 0x34fe <AccelStepper::step(long)+0x34>
    350c:	ed 91       	ld	r30, X+
    350e:	fc 91       	ld	r31, X
    3510:	02 88       	ldd	r0, Z+18	; 0x12
    3512:	f3 89       	ldd	r31, Z+19	; 0x13
    3514:	e0 2d       	mov	r30, r0
    3516:	f3 cf       	rjmp	.-26     	; 0x34fe <AccelStepper::step(long)+0x34>
    3518:	ed 91       	ld	r30, X+
    351a:	fc 91       	ld	r31, X
    351c:	04 88       	ldd	r0, Z+20	; 0x14
    351e:	f5 89       	ldd	r31, Z+21	; 0x15
    3520:	e0 2d       	mov	r30, r0
    3522:	ed cf       	rjmp	.-38     	; 0x34fe <AccelStepper::step(long)+0x34>
    3524:	ed 91       	ld	r30, X+
    3526:	fc 91       	ld	r31, X
    3528:	06 88       	ldd	r0, Z+22	; 0x16
    352a:	f7 89       	ldd	r31, Z+23	; 0x17
    352c:	e0 2d       	mov	r30, r0
    352e:	e7 cf       	rjmp	.-50     	; 0x34fe <AccelStepper::step(long)+0x34>
    3530:	ed 91       	ld	r30, X+
    3532:	fc 91       	ld	r31, X
    3534:	00 8c       	ldd	r0, Z+24	; 0x18
    3536:	f1 8d       	ldd	r31, Z+25	; 0x19
    3538:	e0 2d       	mov	r30, r0
    353a:	e1 cf       	rjmp	.-62     	; 0x34fe <AccelStepper::step(long)+0x34>
    353c:	ed 91       	ld	r30, X+
    353e:	fc 91       	ld	r31, X
    3540:	02 8c       	ldd	r0, Z+26	; 0x1a
    3542:	f3 8d       	ldd	r31, Z+27	; 0x1b
    3544:	e0 2d       	mov	r30, r0
    3546:	db cf       	rjmp	.-74     	; 0x34fe <AccelStepper::step(long)+0x34>
    3548:	08 95       	ret

0000354a <AccelStepper::step6(long)>:
_ZN12AccelStepper5step6El():
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	ec 01       	movw	r28, r24
    3550:	cb 01       	movw	r24, r22
    3552:	ba 01       	movw	r22, r20
    3554:	26 e0       	ldi	r18, 0x06	; 6
    3556:	30 e0       	ldi	r19, 0x00	; 0
    3558:	40 e0       	ldi	r20, 0x00	; 0
    355a:	50 e0       	ldi	r21, 0x00	; 0
    355c:	0e 94 4a 3b 	call	0x7694	; 0x7694 <__divmodsi4>
    3560:	62 30       	cpi	r22, 0x02	; 2
    3562:	71 05       	cpc	r23, r1
    3564:	81 05       	cpc	r24, r1
    3566:	91 05       	cpc	r25, r1
    3568:	89 f1       	breq	.+98     	; 0x35cc <AccelStepper::step6(long)+0x82>
    356a:	6c f4       	brge	.+26     	; 0x3586 <AccelStepper::step6(long)+0x3c>
    356c:	61 15       	cp	r22, r1
    356e:	71 05       	cpc	r23, r1
    3570:	81 05       	cpc	r24, r1
    3572:	91 05       	cpc	r25, r1
    3574:	d1 f0       	breq	.+52     	; 0x35aa <AccelStepper::step6(long)+0x60>
    3576:	61 30       	cpi	r22, 0x01	; 1
    3578:	71 05       	cpc	r23, r1
    357a:	81 05       	cpc	r24, r1
    357c:	91 05       	cpc	r25, r1
    357e:	f9 f0       	breq	.+62     	; 0x35be <AccelStepper::step6(long)+0x74>
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	08 95       	ret
    3586:	64 30       	cpi	r22, 0x04	; 4
    3588:	71 05       	cpc	r23, r1
    358a:	81 05       	cpc	r24, r1
    358c:	91 05       	cpc	r25, r1
    358e:	61 f1       	breq	.+88     	; 0x35e8 <AccelStepper::step6(long)+0x9e>
    3590:	24 f1       	brlt	.+72     	; 0x35da <AccelStepper::step6(long)+0x90>
    3592:	65 30       	cpi	r22, 0x05	; 5
    3594:	71 05       	cpc	r23, r1
    3596:	81 05       	cpc	r24, r1
    3598:	91 05       	cpc	r25, r1
    359a:	91 f7       	brne	.-28     	; 0x3580 <AccelStepper::step6(long)+0x36>
    359c:	e8 81       	ld	r30, Y
    359e:	f9 81       	ldd	r31, Y+1	; 0x01
    35a0:	02 84       	ldd	r0, Z+10	; 0x0a
    35a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    35a4:	e0 2d       	mov	r30, r0
    35a6:	66 e0       	ldi	r22, 0x06	; 6
    35a8:	06 c0       	rjmp	.+12     	; 0x35b6 <AccelStepper::step6(long)+0x6c>
    35aa:	e8 81       	ld	r30, Y
    35ac:	f9 81       	ldd	r31, Y+1	; 0x01
    35ae:	02 84       	ldd	r0, Z+10	; 0x0a
    35b0:	f3 85       	ldd	r31, Z+11	; 0x0b
    35b2:	e0 2d       	mov	r30, r0
    35b4:	64 e0       	ldi	r22, 0x04	; 4
    35b6:	ce 01       	movw	r24, r28
    35b8:	df 91       	pop	r29
    35ba:	cf 91       	pop	r28
    35bc:	09 94       	ijmp
    35be:	e8 81       	ld	r30, Y
    35c0:	f9 81       	ldd	r31, Y+1	; 0x01
    35c2:	02 84       	ldd	r0, Z+10	; 0x0a
    35c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    35c6:	e0 2d       	mov	r30, r0
    35c8:	65 e0       	ldi	r22, 0x05	; 5
    35ca:	f5 cf       	rjmp	.-22     	; 0x35b6 <AccelStepper::step6(long)+0x6c>
    35cc:	e8 81       	ld	r30, Y
    35ce:	f9 81       	ldd	r31, Y+1	; 0x01
    35d0:	02 84       	ldd	r0, Z+10	; 0x0a
    35d2:	f3 85       	ldd	r31, Z+11	; 0x0b
    35d4:	e0 2d       	mov	r30, r0
    35d6:	61 e0       	ldi	r22, 0x01	; 1
    35d8:	ee cf       	rjmp	.-36     	; 0x35b6 <AccelStepper::step6(long)+0x6c>
    35da:	e8 81       	ld	r30, Y
    35dc:	f9 81       	ldd	r31, Y+1	; 0x01
    35de:	02 84       	ldd	r0, Z+10	; 0x0a
    35e0:	f3 85       	ldd	r31, Z+11	; 0x0b
    35e2:	e0 2d       	mov	r30, r0
    35e4:	63 e0       	ldi	r22, 0x03	; 3
    35e6:	e7 cf       	rjmp	.-50     	; 0x35b6 <AccelStepper::step6(long)+0x6c>
    35e8:	e8 81       	ld	r30, Y
    35ea:	f9 81       	ldd	r31, Y+1	; 0x01
    35ec:	02 84       	ldd	r0, Z+10	; 0x0a
    35ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    35f0:	e0 2d       	mov	r30, r0
    35f2:	62 e0       	ldi	r22, 0x02	; 2
    35f4:	e0 cf       	rjmp	.-64     	; 0x35b6 <AccelStepper::step6(long)+0x6c>

000035f6 <AccelStepper::step8(long)>:
_ZN12AccelStepper5step8El():
    35f6:	dc 01       	movw	r26, r24
    35f8:	ed 91       	ld	r30, X+
    35fa:	fc 91       	ld	r31, X
    35fc:	22 85       	ldd	r18, Z+10	; 0x0a
    35fe:	33 85       	ldd	r19, Z+11	; 0x0b
    3600:	47 70       	andi	r20, 0x07	; 7
    3602:	55 27       	eor	r21, r21
    3604:	66 27       	eor	r22, r22
    3606:	77 27       	eor	r23, r23
    3608:	41 50       	subi	r20, 0x01	; 1
    360a:	51 09       	sbc	r21, r1
    360c:	61 09       	sbc	r22, r1
    360e:	71 09       	sbc	r23, r1
    3610:	47 30       	cpi	r20, 0x07	; 7
    3612:	51 05       	cpc	r21, r1
    3614:	61 05       	cpc	r22, r1
    3616:	71 05       	cpc	r23, r1
    3618:	60 f4       	brcc	.+24     	; 0x3632 <AccelStepper::step8(long)+0x3c>
    361a:	fa 01       	movw	r30, r20
    361c:	ee 5e       	subi	r30, 0xEE	; 238
    361e:	f4 4e       	sbci	r31, 0xE4	; 228
    3620:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <__tablejump2__>
    3624:	1c 1b       	sub	r17, r28
    3626:	1e 1b       	sub	r17, r30
    3628:	20 1b       	sub	r18, r16
    362a:	22 1b       	sub	r18, r18
    362c:	24 1b       	sub	r18, r20
    362e:	26 1b       	sub	r18, r22
    3630:	28 1b       	sub	r18, r24
    3632:	61 e0       	ldi	r22, 0x01	; 1
    3634:	f9 01       	movw	r30, r18
    3636:	09 94       	ijmp
    3638:	65 e0       	ldi	r22, 0x05	; 5
    363a:	fc cf       	rjmp	.-8      	; 0x3634 <AccelStepper::step8(long)+0x3e>
    363c:	64 e0       	ldi	r22, 0x04	; 4
    363e:	fa cf       	rjmp	.-12     	; 0x3634 <AccelStepper::step8(long)+0x3e>
    3640:	66 e0       	ldi	r22, 0x06	; 6
    3642:	f8 cf       	rjmp	.-16     	; 0x3634 <AccelStepper::step8(long)+0x3e>
    3644:	62 e0       	ldi	r22, 0x02	; 2
    3646:	f6 cf       	rjmp	.-20     	; 0x3634 <AccelStepper::step8(long)+0x3e>
    3648:	6a e0       	ldi	r22, 0x0A	; 10
    364a:	f4 cf       	rjmp	.-24     	; 0x3634 <AccelStepper::step8(long)+0x3e>
    364c:	68 e0       	ldi	r22, 0x08	; 8
    364e:	f2 cf       	rjmp	.-28     	; 0x3634 <AccelStepper::step8(long)+0x3e>
    3650:	69 e0       	ldi	r22, 0x09	; 9
    3652:	f0 cf       	rjmp	.-32     	; 0x3634 <AccelStepper::step8(long)+0x3e>

00003654 <AccelStepper::setOutputPins(unsigned char)>:
_ZN12AccelStepper13setOutputPinsEh():
    3654:	cf 92       	push	r12
    3656:	df 92       	push	r13
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	dc 01       	movw	r26, r24
    3666:	17 96       	adiw	r26, 0x07	; 7
    3668:	cc 91       	ld	r28, X
    366a:	c4 30       	cpi	r28, 0x04	; 4
    366c:	39 f0       	breq	.+14     	; 0x367c <AccelStepper::setOutputPins(unsigned char)+0x28>
    366e:	c8 30       	cpi	r28, 0x08	; 8
    3670:	59 f1       	breq	.+86     	; 0x36c8 <AccelStepper::setOutputPins(unsigned char)+0x74>
    3672:	c3 30       	cpi	r28, 0x03	; 3
    3674:	19 f0       	breq	.+6      	; 0x367c <AccelStepper::setOutputPins(unsigned char)+0x28>
    3676:	c6 30       	cpi	r28, 0x06	; 6
    3678:	49 f1       	breq	.+82     	; 0x36cc <AccelStepper::setOutputPins(unsigned char)+0x78>
    367a:	c2 e0       	ldi	r28, 0x02	; 2
    367c:	8c 01       	movw	r16, r24
    367e:	08 5f       	subi	r16, 0xF8	; 248
    3680:	1f 4f       	sbci	r17, 0xFF	; 255
    3682:	f1 2c       	mov	r15, r1
    3684:	e1 2c       	mov	r14, r1
    3686:	c6 2e       	mov	r12, r22
    3688:	d1 2c       	mov	r13, r1
    368a:	d1 e0       	ldi	r29, 0x01	; 1
    368c:	f8 01       	movw	r30, r16
    368e:	64 81       	ldd	r22, Z+4	; 0x04
    3690:	c6 01       	movw	r24, r12
    3692:	0e 2c       	mov	r0, r14
    3694:	02 c0       	rjmp	.+4      	; 0x369a <AccelStepper::setOutputPins(unsigned char)+0x46>
    3696:	95 95       	asr	r25
    3698:	87 95       	ror	r24
    369a:	0a 94       	dec	r0
    369c:	e2 f7       	brpl	.-8      	; 0x3696 <AccelStepper::setOutputPins(unsigned char)+0x42>
    369e:	80 fd       	sbrc	r24, 0
    36a0:	6d 27       	eor	r22, r29
    36a2:	0f 5f       	subi	r16, 0xFF	; 255
    36a4:	1f 4f       	sbci	r17, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
    36ac:	bf ef       	ldi	r27, 0xFF	; 255
    36ae:	eb 1a       	sub	r14, r27
    36b0:	fb 0a       	sbc	r15, r27
    36b2:	ec 16       	cp	r14, r28
    36b4:	58 f3       	brcs	.-42     	; 0x368c <AccelStepper::setOutputPins(unsigned char)+0x38>
    36b6:	df 91       	pop	r29
    36b8:	cf 91       	pop	r28
    36ba:	1f 91       	pop	r17
    36bc:	0f 91       	pop	r16
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	df 90       	pop	r13
    36c4:	cf 90       	pop	r12
    36c6:	08 95       	ret
    36c8:	c4 e0       	ldi	r28, 0x04	; 4
    36ca:	d8 cf       	rjmp	.-80     	; 0x367c <AccelStepper::setOutputPins(unsigned char)+0x28>
    36cc:	c3 e0       	ldi	r28, 0x03	; 3
    36ce:	d6 cf       	rjmp	.-84     	; 0x367c <AccelStepper::setOutputPins(unsigned char)+0x28>

000036d0 <AccelStepper::step1(long)>:
_ZN12AccelStepper5step1El():
    36d0:	cf 93       	push	r28
    36d2:	df 93       	push	r29
    36d4:	ec 01       	movw	r28, r24
    36d6:	e8 81       	ld	r30, Y
    36d8:	f9 81       	ldd	r31, Y+1	; 0x01
    36da:	02 84       	ldd	r0, Z+10	; 0x0a
    36dc:	f3 85       	ldd	r31, Z+11	; 0x0b
    36de:	e0 2d       	mov	r30, r0
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	60 e0       	ldi	r22, 0x00	; 0
    36e4:	81 11       	cpse	r24, r1
    36e6:	62 e0       	ldi	r22, 0x02	; 2
    36e8:	ce 01       	movw	r24, r28
    36ea:	09 95       	icall
    36ec:	e8 81       	ld	r30, Y
    36ee:	f9 81       	ldd	r31, Y+1	; 0x01
    36f0:	02 84       	ldd	r0, Z+10	; 0x0a
    36f2:	f3 85       	ldd	r31, Z+11	; 0x0b
    36f4:	e0 2d       	mov	r30, r0
    36f6:	8a 81       	ldd	r24, Y+2	; 0x02
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	81 11       	cpse	r24, r1
    36fc:	63 e0       	ldi	r22, 0x03	; 3
    36fe:	ce 01       	movw	r24, r28
    3700:	09 95       	icall
    3702:	8c a5       	ldd	r24, Y+44	; 0x2c
    3704:	9d a5       	ldd	r25, Y+45	; 0x2d
    3706:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <delayMicroseconds>
    370a:	e8 81       	ld	r30, Y
    370c:	f9 81       	ldd	r31, Y+1	; 0x01
    370e:	02 84       	ldd	r0, Z+10	; 0x0a
    3710:	f3 85       	ldd	r31, Z+11	; 0x0b
    3712:	e0 2d       	mov	r30, r0
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	81 11       	cpse	r24, r1
    371a:	62 e0       	ldi	r22, 0x02	; 2
    371c:	ce 01       	movw	r24, r28
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	09 94       	ijmp

00003724 <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD0Ev():
    3724:	64 e4       	ldi	r22, 0x44	; 68
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	0c 94 08 36 	jmp	0x6c10	; 0x6c10 <operator delete(void*, unsigned int)>

0000372c <AccelStepper::step0(long)>:
_ZN12AccelStepper5step0El():
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	ec 01       	movw	r28, r24
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	a9 01       	movw	r20, r18
    3738:	68 8d       	ldd	r22, Y+24	; 0x18
    373a:	79 8d       	ldd	r23, Y+25	; 0x19
    373c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    373e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3740:	0e 94 cf 39 	call	0x739e	; 0x739e <__gesf2>
    3744:	18 16       	cp	r1, r24
    3746:	2c f4       	brge	.+10     	; 0x3752 <AccelStepper::step0(long)+0x26>
    3748:	e8 a9       	ldd	r30, Y+48	; 0x30
    374a:	f9 a9       	ldd	r31, Y+49	; 0x31
    374c:	df 91       	pop	r29
    374e:	cf 91       	pop	r28
    3750:	09 94       	ijmp
    3752:	ea a9       	ldd	r30, Y+50	; 0x32
    3754:	fb a9       	ldd	r31, Y+51	; 0x33
    3756:	fa cf       	rjmp	.-12     	; 0x374c <AccelStepper::step0(long)+0x20>

00003758 <AccelStepper::step2(long)>:
_ZN12AccelStepper5step2El():
    3758:	dc 01       	movw	r26, r24
    375a:	ed 91       	ld	r30, X+
    375c:	fc 91       	ld	r31, X
    375e:	02 84       	ldd	r0, Z+10	; 0x0a
    3760:	f3 85       	ldd	r31, Z+11	; 0x0b
    3762:	e0 2d       	mov	r30, r0
    3764:	43 70       	andi	r20, 0x03	; 3
    3766:	55 27       	eor	r21, r21
    3768:	66 27       	eor	r22, r22
    376a:	77 27       	eor	r23, r23
    376c:	42 30       	cpi	r20, 0x02	; 2
    376e:	51 05       	cpc	r21, r1
    3770:	61 05       	cpc	r22, r1
    3772:	71 05       	cpc	r23, r1
    3774:	71 f0       	breq	.+28     	; 0x3792 <AccelStepper::step2(long)+0x3a>
    3776:	43 30       	cpi	r20, 0x03	; 3
    3778:	51 05       	cpc	r21, r1
    377a:	61 05       	cpc	r22, r1
    377c:	71 05       	cpc	r23, r1
    377e:	59 f0       	breq	.+22     	; 0x3796 <AccelStepper::step2(long)+0x3e>
    3780:	41 30       	cpi	r20, 0x01	; 1
    3782:	51 05       	cpc	r21, r1
    3784:	61 05       	cpc	r22, r1
    3786:	71 05       	cpc	r23, r1
    3788:	11 f0       	breq	.+4      	; 0x378e <AccelStepper::step2(long)+0x36>
    378a:	62 e0       	ldi	r22, 0x02	; 2
    378c:	09 94       	ijmp
    378e:	63 e0       	ldi	r22, 0x03	; 3
    3790:	fd cf       	rjmp	.-6      	; 0x378c <AccelStepper::step2(long)+0x34>
    3792:	61 e0       	ldi	r22, 0x01	; 1
    3794:	fb cf       	rjmp	.-10     	; 0x378c <AccelStepper::step2(long)+0x34>
    3796:	60 e0       	ldi	r22, 0x00	; 0
    3798:	f9 cf       	rjmp	.-14     	; 0x378c <AccelStepper::step2(long)+0x34>

0000379a <AccelStepper::step3(long)>:
_ZN12AccelStepper5step3El():
    379a:	cf 93       	push	r28
    379c:	df 93       	push	r29
    379e:	ec 01       	movw	r28, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	ba 01       	movw	r22, r20
    37a4:	23 e0       	ldi	r18, 0x03	; 3
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	50 e0       	ldi	r21, 0x00	; 0
    37ac:	0e 94 4a 3b 	call	0x7694	; 0x7694 <__divmodsi4>
    37b0:	61 30       	cpi	r22, 0x01	; 1
    37b2:	71 05       	cpc	r23, r1
    37b4:	81 05       	cpc	r24, r1
    37b6:	91 05       	cpc	r25, r1
    37b8:	99 f0       	breq	.+38     	; 0x37e0 <AccelStepper::step3(long)+0x46>
    37ba:	62 30       	cpi	r22, 0x02	; 2
    37bc:	71 05       	cpc	r23, r1
    37be:	81 05       	cpc	r24, r1
    37c0:	91 05       	cpc	r25, r1
    37c2:	a9 f0       	breq	.+42     	; 0x37ee <AccelStepper::step3(long)+0x54>
    37c4:	67 2b       	or	r22, r23
    37c6:	68 2b       	or	r22, r24
    37c8:	69 2b       	or	r22, r25
    37ca:	c1 f4       	brne	.+48     	; 0x37fc <AccelStepper::step3(long)+0x62>
    37cc:	e8 81       	ld	r30, Y
    37ce:	f9 81       	ldd	r31, Y+1	; 0x01
    37d0:	02 84       	ldd	r0, Z+10	; 0x0a
    37d2:	f3 85       	ldd	r31, Z+11	; 0x0b
    37d4:	e0 2d       	mov	r30, r0
    37d6:	64 e0       	ldi	r22, 0x04	; 4
    37d8:	ce 01       	movw	r24, r28
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	09 94       	ijmp
    37e0:	e8 81       	ld	r30, Y
    37e2:	f9 81       	ldd	r31, Y+1	; 0x01
    37e4:	02 84       	ldd	r0, Z+10	; 0x0a
    37e6:	f3 85       	ldd	r31, Z+11	; 0x0b
    37e8:	e0 2d       	mov	r30, r0
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	f5 cf       	rjmp	.-22     	; 0x37d8 <AccelStepper::step3(long)+0x3e>
    37ee:	e8 81       	ld	r30, Y
    37f0:	f9 81       	ldd	r31, Y+1	; 0x01
    37f2:	02 84       	ldd	r0, Z+10	; 0x0a
    37f4:	f3 85       	ldd	r31, Z+11	; 0x0b
    37f6:	e0 2d       	mov	r30, r0
    37f8:	62 e0       	ldi	r22, 0x02	; 2
    37fa:	ee cf       	rjmp	.-36     	; 0x37d8 <AccelStepper::step3(long)+0x3e>
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <AccelStepper::step4(long)>:
_ZN12AccelStepper5step4El():
    3802:	dc 01       	movw	r26, r24
    3804:	ed 91       	ld	r30, X+
    3806:	fc 91       	ld	r31, X
    3808:	02 84       	ldd	r0, Z+10	; 0x0a
    380a:	f3 85       	ldd	r31, Z+11	; 0x0b
    380c:	e0 2d       	mov	r30, r0
    380e:	43 70       	andi	r20, 0x03	; 3
    3810:	55 27       	eor	r21, r21
    3812:	66 27       	eor	r22, r22
    3814:	77 27       	eor	r23, r23
    3816:	42 30       	cpi	r20, 0x02	; 2
    3818:	51 05       	cpc	r21, r1
    381a:	61 05       	cpc	r22, r1
    381c:	71 05       	cpc	r23, r1
    381e:	71 f0       	breq	.+28     	; 0x383c <AccelStepper::step4(long)+0x3a>
    3820:	43 30       	cpi	r20, 0x03	; 3
    3822:	51 05       	cpc	r21, r1
    3824:	61 05       	cpc	r22, r1
    3826:	71 05       	cpc	r23, r1
    3828:	59 f0       	breq	.+22     	; 0x3840 <AccelStepper::step4(long)+0x3e>
    382a:	41 30       	cpi	r20, 0x01	; 1
    382c:	51 05       	cpc	r21, r1
    382e:	61 05       	cpc	r22, r1
    3830:	71 05       	cpc	r23, r1
    3832:	11 f0       	breq	.+4      	; 0x3838 <AccelStepper::step4(long)+0x36>
    3834:	65 e0       	ldi	r22, 0x05	; 5
    3836:	09 94       	ijmp
    3838:	66 e0       	ldi	r22, 0x06	; 6
    383a:	fd cf       	rjmp	.-6      	; 0x3836 <AccelStepper::step4(long)+0x34>
    383c:	6a e0       	ldi	r22, 0x0A	; 10
    383e:	fb cf       	rjmp	.-10     	; 0x3836 <AccelStepper::step4(long)+0x34>
    3840:	69 e0       	ldi	r22, 0x09	; 9
    3842:	f9 cf       	rjmp	.-14     	; 0x3836 <AccelStepper::step4(long)+0x34>

00003844 <AccelStepper::disableOutputs()>:
_ZN12AccelStepper14disableOutputsEv():
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	fc 01       	movw	r30, r24
    384a:	27 81       	ldd	r18, Z+7	; 0x07
    384c:	22 23       	and	r18, r18
    384e:	a9 f0       	breq	.+42     	; 0x387a <AccelStepper::disableOutputs()+0x36>
    3850:	ec 01       	movw	r28, r24
    3852:	01 90       	ld	r0, Z+
    3854:	f0 81       	ld	r31, Z
    3856:	e0 2d       	mov	r30, r0
    3858:	02 84       	ldd	r0, Z+10	; 0x0a
    385a:	f3 85       	ldd	r31, Z+11	; 0x0b
    385c:	e0 2d       	mov	r30, r0
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	09 95       	icall
    3862:	8f a5       	ldd	r24, Y+47	; 0x2f
    3864:	8f 3f       	cpi	r24, 0xFF	; 255
    3866:	49 f0       	breq	.+18     	; 0x387a <AccelStepper::disableOutputs()+0x36>
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    386e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3870:	8f a5       	ldd	r24, Y+47	; 0x2f
    3872:	df 91       	pop	r29
    3874:	cf 91       	pop	r28
    3876:	0c 94 ac 37 	jmp	0x6f58	; 0x6f58 <digitalWrite>
    387a:	df 91       	pop	r29
    387c:	cf 91       	pop	r28
    387e:	08 95       	ret

00003880 <AccelStepper::enableOutputs()>:
_ZN12AccelStepper13enableOutputsEv():
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	fc 01       	movw	r30, r24
    3886:	27 81       	ldd	r18, Z+7	; 0x07
    3888:	22 23       	and	r18, r18
    388a:	59 f1       	breq	.+86     	; 0x38e2 <AccelStepper::enableOutputs()+0x62>
    388c:	ec 01       	movw	r28, r24
    388e:	61 e0       	ldi	r22, 0x01	; 1
    3890:	80 85       	ldd	r24, Z+8	; 0x08
    3892:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    3896:	61 e0       	ldi	r22, 0x01	; 1
    3898:	89 85       	ldd	r24, Y+9	; 0x09
    389a:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    389e:	8f 81       	ldd	r24, Y+7	; 0x07
    38a0:	84 30       	cpi	r24, 0x04	; 4
    38a2:	11 f0       	breq	.+4      	; 0x38a8 <AccelStepper::enableOutputs()+0x28>
    38a4:	88 30       	cpi	r24, 0x08	; 8
    38a6:	b1 f4       	brne	.+44     	; 0x38d4 <AccelStepper::enableOutputs()+0x54>
    38a8:	61 e0       	ldi	r22, 0x01	; 1
    38aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    38ac:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    38b0:	61 e0       	ldi	r22, 0x01	; 1
    38b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    38b4:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    38b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ba:	8f 3f       	cpi	r24, 0xFF	; 255
    38bc:	91 f0       	breq	.+36     	; 0x38e2 <AccelStepper::enableOutputs()+0x62>
    38be:	61 e0       	ldi	r22, 0x01	; 1
    38c0:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    38c4:	6e a5       	ldd	r22, Y+46	; 0x2e
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	68 27       	eor	r22, r24
    38ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	0c 94 ac 37 	jmp	0x6f58	; 0x6f58 <digitalWrite>
    38d4:	83 30       	cpi	r24, 0x03	; 3
    38d6:	11 f0       	breq	.+4      	; 0x38dc <AccelStepper::enableOutputs()+0x5c>
    38d8:	86 30       	cpi	r24, 0x06	; 6
    38da:	71 f7       	brne	.-36     	; 0x38b8 <AccelStepper::enableOutputs()+0x38>
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e0:	e9 cf       	rjmp	.-46     	; 0x38b4 <AccelStepper::enableOutputs()+0x34>
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	08 95       	ret

000038e8 <AccelStepper::setAcceleration(float) [clone .part.10]>:
_ZN12AccelStepper15setAccelerationEf():
    38e8:	4f 92       	push	r4
    38ea:	5f 92       	push	r5
    38ec:	6f 92       	push	r6
    38ee:	7f 92       	push	r7
    38f0:	8f 92       	push	r8
    38f2:	9f 92       	push	r9
    38f4:	af 92       	push	r10
    38f6:	bf 92       	push	r11
    38f8:	cf 92       	push	r12
    38fa:	df 92       	push	r13
    38fc:	ef 92       	push	r14
    38fe:	ff 92       	push	r15
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	ec 01       	movw	r28, r24
    3906:	6a 01       	movw	r12, r20
    3908:	7b 01       	movw	r14, r22
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	a9 01       	movw	r20, r18
    3910:	cb 01       	movw	r24, r22
    3912:	b6 01       	movw	r22, r12
    3914:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3918:	87 ff       	sbrs	r24, 7
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <AccelStepper::setAcceleration(float) [clone .part.10]+0x3c>
    391c:	f7 fa       	bst	r15, 7
    391e:	f0 94       	com	r15
    3920:	f7 f8       	bld	r15, 7
    3922:	f0 94       	com	r15
    3924:	88 a0       	ldd	r8, Y+32	; 0x20
    3926:	99 a0       	ldd	r9, Y+33	; 0x21
    3928:	aa a0       	ldd	r10, Y+34	; 0x22
    392a:	bb a0       	ldd	r11, Y+35	; 0x23
    392c:	a7 01       	movw	r20, r14
    392e:	96 01       	movw	r18, r12
    3930:	c5 01       	movw	r24, r10
    3932:	b4 01       	movw	r22, r8
    3934:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3938:	88 23       	and	r24, r24
    393a:	09 f4       	brne	.+2      	; 0x393e <AccelStepper::setAcceleration(float) [clone .part.10]+0x56>
    393c:	4d c0       	rjmp	.+154    	; 0x39d8 <AccelStepper::setAcceleration(float) [clone .part.10]+0xf0>
    393e:	6c a9       	ldd	r22, Y+52	; 0x34
    3940:	7d a9       	ldd	r23, Y+53	; 0x35
    3942:	8e a9       	ldd	r24, Y+54	; 0x36
    3944:	9f a9       	ldd	r25, Y+55	; 0x37
    3946:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
    394a:	2b 01       	movw	r4, r22
    394c:	3c 01       	movw	r6, r24
    394e:	a7 01       	movw	r20, r14
    3950:	96 01       	movw	r18, r12
    3952:	c5 01       	movw	r24, r10
    3954:	b4 01       	movw	r22, r8
    3956:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    395a:	9b 01       	movw	r18, r22
    395c:	ac 01       	movw	r20, r24
    395e:	c3 01       	movw	r24, r6
    3960:	b2 01       	movw	r22, r4
    3962:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    3966:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__fixsfsi>
    396a:	6c ab       	std	Y+52, r22	; 0x34
    396c:	7d ab       	std	Y+53, r23	; 0x35
    396e:	8e ab       	std	Y+54, r24	; 0x36
    3970:	9f ab       	std	Y+55, r25	; 0x37
    3972:	a7 01       	movw	r20, r14
    3974:	96 01       	movw	r18, r12
    3976:	60 e0       	ldi	r22, 0x00	; 0
    3978:	70 e0       	ldi	r23, 0x00	; 0
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	90 e4       	ldi	r25, 0x40	; 64
    397e:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    3982:	0e 94 97 3a 	call	0x752e	; 0x752e <sqrt>
    3986:	26 e5       	ldi	r18, 0x56	; 86
    3988:	3e e0       	ldi	r19, 0x0E	; 14
    398a:	4d e2       	ldi	r20, 0x2D	; 45
    398c:	5f e3       	ldi	r21, 0x3F	; 63
    398e:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	34 e2       	ldi	r19, 0x24	; 36
    3996:	44 e7       	ldi	r20, 0x74	; 116
    3998:	59 e4       	ldi	r21, 0x49	; 73
    399a:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    399e:	68 af       	std	Y+56, r22	; 0x38
    39a0:	79 af       	std	Y+57, r23	; 0x39
    39a2:	8a af       	std	Y+58, r24	; 0x3a
    39a4:	9b af       	std	Y+59, r25	; 0x3b
    39a6:	c8 a2       	std	Y+32, r12	; 0x20
    39a8:	d9 a2       	std	Y+33, r13	; 0x21
    39aa:	ea a2       	std	Y+34, r14	; 0x22
    39ac:	fb a2       	std	Y+35, r15	; 0x23
    39ae:	e8 81       	ld	r30, Y
    39b0:	f9 81       	ldd	r31, Y+1	; 0x01
    39b2:	00 84       	ldd	r0, Z+8	; 0x08
    39b4:	f1 85       	ldd	r31, Z+9	; 0x09
    39b6:	e0 2d       	mov	r30, r0
    39b8:	ce 01       	movw	r24, r28
    39ba:	df 91       	pop	r29
    39bc:	cf 91       	pop	r28
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	df 90       	pop	r13
    39c4:	cf 90       	pop	r12
    39c6:	bf 90       	pop	r11
    39c8:	af 90       	pop	r10
    39ca:	9f 90       	pop	r9
    39cc:	8f 90       	pop	r8
    39ce:	7f 90       	pop	r7
    39d0:	6f 90       	pop	r6
    39d2:	5f 90       	pop	r5
    39d4:	4f 90       	pop	r4
    39d6:	09 94       	ijmp
    39d8:	df 91       	pop	r29
    39da:	cf 91       	pop	r28
    39dc:	ff 90       	pop	r15
    39de:	ef 90       	pop	r14
    39e0:	df 90       	pop	r13
    39e2:	cf 90       	pop	r12
    39e4:	bf 90       	pop	r11
    39e6:	af 90       	pop	r10
    39e8:	9f 90       	pop	r9
    39ea:	8f 90       	pop	r8
    39ec:	7f 90       	pop	r7
    39ee:	6f 90       	pop	r6
    39f0:	5f 90       	pop	r5
    39f2:	4f 90       	pop	r4
    39f4:	08 95       	ret

000039f6 <AccelStepper::moveTo(long)>:
_ZN12AccelStepper6moveToEl():
    39f6:	0f 93       	push	r16
    39f8:	1f 93       	push	r17
    39fa:	dc 01       	movw	r26, r24
    39fc:	54 96       	adiw	r26, 0x14	; 20
    39fe:	0d 91       	ld	r16, X+
    3a00:	1d 91       	ld	r17, X+
    3a02:	2d 91       	ld	r18, X+
    3a04:	3c 91       	ld	r19, X
    3a06:	57 97       	sbiw	r26, 0x17	; 23
    3a08:	04 17       	cp	r16, r20
    3a0a:	15 07       	cpc	r17, r21
    3a0c:	26 07       	cpc	r18, r22
    3a0e:	37 07       	cpc	r19, r23
    3a10:	71 f0       	breq	.+28     	; 0x3a2e <AccelStepper::moveTo(long)+0x38>
    3a12:	fc 01       	movw	r30, r24
    3a14:	44 8b       	std	Z+20, r20	; 0x14
    3a16:	55 8b       	std	Z+21, r21	; 0x15
    3a18:	66 8b       	std	Z+22, r22	; 0x16
    3a1a:	77 8b       	std	Z+23, r23	; 0x17
    3a1c:	01 90       	ld	r0, Z+
    3a1e:	f0 81       	ld	r31, Z
    3a20:	e0 2d       	mov	r30, r0
    3a22:	00 84       	ldd	r0, Z+8	; 0x08
    3a24:	f1 85       	ldd	r31, Z+9	; 0x09
    3a26:	e0 2d       	mov	r30, r0
    3a28:	1f 91       	pop	r17
    3a2a:	0f 91       	pop	r16
    3a2c:	09 94       	ijmp
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	08 95       	ret

00003a34 <AccelStepper::runSpeed()>:
_ZN12AccelStepper8runSpeedEv():
    3a34:	cf 92       	push	r12
    3a36:	df 92       	push	r13
    3a38:	ef 92       	push	r14
    3a3a:	ff 92       	push	r15
    3a3c:	cf 93       	push	r28
    3a3e:	df 93       	push	r29
    3a40:	fc 01       	movw	r30, r24
    3a42:	43 81       	ldd	r20, Z+3	; 0x03
    3a44:	54 81       	ldd	r21, Z+4	; 0x04
    3a46:	65 81       	ldd	r22, Z+5	; 0x05
    3a48:	76 81       	ldd	r23, Z+6	; 0x06
    3a4a:	45 2b       	or	r20, r21
    3a4c:	46 2b       	or	r20, r22
    3a4e:	47 2b       	or	r20, r23
    3a50:	41 f4       	brne	.+16     	; 0x3a62 <AccelStepper::runSpeed()+0x2e>
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	df 91       	pop	r29
    3a56:	cf 91       	pop	r28
    3a58:	ff 90       	pop	r15
    3a5a:	ef 90       	pop	r14
    3a5c:	df 90       	pop	r13
    3a5e:	cf 90       	pop	r12
    3a60:	08 95       	ret
    3a62:	ec 01       	movw	r28, r24
    3a64:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <micros>
    3a68:	6b 01       	movw	r12, r22
    3a6a:	7c 01       	movw	r14, r24
    3a6c:	88 a5       	ldd	r24, Y+40	; 0x28
    3a6e:	99 a5       	ldd	r25, Y+41	; 0x29
    3a70:	aa a5       	ldd	r26, Y+42	; 0x2a
    3a72:	bb a5       	ldd	r27, Y+43	; 0x2b
    3a74:	b7 01       	movw	r22, r14
    3a76:	a6 01       	movw	r20, r12
    3a78:	48 1b       	sub	r20, r24
    3a7a:	59 0b       	sbc	r21, r25
    3a7c:	6a 0b       	sbc	r22, r26
    3a7e:	7b 0b       	sbc	r23, r27
    3a80:	8b 81       	ldd	r24, Y+3	; 0x03
    3a82:	9c 81       	ldd	r25, Y+4	; 0x04
    3a84:	ad 81       	ldd	r26, Y+5	; 0x05
    3a86:	be 81       	ldd	r27, Y+6	; 0x06
    3a88:	48 17       	cp	r20, r24
    3a8a:	59 07       	cpc	r21, r25
    3a8c:	6a 07       	cpc	r22, r26
    3a8e:	7b 07       	cpc	r23, r27
    3a90:	00 f3       	brcs	.-64     	; 0x3a52 <AccelStepper::runSpeed()+0x1e>
    3a92:	88 89       	ldd	r24, Y+16	; 0x10
    3a94:	99 89       	ldd	r25, Y+17	; 0x11
    3a96:	aa 89       	ldd	r26, Y+18	; 0x12
    3a98:	bb 89       	ldd	r27, Y+19	; 0x13
    3a9a:	2a 81       	ldd	r18, Y+2	; 0x02
    3a9c:	22 23       	and	r18, r18
    3a9e:	c1 f0       	breq	.+48     	; 0x3ad0 <AccelStepper::runSpeed()+0x9c>
    3aa0:	01 96       	adiw	r24, 0x01	; 1
    3aa2:	a1 1d       	adc	r26, r1
    3aa4:	b1 1d       	adc	r27, r1
    3aa6:	88 8b       	std	Y+16, r24	; 0x10
    3aa8:	99 8b       	std	Y+17, r25	; 0x11
    3aaa:	aa 8b       	std	Y+18, r26	; 0x12
    3aac:	bb 8b       	std	Y+19, r27	; 0x13
    3aae:	48 89       	ldd	r20, Y+16	; 0x10
    3ab0:	59 89       	ldd	r21, Y+17	; 0x11
    3ab2:	6a 89       	ldd	r22, Y+18	; 0x12
    3ab4:	7b 89       	ldd	r23, Y+19	; 0x13
    3ab6:	e8 81       	ld	r30, Y
    3ab8:	f9 81       	ldd	r31, Y+1	; 0x01
    3aba:	04 84       	ldd	r0, Z+12	; 0x0c
    3abc:	f5 85       	ldd	r31, Z+13	; 0x0d
    3abe:	e0 2d       	mov	r30, r0
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	09 95       	icall
    3ac4:	c8 a6       	std	Y+40, r12	; 0x28
    3ac6:	d9 a6       	std	Y+41, r13	; 0x29
    3ac8:	ea a6       	std	Y+42, r14	; 0x2a
    3aca:	fb a6       	std	Y+43, r15	; 0x2b
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	c2 cf       	rjmp	.-124    	; 0x3a54 <AccelStepper::runSpeed()+0x20>
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	a1 09       	sbc	r26, r1
    3ad4:	b1 09       	sbc	r27, r1
    3ad6:	e7 cf       	rjmp	.-50     	; 0x3aa6 <AccelStepper::runSpeed()+0x72>

00003ad8 <AccelStepper::distanceToGo()>:
_ZN12AccelStepper12distanceToGoEv():
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	fc 01       	movw	r30, r24
    3ade:	64 89       	ldd	r22, Z+20	; 0x14
    3ae0:	75 89       	ldd	r23, Z+21	; 0x15
    3ae2:	86 89       	ldd	r24, Z+22	; 0x16
    3ae4:	97 89       	ldd	r25, Z+23	; 0x17
    3ae6:	00 89       	ldd	r16, Z+16	; 0x10
    3ae8:	11 89       	ldd	r17, Z+17	; 0x11
    3aea:	22 89       	ldd	r18, Z+18	; 0x12
    3aec:	33 89       	ldd	r19, Z+19	; 0x13
    3aee:	60 1b       	sub	r22, r16
    3af0:	71 0b       	sbc	r23, r17
    3af2:	82 0b       	sbc	r24, r18
    3af4:	93 0b       	sbc	r25, r19
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret

00003afc <AccelStepper::currentPosition()>:
_ZN12AccelStepper15currentPositionEv():
    3afc:	fc 01       	movw	r30, r24
    3afe:	60 89       	ldd	r22, Z+16	; 0x10
    3b00:	71 89       	ldd	r23, Z+17	; 0x11
    3b02:	82 89       	ldd	r24, Z+18	; 0x12
    3b04:	93 89       	ldd	r25, Z+19	; 0x13
    3b06:	08 95       	ret

00003b08 <AccelStepper::setCurrentPosition(long)>:
_ZN12AccelStepper18setCurrentPositionEl():
    3b08:	fc 01       	movw	r30, r24
    3b0a:	40 8b       	std	Z+16, r20	; 0x10
    3b0c:	51 8b       	std	Z+17, r21	; 0x11
    3b0e:	62 8b       	std	Z+18, r22	; 0x12
    3b10:	73 8b       	std	Z+19, r23	; 0x13
    3b12:	44 8b       	std	Z+20, r20	; 0x14
    3b14:	55 8b       	std	Z+21, r21	; 0x15
    3b16:	66 8b       	std	Z+22, r22	; 0x16
    3b18:	77 8b       	std	Z+23, r23	; 0x17
    3b1a:	14 aa       	std	Z+52, r1	; 0x34
    3b1c:	15 aa       	std	Z+53, r1	; 0x35
    3b1e:	16 aa       	std	Z+54, r1	; 0x36
    3b20:	17 aa       	std	Z+55, r1	; 0x37
    3b22:	13 82       	std	Z+3, r1	; 0x03
    3b24:	14 82       	std	Z+4, r1	; 0x04
    3b26:	15 82       	std	Z+5, r1	; 0x05
    3b28:	16 82       	std	Z+6, r1	; 0x06
    3b2a:	10 8e       	std	Z+24, r1	; 0x18
    3b2c:	11 8e       	std	Z+25, r1	; 0x19
    3b2e:	12 8e       	std	Z+26, r1	; 0x1a
    3b30:	13 8e       	std	Z+27, r1	; 0x1b
    3b32:	08 95       	ret

00003b34 <AccelStepper::setMaxSpeed(float)>:
_ZN12AccelStepper11setMaxSpeedEf():
    3b34:	cf 92       	push	r12
    3b36:	df 92       	push	r13
    3b38:	ef 92       	push	r14
    3b3a:	ff 92       	push	r15
    3b3c:	0f 93       	push	r16
    3b3e:	1f 93       	push	r17
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	ec 01       	movw	r28, r24
    3b46:	6a 01       	movw	r12, r20
    3b48:	7b 01       	movw	r14, r22
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	a9 01       	movw	r20, r18
    3b50:	cb 01       	movw	r24, r22
    3b52:	b6 01       	movw	r22, r12
    3b54:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3b58:	87 ff       	sbrs	r24, 7
    3b5a:	04 c0       	rjmp	.+8      	; 0x3b64 <AccelStepper::setMaxSpeed(float)+0x30>
    3b5c:	f7 fa       	bst	r15, 7
    3b5e:	f0 94       	com	r15
    3b60:	f7 f8       	bld	r15, 7
    3b62:	f0 94       	com	r15
    3b64:	a7 01       	movw	r20, r14
    3b66:	96 01       	movw	r18, r12
    3b68:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3b6a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3b6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3b6e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3b70:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3b74:	88 23       	and	r24, r24
    3b76:	09 f4       	brne	.+2      	; 0x3b7a <AccelStepper::setMaxSpeed(float)+0x46>
    3b78:	4a c0       	rjmp	.+148    	; 0x3c0e <AccelStepper::setMaxSpeed(float)+0xda>
    3b7a:	cc 8e       	std	Y+28, r12	; 0x1c
    3b7c:	dd 8e       	std	Y+29, r13	; 0x1d
    3b7e:	ee 8e       	std	Y+30, r14	; 0x1e
    3b80:	ff 8e       	std	Y+31, r15	; 0x1f
    3b82:	8e 01       	movw	r16, r28
    3b84:	00 5c       	subi	r16, 0xC0	; 192
    3b86:	1f 4f       	sbci	r17, 0xFF	; 255
    3b88:	a7 01       	movw	r20, r14
    3b8a:	96 01       	movw	r18, r12
    3b8c:	60 e0       	ldi	r22, 0x00	; 0
    3b8e:	74 e2       	ldi	r23, 0x24	; 36
    3b90:	84 e7       	ldi	r24, 0x74	; 116
    3b92:	99 e4       	ldi	r25, 0x49	; 73
    3b94:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    3b98:	f8 01       	movw	r30, r16
    3b9a:	60 83       	st	Z, r22
    3b9c:	71 83       	std	Z+1, r23	; 0x01
    3b9e:	82 83       	std	Z+2, r24	; 0x02
    3ba0:	93 83       	std	Z+3, r25	; 0x03
    3ba2:	8c a9       	ldd	r24, Y+52	; 0x34
    3ba4:	9d a9       	ldd	r25, Y+53	; 0x35
    3ba6:	ae a9       	ldd	r26, Y+54	; 0x36
    3ba8:	bf a9       	ldd	r27, Y+55	; 0x37
    3baa:	18 16       	cp	r1, r24
    3bac:	19 06       	cpc	r1, r25
    3bae:	1a 06       	cpc	r1, r26
    3bb0:	1b 06       	cpc	r1, r27
    3bb2:	6c f5       	brge	.+90     	; 0x3c0e <AccelStepper::setMaxSpeed(float)+0xda>
    3bb4:	68 8d       	ldd	r22, Y+24	; 0x18
    3bb6:	79 8d       	ldd	r23, Y+25	; 0x19
    3bb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3bba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3bbc:	9b 01       	movw	r18, r22
    3bbe:	ac 01       	movw	r20, r24
    3bc0:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    3bc4:	6b 01       	movw	r12, r22
    3bc6:	7c 01       	movw	r14, r24
    3bc8:	68 a1       	ldd	r22, Y+32	; 0x20
    3bca:	79 a1       	ldd	r23, Y+33	; 0x21
    3bcc:	8a a1       	ldd	r24, Y+34	; 0x22
    3bce:	9b a1       	ldd	r25, Y+35	; 0x23
    3bd0:	9b 01       	movw	r18, r22
    3bd2:	ac 01       	movw	r20, r24
    3bd4:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    3bd8:	9b 01       	movw	r18, r22
    3bda:	ac 01       	movw	r20, r24
    3bdc:	c7 01       	movw	r24, r14
    3bde:	b6 01       	movw	r22, r12
    3be0:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    3be4:	0e 94 e7 38 	call	0x71ce	; 0x71ce <__fixsfsi>
    3be8:	6c ab       	std	Y+52, r22	; 0x34
    3bea:	7d ab       	std	Y+53, r23	; 0x35
    3bec:	8e ab       	std	Y+54, r24	; 0x36
    3bee:	9f ab       	std	Y+55, r25	; 0x37
    3bf0:	e8 81       	ld	r30, Y
    3bf2:	f9 81       	ldd	r31, Y+1	; 0x01
    3bf4:	00 84       	ldd	r0, Z+8	; 0x08
    3bf6:	f1 85       	ldd	r31, Z+9	; 0x09
    3bf8:	e0 2d       	mov	r30, r0
    3bfa:	ce 01       	movw	r24, r28
    3bfc:	df 91       	pop	r29
    3bfe:	cf 91       	pop	r28
    3c00:	1f 91       	pop	r17
    3c02:	0f 91       	pop	r16
    3c04:	ff 90       	pop	r15
    3c06:	ef 90       	pop	r14
    3c08:	df 90       	pop	r13
    3c0a:	cf 90       	pop	r12
    3c0c:	09 94       	ijmp
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	08 95       	ret

00003c20 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
_ZN12AccelStepperC2Ehhhhhb():
    3c20:	cf 92       	push	r12
    3c22:	ef 92       	push	r14
    3c24:	0f 93       	push	r16
    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	ec 01       	movw	r28, r24
    3c2c:	84 e3       	ldi	r24, 0x34	; 52
    3c2e:	91 e0       	ldi	r25, 0x01	; 1
    3c30:	99 83       	std	Y+1, r25	; 0x01
    3c32:	88 83       	st	Y, r24
    3c34:	6f 83       	std	Y+7, r22	; 0x07
    3c36:	18 8a       	std	Y+16, r1	; 0x10
    3c38:	19 8a       	std	Y+17, r1	; 0x11
    3c3a:	1a 8a       	std	Y+18, r1	; 0x12
    3c3c:	1b 8a       	std	Y+19, r1	; 0x13
    3c3e:	1c 8a       	std	Y+20, r1	; 0x14
    3c40:	1d 8a       	std	Y+21, r1	; 0x15
    3c42:	1e 8a       	std	Y+22, r1	; 0x16
    3c44:	1f 8a       	std	Y+23, r1	; 0x17
    3c46:	18 8e       	std	Y+24, r1	; 0x18
    3c48:	19 8e       	std	Y+25, r1	; 0x19
    3c4a:	1a 8e       	std	Y+26, r1	; 0x1a
    3c4c:	1b 8e       	std	Y+27, r1	; 0x1b
    3c4e:	1c 8e       	std	Y+28, r1	; 0x1c
    3c50:	1d 8e       	std	Y+29, r1	; 0x1d
    3c52:	1e 8e       	std	Y+30, r1	; 0x1e
    3c54:	1f 8e       	std	Y+31, r1	; 0x1f
    3c56:	18 a2       	std	Y+32, r1	; 0x20
    3c58:	19 a2       	std	Y+33, r1	; 0x21
    3c5a:	1a a2       	std	Y+34, r1	; 0x22
    3c5c:	1b a2       	std	Y+35, r1	; 0x23
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	a0 e8       	ldi	r26, 0x80	; 128
    3c64:	bf e3       	ldi	r27, 0x3F	; 63
    3c66:	8c a3       	std	Y+36, r24	; 0x24
    3c68:	9d a3       	std	Y+37, r25	; 0x25
    3c6a:	ae a3       	std	Y+38, r26	; 0x26
    3c6c:	bf a3       	std	Y+39, r27	; 0x27
    3c6e:	1b 82       	std	Y+3, r1	; 0x03
    3c70:	1c 82       	std	Y+4, r1	; 0x04
    3c72:	1d 82       	std	Y+5, r1	; 0x05
    3c74:	1e 82       	std	Y+6, r1	; 0x06
    3c76:	61 e0       	ldi	r22, 0x01	; 1
    3c78:	70 e0       	ldi	r23, 0x00	; 0
    3c7a:	7d a7       	std	Y+45, r23	; 0x2d
    3c7c:	6c a7       	std	Y+44, r22	; 0x2c
    3c7e:	3f ef       	ldi	r19, 0xFF	; 255
    3c80:	3f a7       	std	Y+47, r19	; 0x2f
    3c82:	18 a6       	std	Y+40, r1	; 0x28
    3c84:	19 a6       	std	Y+41, r1	; 0x29
    3c86:	1a a6       	std	Y+42, r1	; 0x2a
    3c88:	1b a6       	std	Y+43, r1	; 0x2b
    3c8a:	48 87       	std	Y+8, r20	; 0x08
    3c8c:	29 87       	std	Y+9, r18	; 0x09
    3c8e:	0a 87       	std	Y+10, r16	; 0x0a
    3c90:	eb 86       	std	Y+11, r14	; 0x0b
    3c92:	1e a6       	std	Y+46, r1	; 0x2e
    3c94:	1c aa       	std	Y+52, r1	; 0x34
    3c96:	1d aa       	std	Y+53, r1	; 0x35
    3c98:	1e aa       	std	Y+54, r1	; 0x36
    3c9a:	1f aa       	std	Y+55, r1	; 0x37
    3c9c:	18 ae       	std	Y+56, r1	; 0x38
    3c9e:	19 ae       	std	Y+57, r1	; 0x39
    3ca0:	1a ae       	std	Y+58, r1	; 0x3a
    3ca2:	1b ae       	std	Y+59, r1	; 0x3b
    3ca4:	1c ae       	std	Y+60, r1	; 0x3c
    3ca6:	1d ae       	std	Y+61, r1	; 0x3d
    3ca8:	1e ae       	std	Y+62, r1	; 0x3e
    3caa:	1f ae       	std	Y+63, r1	; 0x3f
    3cac:	fe 01       	movw	r30, r28
    3cae:	e0 5c       	subi	r30, 0xC0	; 192
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	80 83       	st	Z, r24
    3cb4:	91 83       	std	Z+1, r25	; 0x01
    3cb6:	a2 83       	std	Z+2, r26	; 0x02
    3cb8:	b3 83       	std	Z+3, r27	; 0x03
    3cba:	1a 82       	std	Y+2, r1	; 0x02
    3cbc:	1c 86       	std	Y+12, r1	; 0x0c
    3cbe:	1d 86       	std	Y+13, r1	; 0x0d
    3cc0:	1e 86       	std	Y+14, r1	; 0x0e
    3cc2:	1f 86       	std	Y+15, r1	; 0x0f
    3cc4:	cc 20       	and	r12, r12
    3cc6:	19 f0       	breq	.+6      	; 0x3cce <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xae>
    3cc8:	ce 01       	movw	r24, r28
    3cca:	0e 94 40 1c 	call	0x3880	; 0x3880 <AccelStepper::enableOutputs()>
_ZN12AccelStepper15setAccelerationEf():
    3cce:	40 e0       	ldi	r20, 0x00	; 0
    3cd0:	50 e0       	ldi	r21, 0x00	; 0
    3cd2:	60 e8       	ldi	r22, 0x80	; 128
    3cd4:	7f e3       	ldi	r23, 0x3F	; 63
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <AccelStepper::setAcceleration(float) [clone .part.10]>
_ZN12AccelStepperC2Ehhhhhb():
    3cdc:	40 e0       	ldi	r20, 0x00	; 0
    3cde:	50 e0       	ldi	r21, 0x00	; 0
    3ce0:	60 e8       	ldi	r22, 0x80	; 128
    3ce2:	7f e3       	ldi	r23, 0x3F	; 63
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	0f 91       	pop	r16
    3cec:	ef 90       	pop	r14
    3cee:	cf 90       	pop	r12
    3cf0:	0c 94 9a 1d 	jmp	0x3b34	; 0x3b34 <AccelStepper::setMaxSpeed(float)>

00003cf4 <AccelStepper::setAcceleration(float)>:
_ZN12AccelStepper15setAccelerationEf():
    3cf4:	cf 92       	push	r12
    3cf6:	df 92       	push	r13
    3cf8:	ef 92       	push	r14
    3cfa:	ff 92       	push	r15
    3cfc:	cf 93       	push	r28
    3cfe:	df 93       	push	r29
    3d00:	ec 01       	movw	r28, r24
    3d02:	6a 01       	movw	r12, r20
    3d04:	7b 01       	movw	r14, r22
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	a9 01       	movw	r20, r18
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	b6 01       	movw	r22, r12
    3d10:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3d14:	88 23       	and	r24, r24
    3d16:	59 f0       	breq	.+22     	; 0x3d2e <AccelStepper::setAcceleration(float)+0x3a>
    3d18:	b7 01       	movw	r22, r14
    3d1a:	a6 01       	movw	r20, r12
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	df 90       	pop	r13
    3d28:	cf 90       	pop	r12
    3d2a:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <AccelStepper::setAcceleration(float) [clone .part.10]>
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	ff 90       	pop	r15
    3d34:	ef 90       	pop	r14
    3d36:	df 90       	pop	r13
    3d38:	cf 90       	pop	r12
    3d3a:	08 95       	ret

00003d3c <AccelStepper::setSpeed(float)>:
_ZN12AccelStepper8setSpeedEf():
    3d3c:	4f 92       	push	r4
    3d3e:	5f 92       	push	r5
    3d40:	6f 92       	push	r6
    3d42:	7f 92       	push	r7
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	cf 92       	push	r12
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	ff 92       	push	r15
    3d50:	0f 93       	push	r16
    3d52:	1f 93       	push	r17
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
    3d58:	ec 01       	movw	r28, r24
    3d5a:	5a 01       	movw	r10, r20
    3d5c:	8b 01       	movw	r16, r22
    3d5e:	9a 01       	movw	r18, r20
    3d60:	ab 01       	movw	r20, r22
    3d62:	68 8d       	ldd	r22, Y+24	; 0x18
    3d64:	79 8d       	ldd	r23, Y+25	; 0x19
    3d66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d6a:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3d6e:	88 23       	and	r24, r24
    3d70:	79 f1       	breq	.+94     	; 0x3dd0 <AccelStepper::setSpeed(float)+0x94>
    3d72:	4c 8c       	ldd	r4, Y+28	; 0x1c
    3d74:	5d 8c       	ldd	r5, Y+29	; 0x1d
    3d76:	6e 8c       	ldd	r6, Y+30	; 0x1e
    3d78:	7f 8c       	ldd	r7, Y+31	; 0x1f
    3d7a:	73 01       	movw	r14, r6
    3d7c:	62 01       	movw	r12, r4
    3d7e:	f7 fa       	bst	r15, 7
    3d80:	f0 94       	com	r15
    3d82:	f7 f8       	bld	r15, 7
    3d84:	f0 94       	com	r15
    3d86:	95 01       	movw	r18, r10
    3d88:	a8 01       	movw	r20, r16
    3d8a:	c7 01       	movw	r24, r14
    3d8c:	b6 01       	movw	r22, r12
    3d8e:	0e 94 cf 39 	call	0x739e	; 0x739e <__gesf2>
    3d92:	18 16       	cp	r1, r24
    3d94:	64 f0       	brlt	.+24     	; 0x3dae <AccelStepper::setSpeed(float)+0x72>
    3d96:	95 01       	movw	r18, r10
    3d98:	a8 01       	movw	r20, r16
    3d9a:	c3 01       	movw	r24, r6
    3d9c:	b2 01       	movw	r22, r4
    3d9e:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3da2:	65 01       	movw	r12, r10
    3da4:	78 01       	movw	r14, r16
    3da6:	87 ff       	sbrs	r24, 7
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <AccelStepper::setSpeed(float)+0x72>
    3daa:	73 01       	movw	r14, r6
    3dac:	62 01       	movw	r12, r4
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	a9 01       	movw	r20, r18
    3db4:	c7 01       	movw	r24, r14
    3db6:	b6 01       	movw	r22, r12
    3db8:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    3dbc:	81 11       	cpse	r24, r1
    3dbe:	17 c0       	rjmp	.+46     	; 0x3dee <AccelStepper::setSpeed(float)+0xb2>
    3dc0:	1b 82       	std	Y+3, r1	; 0x03
    3dc2:	1c 82       	std	Y+4, r1	; 0x04
    3dc4:	1d 82       	std	Y+5, r1	; 0x05
    3dc6:	1e 82       	std	Y+6, r1	; 0x06
    3dc8:	c8 8e       	std	Y+24, r12	; 0x18
    3dca:	d9 8e       	std	Y+25, r13	; 0x19
    3dcc:	ea 8e       	std	Y+26, r14	; 0x1a
    3dce:	fb 8e       	std	Y+27, r15	; 0x1b
    3dd0:	df 91       	pop	r29
    3dd2:	cf 91       	pop	r28
    3dd4:	1f 91       	pop	r17
    3dd6:	0f 91       	pop	r16
    3dd8:	ff 90       	pop	r15
    3dda:	ef 90       	pop	r14
    3ddc:	df 90       	pop	r13
    3dde:	cf 90       	pop	r12
    3de0:	bf 90       	pop	r11
    3de2:	af 90       	pop	r10
    3de4:	7f 90       	pop	r7
    3de6:	6f 90       	pop	r6
    3de8:	5f 90       	pop	r5
    3dea:	4f 90       	pop	r4
    3dec:	08 95       	ret
    3dee:	a7 01       	movw	r20, r14
    3df0:	96 01       	movw	r18, r12
    3df2:	60 e0       	ldi	r22, 0x00	; 0
    3df4:	74 e2       	ldi	r23, 0x24	; 36
    3df6:	84 e7       	ldi	r24, 0x74	; 116
    3df8:	99 e4       	ldi	r25, 0x49	; 73
    3dfa:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
    3dfe:	9f 77       	andi	r25, 0x7F	; 127
    3e00:	0e 94 ee 38 	call	0x71dc	; 0x71dc <__fixunssfsi>
    3e04:	6b 83       	std	Y+3, r22	; 0x03
    3e06:	7c 83       	std	Y+4, r23	; 0x04
    3e08:	8d 83       	std	Y+5, r24	; 0x05
    3e0a:	9e 83       	std	Y+6, r25	; 0x06
    3e0c:	11 e0       	ldi	r17, 0x01	; 1
    3e0e:	20 e0       	ldi	r18, 0x00	; 0
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	a9 01       	movw	r20, r18
    3e14:	c7 01       	movw	r24, r14
    3e16:	b6 01       	movw	r22, r12
    3e18:	0e 94 cf 39 	call	0x739e	; 0x739e <__gesf2>
    3e1c:	18 16       	cp	r1, r24
    3e1e:	0c f0       	brlt	.+2      	; 0x3e22 <AccelStepper::setSpeed(float)+0xe6>
    3e20:	10 e0       	ldi	r17, 0x00	; 0
    3e22:	1a 83       	std	Y+2, r17	; 0x02
    3e24:	d1 cf       	rjmp	.-94     	; 0x3dc8 <AccelStepper::setSpeed(float)+0x8c>

00003e26 <AccelStepper::runSpeedToPosition()>:
_ZN12AccelStepper18runSpeedToPositionEv():
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:647

boolean AccelStepper::runSpeedToPosition()
{
    3e26:	0f 93       	push	r16
    3e28:	1f 93       	push	r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:648
    if (_targetPos == _currentPos)
    3e2a:	fc 01       	movw	r30, r24
    3e2c:	04 89       	ldd	r16, Z+20	; 0x14
    3e2e:	15 89       	ldd	r17, Z+21	; 0x15
    3e30:	26 89       	ldd	r18, Z+22	; 0x16
    3e32:	37 89       	ldd	r19, Z+23	; 0x17
    3e34:	40 89       	ldd	r20, Z+16	; 0x10
    3e36:	51 89       	ldd	r21, Z+17	; 0x11
    3e38:	62 89       	ldd	r22, Z+18	; 0x12
    3e3a:	73 89       	ldd	r23, Z+19	; 0x13
    3e3c:	04 17       	cp	r16, r20
    3e3e:	15 07       	cpc	r17, r21
    3e40:	26 07       	cpc	r18, r22
    3e42:	37 07       	cpc	r19, r23
    3e44:	69 f0       	breq	.+26     	; 0x3e60 <AccelStepper::runSpeedToPosition()+0x3a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:650
	return false;
    if (_targetPos >_currentPos)
    3e46:	40 17       	cp	r20, r16
    3e48:	51 07       	cpc	r21, r17
    3e4a:	62 07       	cpc	r22, r18
    3e4c:	73 07       	cpc	r23, r19
    3e4e:	34 f4       	brge	.+12     	; 0x3e5c <AccelStepper::runSpeedToPosition()+0x36>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:651
	_direction = DIRECTION_CW;
    3e50:	21 e0       	ldi	r18, 0x01	; 1
    3e52:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
}
    3e54:	1f 91       	pop	r17
    3e56:	0f 91       	pop	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:654
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
    3e58:	0c 94 1a 1d 	jmp	0x3a34	; 0x3a34 <AccelStepper::runSpeed()>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:653
    if (_targetPos == _currentPos)
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    3e5c:	12 82       	std	Z+2, r1	; 0x02
    3e5e:	fa cf       	rjmp	.-12     	; 0x3e54 <AccelStepper::runSpeedToPosition()+0x2e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    return runSpeed();
}
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	1f 91       	pop	r17
    3e64:	0f 91       	pop	r16
    3e66:	08 95       	ret

00003e68 <u8x8_gpio_and_delay_arduino>:
u8x8_gpio_and_delay_arduino():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1909
  u8x8_SetPin(u8x8, U8X8_PIN_D7, d7);
  u8x8_SetPin(u8x8, U8X8_PIN_E, e1);
  u8x8_SetPin(u8x8, U8X8_PIN_CS, e2);
  u8x8_SetPin(u8x8, U8X8_PIN_DC, dc);
  u8x8_SetPin(u8x8, U8X8_PIN_RESET, reset);
}
    3e68:	0f 93       	push	r16
    3e6a:	1f 93       	push	r17
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	8c 01       	movw	r16, r24
    3e72:	c6 2f       	mov	r28, r22
    3e74:	64 2f       	mov	r22, r20
    3e76:	cc 32       	cpi	r28, 0x2C	; 44
    3e78:	a8 f4       	brcc	.+42     	; 0x3ea4 <u8x8_gpio_and_delay_arduino+0x3c>
    3e7a:	ca 32       	cpi	r28, 0x2A	; 42
    3e7c:	d0 f5       	brcc	.+116    	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>
    3e7e:	c8 32       	cpi	r28, 0x28	; 40
    3e80:	39 f1       	breq	.+78     	; 0x3ed0 <u8x8_gpio_and_delay_arduino+0x68>
    3e82:	c9 32       	cpi	r28, 0x29	; 41
    3e84:	e1 f1       	breq	.+120    	; 0x3efe <u8x8_gpio_and_delay_arduino+0x96>
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	c0 34       	cpi	r28, 0x40	; 64
    3e8a:	a0 f1       	brcs	.+104    	; 0x3ef4 <u8x8_gpio_and_delay_arduino+0x8c>
    3e8c:	cf 73       	andi	r28, 0x3F	; 63
    3e8e:	f8 01       	movw	r30, r16
    3e90:	ec 0f       	add	r30, r28
    3e92:	f1 1d       	adc	r31, r1
    3e94:	d6 8d       	ldd	r29, Z+30	; 0x1e
    3e96:	df 3f       	cpi	r29, 0xFF	; 255
    3e98:	61 f1       	breq	.+88     	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>
    3e9a:	c0 31       	cpi	r28, 0x10	; 16
    3e9c:	08 f0       	brcs	.+2      	; 0x3ea0 <u8x8_gpio_and_delay_arduino+0x38>
    3e9e:	42 c0       	rjmp	.+132    	; 0x3f24 <u8x8_gpio_and_delay_arduino+0xbc>
    3ea0:	8d 2f       	mov	r24, r29
    3ea2:	13 c0       	rjmp	.+38     	; 0x3eca <u8x8_gpio_and_delay_arduino+0x62>
    3ea4:	cd 32       	cpi	r28, 0x2D	; 45
    3ea6:	89 f1       	breq	.+98     	; 0x3f0a <u8x8_gpio_and_delay_arduino+0xa2>
    3ea8:	70 f3       	brcs	.-36     	; 0x3e86 <u8x8_gpio_and_delay_arduino+0x1e>
    3eaa:	84 eb       	ldi	r24, 0xB4	; 180
    3eac:	8c 0f       	add	r24, r28
    3eae:	82 30       	cpi	r24, 0x02	; 2
    3eb0:	50 f7       	brcc	.-44     	; 0x3e86 <u8x8_gpio_and_delay_arduino+0x1e>
    3eb2:	cf 73       	andi	r28, 0x3F	; 63
    3eb4:	c0 0f       	add	r28, r16
    3eb6:	d1 2f       	mov	r29, r17
    3eb8:	d1 1d       	adc	r29, r1
    3eba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ebc:	41 11       	cpse	r20, r1
    3ebe:	2e c0       	rjmp	.+92     	; 0x3f1c <u8x8_gpio_and_delay_arduino+0xb4>
    3ec0:	61 e0       	ldi	r22, 0x01	; 1
    3ec2:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3eca:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
    3ece:	11 c0       	rjmp	.+34     	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>
    3ed0:	02 5e       	subi	r16, 0xE2	; 226
    3ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed4:	d0 e0       	ldi	r29, 0x00	; 0
    3ed6:	f8 01       	movw	r30, r16
    3ed8:	81 91       	ld	r24, Z+
    3eda:	8f 01       	movw	r16, r30
    3edc:	8f 3f       	cpi	r24, 0xFF	; 255
    3ede:	31 f0       	breq	.+12     	; 0x3eec <u8x8_gpio_and_delay_arduino+0x84>
    3ee0:	61 e0       	ldi	r22, 0x01	; 1
    3ee2:	d0 31       	cpi	r29, 0x10	; 16
    3ee4:	08 f0       	brcs	.+2      	; 0x3ee8 <u8x8_gpio_and_delay_arduino+0x80>
    3ee6:	62 e0       	ldi	r22, 0x02	; 2
    3ee8:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    3eec:	df 5f       	subi	r29, 0xFF	; 255
    3eee:	d6 31       	cpi	r29, 0x16	; 22
    3ef0:	91 f7       	brne	.-28     	; 0x3ed6 <u8x8_gpio_and_delay_arduino+0x6e>
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	08 95       	ret
    3efe:	70 e0       	ldi	r23, 0x00	; 0
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <delay>
    3f08:	f4 cf       	rjmp	.-24     	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>
    3f0a:	85 e0       	ldi	r24, 0x05	; 5
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	43 30       	cpi	r20, 0x03	; 3
    3f10:	10 f0       	brcs	.+4      	; 0x3f16 <u8x8_gpio_and_delay_arduino+0xae>
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	0e 94 be 36 	call	0x6d7c	; 0x6d7c <delayMicroseconds>
    3f1a:	eb cf       	rjmp	.-42     	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>
    3f1c:	62 e0       	ldi	r22, 0x02	; 2
    3f1e:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <pinMode>
    3f22:	e7 cf       	rjmp	.-50     	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>
    3f24:	c0 31       	cpi	r28, 0x10	; 16
    3f26:	11 f4       	brne	.+4      	; 0x3f2c <u8x8_gpio_and_delay_arduino+0xc4>
    3f28:	0e 94 f5 35 	call	0x6bea	; 0x6bea <yield>
    3f2c:	8d 2f       	mov	r24, r29
    3f2e:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <digitalRead>
    3f32:	21 e0       	ldi	r18, 0x01	; 1
    3f34:	89 2b       	or	r24, r25
    3f36:	09 f4       	brne	.+2      	; 0x3f3a <u8x8_gpio_and_delay_arduino+0xd2>
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	f8 01       	movw	r30, r16
    3f3c:	21 8f       	std	Z+25, r18	; 0x19
    3f3e:	d9 cf       	rjmp	.-78     	; 0x3ef2 <u8x8_gpio_and_delay_arduino+0x8a>

00003f40 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>:
_Z18u8x8_SetPin_HW_I2CP11u8x8_structhhh():
    3f40:	fc 01       	movw	r30, r24
    3f42:	61 a7       	std	Z+41, r22	; 0x29
    3f44:	42 a7       	std	Z+42, r20	; 0x2a
    3f46:	23 a7       	std	Z+43, r18	; 0x2b
    3f48:	08 95       	ret

00003f4a <u8x8_byte_arduino_hw_i2c>:
u8x8_byte_arduino_hw_i2c():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1333

/*=============================================*/
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    3f4a:	cf 93       	push	r28
    3f4c:	df 93       	push	r29
    3f4e:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3f50:	68 31       	cpi	r22, 0x18	; 24
    3f52:	89 f1       	breq	.+98     	; 0x3fb6 <u8x8_byte_arduino_hw_i2c+0x6c>
    3f54:	30 f4       	brcc	.+12     	; 0x3f62 <u8x8_byte_arduino_hw_i2c+0x18>
    3f56:	64 31       	cpi	r22, 0x14	; 20
    3f58:	99 f0       	breq	.+38     	; 0x3f80 <u8x8_byte_arduino_hw_i2c+0x36>
    3f5a:	67 31       	cpi	r22, 0x17	; 23
    3f5c:	51 f0       	breq	.+20     	; 0x3f72 <u8x8_byte_arduino_hw_i2c+0x28>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1375
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
      break;
    default:
      return 0;
    3f5e:	80 e0       	ldi	r24, 0x00	; 0
    3f60:	05 c0       	rjmp	.+10     	; 0x3f6c <u8x8_byte_arduino_hw_i2c+0x22>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3f62:	69 31       	cpi	r22, 0x19	; 25
    3f64:	c9 f1       	breq	.+114    	; 0x3fd8 <u8x8_byte_arduino_hw_i2c+0x8e>
    3f66:	60 32       	cpi	r22, 0x20	; 32
    3f68:	d1 f7       	brne	.-12     	; 0x3f5e <u8x8_byte_arduino_hw_i2c+0x14>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1378
      break;
    default:
      return 0;
  }
#endif
  return 1;
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1379
}
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1338
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
    3f72:	50 e0       	ldi	r21, 0x00	; 0
    3f74:	b9 01       	movw	r22, r18
    3f76:	8a e1       	ldi	r24, 0x1A	; 26
    3f78:	94 e0       	ldi	r25, 0x04	; 4
    3f7a:	0e 94 44 2b 	call	0x5688	; 0x5688 <TwoWire::write(unsigned char const*, unsigned int)>
    3f7e:	f5 cf       	rjmp	.-22     	; 0x3f6a <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1341
      break;
    case U8X8_MSG_BYTE_INIT:
      if ( u8x8->bus_clock == 0 ) 	/* issue 769 */
    3f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f82:	9d 85       	ldd	r25, Y+13	; 0x0d
    3f84:	ae 85       	ldd	r26, Y+14	; 0x0e
    3f86:	bf 85       	ldd	r27, Y+15	; 0x0f
    3f88:	89 2b       	or	r24, r25
    3f8a:	8a 2b       	or	r24, r26
    3f8c:	8b 2b       	or	r24, r27
    3f8e:	71 f4       	brne	.+28     	; 0x3fac <u8x8_byte_arduino_hw_i2c+0x62>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1342
	u8x8->bus_clock = u8x8->display_info->i2c_bus_clock_100kHz * 100000UL;
    3f90:	e8 81       	ld	r30, Y
    3f92:	f9 81       	ldd	r31, Y+1	; 0x01
    3f94:	a5 85       	ldd	r26, Z+13	; 0x0d
    3f96:	b0 e0       	ldi	r27, 0x00	; 0
    3f98:	20 ea       	ldi	r18, 0xA0	; 160
    3f9a:	36 e8       	ldi	r19, 0x86	; 134
    3f9c:	41 e0       	ldi	r20, 0x01	; 1
    3f9e:	50 e0       	ldi	r21, 0x00	; 0
    3fa0:	0e 94 85 3b 	call	0x770a	; 0x770a <__muluhisi3>
    3fa4:	6c 87       	std	Y+12, r22	; 0x0c
    3fa6:	7d 87       	std	Y+13, r23	; 0x0d
    3fa8:	8e 87       	std	Y+14, r24	; 0x0e
    3faa:	9f 87       	std	Y+15, r25	; 0x0f
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1355
      else
      {
	Wire.begin();
      }
#else
      Wire.begin();
    3fac:	8a e1       	ldi	r24, 0x1A	; 26
    3fae:	94 e0       	ldi	r25, 0x04	; 4
    3fb0:	0e 94 26 2c 	call	0x584c	; 0x584c <TwoWire::begin()>
    3fb4:	da cf       	rjmp	.-76     	; 0x3f6a <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1366
#if ARDUINO >= 10600
      /* not sure when the setClock function was introduced, but it is there since 1.6.0 */
      /* if there is any error with Wire.setClock() just remove this function call by */
      /* defining U8X8_DO_NOT_SET_WIRE_CLOCK */
#ifndef U8X8_DO_NOT_SET_WIRE_CLOCK
      Wire.setClock(u8x8->bus_clock);
    3fb6:	4c 85       	ldd	r20, Y+12	; 0x0c
    3fb8:	5d 85       	ldd	r21, Y+13	; 0x0d
    3fba:	6e 85       	ldd	r22, Y+14	; 0x0e
    3fbc:	7f 85       	ldd	r23, Y+15	; 0x0f
    3fbe:	8a e1       	ldi	r24, 0x1A	; 26
    3fc0:	94 e0       	ldi	r25, 0x04	; 4
    3fc2:	0e 94 2f 2c 	call	0x585e	; 0x585e <TwoWire::setClock(unsigned long)>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1369
#endif 
#endif
      Wire.beginTransmission(u8x8_GetI2CAddress(u8x8)>>1);
    3fc6:	6e 89       	ldd	r22, Y+22	; 0x16
    3fc8:	70 e0       	ldi	r23, 0x00	; 0
    3fca:	75 95       	asr	r23
    3fcc:	67 95       	ror	r22
    3fce:	8a e1       	ldi	r24, 0x1A	; 26
    3fd0:	94 e0       	ldi	r25, 0x04	; 4
    3fd2:	0e 94 36 2c 	call	0x586c	; 0x586c <TwoWire::beginTransmission(int)>
    3fd6:	c9 cf       	rjmp	.-110    	; 0x3f6a <u8x8_byte_arduino_hw_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1372
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
    3fd8:	8a e1       	ldi	r24, 0x1A	; 26
    3fda:	94 e0       	ldi	r25, 0x04	; 4
    3fdc:	0e 94 52 2c 	call	0x58a4	; 0x58a4 <TwoWire::endTransmission()>
    3fe0:	c4 cf       	rjmp	.-120    	; 0x3f6a <u8x8_byte_arduino_hw_i2c+0x20>

00003fe2 <u8g2_DrawBox>:
u8g2_DrawBox():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:43
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    3fe2:	8f 92       	push	r8
    3fe4:	9f 92       	push	r9
    3fe6:	af 92       	push	r10
    3fe8:	bf 92       	push	r11
    3fea:	cf 92       	push	r12
    3fec:	df 92       	push	r13
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	0f 93       	push	r16
    3ff4:	1f 93       	push	r17
    3ff6:	cf 93       	push	r28
    3ff8:	df 93       	push	r29
    3ffa:	5c 01       	movw	r10, r24
    3ffc:	6b 01       	movw	r12, r22
    3ffe:	ea 01       	movw	r28, r20
    4000:	49 01       	movw	r8, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:45
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    4002:	7a 01       	movw	r14, r20
    4004:	e0 0e       	add	r14, r16
    4006:	f1 1e       	adc	r15, r17
    4008:	9b 01       	movw	r18, r22
    400a:	28 0d       	add	r18, r8
    400c:	39 1d       	adc	r19, r9
    400e:	87 01       	movw	r16, r14
    4010:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <u8g2_IsIntersection>
    4014:	81 11       	cpse	r24, r1
    4016:	15 c0       	rjmp	.+42     	; 0x4042 <u8g2_DrawBox+0x60>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:54
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    4018:	df 91       	pop	r29
    401a:	cf 91       	pop	r28
    401c:	1f 91       	pop	r17
    401e:	0f 91       	pop	r16
    4020:	ff 90       	pop	r15
    4022:	ef 90       	pop	r14
    4024:	df 90       	pop	r13
    4026:	cf 90       	pop	r12
    4028:	bf 90       	pop	r11
    402a:	af 90       	pop	r10
    402c:	9f 90       	pop	r9
    402e:	8f 90       	pop	r8
    4030:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:50
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    4032:	00 e0       	ldi	r16, 0x00	; 0
    4034:	94 01       	movw	r18, r8
    4036:	ae 01       	movw	r20, r28
    4038:	b6 01       	movw	r22, r12
    403a:	c5 01       	movw	r24, r10
    403c:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:51
    y++;    
    4040:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:48
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    4042:	ec 16       	cp	r14, r28
    4044:	fd 06       	cpc	r15, r29
    4046:	a9 f7       	brne	.-22     	; 0x4032 <u8g2_DrawBox+0x50>
    4048:	e7 cf       	rjmp	.-50     	; 0x4018 <u8g2_DrawBox+0x36>

0000404a <u8g2_DrawFrame>:
u8g2_DrawFrame():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:62
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    404a:	6f 92       	push	r6
    404c:	7f 92       	push	r7
    404e:	8f 92       	push	r8
    4050:	9f 92       	push	r9
    4052:	af 92       	push	r10
    4054:	bf 92       	push	r11
    4056:	cf 92       	push	r12
    4058:	df 92       	push	r13
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	6c 01       	movw	r12, r24
    4068:	5b 01       	movw	r10, r22
    406a:	ea 01       	movw	r28, r20
    406c:	49 01       	movw	r8, r18
    406e:	78 01       	movw	r14, r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:66
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    4070:	3b 01       	movw	r6, r22
    4072:	62 0e       	add	r6, r18
    4074:	73 1e       	adc	r7, r19
    4076:	8a 01       	movw	r16, r20
    4078:	0e 0d       	add	r16, r14
    407a:	1f 1d       	adc	r17, r15
    407c:	93 01       	movw	r18, r6
    407e:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <u8g2_IsIntersection>
    4082:	88 23       	and	r24, r24
    4084:	51 f1       	breq	.+84     	; 0x40da <u8g2_DrawFrame+0x90>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:70
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    4086:	00 e0       	ldi	r16, 0x00	; 0
    4088:	94 01       	movw	r18, r8
    408a:	ae 01       	movw	r20, r28
    408c:	b5 01       	movw	r22, r10
    408e:	c6 01       	movw	r24, r12
    4090:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:71
  if (h >= 2) {
    4094:	82 e0       	ldi	r24, 0x02	; 2
    4096:	e8 16       	cp	r14, r24
    4098:	f1 04       	cpc	r15, r1
    409a:	f8 f0       	brcs	.+62     	; 0x40da <u8g2_DrawFrame+0x90>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:72
    h-=2;
    409c:	82 e0       	ldi	r24, 0x02	; 2
    409e:	e8 1a       	sub	r14, r24
    40a0:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:73
    y++;
    40a2:	21 96       	adiw	r28, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:74
    if (h > 0) {
    40a4:	e1 14       	cp	r14, r1
    40a6:	f1 04       	cpc	r15, r1
    40a8:	89 f0       	breq	.+34     	; 0x40cc <u8g2_DrawFrame+0x82>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:75
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    40aa:	01 e0       	ldi	r16, 0x01	; 1
    40ac:	97 01       	movw	r18, r14
    40ae:	ae 01       	movw	r20, r28
    40b0:	b5 01       	movw	r22, r10
    40b2:	c6 01       	movw	r24, r12
    40b4:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:77
      x+=w;
      x--;
    40b8:	b3 01       	movw	r22, r6
    40ba:	61 50       	subi	r22, 0x01	; 1
    40bc:	71 09       	sbc	r23, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:78
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    40be:	97 01       	movw	r18, r14
    40c0:	ae 01       	movw	r20, r28
    40c2:	c6 01       	movw	r24, r12
    40c4:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:79
      y+=h;
    40c8:	ce 0d       	add	r28, r14
    40ca:	df 1d       	adc	r29, r15
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:81
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    40cc:	00 e0       	ldi	r16, 0x00	; 0
    40ce:	94 01       	movw	r18, r8
    40d0:	ae 01       	movw	r20, r28
    40d2:	b5 01       	movw	r22, r10
    40d4:	c6 01       	movw	r24, r12
    40d6:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_box.c:83
  }
}
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    40e2:	ff 90       	pop	r15
    40e4:	ef 90       	pop	r14
    40e6:	df 90       	pop	r13
    40e8:	cf 90       	pop	r12
    40ea:	bf 90       	pop	r11
    40ec:	af 90       	pop	r10
    40ee:	9f 90       	pop	r9
    40f0:	8f 90       	pop	r8
    40f2:	7f 90       	pop	r7
    40f4:	6f 90       	pop	r6
    40f6:	08 95       	ret

000040f8 <u8g2_send_buffer>:
u8g2_send_buffer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:96

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    40f8:	af 92       	push	r10
    40fa:	bf 92       	push	r11
    40fc:	cf 92       	push	r12
    40fe:	df 92       	push	r13
    4100:	ef 92       	push	r14
    4102:	ff 92       	push	r15
    4104:	0f 93       	push	r16
    4106:	1f 93       	push	r17
    4108:	cf 93       	push	r28
    410a:	df 93       	push	r29
    410c:	ec 01       	movw	r28, r24
    410e:	aa ac       	ldd	r10, Y+58	; 0x3a
    4110:	eb ac       	ldd	r14, Y+59	; 0x3b
    4112:	e8 81       	ld	r30, Y
    4114:	f9 81       	ldd	r31, Y+1	; 0x01
    4116:	b1 88       	ldd	r11, Z+17	; 0x11
    4118:	fe 2c       	mov	r15, r14
    411a:	d1 2c       	mov	r13, r1
    411c:	c1 2c       	mov	r12, r1
u8g2_send_tile_row():
    411e:	e8 81       	ld	r30, Y
    4120:	f9 81       	ldd	r31, Y+1	; 0x01
    4122:	20 89       	ldd	r18, Z+16	; 0x10
    4124:	08 ad       	ldd	r16, Y+56	; 0x38
    4126:	19 ad       	ldd	r17, Y+57	; 0x39
    4128:	88 e0       	ldi	r24, 0x08	; 8
    412a:	28 9f       	mul	r18, r24
    412c:	a0 01       	movw	r20, r0
    412e:	11 24       	eor	r1, r1
    4130:	4c 9d       	mul	r20, r12
    4132:	c0 01       	movw	r24, r0
    4134:	4d 9d       	mul	r20, r13
    4136:	90 0d       	add	r25, r0
    4138:	5c 9d       	mul	r21, r12
    413a:	90 0d       	add	r25, r0
    413c:	11 24       	eor	r1, r1
    413e:	08 0f       	add	r16, r24
    4140:	19 1f       	adc	r17, r25
    4142:	4f 2d       	mov	r20, r15
    4144:	60 e0       	ldi	r22, 0x00	; 0
    4146:	ce 01       	movw	r24, r28
    4148:	0e 94 54 2a 	call	0x54a8	; 0x54a8 <u8x8_DrawTile>
u8g2_send_buffer():
    414c:	f3 94       	inc	r15
    414e:	8f 2d       	mov	r24, r15
    4150:	8e 19       	sub	r24, r14
    4152:	8a 15       	cp	r24, r10
    4154:	28 f4       	brcc	.+10     	; 0x4160 <u8g2_send_buffer+0x68>
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	c8 1a       	sub	r12, r24
    415a:	d8 0a       	sbc	r13, r24
    415c:	fb 14       	cp	r15, r11
    415e:	f8 f2       	brcs	.-66     	; 0x411e <u8g2_send_buffer+0x26>
    4160:	df 91       	pop	r29
    4162:	cf 91       	pop	r28
    4164:	1f 91       	pop	r17
    4166:	0f 91       	pop	r16
    4168:	ff 90       	pop	r15
    416a:	ef 90       	pop	r14
    416c:	df 90       	pop	r13
    416e:	cf 90       	pop	r12
    4170:	bf 90       	pop	r11
    4172:	af 90       	pop	r10
    4174:	08 95       	ret

00004176 <u8g2_ClearBuffer>:
u8g2_ClearBuffer():
    4176:	fc 01       	movw	r30, r24
    4178:	a0 81       	ld	r26, Z
    417a:	b1 81       	ldd	r27, Z+1	; 0x01
    417c:	50 96       	adiw	r26, 0x10	; 16
    417e:	2c 91       	ld	r18, X
    4180:	82 ad       	ldd	r24, Z+58	; 0x3a
    4182:	38 e0       	ldi	r19, 0x08	; 8
    4184:	83 9f       	mul	r24, r19
    4186:	c0 01       	movw	r24, r0
    4188:	11 24       	eor	r1, r1
    418a:	28 9f       	mul	r18, r24
    418c:	a0 01       	movw	r20, r0
    418e:	29 9f       	mul	r18, r25
    4190:	50 0d       	add	r21, r0
    4192:	11 24       	eor	r1, r1
    4194:	70 e0       	ldi	r23, 0x00	; 0
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	80 ad       	ldd	r24, Z+56	; 0x38
    419a:	91 ad       	ldd	r25, Z+57	; 0x39
    419c:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <memset>

000041a0 <u8g2_SetBufferCurrTileRow>:
u8g2_SetBufferCurrTileRow():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:101
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    41a0:	cf 93       	push	r28
    41a2:	df 93       	push	r29
    41a4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:102
  u8g2->tile_curr_row = row;
    41a6:	6b af       	std	Y+59, r22	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:103
  u8g2->cb->update_dimension(u8g2);
    41a8:	ee a9       	ldd	r30, Y+54	; 0x36
    41aa:	ff a9       	ldd	r31, Y+55	; 0x37
    41ac:	01 90       	ld	r0, Z+
    41ae:	f0 81       	ld	r31, Z
    41b0:	e0 2d       	mov	r30, r0
    41b2:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
  u8g2->cb->update_page_win(u8g2);
    41b4:	ee a9       	ldd	r30, Y+54	; 0x36
    41b6:	ff a9       	ldd	r31, Y+55	; 0x37
    41b8:	02 80       	ldd	r0, Z+2	; 0x02
    41ba:	f3 81       	ldd	r31, Z+3	; 0x03
    41bc:	e0 2d       	mov	r30, r0
    41be:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:105
}
    41c0:	df 91       	pop	r29
    41c2:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
    41c4:	09 94       	ijmp

000041c6 <u8g2_FirstPage>:
u8g2_FirstPage():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:108
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:109
  if ( u8g2->is_auto_page_clear )
    41cc:	fc 01       	movw	r30, r24
    41ce:	e5 57       	subi	r30, 0x75	; 117
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	80 81       	ld	r24, Z
    41d4:	88 23       	and	r24, r24
    41d6:	19 f0       	breq	.+6      	; 0x41de <u8g2_FirstPage+0x18>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:111
  {
    u8g2_ClearBuffer(u8g2);
    41d8:	ce 01       	movw	r24, r28
    41da:	0e 94 bb 20 	call	0x4176	; 0x4176 <u8g2_ClearBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    41de:	60 e0       	ldi	r22, 0x00	; 0
    41e0:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:114
}
    41e2:	df 91       	pop	r29
    41e4:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    41e6:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <u8g2_SetBufferCurrTileRow>

000041ea <u8g2_NextPage>:
u8g2_NextPage():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:117
}

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    41ea:	1f 93       	push	r17
    41ec:	cf 93       	push	r28
    41ee:	df 93       	push	r29
    41f0:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:119
  uint8_t row;
  u8g2_send_buffer(u8g2);
    41f2:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <u8g2_send_buffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:120
  row = u8g2->tile_curr_row;
    41f6:	1b ad       	ldd	r17, Y+59	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:121
  row += u8g2->tile_buf_height;
    41f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    41fa:	18 0f       	add	r17, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:122
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    41fc:	e8 81       	ld	r30, Y
    41fe:	f9 81       	ldd	r31, Y+1	; 0x01
    4200:	81 89       	ldd	r24, Z+17	; 0x11
    4202:	18 17       	cp	r17, r24
    4204:	40 f0       	brcs	.+16     	; 0x4216 <u8g2_NextPage+0x2c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:124
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    4206:	ce 01       	movw	r24, r28
    4208:	0e 94 91 2a 	call	0x5522	; 0x5522 <u8x8_RefreshDisplay>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:125
    return 0;
    420c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:133
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:127
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    4216:	fe 01       	movw	r30, r28
    4218:	e5 57       	subi	r30, 0x75	; 117
    421a:	ff 4f       	sbci	r31, 0xFF	; 255
    421c:	80 81       	ld	r24, Z
    421e:	88 23       	and	r24, r24
    4220:	19 f0       	breq	.+6      	; 0x4228 <u8g2_NextPage+0x3e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:129
  {
    u8g2_ClearBuffer(u8g2);
    4222:	ce 01       	movw	r24, r28
    4224:	0e 94 bb 20 	call	0x4176	; 0x4176 <u8g2_ClearBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:131
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    4228:	61 2f       	mov	r22, r17
    422a:	ce 01       	movw	r24, r28
    422c:	0e 94 d0 20 	call	0x41a0	; 0x41a0 <u8g2_SetBufferCurrTileRow>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:132
  return 1;
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	ed cf       	rjmp	.-38     	; 0x420e <u8g2_NextPage+0x24>

00004234 <u8g2_ClearDisplay>:
u8g2_ClearDisplay():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:40
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:41
  u8g2_FirstPage(u8g2);
    423a:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <u8g2_FirstPage>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:43 (discriminator 1)
  do {
  } while ( u8g2_NextPage(u8g2) );
    423e:	ce 01       	movw	r24, r28
    4240:	0e 94 f5 20 	call	0x41ea	; 0x41ea <u8g2_NextPage>
    4244:	81 11       	cpse	r24, r1
    4246:	fb cf       	rjmp	.-10     	; 0x423e <u8g2_ClearDisplay+0xa>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    4248:	60 e0       	ldi	r22, 0x00	; 0
    424a:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:53
}
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    4250:	0c 94 d0 20 	jmp	0x41a0	; 0x41a0 <u8g2_SetBufferCurrTileRow>

00004254 <u8g2_m_16_8_2>:
u8g2_m_16_8_2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:57
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
    4254:	22 e0       	ldi	r18, 0x02	; 2
    4256:	fc 01       	movw	r30, r24
    4258:	20 83       	st	Z, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:60
  return buf;
  #endif
}
    425a:	89 e1       	ldi	r24, 0x19	; 25
    425c:	93 e0       	ldi	r25, 0x03	; 3
    425e:	08 95       	ret

00004260 <u8g2_Setup_sh1106_i2c_128x64_noname_2>:
u8g2_Setup_sh1106_i2c_128x64_noname_2():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:714
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 2 */
void u8g2_Setup_sh1106_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    4260:	cf 92       	push	r12
    4262:	df 92       	push	r13
    4264:	ef 92       	push	r14
    4266:	ff 92       	push	r15
    4268:	0f 93       	push	r16
    426a:	1f 93       	push	r17
    426c:	cf 93       	push	r28
    426e:	df 93       	push	r29
    4270:	1f 92       	push	r1
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	7c 01       	movw	r14, r24
    4278:	6b 01       	movw	r12, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:717
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    427a:	89 01       	movw	r16, r18
    427c:	9a 01       	movw	r18, r20
    427e:	46 e1       	ldi	r20, 0x16	; 22
    4280:	59 e2       	ldi	r21, 0x29	; 41
    4282:	64 ef       	ldi	r22, 0xF4	; 244
    4284:	79 e2       	ldi	r23, 0x29	; 41
    4286:	0e 94 c1 2a 	call	0x5582	; 0x5582 <u8x8_Setup>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:718
  buf = u8g2_m_16_8_2(&tile_buf_height);
    428a:	ce 01       	movw	r24, r28
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	0e 94 2a 21 	call	0x4254	; 0x4254 <u8g2_m_16_8_2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:719
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    4292:	86 01       	movw	r16, r12
    4294:	2a ea       	ldi	r18, 0xAA	; 170
    4296:	36 e2       	ldi	r19, 0x26	; 38
    4298:	49 81       	ldd	r20, Y+1	; 0x01
    429a:	bc 01       	movw	r22, r24
    429c:	c7 01       	movw	r24, r14
    429e:	0e 94 1b 28 	call	0x5036	; 0x5036 <u8g2_SetupBuffer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:720
}
    42a2:	0f 90       	pop	r0
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	ff 90       	pop	r15
    42ae:	ef 90       	pop	r14
    42b0:	df 90       	pop	r13
    42b2:	cf 90       	pop	r12
    42b4:	08 95       	ret

000042b6 <u8g2_font_get_word>:
u8g2_font_get_word():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1275
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}
    42b6:	fc 01       	movw	r30, r24
    42b8:	e6 0f       	add	r30, r22
    42ba:	f1 1d       	adc	r31, r1
    42bc:	84 91       	lpm	r24, Z
    42be:	90 e0       	ldi	r25, 0x00	; 0
    42c0:	98 2f       	mov	r25, r24
    42c2:	88 27       	eor	r24, r24
    42c4:	31 96       	adiw	r30, 0x01	; 1
    42c6:	e4 91       	lpm	r30, Z
    42c8:	8e 0f       	add	r24, r30
    42ca:	91 1d       	adc	r25, r1
    42cc:	08 95       	ret

000042ce <u8g2_font_calc_vref_font>:
u8g2_font_calc_vref_font():
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	08 95       	ret

000042d4 <u8g2_read_font_info>:
u8g2_read_font_info():
    42d4:	0f 93       	push	r16
    42d6:	1f 93       	push	r17
    42d8:	cf 93       	push	r28
    42da:	df 93       	push	r29
    42dc:	ec 01       	movw	r28, r24
    42de:	8b 01       	movw	r16, r22
u8g2_font_get_byte():
    42e0:	fb 01       	movw	r30, r22
    42e2:	84 91       	lpm	r24, Z
u8g2_read_font_info():
    42e4:	88 83       	st	Y, r24
u8g2_font_get_byte():
    42e6:	31 96       	adiw	r30, 0x01	; 1
    42e8:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    42ea:	e9 83       	std	Y+1, r30	; 0x01
u8g2_font_get_byte():
    42ec:	fb 01       	movw	r30, r22
    42ee:	32 96       	adiw	r30, 0x02	; 2
    42f0:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    42f2:	ea 83       	std	Y+2, r30	; 0x02
u8g2_font_get_byte():
    42f4:	fb 01       	movw	r30, r22
    42f6:	33 96       	adiw	r30, 0x03	; 3
    42f8:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    42fa:	eb 83       	std	Y+3, r30	; 0x03
u8g2_font_get_byte():
    42fc:	fb 01       	movw	r30, r22
    42fe:	34 96       	adiw	r30, 0x04	; 4
    4300:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4302:	ec 83       	std	Y+4, r30	; 0x04
u8g2_font_get_byte():
    4304:	fb 01       	movw	r30, r22
    4306:	35 96       	adiw	r30, 0x05	; 5
    4308:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    430a:	ed 83       	std	Y+5, r30	; 0x05
u8g2_font_get_byte():
    430c:	fb 01       	movw	r30, r22
    430e:	36 96       	adiw	r30, 0x06	; 6
    4310:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4312:	ee 83       	std	Y+6, r30	; 0x06
u8g2_font_get_byte():
    4314:	fb 01       	movw	r30, r22
    4316:	37 96       	adiw	r30, 0x07	; 7
    4318:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    431a:	ef 83       	std	Y+7, r30	; 0x07
u8g2_font_get_byte():
    431c:	fb 01       	movw	r30, r22
    431e:	38 96       	adiw	r30, 0x08	; 8
    4320:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4322:	e8 87       	std	Y+8, r30	; 0x08
u8g2_font_get_byte():
    4324:	fb 01       	movw	r30, r22
    4326:	39 96       	adiw	r30, 0x09	; 9
    4328:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    432a:	e9 87       	std	Y+9, r30	; 0x09
u8g2_font_get_byte():
    432c:	fb 01       	movw	r30, r22
    432e:	3a 96       	adiw	r30, 0x0a	; 10
    4330:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4332:	ea 87       	std	Y+10, r30	; 0x0a
u8g2_font_get_byte():
    4334:	fb 01       	movw	r30, r22
    4336:	3b 96       	adiw	r30, 0x0b	; 11
    4338:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    433a:	eb 87       	std	Y+11, r30	; 0x0b
u8g2_font_get_byte():
    433c:	fb 01       	movw	r30, r22
    433e:	3c 96       	adiw	r30, 0x0c	; 12
    4340:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4342:	ec 87       	std	Y+12, r30	; 0x0c
u8g2_font_get_byte():
    4344:	fb 01       	movw	r30, r22
    4346:	3d 96       	adiw	r30, 0x0d	; 13
    4348:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    434a:	ed 87       	std	Y+13, r30	; 0x0d
u8g2_font_get_byte():
    434c:	fb 01       	movw	r30, r22
    434e:	3e 96       	adiw	r30, 0x0e	; 14
    4350:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4352:	ee 87       	std	Y+14, r30	; 0x0e
u8g2_font_get_byte():
    4354:	fb 01       	movw	r30, r22
    4356:	3f 96       	adiw	r30, 0x0f	; 15
    4358:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    435a:	ef 87       	std	Y+15, r30	; 0x0f
u8g2_font_get_byte():
    435c:	fb 01       	movw	r30, r22
    435e:	70 96       	adiw	r30, 0x10	; 16
    4360:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4362:	e8 8b       	std	Y+16, r30	; 0x10
    4364:	61 e1       	ldi	r22, 0x11	; 17
    4366:	c8 01       	movw	r24, r16
    4368:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <u8g2_font_get_word>
    436c:	9a 8b       	std	Y+18, r25	; 0x12
    436e:	89 8b       	std	Y+17, r24	; 0x11
    4370:	63 e1       	ldi	r22, 0x13	; 19
    4372:	c8 01       	movw	r24, r16
    4374:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <u8g2_font_get_word>
    4378:	9c 8b       	std	Y+20, r25	; 0x14
    437a:	8b 8b       	std	Y+19, r24	; 0x13
    437c:	65 e1       	ldi	r22, 0x15	; 21
    437e:	c8 01       	movw	r24, r16
    4380:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <u8g2_font_get_word>
    4384:	9e 8b       	std	Y+22, r25	; 0x16
    4386:	8d 8b       	std	Y+21, r24	; 0x15
    4388:	df 91       	pop	r29
    438a:	cf 91       	pop	r28
    438c:	1f 91       	pop	r17
    438e:	0f 91       	pop	r16
    4390:	08 95       	ret

00004392 <u8g2_font_decode_get_unsigned_bits>:
u8g2_font_decode_get_unsigned_bits():
    4392:	dc 01       	movw	r26, r24
    4394:	1a 96       	adiw	r26, 0x0a	; 10
    4396:	4c 91       	ld	r20, X
    4398:	1a 97       	sbiw	r26, 0x0a	; 10
    439a:	ed 91       	ld	r30, X+
    439c:	fc 91       	ld	r31, X
    439e:	11 97       	sbiw	r26, 0x01	; 1
    43a0:	24 91       	lpm	r18, Z
    43a2:	30 e0       	ldi	r19, 0x00	; 0
    43a4:	04 2e       	mov	r0, r20
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <u8g2_font_decode_get_unsigned_bits+0x1a>
    43a8:	35 95       	asr	r19
    43aa:	27 95       	ror	r18
    43ac:	0a 94       	dec	r0
    43ae:	e2 f7       	brpl	.-8      	; 0x43a8 <u8g2_font_decode_get_unsigned_bits+0x16>
    43b0:	84 2f       	mov	r24, r20
    43b2:	86 0f       	add	r24, r22
    43b4:	88 30       	cpi	r24, 0x08	; 8
    43b6:	68 f0       	brcs	.+26     	; 0x43d2 <u8g2_font_decode_get_unsigned_bits+0x40>
    43b8:	31 96       	adiw	r30, 0x01	; 1
    43ba:	11 96       	adiw	r26, 0x01	; 1
    43bc:	fc 93       	st	X, r31
    43be:	ee 93       	st	-X, r30
    43c0:	e4 91       	lpm	r30, Z
    43c2:	98 e0       	ldi	r25, 0x08	; 8
    43c4:	94 1b       	sub	r25, r20
    43c6:	01 c0       	rjmp	.+2      	; 0x43ca <u8g2_font_decode_get_unsigned_bits+0x38>
    43c8:	ee 0f       	add	r30, r30
    43ca:	9a 95       	dec	r25
    43cc:	ea f7       	brpl	.-6      	; 0x43c8 <u8g2_font_decode_get_unsigned_bits+0x36>
    43ce:	2e 2b       	or	r18, r30
    43d0:	88 50       	subi	r24, 0x08	; 8
    43d2:	1a 96       	adiw	r26, 0x0a	; 10
    43d4:	8c 93       	st	X, r24
    43d6:	8f ef       	ldi	r24, 0xFF	; 255
    43d8:	9f ef       	ldi	r25, 0xFF	; 255
    43da:	01 c0       	rjmp	.+2      	; 0x43de <u8g2_font_decode_get_unsigned_bits+0x4c>
    43dc:	88 0f       	add	r24, r24
    43de:	6a 95       	dec	r22
    43e0:	ea f7       	brpl	.-6      	; 0x43dc <u8g2_font_decode_get_unsigned_bits+0x4a>
    43e2:	80 95       	com	r24
    43e4:	82 23       	and	r24, r18
    43e6:	08 95       	ret

000043e8 <u8g2_font_setup_decode>:
u8g2_font_setup_decode():
    43e8:	0f 93       	push	r16
    43ea:	1f 93       	push	r17
    43ec:	cf 93       	push	r28
    43ee:	df 93       	push	r29
    43f0:	8c 01       	movw	r16, r24
    43f2:	ec 01       	movw	r28, r24
    43f4:	c2 5a       	subi	r28, 0xA2	; 162
    43f6:	df 4f       	sbci	r29, 0xFF	; 255
    43f8:	79 83       	std	Y+1, r23	; 0x01
    43fa:	68 83       	st	Y, r22
    43fc:	1a 86       	std	Y+10, r1	; 0x0a
    43fe:	fc 01       	movw	r30, r24
    4400:	ef 58       	subi	r30, 0x8F	; 143
    4402:	ff 4f       	sbci	r31, 0xFF	; 255
    4404:	60 81       	ld	r22, Z
    4406:	ce 01       	movw	r24, r28
    4408:	0e 94 c9 21 	call	0x4392	; 0x4392 <u8g2_font_decode_get_unsigned_bits>
    440c:	88 87       	std	Y+8, r24	; 0x08
    440e:	f8 01       	movw	r30, r16
    4410:	ee 58       	subi	r30, 0x8E	; 142
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	60 81       	ld	r22, Z
    4416:	ce 01       	movw	r24, r28
    4418:	0e 94 c9 21 	call	0x4392	; 0x4392 <u8g2_font_decode_get_unsigned_bits>
    441c:	89 87       	std	Y+9, r24	; 0x09
    441e:	f8 01       	movw	r30, r16
    4420:	e6 57       	subi	r30, 0x76	; 118
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	90 81       	ld	r25, Z
    4426:	9c 87       	std	Y+12, r25	; 0x0c
    4428:	81 e0       	ldi	r24, 0x01	; 1
    442a:	91 11       	cpse	r25, r1
    442c:	80 e0       	ldi	r24, 0x00	; 0
    442e:	8d 87       	std	Y+13, r24	; 0x0d
    4430:	df 91       	pop	r29
    4432:	cf 91       	pop	r28
    4434:	1f 91       	pop	r17
    4436:	0f 91       	pop	r16
    4438:	08 95       	ret

0000443a <u8g2_font_decode_get_signed_bits>:
u8g2_font_decode_get_signed_bits():
    443a:	cf 93       	push	r28
    443c:	c6 2f       	mov	r28, r22
    443e:	0e 94 c9 21 	call	0x4392	; 0x4392 <u8g2_font_decode_get_unsigned_bits>
    4442:	c1 50       	subi	r28, 0x01	; 1
    4444:	21 e0       	ldi	r18, 0x01	; 1
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	01 c0       	rjmp	.+2      	; 0x444c <u8g2_font_decode_get_signed_bits+0x12>
    444a:	22 0f       	add	r18, r18
    444c:	ca 95       	dec	r28
    444e:	ea f7       	brpl	.-6      	; 0x444a <u8g2_font_decode_get_signed_bits+0x10>
    4450:	82 1b       	sub	r24, r18
    4452:	cf 91       	pop	r28
    4454:	08 95       	ret

00004456 <u8g2_add_vector_y>:
u8g2_add_vector_y():
    4456:	21 30       	cpi	r18, 0x01	; 1
    4458:	69 f0       	breq	.+26     	; 0x4474 <u8g2_add_vector_y+0x1e>
    445a:	38 f0       	brcs	.+14     	; 0x446a <u8g2_add_vector_y+0x14>
    445c:	22 30       	cpi	r18, 0x02	; 2
    445e:	79 f0       	breq	.+30     	; 0x447e <u8g2_add_vector_y+0x28>
    4460:	86 1b       	sub	r24, r22
    4462:	91 09       	sbc	r25, r1
    4464:	67 fd       	sbrc	r22, 7
    4466:	93 95       	inc	r25
    4468:	08 95       	ret
    446a:	84 0f       	add	r24, r20
    446c:	91 1d       	adc	r25, r1
    446e:	47 fd       	sbrc	r20, 7
    4470:	9a 95       	dec	r25
    4472:	08 95       	ret
    4474:	86 0f       	add	r24, r22
    4476:	91 1d       	adc	r25, r1
    4478:	67 fd       	sbrc	r22, 7
    447a:	9a 95       	dec	r25
    447c:	08 95       	ret
    447e:	84 1b       	sub	r24, r20
    4480:	91 09       	sbc	r25, r1
    4482:	47 fd       	sbrc	r20, 7
    4484:	93 95       	inc	r25
    4486:	08 95       	ret

00004488 <u8g2_add_vector_x>:
u8g2_add_vector_x():
    4488:	21 30       	cpi	r18, 0x01	; 1
    448a:	69 f0       	breq	.+26     	; 0x44a6 <u8g2_add_vector_x+0x1e>
    448c:	38 f0       	brcs	.+14     	; 0x449c <u8g2_add_vector_x+0x14>
    448e:	22 30       	cpi	r18, 0x02	; 2
    4490:	79 f0       	breq	.+30     	; 0x44b0 <u8g2_add_vector_x+0x28>
    4492:	84 0f       	add	r24, r20
    4494:	91 1d       	adc	r25, r1
    4496:	47 fd       	sbrc	r20, 7
    4498:	9a 95       	dec	r25
    449a:	08 95       	ret
    449c:	86 0f       	add	r24, r22
    449e:	91 1d       	adc	r25, r1
    44a0:	67 fd       	sbrc	r22, 7
    44a2:	9a 95       	dec	r25
    44a4:	08 95       	ret
    44a6:	84 1b       	sub	r24, r20
    44a8:	91 09       	sbc	r25, r1
    44aa:	47 fd       	sbrc	r20, 7
    44ac:	93 95       	inc	r25
    44ae:	08 95       	ret
    44b0:	86 1b       	sub	r24, r22
    44b2:	91 09       	sbc	r25, r1
    44b4:	67 fd       	sbrc	r22, 7
    44b6:	93 95       	inc	r25
    44b8:	08 95       	ret

000044ba <u8g2_font_decode_len>:
u8g2_font_decode_len():
    44ba:	3f 92       	push	r3
    44bc:	4f 92       	push	r4
    44be:	5f 92       	push	r5
    44c0:	6f 92       	push	r6
    44c2:	7f 92       	push	r7
    44c4:	8f 92       	push	r8
    44c6:	9f 92       	push	r9
    44c8:	af 92       	push	r10
    44ca:	bf 92       	push	r11
    44cc:	cf 92       	push	r12
    44ce:	df 92       	push	r13
    44d0:	ef 92       	push	r14
    44d2:	ff 92       	push	r15
    44d4:	0f 93       	push	r16
    44d6:	1f 93       	push	r17
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	7c 01       	movw	r14, r24
    44de:	16 2f       	mov	r17, r22
    44e0:	44 2e       	mov	r4, r20
    44e2:	ec 01       	movw	r28, r24
    44e4:	c2 5a       	subi	r28, 0xA2	; 162
    44e6:	df 4f       	sbci	r29, 0xFF	; 255
    44e8:	5e 80       	ldd	r5, Y+6	; 0x06
    44ea:	6f 80       	ldd	r6, Y+7	; 0x07
    44ec:	6c 01       	movw	r12, r24
    44ee:	8a e8       	ldi	r24, 0x8A	; 138
    44f0:	c8 0e       	add	r12, r24
    44f2:	d1 1c       	adc	r13, r1
    44f4:	78 84       	ldd	r7, Y+8	; 0x08
    44f6:	75 18       	sub	r7, r5
    44f8:	31 2e       	mov	r3, r17
    44fa:	71 16       	cp	r7, r17
    44fc:	08 f4       	brcc	.+2      	; 0x4500 <u8g2_font_decode_len+0x46>
    44fe:	37 2c       	mov	r3, r7
    4500:	8c 80       	ldd	r8, Y+4	; 0x04
    4502:	9d 80       	ldd	r9, Y+5	; 0x05
    4504:	0e 85       	ldd	r16, Y+14	; 0x0e
    4506:	20 2f       	mov	r18, r16
    4508:	46 2d       	mov	r20, r6
    450a:	65 2d       	mov	r22, r5
    450c:	8a 81       	ldd	r24, Y+2	; 0x02
    450e:	9b 81       	ldd	r25, Y+3	; 0x03
    4510:	0e 94 44 22 	call	0x4488	; 0x4488 <u8g2_add_vector_x>
    4514:	5c 01       	movw	r10, r24
    4516:	20 2f       	mov	r18, r16
    4518:	46 2d       	mov	r20, r6
    451a:	65 2d       	mov	r22, r5
    451c:	c4 01       	movw	r24, r8
    451e:	0e 94 2b 22 	call	0x4456	; 0x4456 <u8g2_add_vector_y>
    4522:	ac 01       	movw	r20, r24
    4524:	44 20       	and	r4, r4
    4526:	79 f0       	breq	.+30     	; 0x4546 <u8g2_font_decode_len+0x8c>
    4528:	8c 85       	ldd	r24, Y+12	; 0x0c
    452a:	f6 01       	movw	r30, r12
    452c:	80 83       	st	Z, r24
    452e:	23 2d       	mov	r18, r3
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	b5 01       	movw	r22, r10
    4534:	c7 01       	movw	r24, r14
    4536:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
    453a:	17 15       	cp	r17, r7
    453c:	48 f0       	brcs	.+18     	; 0x4550 <u8g2_font_decode_len+0x96>
    453e:	17 19       	sub	r17, r7
    4540:	63 94       	inc	r6
    4542:	51 2c       	mov	r5, r1
    4544:	d7 cf       	rjmp	.-82     	; 0x44f4 <u8g2_font_decode_len+0x3a>
    4546:	8b 85       	ldd	r24, Y+11	; 0x0b
    4548:	81 11       	cpse	r24, r1
    454a:	f7 cf       	rjmp	.-18     	; 0x453a <u8g2_font_decode_len+0x80>
    454c:	8d 85       	ldd	r24, Y+13	; 0x0d
    454e:	ed cf       	rjmp	.-38     	; 0x452a <u8g2_font_decode_len+0x70>
    4550:	15 0d       	add	r17, r5
    4552:	1e 83       	std	Y+6, r17	; 0x06
    4554:	6f 82       	std	Y+7, r6	; 0x07
    4556:	df 91       	pop	r29
    4558:	cf 91       	pop	r28
    455a:	1f 91       	pop	r17
    455c:	0f 91       	pop	r16
    455e:	ff 90       	pop	r15
    4560:	ef 90       	pop	r14
    4562:	df 90       	pop	r13
    4564:	cf 90       	pop	r12
    4566:	bf 90       	pop	r11
    4568:	af 90       	pop	r10
    456a:	9f 90       	pop	r9
    456c:	8f 90       	pop	r8
    456e:	7f 90       	pop	r7
    4570:	6f 90       	pop	r6
    4572:	5f 90       	pop	r5
    4574:	4f 90       	pop	r4
    4576:	3f 90       	pop	r3
    4578:	08 95       	ret

0000457a <u8g2_font_decode_glyph>:
u8g2_font_decode_glyph():
    457a:	8f 92       	push	r8
    457c:	9f 92       	push	r9
    457e:	af 92       	push	r10
    4580:	bf 92       	push	r11
    4582:	cf 92       	push	r12
    4584:	df 92       	push	r13
    4586:	ef 92       	push	r14
    4588:	ff 92       	push	r15
    458a:	0f 93       	push	r16
    458c:	1f 93       	push	r17
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
    4592:	7c 01       	movw	r14, r24
    4594:	ec 01       	movw	r28, r24
    4596:	c2 5a       	subi	r28, 0xA2	; 162
    4598:	df 4f       	sbci	r29, 0xFF	; 255
    459a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <u8g2_font_setup_decode>
    459e:	f7 01       	movw	r30, r14
    45a0:	e9 59       	subi	r30, 0x99	; 153
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	b0 80       	ld	r11, Z
    45a6:	3c 96       	adiw	r30, 0x0c	; 12
    45a8:	60 81       	ld	r22, Z
    45aa:	ce 01       	movw	r24, r28
    45ac:	0e 94 1d 22 	call	0x443a	; 0x443a <u8g2_font_decode_get_signed_bits>
    45b0:	88 2e       	mov	r8, r24
    45b2:	f7 01       	movw	r30, r14
    45b4:	ec 58       	subi	r30, 0x8C	; 140
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	60 81       	ld	r22, Z
    45ba:	ce 01       	movw	r24, r28
    45bc:	0e 94 1d 22 	call	0x443a	; 0x443a <u8g2_font_decode_get_signed_bits>
    45c0:	08 2f       	mov	r16, r24
    45c2:	f7 01       	movw	r30, r14
    45c4:	eb 58       	subi	r30, 0x8B	; 139
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	60 81       	ld	r22, Z
    45ca:	ce 01       	movw	r24, r28
    45cc:	0e 94 1d 22 	call	0x443a	; 0x443a <u8g2_font_decode_get_signed_bits>
    45d0:	a8 2e       	mov	r10, r24
    45d2:	98 84       	ldd	r9, Y+8	; 0x08
    45d4:	19 14       	cp	r1, r9
    45d6:	0c f0       	brlt	.+2      	; 0x45da <u8g2_font_decode_glyph+0x60>
    45d8:	61 c0       	rjmp	.+194    	; 0x469c <u8g2_font_decode_glyph+0x122>
    45da:	1e 85       	ldd	r17, Y+14	; 0x0e
    45dc:	0b 0d       	add	r16, r11
    45de:	01 95       	neg	r16
    45e0:	21 2f       	mov	r18, r17
    45e2:	40 2f       	mov	r20, r16
    45e4:	68 2d       	mov	r22, r8
    45e6:	8a 81       	ldd	r24, Y+2	; 0x02
    45e8:	9b 81       	ldd	r25, Y+3	; 0x03
    45ea:	0e 94 44 22 	call	0x4488	; 0x4488 <u8g2_add_vector_x>
    45ee:	6c 01       	movw	r12, r24
    45f0:	9b 83       	std	Y+3, r25	; 0x03
    45f2:	8a 83       	std	Y+2, r24	; 0x02
    45f4:	21 2f       	mov	r18, r17
    45f6:	40 2f       	mov	r20, r16
    45f8:	68 2d       	mov	r22, r8
    45fa:	8c 81       	ldd	r24, Y+4	; 0x04
    45fc:	9d 81       	ldd	r25, Y+5	; 0x05
    45fe:	0e 94 2b 22 	call	0x4456	; 0x4456 <u8g2_add_vector_y>
    4602:	9d 83       	std	Y+5, r25	; 0x05
    4604:	8c 83       	std	Y+4, r24	; 0x04
    4606:	11 30       	cpi	r17, 0x01	; 1
    4608:	09 f4       	brne	.+2      	; 0x460c <u8g2_font_decode_glyph+0x92>
    460a:	56 c0       	rjmp	.+172    	; 0x46b8 <u8g2_font_decode_glyph+0x13e>
    460c:	48 f0       	brcs	.+18     	; 0x4620 <u8g2_font_decode_glyph+0xa6>
    460e:	12 30       	cpi	r17, 0x02	; 2
    4610:	09 f4       	brne	.+2      	; 0x4614 <u8g2_font_decode_glyph+0x9a>
    4612:	63 c0       	rjmp	.+198    	; 0x46da <u8g2_font_decode_glyph+0x160>
    4614:	13 30       	cpi	r17, 0x03	; 3
    4616:	09 f4       	brne	.+2      	; 0x461a <u8g2_font_decode_glyph+0xa0>
    4618:	76 c0       	rjmp	.+236    	; 0x4706 <u8g2_font_decode_glyph+0x18c>
    461a:	8c 01       	movw	r16, r24
    461c:	96 01       	movw	r18, r12
    461e:	0a c0       	rjmp	.+20     	; 0x4634 <u8g2_font_decode_glyph+0xba>
    4620:	96 01       	movw	r18, r12
    4622:	29 0d       	add	r18, r9
    4624:	31 1d       	adc	r19, r1
    4626:	97 fc       	sbrc	r9, 7
    4628:	3a 95       	dec	r19
    462a:	8c 01       	movw	r16, r24
    462c:	0b 0d       	add	r16, r11
    462e:	11 1d       	adc	r17, r1
    4630:	b7 fc       	sbrc	r11, 7
    4632:	1a 95       	dec	r17
    4634:	ac 01       	movw	r20, r24
    4636:	b6 01       	movw	r22, r12
    4638:	c7 01       	movw	r24, r14
    463a:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <u8g2_IsIntersection>
    463e:	88 23       	and	r24, r24
    4640:	69 f1       	breq	.+90     	; 0x469c <u8g2_font_decode_glyph+0x122>
    4642:	1e 82       	std	Y+6, r1	; 0x06
    4644:	1f 82       	std	Y+7, r1	; 0x07
    4646:	87 01       	movw	r16, r14
    4648:	01 59       	subi	r16, 0x91	; 145
    464a:	1f 4f       	sbci	r17, 0xFF	; 255
    464c:	67 01       	movw	r12, r14
    464e:	80 e7       	ldi	r24, 0x70	; 112
    4650:	c8 0e       	add	r12, r24
    4652:	d1 1c       	adc	r13, r1
    4654:	f8 01       	movw	r30, r16
    4656:	60 81       	ld	r22, Z
    4658:	ce 01       	movw	r24, r28
    465a:	0e 94 c9 21 	call	0x4392	; 0x4392 <u8g2_font_decode_get_unsigned_bits>
    465e:	88 2e       	mov	r8, r24
    4660:	f6 01       	movw	r30, r12
    4662:	60 81       	ld	r22, Z
    4664:	ce 01       	movw	r24, r28
    4666:	0e 94 c9 21 	call	0x4392	; 0x4392 <u8g2_font_decode_get_unsigned_bits>
    466a:	98 2e       	mov	r9, r24
    466c:	40 e0       	ldi	r20, 0x00	; 0
    466e:	68 2d       	mov	r22, r8
    4670:	c7 01       	movw	r24, r14
    4672:	0e 94 5d 22 	call	0x44ba	; 0x44ba <u8g2_font_decode_len>
    4676:	41 e0       	ldi	r20, 0x01	; 1
    4678:	69 2d       	mov	r22, r9
    467a:	c7 01       	movw	r24, r14
    467c:	0e 94 5d 22 	call	0x44ba	; 0x44ba <u8g2_font_decode_len>
    4680:	61 e0       	ldi	r22, 0x01	; 1
    4682:	ce 01       	movw	r24, r28
    4684:	0e 94 c9 21 	call	0x4392	; 0x4392 <u8g2_font_decode_get_unsigned_bits>
    4688:	81 11       	cpse	r24, r1
    468a:	f0 cf       	rjmp	.-32     	; 0x466c <u8g2_font_decode_glyph+0xf2>
    468c:	8f 81       	ldd	r24, Y+7	; 0x07
    468e:	8b 15       	cp	r24, r11
    4690:	0c f3       	brlt	.-62     	; 0x4654 <u8g2_font_decode_glyph+0xda>
    4692:	f7 01       	movw	r30, r14
    4694:	e6 57       	subi	r30, 0x76	; 118
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	8c 85       	ldd	r24, Y+12	; 0x0c
    469a:	80 83       	st	Z, r24
    469c:	8a 2d       	mov	r24, r10
    469e:	df 91       	pop	r29
    46a0:	cf 91       	pop	r28
    46a2:	1f 91       	pop	r17
    46a4:	0f 91       	pop	r16
    46a6:	ff 90       	pop	r15
    46a8:	ef 90       	pop	r14
    46aa:	df 90       	pop	r13
    46ac:	cf 90       	pop	r12
    46ae:	bf 90       	pop	r11
    46b0:	af 90       	pop	r10
    46b2:	9f 90       	pop	r9
    46b4:	8f 90       	pop	r8
    46b6:	08 95       	ret
    46b8:	41 e0       	ldi	r20, 0x01	; 1
    46ba:	50 e0       	ldi	r21, 0x00	; 0
    46bc:	4b 19       	sub	r20, r11
    46be:	51 09       	sbc	r21, r1
    46c0:	b7 fc       	sbrc	r11, 7
    46c2:	53 95       	inc	r21
    46c4:	96 01       	movw	r18, r12
    46c6:	2f 5f       	subi	r18, 0xFF	; 255
    46c8:	3f 4f       	sbci	r19, 0xFF	; 255
    46ca:	8c 01       	movw	r16, r24
    46cc:	09 0d       	add	r16, r9
    46ce:	11 1d       	adc	r17, r1
    46d0:	97 fc       	sbrc	r9, 7
    46d2:	1a 95       	dec	r17
    46d4:	c4 0e       	add	r12, r20
    46d6:	d5 1e       	adc	r13, r21
    46d8:	ad cf       	rjmp	.-166    	; 0x4634 <u8g2_font_decode_glyph+0xba>
    46da:	41 e0       	ldi	r20, 0x01	; 1
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	ba 01       	movw	r22, r20
    46e0:	69 19       	sub	r22, r9
    46e2:	71 09       	sbc	r23, r1
    46e4:	97 fc       	sbrc	r9, 7
    46e6:	73 95       	inc	r23
    46e8:	96 01       	movw	r18, r12
    46ea:	2f 5f       	subi	r18, 0xFF	; 255
    46ec:	3f 4f       	sbci	r19, 0xFF	; 255
    46ee:	4b 19       	sub	r20, r11
    46f0:	51 09       	sbc	r21, r1
    46f2:	b7 fc       	sbrc	r11, 7
    46f4:	53 95       	inc	r21
    46f6:	8c 01       	movw	r16, r24
    46f8:	0f 5f       	subi	r16, 0xFF	; 255
    46fa:	1f 4f       	sbci	r17, 0xFF	; 255
    46fc:	84 0f       	add	r24, r20
    46fe:	95 1f       	adc	r25, r21
    4700:	c6 0e       	add	r12, r22
    4702:	d7 1e       	adc	r13, r23
    4704:	97 cf       	rjmp	.-210    	; 0x4634 <u8g2_font_decode_glyph+0xba>
    4706:	96 01       	movw	r18, r12
    4708:	2b 0d       	add	r18, r11
    470a:	31 1d       	adc	r19, r1
    470c:	b7 fc       	sbrc	r11, 7
    470e:	3a 95       	dec	r19
    4710:	41 e0       	ldi	r20, 0x01	; 1
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	49 19       	sub	r20, r9
    4716:	51 09       	sbc	r21, r1
    4718:	97 fc       	sbrc	r9, 7
    471a:	53 95       	inc	r21
    471c:	8c 01       	movw	r16, r24
    471e:	0f 5f       	subi	r16, 0xFF	; 255
    4720:	1f 4f       	sbci	r17, 0xFF	; 255
    4722:	84 0f       	add	r24, r20
    4724:	95 1f       	adc	r25, r21
    4726:	86 cf       	rjmp	.-244    	; 0x4634 <u8g2_font_decode_glyph+0xba>

00004728 <u8g2_font_get_glyph_data>:
u8g2_font_get_glyph_data():
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	fc 01       	movw	r30, r24
    4736:	e6 5a       	subi	r30, 0xA6	; 166
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	20 81       	ld	r18, Z
    473c:	31 81       	ldd	r19, Z+1	; 0x01
    473e:	29 5e       	subi	r18, 0xE9	; 233
    4740:	3f 4f       	sbci	r19, 0xFF	; 255
    4742:	6f 3f       	cpi	r22, 0xFF	; 255
    4744:	71 05       	cpc	r23, r1
    4746:	09 f0       	breq	.+2      	; 0x474a <u8g2_font_get_glyph_data+0x22>
    4748:	48 f5       	brcc	.+82     	; 0x479c <u8g2_font_get_glyph_data+0x74>
    474a:	61 36       	cpi	r22, 0x61	; 97
    474c:	71 05       	cpc	r23, r1
    474e:	d8 f0       	brcs	.+54     	; 0x4786 <u8g2_font_get_glyph_data+0x5e>
    4750:	80 58       	subi	r24, 0x80	; 128
    4752:	9f 4f       	sbci	r25, 0xFF	; 255
    4754:	fc 01       	movw	r30, r24
    4756:	80 81       	ld	r24, Z
    4758:	91 81       	ldd	r25, Z+1	; 0x01
    475a:	28 0f       	add	r18, r24
    475c:	39 1f       	adc	r19, r25
    475e:	c9 01       	movw	r24, r18
    4760:	01 96       	adiw	r24, 0x01	; 1
    4762:	fc 01       	movw	r30, r24
    4764:	44 91       	lpm	r20, Z
    4766:	44 23       	and	r20, r20
    4768:	09 f4       	brne	.+2      	; 0x476c <u8g2_font_get_glyph_data+0x44>
    476a:	47 c0       	rjmp	.+142    	; 0x47fa <u8g2_font_get_glyph_data+0xd2>
    476c:	f9 01       	movw	r30, r18
    476e:	44 91       	lpm	r20, Z
    4770:	46 17       	cp	r20, r22
    4772:	17 06       	cpc	r1, r23
    4774:	71 f4       	brne	.+28     	; 0x4792 <u8g2_font_get_glyph_data+0x6a>
    4776:	01 96       	adiw	r24, 0x01	; 1
    4778:	df 91       	pop	r29
    477a:	cf 91       	pop	r28
    477c:	1f 91       	pop	r17
    477e:	0f 91       	pop	r16
    4780:	ff 90       	pop	r15
    4782:	ef 90       	pop	r14
    4784:	08 95       	ret
    4786:	61 34       	cpi	r22, 0x41	; 65
    4788:	71 05       	cpc	r23, r1
    478a:	48 f3       	brcs	.-46     	; 0x475e <u8g2_font_get_glyph_data+0x36>
    478c:	82 58       	subi	r24, 0x82	; 130
    478e:	9f 4f       	sbci	r25, 0xFF	; 255
    4790:	e1 cf       	rjmp	.-62     	; 0x4754 <u8g2_font_get_glyph_data+0x2c>
    4792:	fc 01       	movw	r30, r24
    4794:	84 91       	lpm	r24, Z
    4796:	28 0f       	add	r18, r24
    4798:	31 1d       	adc	r19, r1
    479a:	e1 cf       	rjmp	.-62     	; 0x475e <u8g2_font_get_glyph_data+0x36>
    479c:	8b 01       	movw	r16, r22
    479e:	fc 01       	movw	r30, r24
    47a0:	ee 57       	subi	r30, 0x7E	; 126
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	c0 81       	ld	r28, Z
    47a6:	d1 81       	ldd	r29, Z+1	; 0x01
    47a8:	c2 0f       	add	r28, r18
    47aa:	d3 1f       	adc	r29, r19
    47ac:	7e 01       	movw	r14, r28
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	c7 01       	movw	r24, r14
    47b2:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <u8g2_font_get_word>
    47b6:	c8 0f       	add	r28, r24
    47b8:	d9 1f       	adc	r29, r25
    47ba:	62 e0       	ldi	r22, 0x02	; 2
    47bc:	c7 01       	movw	r24, r14
    47be:	0e 94 5b 21 	call	0x42b6	; 0x42b6 <u8g2_font_get_word>
    47c2:	f4 e0       	ldi	r31, 0x04	; 4
    47c4:	ef 0e       	add	r14, r31
    47c6:	f1 1c       	adc	r15, r1
    47c8:	80 17       	cp	r24, r16
    47ca:	91 07       	cpc	r25, r17
    47cc:	80 f3       	brcs	.-32     	; 0x47ae <u8g2_font_get_glyph_data+0x86>
    47ce:	fe 01       	movw	r30, r28
    47d0:	84 91       	lpm	r24, Z
    47d2:	90 e0       	ldi	r25, 0x00	; 0
    47d4:	98 2f       	mov	r25, r24
    47d6:	88 27       	eor	r24, r24
    47d8:	31 96       	adiw	r30, 0x01	; 1
    47da:	e4 91       	lpm	r30, Z
    47dc:	8e 2b       	or	r24, r30
    47de:	00 97       	sbiw	r24, 0x00	; 0
    47e0:	61 f0       	breq	.+24     	; 0x47fa <u8g2_font_get_glyph_data+0xd2>
    47e2:	08 17       	cp	r16, r24
    47e4:	19 07       	cpc	r17, r25
    47e6:	19 f4       	brne	.+6      	; 0x47ee <u8g2_font_get_glyph_data+0xc6>
    47e8:	ce 01       	movw	r24, r28
    47ea:	03 96       	adiw	r24, 0x03	; 3
    47ec:	c5 cf       	rjmp	.-118    	; 0x4778 <u8g2_font_get_glyph_data+0x50>
    47ee:	fe 01       	movw	r30, r28
    47f0:	32 96       	adiw	r30, 0x02	; 2
    47f2:	e4 91       	lpm	r30, Z
    47f4:	ce 0f       	add	r28, r30
    47f6:	d1 1d       	adc	r29, r1
    47f8:	ea cf       	rjmp	.-44     	; 0x47ce <u8g2_font_get_glyph_data+0xa6>
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	bc cf       	rjmp	.-136    	; 0x4778 <u8g2_font_get_glyph_data+0x50>

00004800 <u8g2_DrawGlyph>:
u8g2_DrawGlyph():
    4800:	cf 92       	push	r12
    4802:	df 92       	push	r13
    4804:	ef 92       	push	r14
    4806:	ff 92       	push	r15
    4808:	0f 93       	push	r16
    480a:	1f 93       	push	r17
    480c:	cf 93       	push	r28
    480e:	df 93       	push	r29
    4810:	ec 01       	movw	r28, r24
    4812:	7b 01       	movw	r14, r22
    4814:	8a 01       	movw	r16, r20
    4816:	69 01       	movw	r12, r18
    4818:	fc 01       	movw	r30, r24
    481a:	e4 59       	subi	r30, 0x94	; 148
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	80 81       	ld	r24, Z
    4820:	81 30       	cpi	r24, 0x01	; 1
    4822:	79 f1       	breq	.+94     	; 0x4882 <u8g2_DrawGlyph+0x82>
    4824:	18 f1       	brcs	.+70     	; 0x486c <u8g2_DrawGlyph+0x6c>
    4826:	82 30       	cpi	r24, 0x02	; 2
    4828:	b9 f1       	breq	.+110    	; 0x4898 <u8g2_DrawGlyph+0x98>
    482a:	83 30       	cpi	r24, 0x03	; 3
    482c:	09 f4       	brne	.+2      	; 0x4830 <u8g2_DrawGlyph+0x30>
    482e:	3f c0       	rjmp	.+126    	; 0x48ae <u8g2_DrawGlyph+0xae>
u8g2_font_draw_glyph():
    4830:	fe 01       	movw	r30, r28
    4832:	e0 5a       	subi	r30, 0xA0	; 160
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	f1 82       	std	Z+1, r15	; 0x01
    4838:	e0 82       	st	Z, r14
    483a:	32 96       	adiw	r30, 0x02	; 2
    483c:	11 83       	std	Z+1, r17	; 0x01
    483e:	00 83       	st	Z, r16
    4840:	b6 01       	movw	r22, r12
    4842:	ce 01       	movw	r24, r28
    4844:	0e 94 94 23 	call	0x4728	; 0x4728 <u8g2_font_get_glyph_data>
    4848:	00 97       	sbiw	r24, 0x00	; 0
    484a:	e1 f1       	breq	.+120    	; 0x48c4 <u8g2_DrawGlyph+0xc4>
    484c:	bc 01       	movw	r22, r24
    484e:	ce 01       	movw	r24, r28
    4850:	0e 94 bd 22 	call	0x457a	; 0x457a <u8g2_font_decode_glyph>
    4854:	08 2e       	mov	r0, r24
    4856:	00 0c       	add	r0, r0
    4858:	99 0b       	sbc	r25, r25
u8g2_DrawGlyph():
    485a:	df 91       	pop	r29
    485c:	cf 91       	pop	r28
    485e:	1f 91       	pop	r17
    4860:	0f 91       	pop	r16
    4862:	ff 90       	pop	r15
    4864:	ef 90       	pop	r14
    4866:	df 90       	pop	r13
    4868:	cf 90       	pop	r12
    486a:	08 95       	ret
    486c:	fe 01       	movw	r30, r28
    486e:	e4 5a       	subi	r30, 0xA4	; 164
    4870:	ff 4f       	sbci	r31, 0xFF	; 255
    4872:	01 90       	ld	r0, Z+
    4874:	f0 81       	ld	r31, Z
    4876:	e0 2d       	mov	r30, r0
    4878:	ce 01       	movw	r24, r28
    487a:	09 95       	icall
    487c:	08 0f       	add	r16, r24
    487e:	19 1f       	adc	r17, r25
    4880:	d7 cf       	rjmp	.-82     	; 0x4830 <u8g2_DrawGlyph+0x30>
    4882:	fe 01       	movw	r30, r28
    4884:	e4 5a       	subi	r30, 0xA4	; 164
    4886:	ff 4f       	sbci	r31, 0xFF	; 255
    4888:	01 90       	ld	r0, Z+
    488a:	f0 81       	ld	r31, Z
    488c:	e0 2d       	mov	r30, r0
    488e:	ce 01       	movw	r24, r28
    4890:	09 95       	icall
    4892:	e8 1a       	sub	r14, r24
    4894:	f9 0a       	sbc	r15, r25
    4896:	cc cf       	rjmp	.-104    	; 0x4830 <u8g2_DrawGlyph+0x30>
    4898:	fe 01       	movw	r30, r28
    489a:	e4 5a       	subi	r30, 0xA4	; 164
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	01 90       	ld	r0, Z+
    48a0:	f0 81       	ld	r31, Z
    48a2:	e0 2d       	mov	r30, r0
    48a4:	ce 01       	movw	r24, r28
    48a6:	09 95       	icall
    48a8:	08 1b       	sub	r16, r24
    48aa:	19 0b       	sbc	r17, r25
    48ac:	c1 cf       	rjmp	.-126    	; 0x4830 <u8g2_DrawGlyph+0x30>
    48ae:	fe 01       	movw	r30, r28
    48b0:	e4 5a       	subi	r30, 0xA4	; 164
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	01 90       	ld	r0, Z+
    48b6:	f0 81       	ld	r31, Z
    48b8:	e0 2d       	mov	r30, r0
    48ba:	ce 01       	movw	r24, r28
    48bc:	09 95       	icall
    48be:	e8 0e       	add	r14, r24
    48c0:	f9 1e       	adc	r15, r25
    48c2:	b6 cf       	rjmp	.-148    	; 0x4830 <u8g2_DrawGlyph+0x30>
u8g2_font_draw_glyph():
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	80 e0       	ldi	r24, 0x00	; 0
u8g2_DrawGlyph():
    48c8:	c8 cf       	rjmp	.-112    	; 0x485a <u8g2_DrawGlyph+0x5a>

000048ca <u8g2_UpdateRefHeight>:
u8g2_UpdateRefHeight():
    48ca:	cf 93       	push	r28
    48cc:	df 93       	push	r29
    48ce:	fc 01       	movw	r30, r24
    48d0:	e6 5a       	subi	r30, 0xA6	; 166
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	20 81       	ld	r18, Z
    48d6:	31 81       	ldd	r19, Z+1	; 0x01
    48d8:	23 2b       	or	r18, r19
    48da:	f1 f0       	breq	.+60     	; 0x4918 <u8g2_UpdateRefHeight+0x4e>
    48dc:	b0 96       	adiw	r30, 0x20	; 32
    48de:	20 81       	ld	r18, Z
    48e0:	dc 01       	movw	r26, r24
    48e2:	aa 57       	subi	r26, 0x7A	; 122
    48e4:	bf 4f       	sbci	r27, 0xFF	; 255
    48e6:	2c 93       	st	X, r18
    48e8:	31 96       	adiw	r30, 0x01	; 1
    48ea:	50 81       	ld	r21, Z
    48ec:	3c 96       	adiw	r30, 0x0c	; 12
    48ee:	50 83       	st	Z, r21
    48f0:	ec 01       	movw	r28, r24
    48f2:	cb 57       	subi	r28, 0x7B	; 123
    48f4:	df 4f       	sbci	r29, 0xFF	; 255
    48f6:	38 81       	ld	r19, Y
    48f8:	33 23       	and	r19, r19
    48fa:	71 f0       	breq	.+28     	; 0x4918 <u8g2_UpdateRefHeight+0x4e>
    48fc:	31 30       	cpi	r19, 0x01	; 1
    48fe:	79 f4       	brne	.+30     	; 0x491e <u8g2_UpdateRefHeight+0x54>
    4900:	29 97       	sbiw	r28, 0x09	; 9
    4902:	38 81       	ld	r19, Y
    4904:	23 17       	cp	r18, r19
    4906:	0c f4       	brge	.+2      	; 0x490a <u8g2_UpdateRefHeight+0x40>
    4908:	3c 93       	st	X, r19
    490a:	83 58       	subi	r24, 0x83	; 131
    490c:	9f 4f       	sbci	r25, 0xFF	; 255
    490e:	dc 01       	movw	r26, r24
    4910:	8c 91       	ld	r24, X
    4912:	85 17       	cp	r24, r21
    4914:	0c f4       	brge	.+2      	; 0x4918 <u8g2_UpdateRefHeight+0x4e>
    4916:	80 83       	st	Z, r24
    4918:	df 91       	pop	r29
    491a:	cf 91       	pop	r28
    491c:	08 95       	ret
    491e:	ec 01       	movw	r28, r24
    4920:	c9 58       	subi	r28, 0x89	; 137
    4922:	df 4f       	sbci	r29, 0xFF	; 255
    4924:	48 81       	ld	r20, Y
    4926:	87 58       	subi	r24, 0x87	; 135
    4928:	9f 4f       	sbci	r25, 0xFF	; 255
    492a:	ec 01       	movw	r28, r24
    492c:	38 81       	ld	r19, Y
    492e:	82 2f       	mov	r24, r18
    4930:	22 0f       	add	r18, r18
    4932:	99 0b       	sbc	r25, r25
    4934:	63 2f       	mov	r22, r19
    4936:	03 2e       	mov	r0, r19
    4938:	00 0c       	add	r0, r0
    493a:	77 0b       	sbc	r23, r23
    493c:	64 0f       	add	r22, r20
    493e:	71 1d       	adc	r23, r1
    4940:	47 fd       	sbrc	r20, 7
    4942:	7a 95       	dec	r23
    4944:	86 17       	cp	r24, r22
    4946:	97 07       	cpc	r25, r23
    4948:	14 f4       	brge	.+4      	; 0x494e <u8g2_UpdateRefHeight+0x84>
    494a:	43 0f       	add	r20, r19
    494c:	4c 93       	st	X, r20
    494e:	35 17       	cp	r19, r21
    4950:	1c f7       	brge	.-58     	; 0x4918 <u8g2_UpdateRefHeight+0x4e>
    4952:	30 83       	st	Z, r19
    4954:	e1 cf       	rjmp	.-62     	; 0x4918 <u8g2_UpdateRefHeight+0x4e>

00004956 <u8g2_SetFontPosBaseline>:
u8g2_SetFontPosBaseline():
    4956:	84 5a       	subi	r24, 0xA4	; 164
    4958:	9f 4f       	sbci	r25, 0xFF	; 255
    495a:	27 e6       	ldi	r18, 0x67	; 103
    495c:	31 e2       	ldi	r19, 0x21	; 33
    495e:	fc 01       	movw	r30, r24
    4960:	31 83       	std	Z+1, r19	; 0x01
    4962:	20 83       	st	Z, r18
    4964:	08 95       	ret

00004966 <u8g2_SetFont>:
u8g2_SetFont():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1280

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1281
  if ( u8g2->font != font )
    496a:	fc 01       	movw	r30, r24
    496c:	e6 5a       	subi	r30, 0xA6	; 166
    496e:	ff 4f       	sbci	r31, 0xFF	; 255
    4970:	20 81       	ld	r18, Z
    4972:	31 81       	ldd	r19, Z+1	; 0x01
    4974:	26 17       	cp	r18, r22
    4976:	37 07       	cpc	r19, r23
    4978:	61 f0       	breq	.+24     	; 0x4992 <u8g2_SetFont+0x2c>
    497a:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1287
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    497c:	71 83       	std	Z+1, r23	; 0x01
    497e:	60 83       	st	Z, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1288
    u8g2_read_font_info(&(u8g2->font_info), font);
    4980:	83 59       	subi	r24, 0x93	; 147
    4982:	9f 4f       	sbci	r25, 0xFF	; 255
    4984:	0e 94 6a 21 	call	0x42d4	; 0x42d4 <u8g2_read_font_info>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
    u8g2_UpdateRefHeight(u8g2);
    4988:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    498e:	0c 94 65 24 	jmp	0x48ca	; 0x48ca <u8g2_UpdateRefHeight>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    4992:	df 91       	pop	r29
    4994:	cf 91       	pop	r28
    4996:	08 95       	ret

00004998 <u8g2_draw_hv_line_2dir>:
u8g2_draw_hv_line_2dir():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:219
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}
    4998:	0f 93       	push	r16
    499a:	fc 01       	movw	r30, r24
    499c:	e0 5c       	subi	r30, 0xC0	; 192
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	01 90       	ld	r0, Z+
    49a2:	f0 81       	ld	r31, Z
    49a4:	e0 2d       	mov	r30, r0
    49a6:	4e 1b       	sub	r20, r30
    49a8:	5f 0b       	sbc	r21, r31
    49aa:	dc 01       	movw	r26, r24
    49ac:	d4 96       	adiw	r26, 0x34	; 52
    49ae:	ed 91       	ld	r30, X+
    49b0:	fc 91       	ld	r31, X
    49b2:	09 95       	icall
    49b4:	0f 91       	pop	r16
    49b6:	08 95       	ret

000049b8 <u8g2_DrawHVLine>:
u8g2_DrawHVLine():
    49b8:	0f 93       	push	r16
    49ba:	cf 93       	push	r28
    49bc:	df 93       	push	r29
    49be:	e0 2f       	mov	r30, r16
    49c0:	dc 01       	movw	r26, r24
    49c2:	ac 57       	subi	r26, 0x7C	; 124
    49c4:	bf 4f       	sbci	r27, 0xFF	; 255
    49c6:	fc 91       	ld	r31, X
    49c8:	ff 23       	and	r31, r31
    49ca:	09 f4       	brne	.+2      	; 0x49ce <u8g2_DrawHVLine+0x16>
    49cc:	60 c0       	rjmp	.+192    	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    49ce:	21 15       	cp	r18, r1
    49d0:	31 05       	cpc	r19, r1
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <u8g2_DrawHVLine+0x1e>
    49d4:	5c c0       	rjmp	.+184    	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    49d6:	22 30       	cpi	r18, 0x02	; 2
    49d8:	31 05       	cpc	r19, r1
    49da:	38 f0       	brcs	.+14     	; 0x49ea <u8g2_DrawHVLine+0x32>
    49dc:	02 30       	cpi	r16, 0x02	; 2
    49de:	09 f0       	breq	.+2      	; 0x49e2 <u8g2_DrawHVLine+0x2a>
    49e0:	4a c0       	rjmp	.+148    	; 0x4a76 <u8g2_DrawHVLine+0xbe>
    49e2:	6f 5f       	subi	r22, 0xFF	; 255
    49e4:	7f 4f       	sbci	r23, 0xFF	; 255
    49e6:	62 1b       	sub	r22, r18
    49e8:	73 0b       	sbc	r23, r19
    49ea:	0e 2f       	mov	r16, r30
    49ec:	01 70       	andi	r16, 0x01	; 1
    49ee:	e0 fd       	sbrc	r30, 0
    49f0:	52 c0       	rjmp	.+164    	; 0x4a96 <u8g2_DrawHVLine+0xde>
    49f2:	fc 01       	movw	r30, r24
    49f4:	e2 5b       	subi	r30, 0xB2	; 178
    49f6:	ff 4f       	sbci	r31, 0xFF	; 255
    49f8:	01 90       	ld	r0, Z+
    49fa:	f0 81       	ld	r31, Z
    49fc:	e0 2d       	mov	r30, r0
    49fe:	4e 17       	cp	r20, r30
    4a00:	5f 07       	cpc	r21, r31
    4a02:	08 f4       	brcc	.+2      	; 0x4a06 <u8g2_DrawHVLine+0x4e>
    4a04:	44 c0       	rjmp	.+136    	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4a06:	fc 01       	movw	r30, r24
    4a08:	e0 5b       	subi	r30, 0xB0	; 176
    4a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0c:	01 90       	ld	r0, Z+
    4a0e:	f0 81       	ld	r31, Z
    4a10:	e0 2d       	mov	r30, r0
    4a12:	4e 17       	cp	r20, r30
    4a14:	5f 07       	cpc	r21, r31
    4a16:	d8 f5       	brcc	.+118    	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4a18:	fc 01       	movw	r30, r24
    4a1a:	e4 5b       	subi	r30, 0xB4	; 180
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	01 90       	ld	r0, Z+
    4a20:	f0 81       	ld	r31, Z
    4a22:	e0 2d       	mov	r30, r0
    4a24:	dc 01       	movw	r26, r24
    4a26:	a6 5b       	subi	r26, 0xB6	; 182
    4a28:	bf 4f       	sbci	r27, 0xFF	; 255
    4a2a:	0d 90       	ld	r0, X+
    4a2c:	bc 91       	ld	r27, X
    4a2e:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    4a30:	26 0f       	add	r18, r22
    4a32:	37 1f       	adc	r19, r23
    4a34:	26 17       	cp	r18, r22
    4a36:	37 07       	cpc	r19, r23
    4a38:	38 f5       	brcc	.+78     	; 0x4a88 <u8g2_DrawHVLine+0xd0>
    4a3a:	6e 17       	cp	r22, r30
    4a3c:	7f 07       	cpc	r23, r31
    4a3e:	18 f5       	brcc	.+70     	; 0x4a86 <u8g2_DrawHVLine+0xce>
    4a40:	9f 01       	movw	r18, r30
    4a42:	21 50       	subi	r18, 0x01	; 1
    4a44:	31 09       	sbc	r19, r1
    4a46:	a2 17       	cp	r26, r18
    4a48:	b3 07       	cpc	r27, r19
    4a4a:	08 f5       	brcc	.+66     	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4a4c:	6a 17       	cp	r22, r26
    4a4e:	7b 07       	cpc	r23, r27
    4a50:	08 f4       	brcc	.+2      	; 0x4a54 <u8g2_DrawHVLine+0x9c>
    4a52:	bd 01       	movw	r22, r26
    4a54:	2e 17       	cp	r18, r30
    4a56:	3f 07       	cpc	r19, r31
    4a58:	08 f4       	brcc	.+2      	; 0x4a5c <u8g2_DrawHVLine+0xa4>
    4a5a:	f9 01       	movw	r30, r18
    4a5c:	e6 1b       	sub	r30, r22
    4a5e:	f7 0b       	sbc	r31, r23
u8g2_DrawHVLine():
    4a60:	ec 01       	movw	r28, r24
    4a62:	ae a9       	ldd	r26, Y+54	; 0x36
    4a64:	bf a9       	ldd	r27, Y+55	; 0x37
    4a66:	14 96       	adiw	r26, 0x04	; 4
    4a68:	0d 90       	ld	r0, X+
    4a6a:	bc 91       	ld	r27, X
    4a6c:	a0 2d       	mov	r26, r0
    4a6e:	9f 01       	movw	r18, r30
    4a70:	fd 01       	movw	r30, r26
    4a72:	09 95       	icall
    4a74:	0c c0       	rjmp	.+24     	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4a76:	03 30       	cpi	r16, 0x03	; 3
    4a78:	09 f0       	breq	.+2      	; 0x4a7c <u8g2_DrawHVLine+0xc4>
    4a7a:	b7 cf       	rjmp	.-146    	; 0x49ea <u8g2_DrawHVLine+0x32>
    4a7c:	4f 5f       	subi	r20, 0xFF	; 255
    4a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a80:	42 1b       	sub	r20, r18
    4a82:	53 0b       	sbc	r21, r19
    4a84:	b2 cf       	rjmp	.-156    	; 0x49ea <u8g2_DrawHVLine+0x32>
    4a86:	bd 01       	movw	r22, r26
u8g2_clip_intersection2():
    4a88:	6e 17       	cp	r22, r30
    4a8a:	7f 07       	cpc	r23, r31
    4a8c:	e0 f2       	brcs	.-72     	; 0x4a46 <u8g2_DrawHVLine+0x8e>
u8g2_DrawHVLine():
    4a8e:	df 91       	pop	r29
    4a90:	cf 91       	pop	r28
    4a92:	0f 91       	pop	r16
    4a94:	08 95       	ret
    4a96:	fc 01       	movw	r30, r24
    4a98:	e6 5b       	subi	r30, 0xB6	; 182
    4a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9c:	01 90       	ld	r0, Z+
    4a9e:	f0 81       	ld	r31, Z
    4aa0:	e0 2d       	mov	r30, r0
    4aa2:	6e 17       	cp	r22, r30
    4aa4:	7f 07       	cpc	r23, r31
    4aa6:	98 f3       	brcs	.-26     	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	e4 5b       	subi	r30, 0xB4	; 180
    4aac:	ff 4f       	sbci	r31, 0xFF	; 255
    4aae:	01 90       	ld	r0, Z+
    4ab0:	f0 81       	ld	r31, Z
    4ab2:	e0 2d       	mov	r30, r0
    4ab4:	6e 17       	cp	r22, r30
    4ab6:	7f 07       	cpc	r23, r31
    4ab8:	50 f7       	brcc	.-44     	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4aba:	fc 01       	movw	r30, r24
    4abc:	e0 5b       	subi	r30, 0xB0	; 176
    4abe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac0:	01 90       	ld	r0, Z+
    4ac2:	f0 81       	ld	r31, Z
    4ac4:	e0 2d       	mov	r30, r0
    4ac6:	dc 01       	movw	r26, r24
    4ac8:	a2 5b       	subi	r26, 0xB2	; 178
    4aca:	bf 4f       	sbci	r27, 0xFF	; 255
    4acc:	0d 90       	ld	r0, X+
    4ace:	bc 91       	ld	r27, X
    4ad0:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    4ad2:	24 0f       	add	r18, r20
    4ad4:	35 1f       	adc	r19, r21
    4ad6:	24 17       	cp	r18, r20
    4ad8:	35 07       	cpc	r19, r21
    4ada:	a8 f4       	brcc	.+42     	; 0x4b06 <u8g2_DrawHVLine+0x14e>
    4adc:	4e 17       	cp	r20, r30
    4ade:	5f 07       	cpc	r21, r31
    4ae0:	88 f4       	brcc	.+34     	; 0x4b04 <u8g2_DrawHVLine+0x14c>
    4ae2:	9f 01       	movw	r18, r30
    4ae4:	21 50       	subi	r18, 0x01	; 1
    4ae6:	31 09       	sbc	r19, r1
    4ae8:	a2 17       	cp	r26, r18
    4aea:	b3 07       	cpc	r27, r19
    4aec:	80 f6       	brcc	.-96     	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4aee:	4a 17       	cp	r20, r26
    4af0:	5b 07       	cpc	r21, r27
    4af2:	08 f4       	brcc	.+2      	; 0x4af6 <u8g2_DrawHVLine+0x13e>
    4af4:	ad 01       	movw	r20, r26
    4af6:	2e 17       	cp	r18, r30
    4af8:	3f 07       	cpc	r19, r31
    4afa:	08 f4       	brcc	.+2      	; 0x4afe <u8g2_DrawHVLine+0x146>
    4afc:	f9 01       	movw	r30, r18
    4afe:	e4 1b       	sub	r30, r20
    4b00:	f5 0b       	sbc	r31, r21
    4b02:	ae cf       	rjmp	.-164    	; 0x4a60 <u8g2_DrawHVLine+0xa8>
u8g2_DrawHVLine():
    4b04:	ad 01       	movw	r20, r26
u8g2_clip_intersection2():
    4b06:	4e 17       	cp	r20, r30
    4b08:	5f 07       	cpc	r21, r31
    4b0a:	08 f6       	brcc	.-126    	; 0x4a8e <u8g2_DrawHVLine+0xd6>
    4b0c:	ed cf       	rjmp	.-38     	; 0x4ae8 <u8g2_DrawHVLine+0x130>

00004b0e <u8g2_DrawHLine>:
u8g2_DrawHLine():
    4b0e:	0f 93       	push	r16
    4b10:	00 e0       	ldi	r16, 0x00	; 0
    4b12:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
    4b16:	0f 91       	pop	r16
    4b18:	08 95       	ret

00004b1a <u8g2_DrawPixel>:
u8g2_DrawPixel():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:222

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    4b1a:	0f 93       	push	r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:224
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    4b1c:	fc 01       	movw	r30, r24
    4b1e:	e2 5b       	subi	r30, 0xB2	; 178
    4b20:	ff 4f       	sbci	r31, 0xFF	; 255
    4b22:	20 81       	ld	r18, Z
    4b24:	31 81       	ldd	r19, Z+1	; 0x01
    4b26:	42 17       	cp	r20, r18
    4b28:	53 07       	cpc	r21, r19
    4b2a:	b8 f0       	brcs	.+46     	; 0x4b5a <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:226
    return;
  if ( y >= u8g2->user_y1 )
    4b2c:	32 96       	adiw	r30, 0x02	; 2
    4b2e:	20 81       	ld	r18, Z
    4b30:	31 81       	ldd	r19, Z+1	; 0x01
    4b32:	42 17       	cp	r20, r18
    4b34:	53 07       	cpc	r21, r19
    4b36:	88 f4       	brcc	.+34     	; 0x4b5a <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:228
    return;
  if ( x < u8g2->user_x0 )
    4b38:	36 97       	sbiw	r30, 0x06	; 6
    4b3a:	20 81       	ld	r18, Z
    4b3c:	31 81       	ldd	r19, Z+1	; 0x01
    4b3e:	62 17       	cp	r22, r18
    4b40:	73 07       	cpc	r23, r19
    4b42:	58 f0       	brcs	.+22     	; 0x4b5a <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:230
    return;
  if ( x >= u8g2->user_x1 )
    4b44:	32 96       	adiw	r30, 0x02	; 2
    4b46:	20 81       	ld	r18, Z
    4b48:	31 81       	ldd	r19, Z+1	; 0x01
    4b4a:	62 17       	cp	r22, r18
    4b4c:	73 07       	cpc	r23, r19
    4b4e:	28 f4       	brcc	.+10     	; 0x4b5a <u8g2_DrawPixel+0x40>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:233
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    4b50:	00 e0       	ldi	r16, 0x00	; 0
    4b52:	21 e0       	ldi	r18, 0x01	; 1
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <u8g2_DrawHVLine>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:234
}
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <u8g2_SetDrawColor>:
u8g2_SetDrawColor():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:250

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
    4b5e:	fc 01       	movw	r30, r24
    4b60:	e6 57       	subi	r30, 0x76	; 118
    4b62:	ff 4f       	sbci	r31, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:252
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    4b64:	63 30       	cpi	r22, 0x03	; 3
    4b66:	10 f4       	brcc	.+4      	; 0x4b6c <u8g2_SetDrawColor+0xe>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:251
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    4b68:	60 83       	st	Z, r22
    4b6a:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:253
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:254
}
    4b70:	08 95       	ret

00004b72 <u8g2_is_intersection_decision_tree>:
u8g2_is_intersection_decision_tree():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:125
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    4b72:	46 17       	cp	r20, r22
    4b74:	57 07       	cpc	r21, r23
    4b76:	48 f4       	brcc	.+18     	; 0x4b8a <u8g2_is_intersection_decision_tree+0x18>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:127
  {
    if ( v1 > a0 )	// v1 >= a0
    4b78:	82 17       	cp	r24, r18
    4b7a:	93 07       	cpc	r25, r19
    4b7c:	50 f0       	brcs	.+20     	; 0x4b92 <u8g2_is_intersection_decision_tree+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:133
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	24 17       	cp	r18, r20
    4b82:	35 07       	cpc	r19, r21
    4b84:	38 f0       	brcs	.+14     	; 0x4b94 <u8g2_is_intersection_decision_tree+0x22>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:158
	return 0;
      }
    }
    else
    {
      return 0;
    4b86:	80 e0       	ldi	r24, 0x00	; 0
    4b88:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:145
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    4b8a:	82 17       	cp	r24, r18
    4b8c:	93 07       	cpc	r25, r19
    4b8e:	b8 f3       	brcs	.-18     	; 0x4b7e <u8g2_is_intersection_decision_tree+0xc>
    4b90:	fa cf       	rjmp	.-12     	; 0x4b86 <u8g2_is_intersection_decision_tree+0x14>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:129
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    4b92:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:161
    else
    {
      return 0;
    }
  }
}
    4b94:	08 95       	ret

00004b96 <u8g2_IsIntersection>:
u8g2_IsIntersection():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:167



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    4b96:	cf 92       	push	r12
    4b98:	df 92       	push	r13
    4b9a:	ef 92       	push	r14
    4b9c:	ff 92       	push	r15
    4b9e:	0f 93       	push	r16
    4ba0:	1f 93       	push	r17
    4ba2:	cf 93       	push	r28
    4ba4:	df 93       	push	r29
    4ba6:	ec 01       	movw	r28, r24
    4ba8:	7b 01       	movw	r14, r22
    4baa:	69 01       	movw	r12, r18
    4bac:	98 01       	movw	r18, r16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:168
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    4bae:	fc 01       	movw	r30, r24
    4bb0:	e0 5b       	subi	r30, 0xB0	; 176
    4bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb4:	60 81       	ld	r22, Z
    4bb6:	71 81       	ldd	r23, Z+1	; 0x01
    4bb8:	32 97       	sbiw	r30, 0x02	; 2
    4bba:	80 81       	ld	r24, Z
    4bbc:	91 81       	ldd	r25, Z+1	; 0x01
    4bbe:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <u8g2_is_intersection_decision_tree>
    4bc2:	88 23       	and	r24, r24
    4bc4:	a9 f0       	breq	.+42     	; 0x4bf0 <u8g2_IsIntersection+0x5a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    4bc6:	fe 01       	movw	r30, r28
    4bc8:	e4 5b       	subi	r30, 0xB4	; 180
    4bca:	ff 4f       	sbci	r31, 0xFF	; 255
    4bcc:	60 81       	ld	r22, Z
    4bce:	71 81       	ldd	r23, Z+1	; 0x01
    4bd0:	c6 5b       	subi	r28, 0xB6	; 182
    4bd2:	df 4f       	sbci	r29, 0xFF	; 255
    4bd4:	96 01       	movw	r18, r12
    4bd6:	a7 01       	movw	r20, r14
    4bd8:	88 81       	ld	r24, Y
    4bda:	99 81       	ldd	r25, Y+1	; 0x01
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    4bdc:	df 91       	pop	r29
    4bde:	cf 91       	pop	r28
    4be0:	1f 91       	pop	r17
    4be2:	0f 91       	pop	r16
    4be4:	ff 90       	pop	r15
    4be6:	ef 90       	pop	r14
    4be8:	df 90       	pop	r13
    4bea:	cf 90       	pop	r12
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    4bec:	0c 94 b9 25 	jmp	0x4b72	; 0x4b72 <u8g2_is_intersection_decision_tree>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    4bf0:	80 e0       	ldi	r24, 0x00	; 0
    4bf2:	df 91       	pop	r29
    4bf4:	cf 91       	pop	r28
    4bf6:	1f 91       	pop	r17
    4bf8:	0f 91       	pop	r16
    4bfa:	ff 90       	pop	r15
    4bfc:	ef 90       	pop	r14
    4bfe:	df 90       	pop	r13
    4c00:	cf 90       	pop	r12
    4c02:	08 95       	ret

00004c04 <u8g2_DrawLine>:
u8g2_DrawLine():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:40

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    4c04:	3f 92       	push	r3
    4c06:	4f 92       	push	r4
    4c08:	5f 92       	push	r5
    4c0a:	6f 92       	push	r6
    4c0c:	7f 92       	push	r7
    4c0e:	8f 92       	push	r8
    4c10:	9f 92       	push	r9
    4c12:	af 92       	push	r10
    4c14:	bf 92       	push	r11
    4c16:	cf 92       	push	r12
    4c18:	df 92       	push	r13
    4c1a:	ef 92       	push	r14
    4c1c:	ff 92       	push	r15
    4c1e:	0f 93       	push	r16
    4c20:	1f 93       	push	r17
    4c22:	cf 93       	push	r28
    4c24:	df 93       	push	r29
    4c26:	2c 01       	movw	r4, r24
    4c28:	7b 01       	movw	r14, r22
    4c2a:	6a 01       	movw	r12, r20
    4c2c:	e9 01       	movw	r28, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:51

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    4c2e:	5b 01       	movw	r10, r22
    4c30:	a2 1a       	sub	r10, r18
    4c32:	b3 0a       	sbc	r11, r19
    4c34:	26 17       	cp	r18, r22
    4c36:	37 07       	cpc	r19, r23
    4c38:	18 f0       	brcs	.+6      	; 0x4c40 <u8g2_DrawLine+0x3c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:51 (discriminator 2)
    4c3a:	59 01       	movw	r10, r18
    4c3c:	a6 1a       	sub	r10, r22
    4c3e:	b7 0a       	sbc	r11, r23
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4c40:	0c 15       	cp	r16, r12
    4c42:	1d 05       	cpc	r17, r13
    4c44:	60 f4       	brcc	.+24     	; 0x4c5e <u8g2_DrawLine+0x5a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52 (discriminator 1)
    4c46:	46 01       	movw	r8, r12
    4c48:	80 1a       	sub	r8, r16
    4c4a:	91 0a       	sbc	r9, r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54 (discriminator 1)

  if ( dy > dx ) 
    4c4c:	a8 14       	cp	r10, r8
    4c4e:	b9 04       	cpc	r11, r9
    4c50:	38 f1       	brcs	.+78     	; 0x4ca0 <u8g2_DrawLine+0x9c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:61
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4c52:	ce 15       	cp	r28, r14
    4c54:	df 05       	cpc	r29, r15
    4c56:	08 f4       	brcc	.+2      	; 0x4c5a <u8g2_DrawLine+0x56>
    4c58:	48 c0       	rjmp	.+144    	; 0x4cea <u8g2_DrawLine+0xe6>
    4c5a:	31 2c       	mov	r3, r1
    4c5c:	18 c0       	rjmp	.+48     	; 0x4c8e <u8g2_DrawLine+0x8a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52 (discriminator 2)
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4c5e:	48 01       	movw	r8, r16
    4c60:	8c 18       	sub	r8, r12
    4c62:	9d 08       	sbc	r9, r13
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54 (discriminator 2)

  if ( dy > dx ) 
    4c64:	a8 14       	cp	r10, r8
    4c66:	b9 04       	cpc	r11, r9
    4c68:	08 f0       	brcs	.+2      	; 0x4c6c <u8g2_DrawLine+0x68>
    4c6a:	65 c0       	rjmp	.+202    	; 0x4d36 <u8g2_DrawLine+0x132>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54
    4c6c:	9a 2d       	mov	r25, r10
    4c6e:	8b 2d       	mov	r24, r11
    4c70:	54 01       	movw	r10, r8
    4c72:	89 2e       	mov	r8, r25
    4c74:	98 2e       	mov	r9, r24
    4c76:	9c 2f       	mov	r25, r28
    4c78:	8d 2f       	mov	r24, r29
    4c7a:	e8 01       	movw	r28, r16
    4c7c:	09 2f       	mov	r16, r25
    4c7e:	18 2f       	mov	r17, r24
    4c80:	9e 2d       	mov	r25, r14
    4c82:	8f 2d       	mov	r24, r15
    4c84:	76 01       	movw	r14, r12
    4c86:	c9 2e       	mov	r12, r25
    4c88:	d8 2e       	mov	r13, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:56
  {
    swapxy = 1;
    4c8a:	33 24       	eor	r3, r3
    4c8c:	33 94       	inc	r3
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4c8e:	35 01       	movw	r6, r10
    4c90:	76 94       	lsr	r7
    4c92:	67 94       	ror	r6
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:67
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4c94:	c0 16       	cp	r12, r16
    4c96:	d1 06       	cpc	r13, r17
    4c98:	90 f1       	brcs	.+100    	; 0x4cfe <u8g2_DrawLine+0xfa>
    4c9a:	0f ef       	ldi	r16, 0xFF	; 255
    4c9c:	1f ef       	ldi	r17, 0xFF	; 255
    4c9e:	31 c0       	rjmp	.+98     	; 0x4d02 <u8g2_DrawLine+0xfe>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    4ca0:	9a 2d       	mov	r25, r10
    4ca2:	8b 2d       	mov	r24, r11
    4ca4:	54 01       	movw	r10, r8
    4ca6:	89 2e       	mov	r8, r25
    4ca8:	98 2e       	mov	r9, r24
    4caa:	9c 2d       	mov	r25, r12
    4cac:	8d 2d       	mov	r24, r13
    4cae:	6e 01       	movw	r12, r28
    4cb0:	c9 2f       	mov	r28, r25
    4cb2:	d8 2f       	mov	r29, r24
    4cb4:	9e 2d       	mov	r25, r14
    4cb6:	8f 2d       	mov	r24, r15
    4cb8:	78 01       	movw	r14, r16
    4cba:	09 2f       	mov	r16, r25
    4cbc:	18 2f       	mov	r17, r24
    4cbe:	e5 cf       	rjmp	.-54     	; 0x4c8a <u8g2_DrawLine+0x86>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:81
#endif

  for( x = x1; x <= x2; x++ )
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    4cc0:	a6 01       	movw	r20, r12
    4cc2:	b7 01       	movw	r22, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:80
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
  {
    if ( swapxy == 0 ) 
    4cc4:	33 20       	and	r3, r3
    4cc6:	11 f0       	breq	.+4      	; 0x4ccc <u8g2_DrawLine+0xc8>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:83
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    4cc8:	a7 01       	movw	r20, r14
    4cca:	b6 01       	movw	r22, r12
    4ccc:	c2 01       	movw	r24, r4
    4cce:	0e 94 8d 25 	call	0x4b1a	; 0x4b1a <u8g2_DrawPixel>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:84
    err -= (u8g2_uint_t)dy;
    4cd2:	68 18       	sub	r6, r8
    4cd4:	79 08       	sbc	r7, r9
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:85
    if ( err < 0 ) 
    4cd6:	77 fe       	sbrs	r7, 7
    4cd8:	04 c0       	rjmp	.+8      	; 0x4ce2 <u8g2_DrawLine+0xde>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:87
    {
      y += (u8g2_uint_t)ystep;
    4cda:	c0 0e       	add	r12, r16
    4cdc:	d1 1e       	adc	r13, r17
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:88
      err += (u8g2_uint_t)dx;
    4cde:	6a 0c       	add	r6, r10
    4ce0:	7b 1c       	adc	r7, r11
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:78 (discriminator 2)
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    4ce2:	8f ef       	ldi	r24, 0xFF	; 255
    4ce4:	e8 1a       	sub	r14, r24
    4ce6:	f8 0a       	sbc	r15, r24
    4ce8:	11 c0       	rjmp	.+34     	; 0x4d0c <u8g2_DrawLine+0x108>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4cea:	35 01       	movw	r6, r10
    4cec:	76 94       	lsr	r7
    4cee:	67 94       	ror	r6
    4cf0:	68 01       	movw	r12, r16
    4cf2:	9e 2d       	mov	r25, r14
    4cf4:	8f 2d       	mov	r24, r15
    4cf6:	7e 01       	movw	r14, r28
    4cf8:	c9 2f       	mov	r28, r25
    4cfa:	d8 2f       	mov	r29, r24
    4cfc:	31 2c       	mov	r3, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:67
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4cfe:	01 e0       	ldi	r16, 0x01	; 1
    4d00:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:74

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
    4d02:	cf 3f       	cpi	r28, 0xFF	; 255
    4d04:	dc 07       	cpc	r29, r28
    4d06:	11 f4       	brne	.+4      	; 0x4d0c <u8g2_DrawLine+0x108>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:75
    x2--;
    4d08:	ce ef       	ldi	r28, 0xFE	; 254
    4d0a:	df ef       	ldi	r29, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:78 (discriminator 1)
#endif

  for( x = x1; x <= x2; x++ )
    4d0c:	ce 15       	cp	r28, r14
    4d0e:	df 05       	cpc	r29, r15
    4d10:	b8 f6       	brcc	.-82     	; 0x4cc0 <u8g2_DrawLine+0xbc>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:91
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	ff 90       	pop	r15
    4d1c:	ef 90       	pop	r14
    4d1e:	df 90       	pop	r13
    4d20:	cf 90       	pop	r12
    4d22:	bf 90       	pop	r11
    4d24:	af 90       	pop	r10
    4d26:	9f 90       	pop	r9
    4d28:	8f 90       	pop	r8
    4d2a:	7f 90       	pop	r7
    4d2c:	6f 90       	pop	r6
    4d2e:	5f 90       	pop	r5
    4d30:	4f 90       	pop	r4
    4d32:	3f 90       	pop	r3
    4d34:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:61
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4d36:	ce 15       	cp	r28, r14
    4d38:	df 05       	cpc	r29, r15
    4d3a:	08 f0       	brcs	.+2      	; 0x4d3e <u8g2_DrawLine+0x13a>
    4d3c:	8e cf       	rjmp	.-228    	; 0x4c5a <u8g2_DrawLine+0x56>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4d3e:	35 01       	movw	r6, r10
    4d40:	76 94       	lsr	r7
    4d42:	67 94       	ror	r6
    4d44:	68 01       	movw	r12, r16
    4d46:	9e 2d       	mov	r25, r14
    4d48:	8f 2d       	mov	r24, r15
    4d4a:	7e 01       	movw	r14, r28
    4d4c:	c9 2f       	mov	r28, r25
    4d4e:	d8 2f       	mov	r29, r24
    4d50:	31 2c       	mov	r3, r1
    4d52:	a3 cf       	rjmp	.-186    	; 0x4c9a <u8g2_DrawLine+0x96>

00004d54 <u8g2_ll_hvline_vertical_top_lsb>:
u8g2_ll_hvline_vertical_top_lsb():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:73
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    4d54:	af 92       	push	r10
    4d56:	bf 92       	push	r11
    4d58:	cf 92       	push	r12
    4d5a:	df 92       	push	r13
    4d5c:	ef 92       	push	r14
    4d5e:	ff 92       	push	r15
    4d60:	0f 93       	push	r16
    4d62:	cf 93       	push	r28
    4d64:	df 93       	push	r29
    4d66:	ec 01       	movw	r28, r24
    4d68:	da 01       	movw	r26, r20
    4d6a:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:89
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    4d6c:	94 2f       	mov	r25, r20
    4d6e:	97 70       	andi	r25, 0x07	; 7
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:91
  mask = 1;
  mask <<= bit_pos;
    4d70:	e1 e0       	ldi	r30, 0x01	; 1
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	9f 01       	movw	r18, r30
    4d76:	09 2e       	mov	r0, r25
    4d78:	01 c0       	rjmp	.+2      	; 0x4d7c <u8g2_ll_hvline_vertical_top_lsb+0x28>
    4d7a:	22 0f       	add	r18, r18
    4d7c:	0a 94       	dec	r0
    4d7e:	ea f7       	brpl	.-6      	; 0x4d7a <u8g2_ll_hvline_vertical_top_lsb+0x26>
    4d80:	52 2f       	mov	r21, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4d82:	6e 01       	movw	r12, r28
    4d84:	8a e8       	ldi	r24, 0x8A	; 138
    4d86:	c8 0e       	add	r12, r24
    4d88:	d1 1c       	adc	r13, r1
    4d8a:	f6 01       	movw	r30, r12
    4d8c:	80 81       	ld	r24, Z
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:93
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    4d8e:	40 e0       	ldi	r20, 0x00	; 0
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4d90:	82 30       	cpi	r24, 0x02	; 2
    4d92:	18 f4       	brcc	.+6      	; 0x4d9a <u8g2_ll_hvline_vertical_top_lsb+0x46>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:96
    or_mask  = mask;
    4d94:	42 2f       	mov	r20, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:97
  if ( u8g2->draw_color != 1 )
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	49 f1       	breq	.+82     	; 0x4dec <u8g2_ll_hvline_vertical_top_lsb+0x98>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:102
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    4d9a:	5d 01       	movw	r10, r26
    4d9c:	f8 ef       	ldi	r31, 0xF8	; 248
    4d9e:	af 22       	and	r10, r31
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:104
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    4da0:	e8 ad       	ldd	r30, Y+56	; 0x38
    4da2:	f9 ad       	ldd	r31, Y+57	; 0x39
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:103
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    4da4:	28 81       	ld	r18, Y
    4da6:	39 81       	ldd	r19, Y+1	; 0x01
    4da8:	d9 01       	movw	r26, r18
    4daa:	50 96       	adiw	r26, 0x10	; 16
    4dac:	8c 91       	ld	r24, X
    4dae:	8a 9d       	mul	r24, r10
    4db0:	90 01       	movw	r18, r0
    4db2:	8b 9d       	mul	r24, r11
    4db4:	30 0d       	add	r19, r0
    4db6:	11 24       	eor	r1, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:106
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    4db8:	62 0f       	add	r22, r18
    4dba:	73 1f       	adc	r23, r19
    4dbc:	df 01       	movw	r26, r30
    4dbe:	a6 0f       	add	r26, r22
    4dc0:	b7 1f       	adc	r27, r23
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:108
  
  if ( dir == 0 )
    4dc2:	01 11       	cpse	r16, r1
    4dc4:	1a c0       	rjmp	.+52     	; 0x4dfa <u8g2_ll_hvline_vertical_top_lsb+0xa6>
    4dc6:	ea 0e       	add	r14, r26
    4dc8:	fb 1e       	adc	r15, r27
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:115 (discriminator 1)
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    4dca:	8c 91       	ld	r24, X
    4dcc:	84 2b       	or	r24, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:116 (discriminator 1)
	*ptr ^= xor_mask;
    4dce:	85 27       	eor	r24, r21
    4dd0:	8d 93       	st	X+, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:119 (discriminator 1)
	ptr++;
	len--;
      } while( len != 0 );
    4dd2:	ea 16       	cp	r14, r26
    4dd4:	fb 06       	cpc	r15, r27
    4dd6:	c9 f7       	brne	.-14     	; 0x4dca <u8g2_ll_hvline_vertical_top_lsb+0x76>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:152
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    4dd8:	df 91       	pop	r29
    4dda:	cf 91       	pop	r28
    4ddc:	0f 91       	pop	r16
    4dde:	ff 90       	pop	r15
    4de0:	ef 90       	pop	r14
    4de2:	df 90       	pop	r13
    4de4:	cf 90       	pop	r12
    4de6:	bf 90       	pop	r11
    4de8:	af 90       	pop	r10
    4dea:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:94
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    4dec:	50 e0       	ldi	r21, 0x00	; 0
    4dee:	d5 cf       	rjmp	.-86     	; 0x4d9a <u8g2_ll_hvline_vertical_top_lsb+0x46>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:147
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    4df0:	44 0f       	add	r20, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:148
	xor_mask <<= 1;
    4df2:	55 0f       	add	r21, r21
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:150
      }
    } while( len != 0 );
    4df4:	e1 14       	cp	r14, r1
    4df6:	f1 04       	cpc	r15, r1
    4df8:	79 f3       	breq	.-34     	; 0x4dd8 <u8g2_ll_hvline_vertical_top_lsb+0x84>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:128
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    4dfa:	3c 91       	ld	r19, X
    4dfc:	34 2b       	or	r19, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:129
      *ptr ^= xor_mask;
    4dfe:	35 27       	eor	r19, r21
    4e00:	3c 93       	st	X, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:131
      
      bit_pos++;
    4e02:	9f 5f       	subi	r25, 0xFF	; 255
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:132
      bit_pos &= 7;
    4e04:	97 70       	andi	r25, 0x07	; 7
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:134

      len--;
    4e06:	e1 e0       	ldi	r30, 0x01	; 1
    4e08:	ee 1a       	sub	r14, r30
    4e0a:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:136

      if ( bit_pos == 0 )
    4e0c:	91 11       	cpse	r25, r1
    4e0e:	f0 cf       	rjmp	.-32     	; 0x4df0 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:138
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    4e10:	2c ad       	ldd	r18, Y+60	; 0x3c
    4e12:	3d ad       	ldd	r19, Y+61	; 0x3d
    4e14:	a2 0f       	add	r26, r18
    4e16:	b3 1f       	adc	r27, r19
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:140
		
	if ( u8g2->draw_color <= 1 )
    4e18:	f6 01       	movw	r30, r12
    4e1a:	80 81       	ld	r24, Z
    4e1c:	82 30       	cpi	r24, 0x02	; 2
    4e1e:	28 f4       	brcc	.+10     	; 0x4e2a <u8g2_ll_hvline_vertical_top_lsb+0xd6>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:142
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    4e20:	81 30       	cpi	r24, 0x01	; 1
    4e22:	09 f0       	breq	.+2      	; 0x4e26 <u8g2_ll_hvline_vertical_top_lsb+0xd2>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	  xor_mask = 1;
    4e24:	51 e0       	ldi	r21, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:141
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    4e26:	41 e0       	ldi	r20, 0x01	; 1
    4e28:	e5 cf       	rjmp	.-54     	; 0x4df4 <u8g2_ll_hvline_vertical_top_lsb+0xa0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    4e2a:	51 e0       	ldi	r21, 0x01	; 1
    4e2c:	e3 cf       	rjmp	.-58     	; 0x4df4 <u8g2_ll_hvline_vertical_top_lsb+0xa0>

00004e2e <u8g2_update_dimension_common>:
u8g2_update_dimension_common():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:62
{
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
    4e2e:	cf 93       	push	r28
    4e30:	df 93       	push	r29
    4e32:	fc 01       	movw	r30, r24
    4e34:	a0 81       	ld	r26, Z
    4e36:	b1 81       	ldd	r27, Z+1	; 0x01
    4e38:	82 ad       	ldd	r24, Z+58	; 0x3a
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	9c 01       	movw	r18, r24
    4e3e:	43 e0       	ldi	r20, 0x03	; 3
    4e40:	22 0f       	add	r18, r18
    4e42:	33 1f       	adc	r19, r19
    4e44:	4a 95       	dec	r20
    4e46:	e1 f7       	brne	.-8      	; 0x4e40 <u8g2_update_dimension_common+0x12>
    4e48:	37 af       	std	Z+63, r19	; 0x3f
    4e4a:	26 af       	std	Z+62, r18	; 0x3e
    4e4c:	50 96       	adiw	r26, 0x10	; 16
    4e4e:	2c 91       	ld	r18, X
    4e50:	50 97       	sbiw	r26, 0x10	; 16
    4e52:	48 e0       	ldi	r20, 0x08	; 8
    4e54:	24 9f       	mul	r18, r20
    4e56:	90 01       	movw	r18, r0
    4e58:	11 24       	eor	r1, r1
    4e5a:	35 af       	std	Z+61, r19	; 0x3d
    4e5c:	24 af       	std	Z+60, r18	; 0x3c
    4e5e:	23 ad       	ldd	r18, Z+59	; 0x3b
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	b9 01       	movw	r22, r18
    4e64:	53 e0       	ldi	r21, 0x03	; 3
    4e66:	66 0f       	add	r22, r22
    4e68:	77 1f       	adc	r23, r23
    4e6a:	5a 95       	dec	r21
    4e6c:	e1 f7       	brne	.-8      	; 0x4e66 <u8g2_update_dimension_common+0x38>
    4e6e:	ef 01       	movw	r28, r30
    4e70:	c0 5c       	subi	r28, 0xC0	; 192
    4e72:	df 4f       	sbci	r29, 0xFF	; 255
    4e74:	79 83       	std	Y+1, r23	; 0x01
    4e76:	68 83       	st	Y, r22
    4e78:	51 96       	adiw	r26, 0x11	; 17
    4e7a:	4c 91       	ld	r20, X
    4e7c:	51 97       	sbiw	r26, 0x11	; 17
    4e7e:	e9 01       	movw	r28, r18
    4e80:	c8 0f       	add	r28, r24
    4e82:	d9 1f       	adc	r29, r25
    4e84:	50 e0       	ldi	r21, 0x00	; 0
    4e86:	4c 17       	cp	r20, r28
    4e88:	5d 07       	cpc	r21, r29
    4e8a:	18 f4       	brcc	.+6      	; 0x4e92 <u8g2_update_dimension_common+0x64>
    4e8c:	ca 01       	movw	r24, r20
    4e8e:	82 1b       	sub	r24, r18
    4e90:	93 0b       	sbc	r25, r19
    4e92:	ef 01       	movw	r28, r30
    4e94:	ce 5b       	subi	r28, 0xBE	; 190
    4e96:	df 4f       	sbci	r29, 0xFF	; 255
    4e98:	79 83       	std	Y+1, r23	; 0x01
    4e9a:	68 83       	st	Y, r22
    4e9c:	22 96       	adiw	r28, 0x02	; 2
    4e9e:	23 e0       	ldi	r18, 0x03	; 3
    4ea0:	88 0f       	add	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	2a 95       	dec	r18
    4ea6:	e1 f7       	brne	.-8      	; 0x4ea0 <u8g2_update_dimension_common+0x72>
    4ea8:	86 0f       	add	r24, r22
    4eaa:	97 1f       	adc	r25, r23
    4eac:	99 83       	std	Y+1, r25	; 0x01
    4eae:	88 83       	st	Y, r24
    4eb0:	22 96       	adiw	r28, 0x02	; 2
    4eb2:	54 96       	adiw	r26, 0x14	; 20
    4eb4:	8d 91       	ld	r24, X+
    4eb6:	9c 91       	ld	r25, X
    4eb8:	55 97       	sbiw	r26, 0x15	; 21
    4eba:	99 83       	std	Y+1, r25	; 0x01
    4ebc:	88 83       	st	Y, r24
    4ebe:	e8 5b       	subi	r30, 0xB8	; 184
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	56 96       	adiw	r26, 0x16	; 22
    4ec4:	8d 91       	ld	r24, X+
    4ec6:	9c 91       	ld	r25, X
    4ec8:	91 83       	std	Z+1, r25	; 0x01
    4eca:	80 83       	st	Z, r24
    4ecc:	df 91       	pop	r29
    4ece:	cf 91       	pop	r28
    4ed0:	08 95       	ret

00004ed2 <u8g2_update_dimension_r0>:
u8g2_update_dimension_r0():
    4ed2:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <u8g2_update_dimension_common>

00004ed6 <u8g2_draw_l90_r0>:
u8g2_draw_l90_r0():
    4ed6:	0f 93       	push	r16
    4ed8:	0e 94 cc 24 	call	0x4998	; 0x4998 <u8g2_draw_hv_line_2dir>
    4edc:	0f 91       	pop	r16
    4ede:	08 95       	ret

00004ee0 <u8g2_apply_clip_window>:
u8g2_apply_clip_window():
    4ee0:	8f 92       	push	r8
    4ee2:	9f 92       	push	r9
    4ee4:	af 92       	push	r10
    4ee6:	bf 92       	push	r11
    4ee8:	cf 92       	push	r12
    4eea:	df 92       	push	r13
    4eec:	ef 92       	push	r14
    4eee:	ff 92       	push	r15
    4ef0:	0f 93       	push	r16
    4ef2:	1f 93       	push	r17
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	ec 01       	movw	r28, r24
    4efa:	7c 01       	movw	r14, r24
    4efc:	88 e5       	ldi	r24, 0x58	; 88
    4efe:	e8 0e       	add	r14, r24
    4f00:	f1 1c       	adc	r15, r1
    4f02:	f7 01       	movw	r30, r14
    4f04:	00 81       	ld	r16, Z
    4f06:	11 81       	ldd	r17, Z+1	; 0x01
    4f08:	5e 01       	movw	r10, r28
    4f0a:	f4 e5       	ldi	r31, 0x54	; 84
    4f0c:	af 0e       	add	r10, r31
    4f0e:	b1 1c       	adc	r11, r1
    4f10:	f5 01       	movw	r30, r10
    4f12:	20 81       	ld	r18, Z
    4f14:	31 81       	ldd	r19, Z+1	; 0x01
    4f16:	6e 01       	movw	r12, r28
    4f18:	f6 e5       	ldi	r31, 0x56	; 86
    4f1a:	cf 0e       	add	r12, r31
    4f1c:	d1 1c       	adc	r13, r1
    4f1e:	f6 01       	movw	r30, r12
    4f20:	40 81       	ld	r20, Z
    4f22:	51 81       	ldd	r21, Z+1	; 0x01
    4f24:	4e 01       	movw	r8, r28
    4f26:	f2 e5       	ldi	r31, 0x52	; 82
    4f28:	8f 0e       	add	r8, r31
    4f2a:	91 1c       	adc	r9, r1
    4f2c:	f4 01       	movw	r30, r8
    4f2e:	60 81       	ld	r22, Z
    4f30:	71 81       	ldd	r23, Z+1	; 0x01
    4f32:	ce 01       	movw	r24, r28
    4f34:	0e 94 cb 25 	call	0x4b96	; 0x4b96 <u8g2_IsIntersection>
    4f38:	fe 01       	movw	r30, r28
    4f3a:	ec 57       	subi	r30, 0x7C	; 124
    4f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3e:	81 11       	cpse	r24, r1
    4f40:	0e c0       	rjmp	.+28     	; 0x4f5e <u8g2_apply_clip_window+0x7e>
    4f42:	10 82       	st	Z, r1
    4f44:	df 91       	pop	r29
    4f46:	cf 91       	pop	r28
    4f48:	1f 91       	pop	r17
    4f4a:	0f 91       	pop	r16
    4f4c:	ff 90       	pop	r15
    4f4e:	ef 90       	pop	r14
    4f50:	df 90       	pop	r13
    4f52:	cf 90       	pop	r12
    4f54:	bf 90       	pop	r11
    4f56:	af 90       	pop	r10
    4f58:	9f 90       	pop	r9
    4f5a:	8f 90       	pop	r8
    4f5c:	08 95       	ret
    4f5e:	81 e0       	ldi	r24, 0x01	; 1
    4f60:	80 83       	st	Z, r24
    4f62:	f4 01       	movw	r30, r8
    4f64:	80 81       	ld	r24, Z
    4f66:	91 81       	ldd	r25, Z+1	; 0x01
    4f68:	fe 01       	movw	r30, r28
    4f6a:	e6 5b       	subi	r30, 0xB6	; 182
    4f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6e:	20 81       	ld	r18, Z
    4f70:	31 81       	ldd	r19, Z+1	; 0x01
    4f72:	28 17       	cp	r18, r24
    4f74:	39 07       	cpc	r19, r25
    4f76:	10 f4       	brcc	.+4      	; 0x4f7c <u8g2_apply_clip_window+0x9c>
    4f78:	91 83       	std	Z+1, r25	; 0x01
    4f7a:	80 83       	st	Z, r24
    4f7c:	f5 01       	movw	r30, r10
    4f7e:	80 81       	ld	r24, Z
    4f80:	91 81       	ldd	r25, Z+1	; 0x01
    4f82:	fe 01       	movw	r30, r28
    4f84:	e4 5b       	subi	r30, 0xB4	; 180
    4f86:	ff 4f       	sbci	r31, 0xFF	; 255
    4f88:	20 81       	ld	r18, Z
    4f8a:	31 81       	ldd	r19, Z+1	; 0x01
    4f8c:	82 17       	cp	r24, r18
    4f8e:	93 07       	cpc	r25, r19
    4f90:	10 f4       	brcc	.+4      	; 0x4f96 <u8g2_apply_clip_window+0xb6>
    4f92:	91 83       	std	Z+1, r25	; 0x01
    4f94:	80 83       	st	Z, r24
    4f96:	f6 01       	movw	r30, r12
    4f98:	80 81       	ld	r24, Z
    4f9a:	91 81       	ldd	r25, Z+1	; 0x01
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	e2 5b       	subi	r30, 0xB2	; 178
    4fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa2:	20 81       	ld	r18, Z
    4fa4:	31 81       	ldd	r19, Z+1	; 0x01
    4fa6:	28 17       	cp	r18, r24
    4fa8:	39 07       	cpc	r19, r25
    4faa:	10 f4       	brcc	.+4      	; 0x4fb0 <u8g2_apply_clip_window+0xd0>
    4fac:	91 83       	std	Z+1, r25	; 0x01
    4fae:	80 83       	st	Z, r24
    4fb0:	f7 01       	movw	r30, r14
    4fb2:	80 81       	ld	r24, Z
    4fb4:	91 81       	ldd	r25, Z+1	; 0x01
    4fb6:	c0 5b       	subi	r28, 0xB0	; 176
    4fb8:	df 4f       	sbci	r29, 0xFF	; 255
    4fba:	28 81       	ld	r18, Y
    4fbc:	39 81       	ldd	r19, Y+1	; 0x01
    4fbe:	82 17       	cp	r24, r18
    4fc0:	93 07       	cpc	r25, r19
    4fc2:	08 f0       	brcs	.+2      	; 0x4fc6 <u8g2_apply_clip_window+0xe6>
    4fc4:	bf cf       	rjmp	.-130    	; 0x4f44 <u8g2_apply_clip_window+0x64>
    4fc6:	99 83       	std	Y+1, r25	; 0x01
    4fc8:	88 83       	st	Y, r24
    4fca:	bc cf       	rjmp	.-136    	; 0x4f44 <u8g2_apply_clip_window+0x64>

00004fcc <u8g2_update_page_win_r0>:
u8g2_update_page_win_r0():
    4fcc:	fc 01       	movw	r30, r24
    4fce:	e6 5b       	subi	r30, 0xB6	; 182
    4fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd2:	11 82       	std	Z+1, r1	; 0x01
    4fd4:	10 82       	st	Z, r1
    4fd6:	32 96       	adiw	r30, 0x02	; 2
    4fd8:	dc 01       	movw	r26, r24
    4fda:	aa 5b       	subi	r26, 0xBA	; 186
    4fdc:	bf 4f       	sbci	r27, 0xFF	; 255
    4fde:	2d 91       	ld	r18, X+
    4fe0:	3c 91       	ld	r19, X
    4fe2:	11 97       	sbiw	r26, 0x01	; 1
    4fe4:	31 83       	std	Z+1, r19	; 0x01
    4fe6:	20 83       	st	Z, r18
    4fe8:	32 96       	adiw	r30, 0x02	; 2
    4fea:	14 97       	sbiw	r26, 0x04	; 4
    4fec:	2d 91       	ld	r18, X+
    4fee:	3c 91       	ld	r19, X
    4ff0:	11 97       	sbiw	r26, 0x01	; 1
    4ff2:	31 83       	std	Z+1, r19	; 0x01
    4ff4:	20 83       	st	Z, r18
    4ff6:	32 96       	adiw	r30, 0x02	; 2
    4ff8:	12 96       	adiw	r26, 0x02	; 2
    4ffa:	2d 91       	ld	r18, X+
    4ffc:	3c 91       	ld	r19, X
    4ffe:	31 83       	std	Z+1, r19	; 0x01
    5000:	20 83       	st	Z, r18
    5002:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <u8g2_apply_clip_window>

00005006 <u8g2_SetMaxClipWindow>:
u8g2_SetMaxClipWindow():
    5006:	fc 01       	movw	r30, r24
    5008:	ee 5a       	subi	r30, 0xAE	; 174
    500a:	ff 4f       	sbci	r31, 0xFF	; 255
    500c:	11 82       	std	Z+1, r1	; 0x01
    500e:	10 82       	st	Z, r1
    5010:	34 96       	adiw	r30, 0x04	; 4
    5012:	11 82       	std	Z+1, r1	; 0x01
    5014:	10 82       	st	Z, r1
    5016:	32 97       	sbiw	r30, 0x02	; 2
    5018:	2f ef       	ldi	r18, 0xFF	; 255
    501a:	3f ef       	ldi	r19, 0xFF	; 255
    501c:	31 83       	std	Z+1, r19	; 0x01
    501e:	20 83       	st	Z, r18
    5020:	34 96       	adiw	r30, 0x04	; 4
    5022:	31 83       	std	Z+1, r19	; 0x01
    5024:	20 83       	st	Z, r18
    5026:	dc 01       	movw	r26, r24
    5028:	d6 96       	adiw	r26, 0x36	; 54
    502a:	ed 91       	ld	r30, X+
    502c:	fc 91       	ld	r31, X
    502e:	02 80       	ldd	r0, Z+2	; 0x02
    5030:	f3 81       	ldd	r31, Z+3	; 0x03
    5032:	e0 2d       	mov	r30, r0
    5034:	09 94       	ijmp

00005036 <u8g2_SetupBuffer>:
u8g2_SetupBuffer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:72
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    5036:	0f 93       	push	r16
    5038:	1f 93       	push	r17
    503a:	cf 93       	push	r28
    503c:	df 93       	push	r29
    503e:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:73
  u8g2->font = NULL;
    5040:	fc 01       	movw	r30, r24
    5042:	e6 5a       	subi	r30, 0xA6	; 166
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	11 82       	std	Z+1, r1	; 0x01
    5048:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:78
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    504a:	3d ab       	std	Y+53, r19	; 0x35
    504c:	2c ab       	std	Y+52, r18	; 0x34
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:80
  
  u8g2->tile_buf_ptr = buf;
    504e:	79 af       	std	Y+57, r23	; 0x39
    5050:	68 af       	std	Y+56, r22	; 0x38
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:81
  u8g2->tile_buf_height = tile_buf_height;
    5052:	4a af       	std	Y+58, r20	; 0x3a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:83
  
  u8g2->tile_curr_row = 0;
    5054:	1b ae       	std	Y+59, r1	; 0x3b
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:85
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    5056:	3f 96       	adiw	r30, 0x0f	; 15
    5058:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:86
  u8g2->bitmap_transparency = 0;
    505a:	b0 96       	adiw	r30, 0x20	; 32
    505c:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:88
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    505e:	34 97       	sbiw	r30, 0x04	; 4
    5060:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:89
  u8g2->draw_color = 1;
    5062:	35 96       	adiw	r30, 0x05	; 5
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:90
  u8g2->is_auto_page_clear = 1;
    5068:	31 96       	adiw	r30, 0x01	; 1
    506a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:92
  
  u8g2->cb = u8g2_cb;
    506c:	1f ab       	std	Y+55, r17	; 0x37
    506e:	0e ab       	std	Y+54, r16	; 0x36
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:93
  u8g2->cb->update_dimension(u8g2);
    5070:	d8 01       	movw	r26, r16
    5072:	ed 91       	ld	r30, X+
    5074:	fc 91       	ld	r31, X
    5076:	ce 01       	movw	r24, r28
    5078:	09 95       	icall
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:95
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    507a:	ce 01       	movw	r24, r28
    507c:	0e 94 03 28 	call	0x5006	; 0x5006 <u8g2_SetMaxClipWindow>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:100
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    5080:	ce 01       	movw	r24, r28
    5082:	0e 94 ab 24 	call	0x4956	; 0x4956 <u8g2_SetFontPosBaseline>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:103
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    5086:	c4 59       	subi	r28, 0x94	; 148
    5088:	df 4f       	sbci	r29, 0xFF	; 255
    508a:	18 82       	st	Y, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:105
#endif
}
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	08 95       	ret

00005096 <u8x8_ascii_next>:
u8x8_ascii_next():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:459
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    5096:	66 23       	and	r22, r22
    5098:	29 f0       	breq	.+10     	; 0x50a4 <u8x8_ascii_next+0xe>
    509a:	6a 30       	cpi	r22, 0x0A	; 10
    509c:	19 f0       	breq	.+6      	; 0x50a4 <u8x8_ascii_next+0xe>
    509e:	86 2f       	mov	r24, r22
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	08 95       	ret
    50a4:	8f ef       	ldi	r24, 0xFF	; 255
    50a6:	9f ef       	ldi	r25, 0xFF	; 255
    50a8:	08 95       	ret

000050aa <u8x8_utf8_init>:
u8x8_utf8_init():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    50aa:	fc 01       	movw	r30, r24
    50ac:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:288
}
    50ae:	08 95       	ret

000050b0 <u8x8_byte_SendBytes>:
u8x8_byte_SendBytes():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:45
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    50b0:	9a 01       	movw	r18, r20
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:46
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    50b2:	dc 01       	movw	r26, r24
    50b4:	18 96       	adiw	r26, 0x08	; 8
    50b6:	ed 91       	ld	r30, X+
    50b8:	fc 91       	ld	r31, X
    50ba:	46 2f       	mov	r20, r22
    50bc:	67 e1       	ldi	r22, 0x17	; 23
    50be:	09 94       	ijmp

000050c0 <u8x8_byte_SendByte>:
u8x8_byte_SendByte():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:50
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    50c0:	cf 93       	push	r28
    50c2:	df 93       	push	r29
    50c4:	1f 92       	push	r1
    50c6:	cd b7       	in	r28, 0x3d	; 61
    50c8:	de b7       	in	r29, 0x3e	; 62
    50ca:	69 83       	std	Y+1, r22	; 0x01
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:51
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    50cc:	ae 01       	movw	r20, r28
    50ce:	4f 5f       	subi	r20, 0xFF	; 255
    50d0:	5f 4f       	sbci	r21, 0xFF	; 255
    50d2:	61 e0       	ldi	r22, 0x01	; 1
    50d4:	0e 94 58 28 	call	0x50b0	; 0x50b0 <u8x8_byte_SendBytes>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:52
}
    50d8:	0f 90       	pop	r0
    50da:	df 91       	pop	r29
    50dc:	cf 91       	pop	r28
    50de:	08 95       	ret

000050e0 <u8x8_byte_StartTransfer>:
u8x8_byte_StartTransfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:56

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    50e0:	dc 01       	movw	r26, r24
    50e2:	18 96       	adiw	r26, 0x08	; 8
    50e4:	ed 91       	ld	r30, X+
    50e6:	fc 91       	ld	r31, X
    50e8:	30 e0       	ldi	r19, 0x00	; 0
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	40 e0       	ldi	r20, 0x00	; 0
    50ee:	68 e1       	ldi	r22, 0x18	; 24
    50f0:	09 94       	ijmp

000050f2 <u8x8_byte_EndTransfer>:
u8x8_byte_EndTransfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:61
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    50f2:	dc 01       	movw	r26, r24
    50f4:	18 96       	adiw	r26, 0x08	; 8
    50f6:	ed 91       	ld	r30, X+
    50f8:	fc 91       	ld	r31, X
    50fa:	30 e0       	ldi	r19, 0x00	; 0
    50fc:	20 e0       	ldi	r18, 0x00	; 0
    50fe:	40 e0       	ldi	r20, 0x00	; 0
    5100:	69 e1       	ldi	r22, 0x19	; 25
    5102:	09 94       	ijmp

00005104 <u8x8_i2c_data_transfer>:
u8x8_i2c_data_transfer():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:521
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    5104:	ef 92       	push	r14
    5106:	ff 92       	push	r15
    5108:	1f 93       	push	r17
    510a:	cf 93       	push	r28
    510c:	df 93       	push	r29
    510e:	ec 01       	movw	r28, r24
    5110:	16 2f       	mov	r17, r22
    5112:	7a 01       	movw	r14, r20
    5114:	0e 94 70 28 	call	0x50e0	; 0x50e0 <u8x8_byte_StartTransfer>
    5118:	60 e4       	ldi	r22, 0x40	; 64
    511a:	ce 01       	movw	r24, r28
    511c:	0e 94 60 28 	call	0x50c0	; 0x50c0 <u8x8_byte_SendByte>
    5120:	e8 85       	ldd	r30, Y+8	; 0x08
    5122:	f9 85       	ldd	r31, Y+9	; 0x09
    5124:	97 01       	movw	r18, r14
    5126:	41 2f       	mov	r20, r17
    5128:	67 e1       	ldi	r22, 0x17	; 23
    512a:	ce 01       	movw	r24, r28
    512c:	09 95       	icall
    512e:	ce 01       	movw	r24, r28
    5130:	df 91       	pop	r29
    5132:	cf 91       	pop	r28
    5134:	1f 91       	pop	r17
    5136:	ff 90       	pop	r15
    5138:	ef 90       	pop	r14
    513a:	0c 94 79 28 	jmp	0x50f2	; 0x50f2 <u8x8_byte_EndTransfer>

0000513e <u8x8_cad_SendCmd>:
u8x8_cad_SendCmd():
    513e:	46 2f       	mov	r20, r22
    5140:	dc 01       	movw	r26, r24
    5142:	16 96       	adiw	r26, 0x06	; 6
    5144:	ed 91       	ld	r30, X+
    5146:	fc 91       	ld	r31, X
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	65 e1       	ldi	r22, 0x15	; 21
    514e:	09 94       	ijmp

00005150 <u8x8_cad_SendArg>:
u8x8_cad_SendArg():
    5150:	46 2f       	mov	r20, r22
    5152:	dc 01       	movw	r26, r24
    5154:	16 96       	adiw	r26, 0x06	; 6
    5156:	ed 91       	ld	r30, X+
    5158:	fc 91       	ld	r31, X
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	20 e0       	ldi	r18, 0x00	; 0
    515e:	66 e1       	ldi	r22, 0x16	; 22
    5160:	09 94       	ijmp

00005162 <u8x8_cad_SendData>:
u8x8_cad_SendData():
    5162:	9a 01       	movw	r18, r20
    5164:	dc 01       	movw	r26, r24
    5166:	16 96       	adiw	r26, 0x06	; 6
    5168:	ed 91       	ld	r30, X+
    516a:	fc 91       	ld	r31, X
    516c:	46 2f       	mov	r20, r22
    516e:	67 e1       	ldi	r22, 0x17	; 23
    5170:	09 94       	ijmp

00005172 <u8x8_cad_StartTransfer>:
u8x8_cad_StartTransfer():
    5172:	dc 01       	movw	r26, r24
    5174:	16 96       	adiw	r26, 0x06	; 6
    5176:	ed 91       	ld	r30, X+
    5178:	fc 91       	ld	r31, X
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	20 e0       	ldi	r18, 0x00	; 0
    517e:	40 e0       	ldi	r20, 0x00	; 0
    5180:	68 e1       	ldi	r22, 0x18	; 24
    5182:	09 94       	ijmp

00005184 <u8x8_cad_EndTransfer>:
u8x8_cad_EndTransfer():
    5184:	dc 01       	movw	r26, r24
    5186:	16 96       	adiw	r26, 0x06	; 6
    5188:	ed 91       	ld	r30, X+
    518a:	fc 91       	ld	r31, X
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	20 e0       	ldi	r18, 0x00	; 0
    5190:	40 e0       	ldi	r20, 0x00	; 0
    5192:	69 e1       	ldi	r22, 0x19	; 25
    5194:	09 94       	ijmp

00005196 <u8x8_cad_SendSequence>:
u8x8_cad_SendSequence():
    5196:	ef 92       	push	r14
    5198:	ff 92       	push	r15
    519a:	0f 93       	push	r16
    519c:	1f 93       	push	r17
    519e:	cf 93       	push	r28
    51a0:	df 93       	push	r29
    51a2:	1f 92       	push	r1
    51a4:	cd b7       	in	r28, 0x3d	; 61
    51a6:	de b7       	in	r29, 0x3e	; 62
    51a8:	7c 01       	movw	r14, r24
    51aa:	8b 01       	movw	r16, r22
    51ac:	d8 01       	movw	r26, r16
    51ae:	6c 91       	ld	r22, X
    51b0:	67 31       	cpi	r22, 0x17	; 23
    51b2:	29 f1       	breq	.+74     	; 0x51fe <u8x8_cad_SendSequence+0x68>
    51b4:	50 f4       	brcc	.+20     	; 0x51ca <u8x8_cad_SendSequence+0x34>
    51b6:	65 31       	cpi	r22, 0x15	; 21
    51b8:	a0 f4       	brcc	.+40     	; 0x51e2 <u8x8_cad_SendSequence+0x4c>
    51ba:	0f 90       	pop	r0
    51bc:	df 91       	pop	r29
    51be:	cf 91       	pop	r28
    51c0:	1f 91       	pop	r17
    51c2:	0f 91       	pop	r16
    51c4:	ff 90       	pop	r15
    51c6:	ef 90       	pop	r14
    51c8:	08 95       	ret
    51ca:	6a 31       	cpi	r22, 0x1A	; 26
    51cc:	18 f1       	brcs	.+70     	; 0x5214 <u8x8_cad_SendSequence+0x7e>
    51ce:	6e 3f       	cpi	r22, 0xFE	; 254
    51d0:	a1 f7       	brne	.-24     	; 0x51ba <u8x8_cad_SendSequence+0x24>
    51d2:	f8 01       	movw	r30, r16
    51d4:	41 81       	ldd	r20, Z+1	; 0x01
    51d6:	49 83       	std	Y+1, r20	; 0x01
    51d8:	69 e2       	ldi	r22, 0x29	; 41
    51da:	c7 01       	movw	r24, r14
    51dc:	0e 94 9a 2a 	call	0x5534	; 0x5534 <u8x8_gpio_call>
    51e0:	0b c0       	rjmp	.+22     	; 0x51f8 <u8x8_cad_SendSequence+0x62>
    51e2:	f8 01       	movw	r30, r16
    51e4:	41 81       	ldd	r20, Z+1	; 0x01
    51e6:	49 83       	std	Y+1, r20	; 0x01
    51e8:	d7 01       	movw	r26, r14
    51ea:	16 96       	adiw	r26, 0x06	; 6
    51ec:	ed 91       	ld	r30, X+
    51ee:	fc 91       	ld	r31, X
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	c7 01       	movw	r24, r14
    51f6:	09 95       	icall
    51f8:	0e 5f       	subi	r16, 0xFE	; 254
    51fa:	1f 4f       	sbci	r17, 0xFF	; 255
    51fc:	d7 cf       	rjmp	.-82     	; 0x51ac <u8x8_cad_SendSequence+0x16>
    51fe:	f8 01       	movw	r30, r16
    5200:	81 81       	ldd	r24, Z+1	; 0x01
    5202:	89 83       	std	Y+1, r24	; 0x01
    5204:	ae 01       	movw	r20, r28
    5206:	4f 5f       	subi	r20, 0xFF	; 255
    5208:	5f 4f       	sbci	r21, 0xFF	; 255
    520a:	61 e0       	ldi	r22, 0x01	; 1
    520c:	c7 01       	movw	r24, r14
    520e:	0e 94 b1 28 	call	0x5162	; 0x5162 <u8x8_cad_SendData>
    5212:	f2 cf       	rjmp	.-28     	; 0x51f8 <u8x8_cad_SendSequence+0x62>
    5214:	0f 5f       	subi	r16, 0xFF	; 255
    5216:	1f 4f       	sbci	r17, 0xFF	; 255
    5218:	d7 01       	movw	r26, r14
    521a:	16 96       	adiw	r26, 0x06	; 6
    521c:	ed 91       	ld	r30, X+
    521e:	fc 91       	ld	r31, X
    5220:	30 e0       	ldi	r19, 0x00	; 0
    5222:	20 e0       	ldi	r18, 0x00	; 0
    5224:	40 e0       	ldi	r20, 0x00	; 0
    5226:	c7 01       	movw	r24, r14
    5228:	09 95       	icall
    522a:	c0 cf       	rjmp	.-128    	; 0x51ac <u8x8_cad_SendSequence+0x16>

0000522c <u8x8_cad_ssd13xx_fast_i2c>:
u8x8_cad_ssd13xx_fast_i2c():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:535
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    522c:	ef 92       	push	r14
    522e:	ff 92       	push	r15
    5230:	1f 93       	push	r17
    5232:	cf 93       	push	r28
    5234:	df 93       	push	r29
    5236:	ec 01       	movw	r28, r24
    5238:	14 2f       	mov	r17, r20
    523a:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    523c:	66 31       	cpi	r22, 0x16	; 22
    523e:	81 f1       	breq	.+96     	; 0x52a0 <u8x8_cad_ssd13xx_fast_i2c+0x74>
    5240:	38 f4       	brcc	.+14     	; 0x5250 <u8x8_cad_ssd13xx_fast_i2c+0x24>
    5242:	64 31       	cpi	r22, 0x14	; 20
    5244:	09 f4       	brne	.+2      	; 0x5248 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    5246:	4b c0       	rjmp	.+150    	; 0x52de <u8x8_cad_ssd13xx_fast_i2c+0xb2>
    5248:	65 31       	cpi	r22, 0x15	; 21
    524a:	79 f0       	breq	.+30     	; 0x526a <u8x8_cad_ssd13xx_fast_i2c+0x3e>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:602
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
    524c:	80 e0       	ldi	r24, 0x00	; 0
    524e:	22 c0       	rjmp	.+68     	; 0x5294 <u8x8_cad_ssd13xx_fast_i2c+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    5250:	68 31       	cpi	r22, 0x18	; 24
    5252:	c9 f1       	breq	.+114    	; 0x52c6 <u8x8_cad_ssd13xx_fast_i2c+0x9a>
    5254:	50 f1       	brcs	.+84     	; 0x52aa <u8x8_cad_ssd13xx_fast_i2c+0x7e>
    5256:	69 31       	cpi	r22, 0x19	; 25
    5258:	c9 f7       	brne	.-14     	; 0x524c <u8x8_cad_ssd13xx_fast_i2c+0x20>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:597
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    525a:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    525e:	88 23       	and	r24, r24
    5260:	91 f1       	breq	.+100    	; 0x52c6 <u8x8_cad_ssd13xx_fast_i2c+0x9a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:598
	u8x8_byte_EndTransfer(u8x8); 
    5262:	ce 01       	movw	r24, r28
    5264:	0e 94 79 28 	call	0x50f2	; 0x50f2 <u8x8_byte_EndTransfer>
    5268:	2e c0       	rjmp	.+92     	; 0x52c6 <u8x8_cad_ssd13xx_fast_i2c+0x9a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:544
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    526a:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    526e:	88 23       	and	r24, r24
    5270:	19 f0       	breq	.+6      	; 0x5278 <u8x8_cad_ssd13xx_fast_i2c+0x4c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:545
	 u8x8_byte_EndTransfer(u8x8); 
    5272:	ce 01       	movw	r24, r28
    5274:	0e 94 79 28 	call	0x50f2	; 0x50f2 <u8x8_byte_EndTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:547
      
      u8x8_byte_StartTransfer(u8x8);
    5278:	ce 01       	movw	r24, r28
    527a:	0e 94 70 28 	call	0x50e0	; 0x50e0 <u8x8_byte_StartTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:548
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    527e:	60 e0       	ldi	r22, 0x00	; 0
    5280:	ce 01       	movw	r24, r28
    5282:	0e 94 60 28 	call	0x50c0	; 0x50c0 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:549
      u8x8_byte_SendByte(u8x8, arg_int);
    5286:	61 2f       	mov	r22, r17
    5288:	ce 01       	movw	r24, r28
    528a:	0e 94 60 28 	call	0x50c0	; 0x50c0 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:550
      in_transfer = 1;
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <in_transfer.3489>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    5294:	df 91       	pop	r29
    5296:	cf 91       	pop	r28
    5298:	1f 91       	pop	r17
    529a:	ff 90       	pop	r15
    529c:	ef 90       	pop	r14
    529e:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:564
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    52a0:	64 2f       	mov	r22, r20
    52a2:	0e 94 60 28 	call	0x50c0	; 0x50c0 <u8x8_byte_SendByte>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:604
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    52a6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:600
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    52a8:	f5 cf       	rjmp	.-22     	; 0x5294 <u8x8_cad_ssd13xx_fast_i2c+0x68>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:567
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    52aa:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <in_transfer.3489>
    52ae:	88 23       	and	r24, r24
    52b0:	19 f0       	breq	.+6      	; 0x52b8 <u8x8_cad_ssd13xx_fast_i2c+0x8c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:568
	u8x8_byte_EndTransfer(u8x8); 
    52b2:	ce 01       	movw	r24, r28
    52b4:	0e 94 79 28 	call	0x50f2	; 0x50f2 <u8x8_byte_EndTransfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    52b8:	a7 01       	movw	r20, r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:579
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    52ba:	19 31       	cpi	r17, 0x19	; 25
    52bc:	38 f4       	brcc	.+14     	; 0x52cc <u8x8_cad_ssd13xx_fast_i2c+0xa0>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:585
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    52be:	61 2f       	mov	r22, r17
    52c0:	ce 01       	movw	r24, r28
    52c2:	0e 94 82 28 	call	0x5104	; 0x5104 <u8x8_i2c_data_transfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:599
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    52c6:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <in_transfer.3489>
    52ca:	ed cf       	rjmp	.-38     	; 0x52a6 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    52cc:	68 e1       	ldi	r22, 0x18	; 24
    52ce:	ce 01       	movw	r24, r28
    52d0:	0e 94 82 28 	call	0x5104	; 0x5104 <u8x8_i2c_data_transfer>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:582
	arg_int-=24;
    52d4:	18 51       	subi	r17, 0x18	; 24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:583
	p+=24;
    52d6:	88 e1       	ldi	r24, 0x18	; 24
    52d8:	e8 0e       	add	r14, r24
    52da:	f1 1c       	adc	r15, r1
    52dc:	ed cf       	rjmp	.-38     	; 0x52b8 <u8x8_cad_ssd13xx_fast_i2c+0x8c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:590
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    52de:	8e 89       	ldd	r24, Y+22	; 0x16
    52e0:	8f 3f       	cpi	r24, 0xFF	; 255
    52e2:	11 f4       	brne	.+4      	; 0x52e8 <u8x8_cad_ssd13xx_fast_i2c+0xbc>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:591
	u8x8->i2c_address = 0x078;
    52e4:	88 e7       	ldi	r24, 0x78	; 120
    52e6:	8e 8b       	std	Y+22, r24	; 0x16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    52e8:	e8 85       	ldd	r30, Y+8	; 0x08
    52ea:	f9 85       	ldd	r31, Y+9	; 0x09
    52ec:	97 01       	movw	r18, r14
    52ee:	41 2f       	mov	r20, r17
    52f0:	64 e1       	ldi	r22, 0x14	; 20
    52f2:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    52f4:	df 91       	pop	r29
    52f6:	cf 91       	pop	r28
    52f8:	1f 91       	pop	r17
    52fa:	ff 90       	pop	r15
    52fc:	ef 90       	pop	r14
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    52fe:	09 94       	ijmp

00005300 <u8x8_d_ssd1306_sh1106_generic>:
u8x8_d_ssd1306_sh1106_generic():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:446
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    5300:	ef 92       	push	r14
    5302:	ff 92       	push	r15
    5304:	0f 93       	push	r16
    5306:	1f 93       	push	r17
    5308:	cf 93       	push	r28
    530a:	df 93       	push	r29
    530c:	ec 01       	movw	r28, r24
    530e:	04 2f       	mov	r16, r20
    5310:	79 01       	movw	r14, r18
    5312:	6d 30       	cpi	r22, 0x0D	; 13
    5314:	09 f4       	brne	.+2      	; 0x5318 <u8x8_d_ssd1306_sh1106_generic+0x18>
    5316:	47 c0       	rjmp	.+142    	; 0x53a6 <u8x8_d_ssd1306_sh1106_generic+0xa6>
    5318:	20 f4       	brcc	.+8      	; 0x5322 <u8x8_d_ssd1306_sh1106_generic+0x22>
    531a:	6b 30       	cpi	r22, 0x0B	; 11
    531c:	99 f1       	breq	.+102    	; 0x5384 <u8x8_d_ssd1306_sh1106_generic+0x84>
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	3b c0       	rjmp	.+118    	; 0x5398 <u8x8_d_ssd1306_sh1106_generic+0x98>
    5322:	6e 30       	cpi	r22, 0x0E	; 14
    5324:	09 f4       	brne	.+2      	; 0x5328 <u8x8_d_ssd1306_sh1106_generic+0x28>
    5326:	52 c0       	rjmp	.+164    	; 0x53cc <u8x8_d_ssd1306_sh1106_generic+0xcc>
    5328:	6f 30       	cpi	r22, 0x0F	; 15
    532a:	c9 f7       	brne	.-14     	; 0x531e <u8x8_d_ssd1306_sh1106_generic+0x1e>
    532c:	0e 94 b9 28 	call	0x5172	; 0x5172 <u8x8_cad_StartTransfer>
    5330:	f7 01       	movw	r30, r14
    5332:	13 81       	ldd	r17, Z+3	; 0x03
    5334:	11 0f       	add	r17, r17
    5336:	11 0f       	add	r17, r17
    5338:	11 0f       	add	r17, r17
    533a:	6c 89       	ldd	r22, Y+20	; 0x14
    533c:	16 0f       	add	r17, r22
    533e:	60 e4       	ldi	r22, 0x40	; 64
    5340:	ce 01       	movw	r24, r28
    5342:	0e 94 9f 28 	call	0x513e	; 0x513e <u8x8_cad_SendCmd>
    5346:	61 2f       	mov	r22, r17
    5348:	62 95       	swap	r22
    534a:	6f 70       	andi	r22, 0x0F	; 15
    534c:	60 61       	ori	r22, 0x10	; 16
    534e:	ce 01       	movw	r24, r28
    5350:	0e 94 9f 28 	call	0x513e	; 0x513e <u8x8_cad_SendCmd>
    5354:	61 2f       	mov	r22, r17
    5356:	6f 70       	andi	r22, 0x0F	; 15
    5358:	ce 01       	movw	r24, r28
    535a:	0e 94 a8 28 	call	0x5150	; 0x5150 <u8x8_cad_SendArg>
    535e:	f7 01       	movw	r30, r14
    5360:	64 81       	ldd	r22, Z+4	; 0x04
    5362:	60 6b       	ori	r22, 0xB0	; 176
    5364:	ce 01       	movw	r24, r28
    5366:	0e 94 a8 28 	call	0x5150	; 0x5150 <u8x8_cad_SendArg>
    536a:	f7 01       	movw	r30, r14
    536c:	40 81       	ld	r20, Z
    536e:	51 81       	ldd	r21, Z+1	; 0x01
    5370:	62 81       	ldd	r22, Z+2	; 0x02
    5372:	66 0f       	add	r22, r22
    5374:	66 0f       	add	r22, r22
    5376:	66 0f       	add	r22, r22
    5378:	ce 01       	movw	r24, r28
    537a:	0e 94 b1 28 	call	0x5162	; 0x5162 <u8x8_cad_SendData>
    537e:	01 50       	subi	r16, 0x01	; 1
    5380:	a1 f7       	brne	.-24     	; 0x536a <u8x8_d_ssd1306_sh1106_generic+0x6a>
    5382:	2e c0       	rjmp	.+92     	; 0x53e0 <u8x8_d_ssd1306_sh1106_generic+0xe0>
    5384:	61 e8       	ldi	r22, 0x81	; 129
    5386:	71 e0       	ldi	r23, 0x01	; 1
    5388:	44 23       	and	r20, r20
    538a:	11 f0       	breq	.+4      	; 0x5390 <u8x8_d_ssd1306_sh1106_generic+0x90>
    538c:	6c e7       	ldi	r22, 0x7C	; 124
    538e:	71 e0       	ldi	r23, 0x01	; 1
    5390:	ce 01       	movw	r24, r28
    5392:	0e 94 cb 28 	call	0x5196	; 0x5196 <u8x8_cad_SendSequence>
    5396:	81 e0       	ldi	r24, 0x01	; 1
    5398:	df 91       	pop	r29
    539a:	cf 91       	pop	r28
    539c:	1f 91       	pop	r17
    539e:	0f 91       	pop	r16
    53a0:	ff 90       	pop	r15
    53a2:	ef 90       	pop	r14
    53a4:	08 95       	ret
    53a6:	41 11       	cpse	r20, r1
    53a8:	09 c0       	rjmp	.+18     	; 0x53bc <u8x8_d_ssd1306_sh1106_generic+0xbc>
    53aa:	65 e7       	ldi	r22, 0x75	; 117
    53ac:	71 e0       	ldi	r23, 0x01	; 1
    53ae:	0e 94 cb 28 	call	0x5196	; 0x5196 <u8x8_cad_SendSequence>
    53b2:	e8 81       	ld	r30, Y
    53b4:	f9 81       	ldd	r31, Y+1	; 0x01
    53b6:	82 89       	ldd	r24, Z+18	; 0x12
    53b8:	8c 8b       	std	Y+20, r24	; 0x14
    53ba:	ed cf       	rjmp	.-38     	; 0x5396 <u8x8_d_ssd1306_sh1106_generic+0x96>
    53bc:	6e e6       	ldi	r22, 0x6E	; 110
    53be:	71 e0       	ldi	r23, 0x01	; 1
    53c0:	0e 94 cb 28 	call	0x5196	; 0x5196 <u8x8_cad_SendSequence>
    53c4:	e8 81       	ld	r30, Y
    53c6:	f9 81       	ldd	r31, Y+1	; 0x01
    53c8:	83 89       	ldd	r24, Z+19	; 0x13
    53ca:	f6 cf       	rjmp	.-20     	; 0x53b8 <u8x8_d_ssd1306_sh1106_generic+0xb8>
    53cc:	0e 94 b9 28 	call	0x5172	; 0x5172 <u8x8_cad_StartTransfer>
    53d0:	61 e8       	ldi	r22, 0x81	; 129
    53d2:	ce 01       	movw	r24, r28
    53d4:	0e 94 9f 28 	call	0x513e	; 0x513e <u8x8_cad_SendCmd>
    53d8:	60 2f       	mov	r22, r16
    53da:	ce 01       	movw	r24, r28
    53dc:	0e 94 a8 28 	call	0x5150	; 0x5150 <u8x8_cad_SendArg>
    53e0:	ce 01       	movw	r24, r28
    53e2:	0e 94 c2 28 	call	0x5184	; 0x5184 <u8x8_cad_EndTransfer>
    53e6:	d7 cf       	rjmp	.-82     	; 0x5396 <u8x8_d_ssd1306_sh1106_generic+0x96>

000053e8 <u8x8_d_sh1106_128x64_noname>:
u8x8_d_sh1106_128x64_noname():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:480
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    53e8:	1f 93       	push	r17
    53ea:	cf 93       	push	r28
    53ec:	df 93       	push	r29
    53ee:	ec 01       	movw	r28, r24
    53f0:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:481
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    53f2:	0e 94 80 29 	call	0x5300	; 0x5300 <u8x8_d_ssd1306_sh1106_generic>
    53f6:	81 11       	cpse	r24, r1
    53f8:	0c c0       	rjmp	.+24     	; 0x5412 <u8x8_d_sh1106_128x64_noname+0x2a>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:484
    return 1;
  
  switch(msg)
    53fa:	19 30       	cpi	r17, 0x09	; 9
    53fc:	79 f0       	breq	.+30     	; 0x541c <u8x8_d_sh1106_128x64_noname+0x34>
    53fe:	1a 30       	cpi	r17, 0x0A	; 10
    5400:	49 f4       	brne	.+18     	; 0x5414 <u8x8_d_sh1106_128x64_noname+0x2c>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:487
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    5402:	ce 01       	movw	r24, r28
    5404:	0e 94 1c 2a 	call	0x5438	; 0x5438 <u8x8_d_helper_display_init>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:491
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    5408:	66 e8       	ldi	r22, 0x86	; 134
    540a:	71 e0       	ldi	r23, 0x01	; 1
    540c:	ce 01       	movw	r24, r28
    540e:	0e 94 cb 28 	call	0x5196	; 0x5196 <u8x8_cad_SendSequence>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:482
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    5412:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:501
    default:
      return 0;
  }
  return 1;
    
}
    5414:	df 91       	pop	r29
    5416:	cf 91       	pop	r28
    5418:	1f 91       	pop	r17
    541a:	08 95       	ret
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:494
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
    541c:	66 e5       	ldi	r22, 0x56	; 86
    541e:	71 e0       	ldi	r23, 0x01	; 1
    5420:	ce 01       	movw	r24, r28
    5422:	0e 94 14 2a 	call	0x5428	; 0x5428 <u8x8_d_helper_display_setup_memory>
    5426:	f5 cf       	rjmp	.-22     	; 0x5412 <u8x8_d_sh1106_128x64_noname+0x2a>

00005428 <u8x8_d_helper_display_setup_memory>:
u8x8_d_helper_display_setup_memory():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:153
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    5428:	fc 01       	movw	r30, r24
    542a:	71 83       	std	Z+1, r23	; 0x01
    542c:	60 83       	st	Z, r22
    542e:	fb 01       	movw	r30, r22
    5430:	22 89       	ldd	r18, Z+18	; 0x12
    5432:	fc 01       	movw	r30, r24
    5434:	24 8b       	std	Z+20, r18	; 0x14
    5436:	08 95       	ret

00005438 <u8x8_d_helper_display_init>:
u8x8_d_helper_display_init():
    5438:	cf 93       	push	r28
    543a:	df 93       	push	r29
    543c:	ec 01       	movw	r28, r24
    543e:	ea 85       	ldd	r30, Y+10	; 0x0a
    5440:	fb 85       	ldd	r31, Y+11	; 0x0b
    5442:	30 e0       	ldi	r19, 0x00	; 0
    5444:	20 e0       	ldi	r18, 0x00	; 0
    5446:	40 e0       	ldi	r20, 0x00	; 0
    5448:	68 e2       	ldi	r22, 0x28	; 40
    544a:	09 95       	icall
    544c:	ee 81       	ldd	r30, Y+6	; 0x06
    544e:	ff 81       	ldd	r31, Y+7	; 0x07
    5450:	30 e0       	ldi	r19, 0x00	; 0
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	40 e0       	ldi	r20, 0x00	; 0
    5456:	64 e1       	ldi	r22, 0x14	; 20
    5458:	ce 01       	movw	r24, r28
    545a:	09 95       	icall
    545c:	41 e0       	ldi	r20, 0x01	; 1
    545e:	6b e4       	ldi	r22, 0x4B	; 75
    5460:	ce 01       	movw	r24, r28
    5462:	0e 94 9a 2a 	call	0x5534	; 0x5534 <u8x8_gpio_call>
    5466:	e8 81       	ld	r30, Y
    5468:	f9 81       	ldd	r31, Y+1	; 0x01
    546a:	44 81       	ldd	r20, Z+4	; 0x04
    546c:	69 e2       	ldi	r22, 0x29	; 41
    546e:	ce 01       	movw	r24, r28
    5470:	0e 94 9a 2a 	call	0x5534	; 0x5534 <u8x8_gpio_call>
    5474:	40 e0       	ldi	r20, 0x00	; 0
    5476:	6b e4       	ldi	r22, 0x4B	; 75
    5478:	ce 01       	movw	r24, r28
    547a:	0e 94 9a 2a 	call	0x5534	; 0x5534 <u8x8_gpio_call>
    547e:	e8 81       	ld	r30, Y
    5480:	f9 81       	ldd	r31, Y+1	; 0x01
    5482:	44 81       	ldd	r20, Z+4	; 0x04
    5484:	69 e2       	ldi	r22, 0x29	; 41
    5486:	ce 01       	movw	r24, r28
    5488:	0e 94 9a 2a 	call	0x5534	; 0x5534 <u8x8_gpio_call>
    548c:	41 e0       	ldi	r20, 0x01	; 1
    548e:	6b e4       	ldi	r22, 0x4B	; 75
    5490:	ce 01       	movw	r24, r28
    5492:	0e 94 9a 2a 	call	0x5534	; 0x5534 <u8x8_gpio_call>
    5496:	e8 81       	ld	r30, Y
    5498:	f9 81       	ldd	r31, Y+1	; 0x01
    549a:	45 81       	ldd	r20, Z+5	; 0x05
    549c:	69 e2       	ldi	r22, 0x29	; 41
    549e:	ce 01       	movw	r24, r28
    54a0:	df 91       	pop	r29
    54a2:	cf 91       	pop	r28
    54a4:	0c 94 9a 2a 	jmp	0x5534	; 0x5534 <u8x8_gpio_call>

000054a8 <u8x8_DrawTile>:
u8x8_DrawTile():
    54a8:	0f 93       	push	r16
    54aa:	1f 93       	push	r17
    54ac:	cf 93       	push	r28
    54ae:	df 93       	push	r29
    54b0:	00 d0       	rcall	.+0      	; 0x54b2 <u8x8_DrawTile+0xa>
    54b2:	00 d0       	rcall	.+0      	; 0x54b4 <u8x8_DrawTile+0xc>
    54b4:	1f 92       	push	r1
    54b6:	cd b7       	in	r28, 0x3d	; 61
    54b8:	de b7       	in	r29, 0x3e	; 62
    54ba:	6c 83       	std	Y+4, r22	; 0x04
    54bc:	4d 83       	std	Y+5, r20	; 0x05
    54be:	2b 83       	std	Y+3, r18	; 0x03
    54c0:	1a 83       	std	Y+2, r17	; 0x02
    54c2:	09 83       	std	Y+1, r16	; 0x01
    54c4:	dc 01       	movw	r26, r24
    54c6:	14 96       	adiw	r26, 0x04	; 4
    54c8:	ed 91       	ld	r30, X+
    54ca:	fc 91       	ld	r31, X
    54cc:	9e 01       	movw	r18, r28
    54ce:	2f 5f       	subi	r18, 0xFF	; 255
    54d0:	3f 4f       	sbci	r19, 0xFF	; 255
    54d2:	41 e0       	ldi	r20, 0x01	; 1
    54d4:	6f e0       	ldi	r22, 0x0F	; 15
    54d6:	09 95       	icall
    54d8:	0f 90       	pop	r0
    54da:	0f 90       	pop	r0
    54dc:	0f 90       	pop	r0
    54de:	0f 90       	pop	r0
    54e0:	0f 90       	pop	r0
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	1f 91       	pop	r17
    54e8:	0f 91       	pop	r16
    54ea:	08 95       	ret

000054ec <u8x8_SetupMemory>:
u8x8_SetupMemory():
    54ec:	dc 01       	movw	r26, r24
    54ee:	14 96       	adiw	r26, 0x04	; 4
    54f0:	ed 91       	ld	r30, X+
    54f2:	fc 91       	ld	r31, X
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	20 e0       	ldi	r18, 0x00	; 0
    54f8:	40 e0       	ldi	r20, 0x00	; 0
    54fa:	69 e0       	ldi	r22, 0x09	; 9
    54fc:	09 94       	ijmp

000054fe <u8x8_InitDisplay>:
u8x8_InitDisplay():
    54fe:	dc 01       	movw	r26, r24
    5500:	14 96       	adiw	r26, 0x04	; 4
    5502:	ed 91       	ld	r30, X+
    5504:	fc 91       	ld	r31, X
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	20 e0       	ldi	r18, 0x00	; 0
    550a:	40 e0       	ldi	r20, 0x00	; 0
    550c:	6a e0       	ldi	r22, 0x0A	; 10
    550e:	09 94       	ijmp

00005510 <u8x8_SetPowerSave>:
u8x8_SetPowerSave():
    5510:	46 2f       	mov	r20, r22
    5512:	dc 01       	movw	r26, r24
    5514:	14 96       	adiw	r26, 0x04	; 4
    5516:	ed 91       	ld	r30, X+
    5518:	fc 91       	ld	r31, X
    551a:	30 e0       	ldi	r19, 0x00	; 0
    551c:	20 e0       	ldi	r18, 0x00	; 0
    551e:	6b e0       	ldi	r22, 0x0B	; 11
    5520:	09 94       	ijmp

00005522 <u8x8_RefreshDisplay>:
u8x8_RefreshDisplay():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:158
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    5522:	dc 01       	movw	r26, r24
    5524:	14 96       	adiw	r26, 0x04	; 4
    5526:	ed 91       	ld	r30, X+
    5528:	fc 91       	ld	r31, X
    552a:	30 e0       	ldi	r19, 0x00	; 0
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	40 e0       	ldi	r20, 0x00	; 0
    5530:	60 e1       	ldi	r22, 0x10	; 16
    5532:	09 94       	ijmp

00005534 <u8x8_gpio_call>:
u8x8_gpio_call():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_gpio.c:42
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    5534:	dc 01       	movw	r26, r24
    5536:	1a 96       	adiw	r26, 0x0a	; 10
    5538:	ed 91       	ld	r30, X+
    553a:	fc 91       	ld	r31, X
    553c:	30 e0       	ldi	r19, 0x00	; 0
    553e:	20 e0       	ldi	r18, 0x00	; 0
    5540:	09 94       	ijmp

00005542 <u8x8_dummy_cb>:
u8x8_dummy_cb():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:82
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_null_display_info);
      break;
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      break;
    5542:	80 e0       	ldi	r24, 0x00	; 0
    5544:	08 95       	ret

00005546 <u8x8_SetupDefaults>:
u8x8_SetupDefaults():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:96
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    5546:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:97
    u8x8->display_info = NULL;
    5548:	11 82       	std	Z+1, r1	; 0x01
    554a:	10 82       	st	Z, r1
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:98
    u8x8->display_cb = u8x8_dummy_cb;
    554c:	81 ea       	ldi	r24, 0xA1	; 161
    554e:	9a e2       	ldi	r25, 0x2A	; 42
    5550:	95 83       	std	Z+5, r25	; 0x05
    5552:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:99
    u8x8->cad_cb = u8x8_dummy_cb;
    5554:	97 83       	std	Z+7, r25	; 0x07
    5556:	86 83       	std	Z+6, r24	; 0x06
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:100
    u8x8->byte_cb = u8x8_dummy_cb;
    5558:	91 87       	std	Z+9, r25	; 0x09
    555a:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:101
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    555c:	93 87       	std	Z+11, r25	; 0x0b
    555e:	82 87       	std	Z+10, r24	; 0x0a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:102
    u8x8->is_font_inverse_mode = 0;
    5560:	15 8a       	std	Z+21, r1	; 0x15
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:104
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    5562:	10 8e       	std	Z+24, r1	; 0x18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:105
    u8x8->bus_clock = 0;		/* issue 769 */
    5564:	14 86       	std	Z+12, r1	; 0x0c
    5566:	15 86       	std	Z+13, r1	; 0x0d
    5568:	16 86       	std	Z+14, r1	; 0x0e
    556a:	17 86       	std	Z+15, r1	; 0x0f
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:106
    u8x8->i2c_address = 255;
    556c:	8f ef       	ldi	r24, 0xFF	; 255
    556e:	86 8b       	std	Z+22, r24	; 0x16
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:107
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    5570:	82 8f       	std	Z+26, r24	; 0x1a
    5572:	df 01       	movw	r26, r30
    5574:	5e 96       	adiw	r26, 0x1e	; 30
    5576:	f4 96       	adiw	r30, 0x34	; 52
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:113 (discriminator 3)
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
    5578:	8d 93       	st	X+, r24
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:112 (discriminator 3)
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
    557a:	ae 17       	cp	r26, r30
    557c:	bf 07       	cpc	r27, r31
    557e:	e1 f7       	brne	.-8      	; 0x5578 <u8x8_SetupDefaults+0x32>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:116
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    5580:	08 95       	ret

00005582 <u8x8_Setup>:
u8x8_Setup():
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:134
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    5582:	af 92       	push	r10
    5584:	bf 92       	push	r11
    5586:	cf 92       	push	r12
    5588:	df 92       	push	r13
    558a:	ef 92       	push	r14
    558c:	ff 92       	push	r15
    558e:	0f 93       	push	r16
    5590:	1f 93       	push	r17
    5592:	cf 93       	push	r28
    5594:	df 93       	push	r29
    5596:	ec 01       	movw	r28, r24
    5598:	5b 01       	movw	r10, r22
    559a:	6a 01       	movw	r12, r20
    559c:	79 01       	movw	r14, r18
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:136
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    559e:	0e 94 a3 2a 	call	0x5546	; 0x5546 <u8x8_SetupDefaults>
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:139

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    55a2:	bd 82       	std	Y+5, r11	; 0x05
    55a4:	ac 82       	std	Y+4, r10	; 0x04
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:140
  u8x8->cad_cb = cad_cb;
    55a6:	df 82       	std	Y+7, r13	; 0x07
    55a8:	ce 82       	std	Y+6, r12	; 0x06
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:141
  u8x8->byte_cb = byte_cb;
    55aa:	f9 86       	std	Y+9, r15	; 0x09
    55ac:	e8 86       	std	Y+8, r14	; 0x08
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:142
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    55ae:	1b 87       	std	Y+11, r17	; 0x0b
    55b0:	0a 87       	std	Y+10, r16	; 0x0a
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    55b2:	ce 01       	movw	r24, r28
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:146
}
    55b4:	df 91       	pop	r29
    55b6:	cf 91       	pop	r28
    55b8:	1f 91       	pop	r17
    55ba:	0f 91       	pop	r16
    55bc:	ff 90       	pop	r15
    55be:	ef 90       	pop	r14
    55c0:	df 90       	pop	r13
    55c2:	cf 90       	pop	r12
    55c4:	bf 90       	pop	r11
    55c6:	af 90       	pop	r10
C:\Users\Thaddaeus\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    55c8:	0c 94 76 2a 	jmp	0x54ec	; 0x54ec <u8x8_SetupMemory>

000055cc <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:657

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	1f 92       	push	r1
    55d2:	cd b7       	in	r28, 0x3d	; 61
    55d4:	de b7       	in	r29, 0x3e	; 62
    55d6:	fc 01       	movw	r30, r24
    55d8:	69 83       	std	Y+1, r22	; 0x01
    55da:	87 89       	ldd	r24, Z+23	; 0x17
    55dc:	88 23       	and	r24, r24
    55de:	f9 f0       	breq	.+62     	; 0x561e <TwoWire::write(unsigned char)+0x52>
    55e0:	26 89       	ldd	r18, Z+22	; 0x16
    55e2:	84 85       	ldd	r24, Z+12	; 0x0c
    55e4:	95 85       	ldd	r25, Z+13	; 0x0d
    55e6:	28 17       	cp	r18, r24
    55e8:	19 06       	cpc	r1, r25
    55ea:	54 f0       	brlt	.+20     	; 0x5600 <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
    55ec:	81 e0       	ldi	r24, 0x01	; 1
    55ee:	90 e0       	ldi	r25, 0x00	; 0
    55f0:	93 83       	std	Z+3, r25	; 0x03
    55f2:	82 83       	std	Z+2, r24	; 0x02
_ZN7TwoWire5writeEh():
    55f4:	90 e0       	ldi	r25, 0x00	; 0
    55f6:	80 e0       	ldi	r24, 0x00	; 0
    55f8:	0f 90       	pop	r0
    55fa:	df 91       	pop	r29
    55fc:	cf 91       	pop	r28
    55fe:	08 95       	ret
    5600:	89 81       	ldd	r24, Y+1	; 0x01
    5602:	a5 89       	ldd	r26, Z+21	; 0x15
    5604:	23 89       	ldd	r18, Z+19	; 0x13
    5606:	34 89       	ldd	r19, Z+20	; 0x14
    5608:	a2 0f       	add	r26, r18
    560a:	b3 2f       	mov	r27, r19
    560c:	b1 1d       	adc	r27, r1
    560e:	8c 93       	st	X, r24
    5610:	85 89       	ldd	r24, Z+21	; 0x15
    5612:	8f 5f       	subi	r24, 0xFF	; 255
    5614:	85 8b       	std	Z+21, r24	; 0x15
    5616:	86 8b       	std	Z+22, r24	; 0x16
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	ed cf       	rjmp	.-38     	; 0x55f8 <TwoWire::write(unsigned char)+0x2c>
    561e:	00 a4       	ldd	r0, Z+40	; 0x28
    5620:	f1 a5       	ldd	r31, Z+41	; 0x29
    5622:	e0 2d       	mov	r30, r0
    5624:	61 e0       	ldi	r22, 0x01	; 1
    5626:	ce 01       	movw	r24, r28
    5628:	01 96       	adiw	r24, 0x01	; 1
    562a:	09 95       	icall
    562c:	f5 cf       	rjmp	.-22     	; 0x5618 <TwoWire::write(unsigned char)+0x4c>

0000562e <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    562e:	fc 01       	movw	r30, r24
    5630:	81 89       	ldd	r24, Z+17	; 0x11
    5632:	90 89       	ldd	r25, Z+16	; 0x10
    5634:	89 1b       	sub	r24, r25
    5636:	99 0b       	sbc	r25, r25
    5638:	08 95       	ret

0000563a <TwoWire::read()>:
_ZN7TwoWire4readEv():
    563a:	fc 01       	movw	r30, r24
    563c:	90 89       	ldd	r25, Z+16	; 0x10
    563e:	81 89       	ldd	r24, Z+17	; 0x11
    5640:	2f ef       	ldi	r18, 0xFF	; 255
    5642:	3f ef       	ldi	r19, 0xFF	; 255
    5644:	98 17       	cp	r25, r24
    5646:	40 f4       	brcc	.+16     	; 0x5658 <TwoWire::read()+0x1e>
    5648:	a6 85       	ldd	r26, Z+14	; 0x0e
    564a:	b7 85       	ldd	r27, Z+15	; 0x0f
    564c:	a9 0f       	add	r26, r25
    564e:	b1 1d       	adc	r27, r1
    5650:	2c 91       	ld	r18, X
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	9f 5f       	subi	r25, 0xFF	; 255
    5656:	90 8b       	std	Z+16, r25	; 0x10
    5658:	c9 01       	movw	r24, r18
    565a:	08 95       	ret

0000565c <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    565c:	dc 01       	movw	r26, r24
    565e:	50 96       	adiw	r26, 0x10	; 16
    5660:	ec 91       	ld	r30, X
    5662:	50 97       	sbiw	r26, 0x10	; 16
    5664:	51 96       	adiw	r26, 0x11	; 17
    5666:	8c 91       	ld	r24, X
    5668:	51 97       	sbiw	r26, 0x11	; 17
    566a:	e8 17       	cp	r30, r24
    566c:	48 f4       	brcc	.+18     	; 0x5680 <TwoWire::peek()+0x24>
    566e:	1e 96       	adiw	r26, 0x0e	; 14
    5670:	8d 91       	ld	r24, X+
    5672:	9c 91       	ld	r25, X
    5674:	e8 0f       	add	r30, r24
    5676:	f9 2f       	mov	r31, r25
    5678:	f1 1d       	adc	r31, r1
    567a:	80 81       	ld	r24, Z
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	08 95       	ret
    5680:	8f ef       	ldi	r24, 0xFF	; 255
    5682:	9f ef       	ldi	r25, 0xFF	; 255
    5684:	08 95       	ret

00005686 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    5686:	08 95       	ret

00005688 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    5688:	cf 92       	push	r12
    568a:	df 92       	push	r13
    568c:	ef 92       	push	r14
    568e:	ff 92       	push	r15
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	8c 01       	movw	r16, r24
    569a:	cb 01       	movw	r24, r22
    569c:	7a 01       	movw	r14, r20
    569e:	d8 01       	movw	r26, r16
    56a0:	57 96       	adiw	r26, 0x17	; 23
    56a2:	2c 91       	ld	r18, X
    56a4:	57 97       	sbiw	r26, 0x17	; 23
    56a6:	22 23       	and	r18, r18
    56a8:	89 f0       	breq	.+34     	; 0x56cc <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    56aa:	eb 01       	movw	r28, r22
    56ac:	6b 01       	movw	r12, r22
    56ae:	c4 0e       	add	r12, r20
    56b0:	d5 1e       	adc	r13, r21
    56b2:	cc 15       	cp	r28, r12
    56b4:	dd 05       	cpc	r29, r13
    56b6:	79 f0       	breq	.+30     	; 0x56d6 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
    56b8:	69 91       	ld	r22, Y+
    56ba:	d8 01       	movw	r26, r16
    56bc:	ed 91       	ld	r30, X+
    56be:	fc 91       	ld	r31, X
    56c0:	01 90       	ld	r0, Z+
    56c2:	f0 81       	ld	r31, Z
    56c4:	e0 2d       	mov	r30, r0
    56c6:	c8 01       	movw	r24, r16
    56c8:	09 95       	icall
    56ca:	f3 cf       	rjmp	.-26     	; 0x56b2 <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
    56cc:	98 96       	adiw	r26, 0x28	; 40
    56ce:	ed 91       	ld	r30, X+
    56d0:	fc 91       	ld	r31, X
    56d2:	64 2f       	mov	r22, r20
    56d4:	09 95       	icall
    56d6:	c7 01       	movw	r24, r14
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	1f 91       	pop	r17
    56de:	0f 91       	pop	r16
    56e0:	ff 90       	pop	r15
    56e2:	ef 90       	pop	r14
    56e4:	df 90       	pop	r13
    56e6:	cf 90       	pop	r12
    56e8:	08 95       	ret

000056ea <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>:
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    56ea:	2f 92       	push	r2
    56ec:	3f 92       	push	r3
    56ee:	4f 92       	push	r4
    56f0:	5f 92       	push	r5
    56f2:	6f 92       	push	r6
    56f4:	7f 92       	push	r7
    56f6:	8f 92       	push	r8
    56f8:	9f 92       	push	r9
    56fa:	af 92       	push	r10
    56fc:	bf 92       	push	r11
    56fe:	cf 92       	push	r12
    5700:	df 92       	push	r13
    5702:	ef 92       	push	r14
    5704:	ff 92       	push	r15
    5706:	0f 93       	push	r16
    5708:	1f 93       	push	r17
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	cd b7       	in	r28, 0x3d	; 61
    5710:	de b7       	in	r29, 0x3e	; 62
    5712:	60 97       	sbiw	r28, 0x10	; 16
    5714:	0f b6       	in	r0, 0x3f	; 63
    5716:	f8 94       	cli
    5718:	de bf       	out	0x3e, r29	; 62
    571a:	0f be       	out	0x3f, r0	; 63
    571c:	cd bf       	out	0x3d, r28	; 61
    571e:	3c 01       	movw	r6, r24
    5720:	2b 01       	movw	r4, r22
    5722:	5a 83       	std	Y+2, r21	; 0x02
    5724:	49 83       	std	Y+1, r20	; 0x01
    5726:	3c 83       	std	Y+4, r19	; 0x04
    5728:	2b 83       	std	Y+3, r18	; 0x03
    572a:	8d a1       	ldd	r24, Y+37	; 0x25
    572c:	9e a1       	ldd	r25, Y+38	; 0x26
    572e:	9e 83       	std	Y+6, r25	; 0x06
    5730:	8d 83       	std	Y+5, r24	; 0x05
    5732:	ef a1       	ldd	r30, Y+39	; 0x27
    5734:	f8 a5       	ldd	r31, Y+40	; 0x28
    5736:	f8 87       	std	Y+8, r31	; 0x08
    5738:	ef 83       	std	Y+7, r30	; 0x07
    573a:	89 a5       	ldd	r24, Y+41	; 0x29
    573c:	9a a5       	ldd	r25, Y+42	; 0x2a
    573e:	9a 87       	std	Y+10, r25	; 0x0a
    5740:	89 87       	std	Y+9, r24	; 0x09
    5742:	eb a5       	ldd	r30, Y+43	; 0x2b
    5744:	fc a5       	ldd	r31, Y+44	; 0x2c
    5746:	fc 87       	std	Y+12, r31	; 0x0c
    5748:	eb 87       	std	Y+11, r30	; 0x0b
    574a:	2d a4       	ldd	r2, Y+45	; 0x2d
    574c:	3e a4       	ldd	r3, Y+46	; 0x2e
    574e:	8f a5       	ldd	r24, Y+47	; 0x2f
    5750:	98 a9       	ldd	r25, Y+48	; 0x30
    5752:	9e 87       	std	Y+14, r25	; 0x0e
    5754:	8d 87       	std	Y+13, r24	; 0x0d
    5756:	e9 a9       	ldd	r30, Y+49	; 0x31
    5758:	fa a9       	ldd	r31, Y+50	; 0x32
    575a:	f8 8b       	std	Y+16, r31	; 0x10
    575c:	ef 87       	std	Y+15, r30	; 0x0f
_ZN5PrintC4Ev():
    575e:	f3 01       	movw	r30, r6
    5760:	13 82       	std	Z+3, r1	; 0x03
    5762:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
    5764:	88 ee       	ldi	r24, 0xE8	; 232
    5766:	93 e0       	ldi	r25, 0x03	; 3
    5768:	a0 e0       	ldi	r26, 0x00	; 0
    576a:	b0 e0       	ldi	r27, 0x00	; 0
    576c:	84 83       	std	Z+4, r24	; 0x04
    576e:	95 83       	std	Z+5, r25	; 0x05
    5770:	a6 83       	std	Z+6, r26	; 0x06
    5772:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    5774:	8f eb       	ldi	r24, 0xBF	; 191
    5776:	91 e0       	ldi	r25, 0x01	; 1
    5778:	91 83       	std	Z+1, r25	; 0x01
    577a:	80 83       	st	Z, r24
    577c:	75 87       	std	Z+13, r23	; 0x0d
    577e:	64 87       	std	Z+12, r22	; 0x0c
    5780:	cb 01       	movw	r24, r22
    5782:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <operator new[](unsigned int)>
    5786:	f3 01       	movw	r30, r6
    5788:	97 87       	std	Z+15, r25	; 0x0f
    578a:	86 87       	std	Z+14, r24	; 0x0e
    578c:	10 8a       	std	Z+16, r1	; 0x10
    578e:	11 8a       	std	Z+17, r1	; 0x11
    5790:	12 8a       	std	Z+18, r1	; 0x12
    5792:	c2 01       	movw	r24, r4
    5794:	0e 94 06 36 	call	0x6c0c	; 0x6c0c <operator new[](unsigned int)>
    5798:	f3 01       	movw	r30, r6
    579a:	94 8b       	std	Z+20, r25	; 0x14
    579c:	83 8b       	std	Z+19, r24	; 0x13
    579e:	15 8a       	std	Z+21, r1	; 0x15
    57a0:	16 8a       	std	Z+22, r1	; 0x16
    57a2:	17 8a       	std	Z+23, r1	; 0x17
    57a4:	89 81       	ldd	r24, Y+1	; 0x01
    57a6:	9a 81       	ldd	r25, Y+2	; 0x02
    57a8:	95 8f       	std	Z+29, r25	; 0x1d
    57aa:	84 8f       	std	Z+28, r24	; 0x1c
    57ac:	8b 81       	ldd	r24, Y+3	; 0x03
    57ae:	9c 81       	ldd	r25, Y+4	; 0x04
    57b0:	97 8f       	std	Z+31, r25	; 0x1f
    57b2:	86 8f       	std	Z+30, r24	; 0x1e
    57b4:	11 a3       	std	Z+33, r17	; 0x21
    57b6:	00 a3       	std	Z+32, r16	; 0x20
    57b8:	f3 a2       	std	Z+35, r15	; 0x23
    57ba:	e2 a2       	std	Z+34, r14	; 0x22
    57bc:	d5 a2       	std	Z+37, r13	; 0x25
    57be:	c4 a2       	std	Z+36, r12	; 0x24
    57c0:	b7 a2       	std	Z+39, r11	; 0x27
    57c2:	a6 a2       	std	Z+38, r10	; 0x26
    57c4:	91 a6       	std	Z+41, r9	; 0x29
    57c6:	80 a6       	std	Z+40, r8	; 0x28
    57c8:	8d 81       	ldd	r24, Y+5	; 0x05
    57ca:	9e 81       	ldd	r25, Y+6	; 0x06
    57cc:	93 a7       	std	Z+43, r25	; 0x2b
    57ce:	82 a7       	std	Z+42, r24	; 0x2a
    57d0:	8f 81       	ldd	r24, Y+7	; 0x07
    57d2:	98 85       	ldd	r25, Y+8	; 0x08
    57d4:	95 a7       	std	Z+45, r25	; 0x2d
    57d6:	84 a7       	std	Z+44, r24	; 0x2c
    57d8:	89 85       	ldd	r24, Y+9	; 0x09
    57da:	9a 85       	ldd	r25, Y+10	; 0x0a
    57dc:	97 a7       	std	Z+47, r25	; 0x2f
    57de:	86 a7       	std	Z+46, r24	; 0x2e
    57e0:	c1 01       	movw	r24, r2
    57e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    57e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    57e6:	09 95       	icall
    57e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    57ea:	98 89       	ldd	r25, Y+16	; 0x10
    57ec:	ed 85       	ldd	r30, Y+13	; 0x0d
    57ee:	fe 85       	ldd	r31, Y+14	; 0x0e
    57f0:	60 96       	adiw	r28, 0x10	; 16
    57f2:	0f b6       	in	r0, 0x3f	; 63
    57f4:	f8 94       	cli
    57f6:	de bf       	out	0x3e, r29	; 62
    57f8:	0f be       	out	0x3f, r0	; 63
    57fa:	cd bf       	out	0x3d, r28	; 61
    57fc:	df 91       	pop	r29
    57fe:	cf 91       	pop	r28
    5800:	1f 91       	pop	r17
    5802:	0f 91       	pop	r16
    5804:	ff 90       	pop	r15
    5806:	ef 90       	pop	r14
    5808:	df 90       	pop	r13
    580a:	cf 90       	pop	r12
    580c:	bf 90       	pop	r11
    580e:	af 90       	pop	r10
    5810:	9f 90       	pop	r9
    5812:	8f 90       	pop	r8
    5814:	7f 90       	pop	r7
    5816:	6f 90       	pop	r6
    5818:	5f 90       	pop	r5
    581a:	4f 90       	pop	r4
    581c:	3f 90       	pop	r3
    581e:	2f 90       	pop	r2
    5820:	09 94       	ijmp

00005822 <TwoWire::~TwoWire()>:
_ZN7TwoWireD2Ev():
    5822:	cf 93       	push	r28
    5824:	df 93       	push	r29
    5826:	ec 01       	movw	r28, r24
    5828:	8f eb       	ldi	r24, 0xBF	; 191
    582a:	91 e0       	ldi	r25, 0x01	; 1
    582c:	99 83       	std	Y+1, r25	; 0x01
    582e:	88 83       	st	Y, r24
    5830:	61 e0       	ldi	r22, 0x01	; 1
    5832:	70 e0       	ldi	r23, 0x00	; 0
    5834:	8e 85       	ldd	r24, Y+14	; 0x0e
    5836:	9f 85       	ldd	r25, Y+15	; 0x0f
    5838:	0e 94 08 36 	call	0x6c10	; 0x6c10 <operator delete(void*, unsigned int)>
    583c:	61 e0       	ldi	r22, 0x01	; 1
    583e:	70 e0       	ldi	r23, 0x00	; 0
    5840:	8b 89       	ldd	r24, Y+19	; 0x13
    5842:	9c 89       	ldd	r25, Y+20	; 0x14
    5844:	df 91       	pop	r29
    5846:	cf 91       	pop	r28
    5848:	0c 94 08 36 	jmp	0x6c10	; 0x6c10 <operator delete(void*, unsigned int)>

0000584c <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    584c:	fc 01       	movw	r30, r24
    584e:	10 8a       	std	Z+16, r1	; 0x10
    5850:	11 8a       	std	Z+17, r1	; 0x11
    5852:	15 8a       	std	Z+21, r1	; 0x15
    5854:	16 8a       	std	Z+22, r1	; 0x16
    5856:	04 8c       	ldd	r0, Z+28	; 0x1c
    5858:	f5 8d       	ldd	r31, Z+29	; 0x1d
    585a:	e0 2d       	mov	r30, r0
    585c:	09 94       	ijmp

0000585e <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    585e:	dc 01       	movw	r26, r24
    5860:	92 96       	adiw	r26, 0x22	; 34
    5862:	ed 91       	ld	r30, X+
    5864:	fc 91       	ld	r31, X
    5866:	cb 01       	movw	r24, r22
    5868:	ba 01       	movw	r22, r20
    586a:	09 94       	ijmp

0000586c <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    586c:	fc 01       	movw	r30, r24
_ZN7TwoWire17beginTransmissionEh():
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	87 8b       	std	Z+23, r24	; 0x17
_ZN7TwoWire17beginTransmissionEi():
    5872:	62 8b       	std	Z+18, r22	; 0x12
_ZN7TwoWire17beginTransmissionEh():
    5874:	15 8a       	std	Z+21, r1	; 0x15
    5876:	16 8a       	std	Z+22, r1	; 0x16
_ZN7TwoWire17beginTransmissionEi():
    5878:	08 95       	ret

0000587a <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    587a:	0f 93       	push	r16
    587c:	cf 93       	push	r28
    587e:	df 93       	push	r29
    5880:	ec 01       	movw	r28, r24
    5882:	8b 89       	ldd	r24, Y+19	; 0x13
    5884:	9c 89       	ldd	r25, Y+20	; 0x14
    5886:	ee a1       	ldd	r30, Y+38	; 0x26
    5888:	ff a1       	ldd	r31, Y+39	; 0x27
    588a:	06 2f       	mov	r16, r22
    588c:	21 e0       	ldi	r18, 0x01	; 1
    588e:	4e 89       	ldd	r20, Y+22	; 0x16
    5890:	bc 01       	movw	r22, r24
    5892:	8a 89       	ldd	r24, Y+18	; 0x12
    5894:	09 95       	icall
    5896:	1d 8a       	std	Y+21, r1	; 0x15
    5898:	1e 8a       	std	Y+22, r1	; 0x16
    589a:	1f 8a       	std	Y+23, r1	; 0x17
    589c:	df 91       	pop	r29
    589e:	cf 91       	pop	r28
    58a0:	0f 91       	pop	r16
    58a2:	08 95       	ret

000058a4 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    58a4:	61 e0       	ldi	r22, 0x01	; 1
    58a6:	0c 94 3d 2c 	jmp	0x587a	; 0x587a <TwoWire::endTransmission(unsigned char)>

000058aa <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    58aa:	fc 01       	movw	r30, r24
    58ac:	ca 01       	movw	r24, r20
    58ae:	22 8d       	ldd	r18, Z+26	; 0x1a
    58b0:	33 8d       	ldd	r19, Z+27	; 0x1b
    58b2:	23 2b       	or	r18, r19
    58b4:	d9 f0       	breq	.+54     	; 0x58ec <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    58b6:	30 89       	ldd	r19, Z+16	; 0x10
    58b8:	21 89       	ldd	r18, Z+17	; 0x11
    58ba:	32 17       	cp	r19, r18
    58bc:	b8 f0       	brcs	.+46     	; 0x58ec <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    58be:	20 e0       	ldi	r18, 0x00	; 0
    58c0:	42 2f       	mov	r20, r18
    58c2:	50 e0       	ldi	r21, 0x00	; 0
    58c4:	48 17       	cp	r20, r24
    58c6:	59 07       	cpc	r21, r25
    58c8:	5c f4       	brge	.+22     	; 0x58e0 <TwoWire::onReceiveService(unsigned char*, int)+0x36>
    58ca:	db 01       	movw	r26, r22
    58cc:	a4 0f       	add	r26, r20
    58ce:	b5 1f       	adc	r27, r21
    58d0:	3c 91       	ld	r19, X
    58d2:	a6 85       	ldd	r26, Z+14	; 0x0e
    58d4:	b7 85       	ldd	r27, Z+15	; 0x0f
    58d6:	a4 0f       	add	r26, r20
    58d8:	b5 1f       	adc	r27, r21
    58da:	3c 93       	st	X, r19
    58dc:	2f 5f       	subi	r18, 0xFF	; 255
    58de:	f0 cf       	rjmp	.-32     	; 0x58c0 <TwoWire::onReceiveService(unsigned char*, int)+0x16>
    58e0:	10 8a       	std	Z+16, r1	; 0x10
    58e2:	81 8b       	std	Z+17, r24	; 0x11
    58e4:	02 8c       	ldd	r0, Z+26	; 0x1a
    58e6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    58e8:	e0 2d       	mov	r30, r0
    58ea:	09 94       	ijmp
    58ec:	08 95       	ret

000058ee <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
    58ee:	ab 01       	movw	r20, r22
operator()():
    58f0:	bc 01       	movw	r22, r24
    58f2:	8a e1       	ldi	r24, 0x1A	; 26
    58f4:	94 e0       	ldi	r25, 0x04	; 4
    58f6:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <TwoWire::onReceiveService(unsigned char*, int)>

000058fa <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    58fa:	dc 01       	movw	r26, r24
    58fc:	58 96       	adiw	r26, 0x18	; 24
    58fe:	ed 91       	ld	r30, X+
    5900:	fc 91       	ld	r31, X
    5902:	59 97       	sbiw	r26, 0x19	; 25
    5904:	30 97       	sbiw	r30, 0x00	; 0
    5906:	31 f0       	breq	.+12     	; 0x5914 <TwoWire::onRequestService()+0x1a>
    5908:	55 96       	adiw	r26, 0x15	; 21
    590a:	1c 92       	st	X, r1
    590c:	55 97       	sbiw	r26, 0x15	; 21
    590e:	56 96       	adiw	r26, 0x16	; 22
    5910:	1c 92       	st	X, r1
    5912:	09 94       	ijmp
    5914:	08 95       	ret

00005916 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
    5916:	8a e1       	ldi	r24, 0x1A	; 26
    5918:	94 e0       	ldi	r25, 0x04	; 4
    591a:	0c 94 7d 2c 	jmp	0x58fa	; 0x58fa <TwoWire::onRequestService()>

0000591e <_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    591e:	8f 92       	push	r8
    5920:	9f 92       	push	r9
    5922:	af 92       	push	r10
    5924:	bf 92       	push	r11
    5926:	cf 92       	push	r12
    5928:	df 92       	push	r13
    592a:	ef 92       	push	r14
    592c:	ff 92       	push	r15
    592e:	0f 93       	push	r16
    5930:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    5932:	8b e8       	ldi	r24, 0x8B	; 139
    5934:	9c e2       	ldi	r25, 0x2C	; 44
    5936:	9f 93       	push	r25
    5938:	8f 93       	push	r24
    593a:	85 ef       	ldi	r24, 0xF5	; 245
    593c:	9d e2       	ldi	r25, 0x2D	; 45
    593e:	9f 93       	push	r25
    5940:	8f 93       	push	r24
    5942:	87 e7       	ldi	r24, 0x77	; 119
    5944:	9c e2       	ldi	r25, 0x2C	; 44
    5946:	9f 93       	push	r25
    5948:	8f 93       	push	r24
    594a:	80 ef       	ldi	r24, 0xF0	; 240
    594c:	9d e2       	ldi	r25, 0x2D	; 45
    594e:	9f 93       	push	r25
    5950:	8f 93       	push	r24
    5952:	8c e0       	ldi	r24, 0x0C	; 12
    5954:	9e e2       	ldi	r25, 0x2E	; 46
    5956:	9f 93       	push	r25
    5958:	8f 93       	push	r24
    595a:	82 e0       	ldi	r24, 0x02	; 2
    595c:	9e e2       	ldi	r25, 0x2E	; 46
    595e:	9f 93       	push	r25
    5960:	8f 93       	push	r24
    5962:	8a ef       	ldi	r24, 0xFA	; 250
    5964:	9d e2       	ldi	r25, 0x2D	; 45
    5966:	9f 93       	push	r25
    5968:	8f 93       	push	r24
    596a:	89 ec       	ldi	r24, 0xC9	; 201
    596c:	88 2e       	mov	r8, r24
    596e:	8d e2       	ldi	r24, 0x2D	; 45
    5970:	98 2e       	mov	r9, r24
    5972:	92 e7       	ldi	r25, 0x72	; 114
    5974:	a9 2e       	mov	r10, r25
    5976:	9d e2       	ldi	r25, 0x2D	; 45
    5978:	b9 2e       	mov	r11, r25
    597a:	2a e2       	ldi	r18, 0x2A	; 42
    597c:	c2 2e       	mov	r12, r18
    597e:	2d e2       	ldi	r18, 0x2D	; 45
    5980:	d2 2e       	mov	r13, r18
    5982:	37 e1       	ldi	r19, 0x17	; 23
    5984:	e3 2e       	mov	r14, r19
    5986:	3d e2       	ldi	r19, 0x2D	; 45
    5988:	f3 2e       	mov	r15, r19
    598a:	03 e1       	ldi	r16, 0x13	; 19
    598c:	1d e2       	ldi	r17, 0x2D	; 45
    598e:	26 e0       	ldi	r18, 0x06	; 6
    5990:	3d e2       	ldi	r19, 0x2D	; 45
    5992:	48 ee       	ldi	r20, 0xE8	; 232
    5994:	5c e2       	ldi	r21, 0x2C	; 44
    5996:	60 e2       	ldi	r22, 0x20	; 32
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	8a e1       	ldi	r24, 0x1A	; 26
    599c:	94 e0       	ldi	r25, 0x04	; 4
    599e:	0e 94 75 2b 	call	0x56ea	; 0x56ea <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    59a2:	8d b7       	in	r24, 0x3d	; 61
    59a4:	9e b7       	in	r25, 0x3e	; 62
    59a6:	0e 96       	adiw	r24, 0x0e	; 14
    59a8:	0f b6       	in	r0, 0x3f	; 63
    59aa:	f8 94       	cli
    59ac:	9e bf       	out	0x3e, r25	; 62
    59ae:	0f be       	out	0x3f, r0	; 63
    59b0:	8d bf       	out	0x3d, r24	; 61
    59b2:	1f 91       	pop	r17
    59b4:	0f 91       	pop	r16
    59b6:	ff 90       	pop	r15
    59b8:	ef 90       	pop	r14
    59ba:	df 90       	pop	r13
    59bc:	cf 90       	pop	r12
    59be:	bf 90       	pop	r11
    59c0:	af 90       	pop	r10
    59c2:	9f 90       	pop	r9
    59c4:	8f 90       	pop	r8
    59c6:	08 95       	ret

000059c8 <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    59c8:	8a e1       	ldi	r24, 0x1A	; 26
    59ca:	94 e0       	ldi	r25, 0x04	; 4
    59cc:	0c 94 11 2c 	jmp	0x5822	; 0x5822 <TwoWire::~TwoWire()>

000059d0 <twi_init>:
twi_init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    59d0:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
    59da:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    59de:	61 e0       	ldi	r22, 0x01	; 1
    59e0:	82 e1       	ldi	r24, 0x12	; 18
    59e2:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
    59e6:	61 e0       	ldi	r22, 0x01	; 1
    59e8:	83 e1       	ldi	r24, 0x13	; 19
    59ea:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    59ee:	e9 eb       	ldi	r30, 0xB9	; 185
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	80 81       	ld	r24, Z
    59f4:	8e 7f       	andi	r24, 0xFE	; 254
    59f6:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
    59f8:	80 81       	ld	r24, Z
    59fa:	8d 7f       	andi	r24, 0xFD	; 253
    59fc:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    59fe:	88 e4       	ldi	r24, 0x48	; 72
    5a00:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5a04:	85 e4       	ldi	r24, 0x45	; 69
    5a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:91
}
    5a0a:	08 95       	ret

00005a0c <twi_disable>:
twi_disable():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:102
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    5a0c:	ec eb       	ldi	r30, 0xBC	; 188
    5a0e:	f0 e0       	ldi	r31, 0x00	; 0
    5a10:	80 81       	ld	r24, Z
    5a12:	8a 7b       	andi	r24, 0xBA	; 186
    5a14:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    5a16:	60 e0       	ldi	r22, 0x00	; 0
    5a18:	82 e1       	ldi	r24, 0x12	; 18
    5a1a:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:106
  digitalWrite(SCL, 0);
    5a1e:	60 e0       	ldi	r22, 0x00	; 0
    5a20:	83 e1       	ldi	r24, 0x13	; 19
    5a22:	0c 94 ac 37 	jmp	0x6f58	; 0x6f58 <digitalWrite>

00005a26 <twi_setAddress>:
twi_setAddress():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:118
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    5a26:	88 0f       	add	r24, r24
    5a28:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:119
}
    5a2c:	08 95       	ret

00005a2e <twi_setFrequency>:
twi_setFrequency():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    5a2e:	9b 01       	movw	r18, r22
    5a30:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    5a32:	60 e0       	ldi	r22, 0x00	; 0
    5a34:	74 e2       	ldi	r23, 0x24	; 36
    5a36:	84 ef       	ldi	r24, 0xF4	; 244
    5a38:	90 e0       	ldi	r25, 0x00	; 0
    5a3a:	0e 94 28 3b 	call	0x7650	; 0x7650 <__udivmodsi4>
    5a3e:	20 51       	subi	r18, 0x10	; 16
    5a40:	31 09       	sbc	r19, r1
    5a42:	41 09       	sbc	r20, r1
    5a44:	51 09       	sbc	r21, r1
    5a46:	56 95       	lsr	r21
    5a48:	47 95       	ror	r20
    5a4a:	37 95       	ror	r19
    5a4c:	27 95       	ror	r18
    5a4e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    5a52:	08 95       	ret

00005a54 <twi_readFrom>:
twi_readFrom():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:152
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    5a54:	41 32       	cpi	r20, 0x21	; 33
    5a56:	08 f0       	brcs	.+2      	; 0x5a5a <twi_readFrom+0x6>
    5a58:	43 c0       	rjmp	.+134    	; 0x5ae0 <twi_readFrom+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5a5a:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_state>
    5a5e:	91 11       	cpse	r25, r1
    5a60:	fc cf       	rjmp	.-8      	; 0x5a5a <twi_readFrom+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    5a62:	91 e0       	ldi	r25, 0x01	; 1
    5a64:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    5a68:	20 93 b5 04 	sts	0x04B5, r18	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5a6c:	2f ef       	ldi	r18, 0xFF	; 255
    5a6e:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5a72:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5a76:	24 0f       	add	r18, r20
    5a78:	20 93 8e 04 	sts	0x048E, r18	; 0x80048e <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5a7c:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    5a80:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    5a84:	88 0f       	add	r24, r24
    5a86:	89 2b       	or	r24, r25
    5a88:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    5a8c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    5a90:	81 30       	cpi	r24, 0x01	; 1
    5a92:	09 f5       	brne	.+66     	; 0x5ad6 <twi_readFrom+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5a94:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187 (discriminator 1)
    do {
      TWDR = twi_slarw;
    5a98:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    5a9c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    5aa0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5aa4:	83 fd       	sbrc	r24, 3
    5aa6:	f8 cf       	rjmp	.-16     	; 0x5a98 <twi_readFrom+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    5aa8:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5aaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5aae:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    5ab2:	81 30       	cpi	r24, 0x01	; 1
    5ab4:	e1 f3       	breq	.-8      	; 0x5aae <twi_readFrom+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    5ab6:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5aba:	84 17       	cp	r24, r20
    5abc:	10 f4       	brcc	.+4      	; 0x5ac2 <twi_readFrom+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    5abe:	40 91 8f 04 	lds	r20, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5ac2:	a0 e9       	ldi	r26, 0x90	; 144
    5ac4:	b4 e0       	ldi	r27, 0x04	; 4
    5ac6:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    5ac8:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204 (discriminator 1)
    5aca:	8e 2f       	mov	r24, r30
    5acc:	89 1b       	sub	r24, r25
    5ace:	84 17       	cp	r24, r20
    5ad0:	20 f0       	brcs	.+8      	; 0x5ada <twi_readFrom+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    5ad2:	84 2f       	mov	r24, r20
    5ad4:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5ad6:	85 ee       	ldi	r24, 0xE5	; 229
    5ad8:	e8 cf       	rjmp	.-48     	; 0x5aaa <twi_readFrom+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5ada:	8d 91       	ld	r24, X+
    5adc:	81 93       	st	Z+, r24
    5ade:	f5 cf       	rjmp	.-22     	; 0x5aca <twi_readFrom+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 0;
    5ae0:	40 e0       	ldi	r20, 0x00	; 0
    5ae2:	f7 cf       	rjmp	.-18     	; 0x5ad2 <twi_readFrom+0x7e>

00005ae4 <twi_writeTo>:
twi_writeTo():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    5ae4:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    5ae6:	41 32       	cpi	r20, 0x21	; 33
    5ae8:	08 f0       	brcs	.+2      	; 0x5aec <twi_writeTo+0x8>
    5aea:	4b c0       	rjmp	.+150    	; 0x5b82 <twi_writeTo+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    5aec:	90 91 b7 04 	lds	r25, 0x04B7	; 0x8004b7 <twi_state>
    5af0:	91 11       	cpse	r25, r1
    5af2:	fc cf       	rjmp	.-8      	; 0x5aec <twi_writeTo+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    5af4:	92 e0       	ldi	r25, 0x02	; 2
    5af6:	90 93 b7 04 	sts	0x04B7, r25	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
    5afa:	00 93 b5 04 	sts	0x04B5, r16	; 0x8004b5 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5afe:	9f ef       	ldi	r25, 0xFF	; 255
    5b00:	90 93 4a 04 	sts	0x044A, r25	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5b04:	10 92 8f 04 	sts	0x048F, r1	; 0x80048f <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
    5b08:	40 93 8e 04 	sts	0x048E, r20	; 0x80048e <twi_masterBufferLength>
    5b0c:	36 2f       	mov	r19, r22
    5b0e:	a0 e9       	ldi	r26, 0x90	; 144
    5b10:	b4 e0       	ldi	r27, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    5b12:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249 (discriminator 1)
    5b14:	9e 2f       	mov	r25, r30
    5b16:	93 1b       	sub	r25, r19
    5b18:	94 17       	cp	r25, r20
    5b1a:	70 f1       	brcs	.+92     	; 0x5b78 <twi_writeTo+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    5b1c:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
    5b20:	90 91 b6 04 	lds	r25, 0x04B6	; 0x8004b6 <twi_slarw>
    5b24:	88 0f       	add	r24, r24
    5b26:	89 2b       	or	r24, r25
    5b28:	80 93 b6 04 	sts	0x04B6, r24	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5b2c:	80 91 b4 04 	lds	r24, 0x04B4	; 0x8004b4 <twi_inRepStart>
    5b30:	81 30       	cpi	r24, 0x01	; 1
    5b32:	29 f5       	brne	.+74     	; 0x5b7e <twi_writeTo+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5b34:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269 (discriminator 1)
    do {
      TWDR = twi_slarw;
    5b38:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
    5b3c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    5b40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5b44:	83 fd       	sbrc	r24, 3
    5b46:	f8 cf       	rjmp	.-16     	; 0x5b38 <twi_writeTo+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    5b48:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    5b4a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    5b4e:	22 23       	and	r18, r18
    5b50:	21 f0       	breq	.+8      	; 0x5b5a <twi_writeTo+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278 (discriminator 1)
    5b52:	80 91 b7 04 	lds	r24, 0x04B7	; 0x8004b7 <twi_state>
    5b56:	82 30       	cpi	r24, 0x02	; 2
    5b58:	d1 f3       	breq	.-12     	; 0x5b4e <twi_writeTo+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    5b5a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5b60:	91 f0       	breq	.+36     	; 0x5b86 <twi_writeTo+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    5b62:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5b66:	80 32       	cpi	r24, 0x20	; 32
    5b68:	81 f0       	breq	.+32     	; 0x5b8a <twi_writeTo+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5b6a:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <twi_error>
    5b6e:	80 33       	cpi	r24, 0x30	; 48
    5b70:	71 f0       	breq	.+28     	; 0x5b8e <twi_writeTo+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    5b72:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:290
}
    5b74:	0f 91       	pop	r16
    5b76:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    5b78:	91 91       	ld	r25, Z+
    5b7a:	9d 93       	st	X+, r25
    5b7c:	cb cf       	rjmp	.-106    	; 0x5b14 <twi_writeTo+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    5b7e:	85 ee       	ldi	r24, 0xE5	; 229
    5b80:	e4 cf       	rjmp	.-56     	; 0x5b4a <twi_writeTo+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	f7 cf       	rjmp	.-18     	; 0x5b74 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	f5 cf       	rjmp	.-22     	; 0x5b74 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    5b8a:	82 e0       	ldi	r24, 0x02	; 2
    5b8c:	f3 cf       	rjmp	.-26     	; 0x5b74 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    5b8e:	83 e0       	ldi	r24, 0x03	; 3
    5b90:	f1 cf       	rjmp	.-30     	; 0x5b74 <twi_writeTo+0x90>

00005b92 <twi_transmit>:
twi_transmit():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    5b92:	20 91 6c 04 	lds	r18, 0x046C	; 0x80046c <twi_txBufferLength>
    5b96:	26 0f       	add	r18, r22
    5b98:	33 27       	eor	r19, r19
    5b9a:	33 1f       	adc	r19, r19
    5b9c:	21 32       	cpi	r18, 0x21	; 33
    5b9e:	31 05       	cpc	r19, r1
    5ba0:	ec f4       	brge	.+58     	; 0x5bdc <twi_transmit+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5ba2:	20 91 b7 04 	lds	r18, 0x04B7	; 0x8004b7 <twi_state>
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	90 e0       	ldi	r25, 0x00	; 0
    5baa:	80 e0       	ldi	r24, 0x00	; 0
    5bac:	24 30       	cpi	r18, 0x04	; 4
    5bae:	69 f0       	breq	.+26     	; 0x5bca <twi_transmit+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
    5bb0:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    5bb2:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    5bb4:	a0 91 6c 04 	lds	r26, 0x046C	; 0x80046c <twi_txBufferLength>
    5bb8:	21 91       	ld	r18, Z+
    5bba:	ac 01       	movw	r20, r24
    5bbc:	42 59       	subi	r20, 0x92	; 146
    5bbe:	5b 4f       	sbci	r21, 0xFB	; 251
    5bc0:	a4 0f       	add	r26, r20
    5bc2:	b5 2f       	mov	r27, r21
    5bc4:	b1 1d       	adc	r27, r1
    5bc6:	2c 93       	st	X, r18
    5bc8:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    5bca:	86 17       	cp	r24, r22
    5bcc:	98 f3       	brcs	.-26     	; 0x5bb4 <twi_transmit+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    5bce:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5bd2:	68 0f       	add	r22, r24
    5bd4:	60 93 6c 04 	sts	0x046C, r22	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:322

  return 0;
    5bd8:	80 e0       	ldi	r24, 0x00	; 0
    5bda:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	08 95       	ret

00005be0 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    5be0:	90 93 b1 04 	sts	0x04B1, r25	; 0x8004b1 <twi_onSlaveReceive+0x1>
    5be4:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:334
}
    5be8:	08 95       	ret

00005bea <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    5bea:	90 93 b3 04 	sts	0x04B3, r25	; 0x8004b3 <twi_onSlaveTransmit+0x1>
    5bee:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:345
}
    5bf2:	08 95       	ret

00005bf4 <twi_reply>:
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:356
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    5bf4:	88 23       	and	r24, r24
    5bf6:	21 f0       	breq	.+8      	; 0x5c00 <twi_reply+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5bf8:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5bfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:361
  }
}
    5bfe:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5c00:	85 e8       	ldi	r24, 0x85	; 133
    5c02:	fb cf       	rjmp	.-10     	; 0x5bfa <twi_reply+0x6>

00005c04 <twi_stop>:
twi_stop():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5c04:	85 ed       	ldi	r24, 0xD5	; 213
    5c06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5c0a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5c0e:	84 fd       	sbrc	r24, 4
    5c10:	fc cf       	rjmp	.-8      	; 0x5c0a <twi_stop+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5c12:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    5c16:	08 95       	ret

00005c18 <twi_releaseBus>:
twi_releaseBus():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5c18:	85 ec       	ldi	r24, 0xC5	; 197
    5c1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    5c1e:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    5c22:	08 95       	ret

00005c24 <__vector_24>:
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    5c24:	1f 92       	push	r1
    5c26:	0f 92       	push	r0
    5c28:	0f b6       	in	r0, 0x3f	; 63
    5c2a:	0f 92       	push	r0
    5c2c:	11 24       	eor	r1, r1
    5c2e:	2f 93       	push	r18
    5c30:	3f 93       	push	r19
    5c32:	4f 93       	push	r20
    5c34:	5f 93       	push	r21
    5c36:	6f 93       	push	r22
    5c38:	7f 93       	push	r23
    5c3a:	8f 93       	push	r24
    5c3c:	9f 93       	push	r25
    5c3e:	af 93       	push	r26
    5c40:	bf 93       	push	r27
    5c42:	ef 93       	push	r30
    5c44:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    5c46:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    5c4a:	88 7f       	andi	r24, 0xF8	; 248
    5c4c:	80 36       	cpi	r24, 0x60	; 96
    5c4e:	09 f4       	brne	.+2      	; 0x5c52 <__vector_24+0x2e>
    5c50:	4c c0       	rjmp	.+152    	; 0x5cea <__vector_24+0xc6>
    5c52:	08 f0       	brcs	.+2      	; 0x5c56 <__vector_24+0x32>
    5c54:	3f c0       	rjmp	.+126    	; 0x5cd4 <__vector_24+0xb0>
    5c56:	88 32       	cpi	r24, 0x28	; 40
    5c58:	09 f4       	brne	.+2      	; 0x5c5c <__vector_24+0x38>
    5c5a:	a8 c0       	rjmp	.+336    	; 0x5dac <__vector_24+0x188>
    5c5c:	18 f5       	brcc	.+70     	; 0x5ca4 <__vector_24+0x80>
    5c5e:	80 31       	cpi	r24, 0x10	; 16
    5c60:	09 f4       	brne	.+2      	; 0x5c64 <__vector_24+0x40>
    5c62:	9c c0       	rjmp	.+312    	; 0x5d9c <__vector_24+0x178>
    5c64:	b8 f4       	brcc	.+46     	; 0x5c94 <__vector_24+0x70>
    5c66:	88 23       	and	r24, r24
    5c68:	09 f4       	brne	.+2      	; 0x5c6c <__vector_24+0x48>
    5c6a:	f9 c0       	rjmp	.+498    	; 0x5e5e <__vector_24+0x23a>
    5c6c:	88 30       	cpi	r24, 0x08	; 8
    5c6e:	09 f4       	brne	.+2      	; 0x5c72 <__vector_24+0x4e>
    5c70:	95 c0       	rjmp	.+298    	; 0x5d9c <__vector_24+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    5c72:	ff 91       	pop	r31
    5c74:	ef 91       	pop	r30
    5c76:	bf 91       	pop	r27
    5c78:	af 91       	pop	r26
    5c7a:	9f 91       	pop	r25
    5c7c:	8f 91       	pop	r24
    5c7e:	7f 91       	pop	r23
    5c80:	6f 91       	pop	r22
    5c82:	5f 91       	pop	r21
    5c84:	4f 91       	pop	r20
    5c86:	3f 91       	pop	r19
    5c88:	2f 91       	pop	r18
    5c8a:	0f 90       	pop	r0
    5c8c:	0f be       	out	0x3f, r0	; 63
    5c8e:	0f 90       	pop	r0
    5c90:	1f 90       	pop	r1
    5c92:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5c94:	88 31       	cpi	r24, 0x18	; 24
    5c96:	09 f4       	brne	.+2      	; 0x5c9a <__vector_24+0x76>
    5c98:	89 c0       	rjmp	.+274    	; 0x5dac <__vector_24+0x188>
    5c9a:	80 32       	cpi	r24, 0x20	; 32
    5c9c:	51 f7       	brne	.-44     	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5c9e:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_error>
    5ca2:	15 c0       	rjmp	.+42     	; 0x5cce <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5ca4:	80 34       	cpi	r24, 0x40	; 64
    5ca6:	09 f4       	brne	.+2      	; 0x5caa <__vector_24+0x86>
    5ca8:	9e c0       	rjmp	.+316    	; 0x5de6 <__vector_24+0x1c2>
    5caa:	48 f4       	brcc	.+18     	; 0x5cbe <__vector_24+0x9a>
    5cac:	80 33       	cpi	r24, 0x30	; 48
    5cae:	b9 f3       	breq	.-18     	; 0x5c9e <__vector_24+0x7a>
    5cb0:	88 33       	cpi	r24, 0x38	; 56
    5cb2:	f9 f6       	brne	.-66     	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5cb4:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    5cb8:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    5cbc:	da cf       	rjmp	.-76     	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5cbe:	80 35       	cpi	r24, 0x50	; 80
    5cc0:	09 f4       	brne	.+2      	; 0x5cc4 <__vector_24+0xa0>
    5cc2:	85 c0       	rjmp	.+266    	; 0x5dce <__vector_24+0x1aa>
    5cc4:	88 35       	cpi	r24, 0x58	; 88
    5cc6:	09 f4       	brne	.+2      	; 0x5cca <__vector_24+0xa6>
    5cc8:	96 c0       	rjmp	.+300    	; 0x5df6 <__vector_24+0x1d2>
    5cca:	88 34       	cpi	r24, 0x48	; 72
    5ccc:	91 f6       	brne	.-92     	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    5cce:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <twi_stop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    5cd2:	cf cf       	rjmp	.-98     	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5cd4:	88 39       	cpi	r24, 0x98	; 152
    5cd6:	09 f4       	brne	.+2      	; 0x5cda <__vector_24+0xb6>
    5cd8:	8c c0       	rjmp	.+280    	; 0x5df2 <__vector_24+0x1ce>
    5cda:	38 f5       	brcc	.+78     	; 0x5d2a <__vector_24+0x106>
    5cdc:	88 37       	cpi	r24, 0x78	; 120
    5cde:	29 f0       	breq	.+10     	; 0x5cea <__vector_24+0xc6>
    5ce0:	50 f4       	brcc	.+20     	; 0x5cf6 <__vector_24+0xd2>
    5ce2:	88 36       	cpi	r24, 0x68	; 104
    5ce4:	11 f0       	breq	.+4      	; 0x5cea <__vector_24+0xc6>
    5ce6:	80 37       	cpi	r24, 0x70	; 112
    5ce8:	21 f6       	brne	.-120    	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5cea:	83 e0       	ldi	r24, 0x03	; 3
    5cec:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5cf0:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_rxBufferIndex>
    5cf4:	57 c0       	rjmp	.+174    	; 0x5da4 <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5cf6:	88 38       	cpi	r24, 0x88	; 136
    5cf8:	09 f4       	brne	.+2      	; 0x5cfc <__vector_24+0xd8>
    5cfa:	7b c0       	rjmp	.+246    	; 0x5df2 <__vector_24+0x1ce>
    5cfc:	80 39       	cpi	r24, 0x90	; 144
    5cfe:	19 f0       	breq	.+6      	; 0x5d06 <__vector_24+0xe2>
    5d00:	80 38       	cpi	r24, 0x80	; 128
    5d02:	09 f0       	breq	.+2      	; 0x5d06 <__vector_24+0xe2>
    5d04:	b6 cf       	rjmp	.-148    	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    5d06:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5d0a:	80 32       	cpi	r24, 0x20	; 32
    5d0c:	08 f0       	brcs	.+2      	; 0x5d10 <__vector_24+0xec>
    5d0e:	71 c0       	rjmp	.+226    	; 0x5df2 <__vector_24+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5d10:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5d14:	81 e0       	ldi	r24, 0x01	; 1
    5d16:	8e 0f       	add	r24, r30
    5d18:	80 93 4b 04 	sts	0x044B, r24	; 0x80044b <twi_rxBufferIndex>
    5d1c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5d20:	f0 e0       	ldi	r31, 0x00	; 0
    5d22:	e4 5b       	subi	r30, 0xB4	; 180
    5d24:	fb 4f       	sbci	r31, 0xFB	; 251
    5d26:	80 83       	st	Z, r24
    5d28:	3d c0       	rjmp	.+122    	; 0x5da4 <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5d2a:	80 3b       	cpi	r24, 0xB0	; 176
    5d2c:	39 f0       	breq	.+14     	; 0x5d3c <__vector_24+0x118>
    5d2e:	e0 f4       	brcc	.+56     	; 0x5d68 <__vector_24+0x144>
    5d30:	80 3a       	cpi	r24, 0xA0	; 160
    5d32:	09 f4       	brne	.+2      	; 0x5d36 <__vector_24+0x112>
    5d34:	79 c0       	rjmp	.+242    	; 0x5e28 <__vector_24+0x204>
    5d36:	88 3a       	cpi	r24, 0xA8	; 168
    5d38:	09 f0       	breq	.+2      	; 0x5d3c <__vector_24+0x118>
    5d3a:	9b cf       	rjmp	.-202    	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5d3c:	84 e0       	ldi	r24, 0x04	; 4
    5d3e:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5d42:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5d46:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5d4a:	e0 91 b2 04 	lds	r30, 0x04B2	; 0x8004b2 <twi_onSlaveTransmit>
    5d4e:	f0 91 b3 04 	lds	r31, 0x04B3	; 0x8004b3 <twi_onSlaveTransmit+0x1>
    5d52:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5d54:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5d58:	81 11       	cpse	r24, r1
    5d5a:	0f c0       	rjmp	.+30     	; 0x5d7a <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    5d5c:	81 e0       	ldi	r24, 0x01	; 1
    5d5e:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    5d62:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <twi_txBuffer>
    5d66:	09 c0       	rjmp	.+18     	; 0x5d7a <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5d68:	80 3c       	cpi	r24, 0xC0	; 192
    5d6a:	09 f4       	brne	.+2      	; 0x5d6e <__vector_24+0x14a>
    5d6c:	76 c0       	rjmp	.+236    	; 0x5e5a <__vector_24+0x236>
    5d6e:	88 3c       	cpi	r24, 0xC8	; 200
    5d70:	09 f4       	brne	.+2      	; 0x5d74 <__vector_24+0x150>
    5d72:	73 c0       	rjmp	.+230    	; 0x5e5a <__vector_24+0x236>
    5d74:	88 3b       	cpi	r24, 0xB8	; 184
    5d76:	09 f0       	breq	.+2      	; 0x5d7a <__vector_24+0x156>
    5d78:	7c cf       	rjmp	.-264    	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5d7a:	e0 91 6d 04 	lds	r30, 0x046D	; 0x80046d <twi_txBufferIndex>
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	8e 0f       	add	r24, r30
    5d82:	80 93 6d 04 	sts	0x046D, r24	; 0x80046d <twi_txBufferIndex>
    5d86:	f0 e0       	ldi	r31, 0x00	; 0
    5d88:	e2 59       	subi	r30, 0x92	; 146
    5d8a:	fb 4f       	sbci	r31, 0xFB	; 251
    5d8c:	80 81       	ld	r24, Z
    5d8e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5d92:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <twi_txBufferIndex>
    5d96:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <twi_txBufferLength>
    5d9a:	29 c0       	rjmp	.+82     	; 0x5dee <__vector_24+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5d9c:	80 91 b6 04 	lds	r24, 0x04B6	; 0x8004b6 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5da0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5da4:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5da6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5daa:	63 cf       	rjmp	.-314    	; 0x5c72 <__vector_24+0x4e>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5dac:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5db0:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_masterBufferLength>
    5db4:	98 17       	cp	r25, r24
    5db6:	58 f5       	brcc	.+86     	; 0x5e0e <__vector_24+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5db8:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5dbc:	81 e0       	ldi	r24, 0x01	; 1
    5dbe:	8e 0f       	add	r24, r30
    5dc0:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5dc4:	f0 e0       	ldi	r31, 0x00	; 0
    5dc6:	e0 57       	subi	r30, 0x70	; 112
    5dc8:	fb 4f       	sbci	r31, 0xFB	; 251
    5dca:	80 81       	ld	r24, Z
    5dcc:	e9 cf       	rjmp	.-46     	; 0x5da0 <__vector_24+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5dce:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5dd2:	81 e0       	ldi	r24, 0x01	; 1
    5dd4:	8e 0f       	add	r24, r30
    5dd6:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5dda:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5dde:	f0 e0       	ldi	r31, 0x00	; 0
    5de0:	e0 57       	subi	r30, 0x70	; 112
    5de2:	fb 4f       	sbci	r31, 0xFB	; 251
    5de4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5de6:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5dea:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5dee:	98 17       	cp	r25, r24
    5df0:	c8 f2       	brcs	.-78     	; 0x5da4 <__vector_24+0x180>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5df2:	85 e8       	ldi	r24, 0x85	; 133
    5df4:	d8 cf       	rjmp	.-80     	; 0x5da6 <__vector_24+0x182>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5df6:	e0 91 8f 04 	lds	r30, 0x048F	; 0x80048f <twi_masterBufferIndex>
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	8e 0f       	add	r24, r30
    5dfe:	80 93 8f 04 	sts	0x048F, r24	; 0x80048f <twi_masterBufferIndex>
    5e02:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5e06:	f0 e0       	ldi	r31, 0x00	; 0
    5e08:	e0 57       	subi	r30, 0x70	; 112
    5e0a:	fb 4f       	sbci	r31, 0xFB	; 251
    5e0c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    5e0e:	80 91 b5 04 	lds	r24, 0x04B5	; 0x8004b5 <twi_sendStop>
    5e12:	81 11       	cpse	r24, r1
    5e14:	5c cf       	rjmp	.-328    	; 0x5cce <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5e1c:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e1e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5e22:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    5e26:	25 cf       	rjmp	.-438    	; 0x5c72 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5e28:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    5e2c:	80 91 4b 04 	lds	r24, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5e30:	80 32       	cpi	r24, 0x20	; 32
    5e32:	30 f4       	brcc	.+12     	; 0x5e40 <__vector_24+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5e34:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5e38:	f0 e0       	ldi	r31, 0x00	; 0
    5e3a:	e4 5b       	subi	r30, 0xB4	; 180
    5e3c:	fb 4f       	sbci	r31, 0xFB	; 251
    5e3e:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5e40:	60 91 4b 04 	lds	r22, 0x044B	; 0x80044b <twi_rxBufferIndex>
    5e44:	70 e0       	ldi	r23, 0x00	; 0
    5e46:	e0 91 b0 04 	lds	r30, 0x04B0	; 0x8004b0 <twi_onSlaveReceive>
    5e4a:	f0 91 b1 04 	lds	r31, 0x04B1	; 0x8004b1 <twi_onSlaveReceive+0x1>
    5e4e:	8c e4       	ldi	r24, 0x4C	; 76
    5e50:	94 e0       	ldi	r25, 0x04	; 4
    5e52:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5e54:	10 92 4b 04 	sts	0x044B, r1	; 0x80044b <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    5e58:	0c cf       	rjmp	.-488    	; 0x5c72 <__vector_24+0x4e>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5e5a:	85 ec       	ldi	r24, 0xC5	; 197
    5e5c:	e0 cf       	rjmp	.-64     	; 0x5e1e <__vector_24+0x1fa>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5e5e:	10 92 4a 04 	sts	0x044A, r1	; 0x80044a <twi_error>
    5e62:	35 cf       	rjmp	.-406    	; 0x5cce <__vector_24+0xaa>

00005e64 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5e64:	88 eb       	ldi	r24, 0xB8	; 184
    5e66:	94 e0       	ldi	r25, 0x04	; 4
    5e68:	0c 94 7d 2c 	jmp	0x58fa	; 0x58fa <TwoWire::onRequestService()>

00005e6c <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:19
                        twi_transmit1,
                        twi_reply1,
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
    5e6c:	ab 01       	movw	r20, r22
operator()():
    5e6e:	bc 01       	movw	r22, r24
    5e70:	88 eb       	ldi	r24, 0xB8	; 184
    5e72:	94 e0       	ldi	r25, 0x04	; 4
    5e74:	0c 94 55 2c 	jmp	0x58aa	; 0x58aa <TwoWire::onReceiveService(unsigned char*, int)>

00005e78 <_GLOBAL__sub_I_Wire1>:
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5e78:	8f 92       	push	r8
    5e7a:	9f 92       	push	r9
    5e7c:	af 92       	push	r10
    5e7e:	bf 92       	push	r11
    5e80:	cf 92       	push	r12
    5e82:	df 92       	push	r13
    5e84:	ef 92       	push	r14
    5e86:	ff 92       	push	r15
    5e88:	0f 93       	push	r16
    5e8a:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    5e8c:	82 e3       	ldi	r24, 0x32	; 50
    5e8e:	9f e2       	ldi	r25, 0x2F	; 47
    5e90:	9f 93       	push	r25
    5e92:	8f 93       	push	r24
    5e94:	82 ea       	ldi	r24, 0xA2	; 162
    5e96:	90 e3       	ldi	r25, 0x30	; 48
    5e98:	9f 93       	push	r25
    5e9a:	8f 93       	push	r24
    5e9c:	86 e3       	ldi	r24, 0x36	; 54
    5e9e:	9f e2       	ldi	r25, 0x2F	; 47
    5ea0:	9f 93       	push	r25
    5ea2:	8f 93       	push	r24
    5ea4:	8d e9       	ldi	r24, 0x9D	; 157
    5ea6:	90 e3       	ldi	r25, 0x30	; 48
    5ea8:	9f 93       	push	r25
    5eaa:	8f 93       	push	r24
    5eac:	89 eb       	ldi	r24, 0xB9	; 185
    5eae:	90 e3       	ldi	r25, 0x30	; 48
    5eb0:	9f 93       	push	r25
    5eb2:	8f 93       	push	r24
    5eb4:	8f ea       	ldi	r24, 0xAF	; 175
    5eb6:	90 e3       	ldi	r25, 0x30	; 48
    5eb8:	9f 93       	push	r25
    5eba:	8f 93       	push	r24
    5ebc:	87 ea       	ldi	r24, 0xA7	; 167
    5ebe:	90 e3       	ldi	r25, 0x30	; 48
    5ec0:	9f 93       	push	r25
    5ec2:	8f 93       	push	r24
    5ec4:	86 e7       	ldi	r24, 0x76	; 118
    5ec6:	88 2e       	mov	r8, r24
    5ec8:	80 e3       	ldi	r24, 0x30	; 48
    5eca:	98 2e       	mov	r9, r24
    5ecc:	9f e1       	ldi	r25, 0x1F	; 31
    5ece:	a9 2e       	mov	r10, r25
    5ed0:	90 e3       	ldi	r25, 0x30	; 48
    5ed2:	b9 2e       	mov	r11, r25
    5ed4:	27 ed       	ldi	r18, 0xD7	; 215
    5ed6:	c2 2e       	mov	r12, r18
    5ed8:	2f e2       	ldi	r18, 0x2F	; 47
    5eda:	d2 2e       	mov	r13, r18
    5edc:	34 ec       	ldi	r19, 0xC4	; 196
    5ede:	e3 2e       	mov	r14, r19
    5ee0:	3f e2       	ldi	r19, 0x2F	; 47
    5ee2:	f3 2e       	mov	r15, r19
    5ee4:	00 ec       	ldi	r16, 0xC0	; 192
    5ee6:	1f e2       	ldi	r17, 0x2F	; 47
    5ee8:	23 eb       	ldi	r18, 0xB3	; 179
    5eea:	3f e2       	ldi	r19, 0x2F	; 47
    5eec:	45 e9       	ldi	r20, 0x95	; 149
    5eee:	5f e2       	ldi	r21, 0x2F	; 47
    5ef0:	60 e2       	ldi	r22, 0x20	; 32
    5ef2:	70 e0       	ldi	r23, 0x00	; 0
    5ef4:	88 eb       	ldi	r24, 0xB8	; 184
    5ef6:	94 e0       	ldi	r25, 0x04	; 4
    5ef8:	0e 94 75 2b 	call	0x56ea	; 0x56ea <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    5efc:	8d b7       	in	r24, 0x3d	; 61
    5efe:	9e b7       	in	r25, 0x3e	; 62
    5f00:	0e 96       	adiw	r24, 0x0e	; 14
    5f02:	0f b6       	in	r0, 0x3f	; 63
    5f04:	f8 94       	cli
    5f06:	9e bf       	out	0x3e, r25	; 62
    5f08:	0f be       	out	0x3f, r0	; 63
    5f0a:	8d bf       	out	0x3d, r24	; 61
    5f0c:	1f 91       	pop	r17
    5f0e:	0f 91       	pop	r16
    5f10:	ff 90       	pop	r15
    5f12:	ef 90       	pop	r14
    5f14:	df 90       	pop	r13
    5f16:	cf 90       	pop	r12
    5f18:	bf 90       	pop	r11
    5f1a:	af 90       	pop	r10
    5f1c:	9f 90       	pop	r9
    5f1e:	8f 90       	pop	r8
    5f20:	08 95       	ret

00005f22 <_GLOBAL__sub_D_Wire1>:
_GLOBAL__sub_D_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    5f22:	88 eb       	ldi	r24, 0xB8	; 184
    5f24:	94 e0       	ldi	r25, 0x04	; 4
    5f26:	0c 94 11 2c 	jmp	0x5822	; 0x5822 <TwoWire::~TwoWire()>

00005f2a <twi_init1>:
twi_init1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:71
 * Output   none
 */
void twi_init1(void)
{
  // initialize state
  twi_state = TWI_READY;
    5f2a:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:72
  twi_sendStop = true;  // default value
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:73
  twi_inRepStart = false;
    5f34:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA1, 1);
    5f38:	61 e0       	ldi	r22, 0x01	; 1
    5f3a:	87 e1       	ldi	r24, 0x17	; 23
    5f3c:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:77
  digitalWrite(SCL1, 1);
    5f40:	61 e0       	ldi	r22, 0x01	; 1
    5f42:	88 e1       	ldi	r24, 0x18	; 24
    5f44:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR1, TWPS0);
    5f48:	e9 ed       	ldi	r30, 0xD9	; 217
    5f4a:	f0 e0       	ldi	r31, 0x00	; 0
    5f4c:	80 81       	ld	r24, Z
    5f4e:	8e 7f       	andi	r24, 0xFE	; 254
    5f50:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:81
  cbi(TWSR1, TWPS1);
    5f52:	80 81       	ld	r24, Z
    5f54:	8d 7f       	andi	r24, 0xFD	; 253
    5f56:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:82
  TWBR1 = ((F_CPU / TWI_FREQ) - 16) / 2;
    5f58:	88 e4       	ldi	r24, 0x48	; 72
    5f5a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5f5e:	85 e4       	ldi	r24, 0x45	; 69
    5f60:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:91
}
    5f64:	08 95       	ret

00005f66 <twi_disable1>:
twi_disable1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:102
 * Output   none
 */
void twi_disable1(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR1 &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    5f66:	ec ed       	ldi	r30, 0xDC	; 220
    5f68:	f0 e0       	ldi	r31, 0x00	; 0
    5f6a:	80 81       	ld	r24, Z
    5f6c:	8a 7b       	andi	r24, 0xBA	; 186
    5f6e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA1, 0);
    5f70:	60 e0       	ldi	r22, 0x00	; 0
    5f72:	87 e1       	ldi	r24, 0x17	; 23
    5f74:	0e 94 ac 37 	call	0x6f58	; 0x6f58 <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:106
  digitalWrite(SCL1, 0);
    5f78:	60 e0       	ldi	r22, 0x00	; 0
    5f7a:	88 e1       	ldi	r24, 0x18	; 24
    5f7c:	0c 94 ac 37 	jmp	0x6f58	; 0x6f58 <digitalWrite>

00005f80 <twi_setAddress1>:
twi_setAddress1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:118
 * Output   none
 */
void twi_setAddress1(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR1 = address << 1;
    5f80:	88 0f       	add	r24, r24
    5f82:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:119
}
    5f86:	08 95       	ret

00005f88 <twi_setFrequency1>:
twi_setFrequency1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency1(uint32_t frequency)
{
    5f88:	9b 01       	movw	r18, r22
    5f8a:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    5f8c:	60 e0       	ldi	r22, 0x00	; 0
    5f8e:	74 e2       	ldi	r23, 0x24	; 36
    5f90:	84 ef       	ldi	r24, 0xF4	; 244
    5f92:	90 e0       	ldi	r25, 0x00	; 0
    5f94:	0e 94 28 3b 	call	0x7650	; 0x7650 <__udivmodsi4>
    5f98:	20 51       	subi	r18, 0x10	; 16
    5f9a:	31 09       	sbc	r19, r1
    5f9c:	41 09       	sbc	r20, r1
    5f9e:	51 09       	sbc	r21, r1
    5fa0:	56 95       	lsr	r21
    5fa2:	47 95       	ror	r20
    5fa4:	37 95       	ror	r19
    5fa6:	27 95       	ror	r18
    5fa8:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
  note: TWBR1 should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    5fac:	08 95       	ret

00005fae <twi_readFrom1>:
twi_readFrom1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:152
uint8_t twi_readFrom1(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    5fae:	41 32       	cpi	r20, 0x21	; 33
    5fb0:	08 f0       	brcs	.+2      	; 0x5fb4 <twi_readFrom1+0x6>
    5fb2:	43 c0       	rjmp	.+134    	; 0x603a <twi_readFrom1+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5fb4:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <twi_state>
    5fb8:	91 11       	cpse	r25, r1
    5fba:	fc cf       	rjmp	.-8      	; 0x5fb4 <twi_readFrom1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:160
    continue;
  }
  twi_state = TWI_MRX;
    5fbc:	91 e0       	ldi	r25, 0x01	; 1
    5fbe:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:161
  twi_sendStop = sendStop;
    5fc2:	20 93 53 05 	sts	0x0553, r18	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5fc6:	2f ef       	ldi	r18, 0xFF	; 255
    5fc8:	20 93 e8 04 	sts	0x04E8, r18	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5fcc:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5fd0:	24 0f       	add	r18, r20
    5fd2:	20 93 2c 05 	sts	0x052C, r18	; 0x80052c <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5fd6:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:176
  twi_slarw |= address << 1;
    5fda:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <twi_slarw>
    5fde:	88 0f       	add	r24, r24
    5fe0:	89 2b       	or	r24, r25
    5fe2:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:178

  if (true == twi_inRepStart) {
    5fe6:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    5fea:	81 30       	cpi	r24, 0x01	; 1
    5fec:	09 f5       	brne	.+66     	; 0x6030 <twi_readFrom1+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5fee:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:187 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    5ff2:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    5ff6:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:188 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    5ffa:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    5ffe:	83 fd       	sbrc	r24, 3
    6000:	f8 cf       	rjmp	.-16     	; 0x5ff2 <twi_readFrom1+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:189
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    6002:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    6004:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    6008:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    600c:	81 30       	cpi	r24, 0x01	; 1
    600e:	e1 f3       	breq	.-8      	; 0x6008 <twi_readFrom1+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    6010:	80 91 2d 05 	lds	r24, 0x052D	; 0x80052d <twi_masterBufferIndex>
    6014:	84 17       	cp	r24, r20
    6016:	10 f4       	brcc	.+4      	; 0x601c <twi_readFrom1+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:201
    length = twi_masterBufferIndex;
    6018:	40 91 2d 05 	lds	r20, 0x052D	; 0x80052d <twi_masterBufferIndex>
    601c:	ae e2       	ldi	r26, 0x2E	; 46
    601e:	b5 e0       	ldi	r27, 0x05	; 5
    6020:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    6022:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204 (discriminator 1)
    6024:	8e 2f       	mov	r24, r30
    6026:	89 1b       	sub	r24, r25
    6028:	84 17       	cp	r24, r20
    602a:	20 f0       	brcs	.+8      	; 0x6034 <twi_readFrom1+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    602c:	84 2f       	mov	r24, r20
    602e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    6030:	85 ee       	ldi	r24, 0xE5	; 229
    6032:	e8 cf       	rjmp	.-48     	; 0x6004 <twi_readFrom1+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    6034:	8d 91       	ld	r24, X+
    6036:	81 93       	st	Z+, r24
    6038:	f5 cf       	rjmp	.-22     	; 0x6024 <twi_readFrom1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 0;
    603a:	40 e0       	ldi	r20, 0x00	; 0
    603c:	f7 cf       	rjmp	.-18     	; 0x602c <twi_readFrom1+0x7e>

0000603e <twi_writeTo1>:
twi_writeTo1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo1(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    603e:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    6040:	41 32       	cpi	r20, 0x21	; 33
    6042:	08 f0       	brcs	.+2      	; 0x6046 <twi_writeTo1+0x8>
    6044:	4b c0       	rjmp	.+150    	; 0x60dc <twi_writeTo1+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    6046:	90 91 55 05 	lds	r25, 0x0555	; 0x800555 <twi_state>
    604a:	91 11       	cpse	r25, r1
    604c:	fc cf       	rjmp	.-8      	; 0x6046 <twi_writeTo1+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:239
    continue;
  }
  twi_state = TWI_MTX;
    604e:	92 e0       	ldi	r25, 0x02	; 2
    6050:	90 93 55 05 	sts	0x0555, r25	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:240
  twi_sendStop = sendStop;
    6054:	00 93 53 05 	sts	0x0553, r16	; 0x800553 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6058:	9f ef       	ldi	r25, 0xFF	; 255
    605a:	90 93 e8 04 	sts	0x04E8, r25	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    605e:	10 92 2d 05 	sts	0x052D, r1	; 0x80052d <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:246
  twi_masterBufferLength = length;
    6062:	40 93 2c 05 	sts	0x052C, r20	; 0x80052c <twi_masterBufferLength>
    6066:	36 2f       	mov	r19, r22
    6068:	ae e2       	ldi	r26, 0x2E	; 46
    606a:	b5 e0       	ldi	r27, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    606c:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249 (discriminator 1)
    606e:	9e 2f       	mov	r25, r30
    6070:	93 1b       	sub	r25, r19
    6072:	94 17       	cp	r25, r20
    6074:	70 f1       	brcs	.+92     	; 0x60d2 <twi_writeTo1+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    6076:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:255
  twi_slarw |= address << 1;
    607a:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <twi_slarw>
    607e:	88 0f       	add	r24, r24
    6080:	89 2b       	or	r24, r25
    6082:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    6086:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_inRepStart>
    608a:	81 30       	cpi	r24, 0x01	; 1
    608c:	29 f5       	brne	.+74     	; 0x60d8 <twi_writeTo1+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    608e:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:269 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    6092:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
    6096:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:270 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    609a:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    609e:	83 fd       	sbrc	r24, 3
    60a0:	f8 cf       	rjmp	.-16     	; 0x6092 <twi_writeTo1+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:271
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    60a2:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    60a4:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    60a8:	22 23       	and	r18, r18
    60aa:	21 f0       	breq	.+8      	; 0x60b4 <twi_writeTo1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278 (discriminator 1)
    60ac:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <twi_state>
    60b0:	82 30       	cpi	r24, 0x02	; 2
    60b2:	d1 f3       	breq	.-12     	; 0x60a8 <twi_writeTo1+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    60b4:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    60b8:	8f 3f       	cpi	r24, 0xFF	; 255
    60ba:	91 f0       	breq	.+36     	; 0x60e0 <twi_writeTo1+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    60bc:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    60c0:	80 32       	cpi	r24, 0x20	; 32
    60c2:	81 f0       	breq	.+32     	; 0x60e4 <twi_writeTo1+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    60c4:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <twi_error>
    60c8:	80 33       	cpi	r24, 0x30	; 48
    60ca:	71 f0       	breq	.+28     	; 0x60e8 <twi_writeTo1+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    60cc:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:290
}
    60ce:	0f 91       	pop	r16
    60d0:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    60d2:	91 91       	ld	r25, Z+
    60d4:	9d 93       	st	X+, r25
    60d6:	cb cf       	rjmp	.-106    	; 0x606e <twi_writeTo1+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    60d8:	85 ee       	ldi	r24, 0xE5	; 229
    60da:	e4 cf       	rjmp	.-56     	; 0x60a4 <twi_writeTo1+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 1;
    60dc:	81 e0       	ldi	r24, 0x01	; 1
    60de:	f7 cf       	rjmp	.-18     	; 0x60ce <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    60e0:	80 e0       	ldi	r24, 0x00	; 0
    60e2:	f5 cf       	rjmp	.-22     	; 0x60ce <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    60e4:	82 e0       	ldi	r24, 0x02	; 2
    60e6:	f3 cf       	rjmp	.-26     	; 0x60ce <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    60e8:	83 e0       	ldi	r24, 0x03	; 3
    60ea:	f1 cf       	rjmp	.-30     	; 0x60ce <twi_writeTo1+0x90>

000060ec <twi_transmit1>:
twi_transmit1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:307
uint8_t twi_transmit1(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    60ec:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <twi_txBufferLength>
    60f0:	26 0f       	add	r18, r22
    60f2:	33 27       	eor	r19, r19
    60f4:	33 1f       	adc	r19, r19
    60f6:	21 32       	cpi	r18, 0x21	; 33
    60f8:	31 05       	cpc	r19, r1
    60fa:	ec f4       	brge	.+58     	; 0x6136 <twi_transmit1+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    60fc:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <twi_state>
    6100:	fc 01       	movw	r30, r24
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	80 e0       	ldi	r24, 0x00	; 0
    6106:	24 30       	cpi	r18, 0x04	; 4
    6108:	69 f0       	breq	.+26     	; 0x6124 <twi_transmit1+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:313
    return 2;
    610a:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
    610c:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    610e:	a0 91 0a 05 	lds	r26, 0x050A	; 0x80050a <twi_txBufferLength>
    6112:	21 91       	ld	r18, Z+
    6114:	ac 01       	movw	r20, r24
    6116:	44 5f       	subi	r20, 0xF4	; 244
    6118:	5a 4f       	sbci	r21, 0xFA	; 250
    611a:	a4 0f       	add	r26, r20
    611c:	b5 2f       	mov	r27, r21
    611e:	b1 1d       	adc	r27, r1
    6120:	2c 93       	st	X, r18
    6122:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    6124:	86 17       	cp	r24, r22
    6126:	98 f3       	brcs	.-26     	; 0x610e <twi_transmit1+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    6128:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    612c:	68 0f       	add	r22, r24
    612e:	60 93 0a 05 	sts	0x050A, r22	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:322
  
  return 0;
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    6136:	81 e0       	ldi	r24, 0x01	; 1
    6138:	08 95       	ret

0000613a <twi_attachSlaveRxEvent1>:
twi_attachSlaveRxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent1( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    613a:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <twi_onSlaveReceive+0x1>
    613e:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:334
}
    6142:	08 95       	ret

00006144 <twi_attachSlaveTxEvent1>:
twi_attachSlaveTxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent1( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    6144:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <twi_onSlaveTransmit+0x1>
    6148:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:345
}
    614c:	08 95       	ret

0000614e <twi_reply1>:
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:356
 * Output   none
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    614e:	88 23       	and	r24, r24
    6150:	21 f0       	breq	.+8      	; 0x615a <twi_reply1+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6152:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6154:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:361
  }
}
    6158:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    615a:	85 e8       	ldi	r24, 0x85	; 133
    615c:	fb cf       	rjmp	.-10     	; 0x6154 <twi_reply1+0x6>

0000615e <twi_stop1>:
twi_stop1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:372
 * Output   none
 */
void twi_stop1(void)
{
  // send stop condition
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    615e:	85 ed       	ldi	r24, 0xD5	; 213
    6160:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR1 & _BV(TWSTO)){
    6164:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    6168:	84 fd       	sbrc	r24, 4
    616a:	fc cf       	rjmp	.-8      	; 0x6164 <twi_stop1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    616c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:382
}
    6170:	08 95       	ret

00006172 <twi_releaseBus1>:
twi_releaseBus1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:393
 * Output   none
 */
void twi_releaseBus1(void)
{
  // release bus
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    6172:	85 ec       	ldi	r24, 0xC5	; 197
    6174:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:396

  // update twi state
  twi_state = TWI_READY;
    6178:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:397
}
    617c:	08 95       	ret

0000617e <__vector_40>:
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:400

ISR(TWI1_vect)
{
    617e:	1f 92       	push	r1
    6180:	0f 92       	push	r0
    6182:	0f b6       	in	r0, 0x3f	; 63
    6184:	0f 92       	push	r0
    6186:	11 24       	eor	r1, r1
    6188:	2f 93       	push	r18
    618a:	3f 93       	push	r19
    618c:	4f 93       	push	r20
    618e:	5f 93       	push	r21
    6190:	6f 93       	push	r22
    6192:	7f 93       	push	r23
    6194:	8f 93       	push	r24
    6196:	9f 93       	push	r25
    6198:	af 93       	push	r26
    619a:	bf 93       	push	r27
    619c:	ef 93       	push	r30
    619e:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    61a0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    61a4:	88 7f       	andi	r24, 0xF8	; 248
    61a6:	80 36       	cpi	r24, 0x60	; 96
    61a8:	09 f4       	brne	.+2      	; 0x61ac <__vector_40+0x2e>
    61aa:	4c c0       	rjmp	.+152    	; 0x6244 <__vector_40+0xc6>
    61ac:	08 f0       	brcs	.+2      	; 0x61b0 <__vector_40+0x32>
    61ae:	3f c0       	rjmp	.+126    	; 0x622e <__vector_40+0xb0>
    61b0:	88 32       	cpi	r24, 0x28	; 40
    61b2:	09 f4       	brne	.+2      	; 0x61b6 <__vector_40+0x38>
    61b4:	a8 c0       	rjmp	.+336    	; 0x6306 <__vector_40+0x188>
    61b6:	18 f5       	brcc	.+70     	; 0x61fe <__vector_40+0x80>
    61b8:	80 31       	cpi	r24, 0x10	; 16
    61ba:	09 f4       	brne	.+2      	; 0x61be <__vector_40+0x40>
    61bc:	9c c0       	rjmp	.+312    	; 0x62f6 <__vector_40+0x178>
    61be:	b8 f4       	brcc	.+46     	; 0x61ee <__vector_40+0x70>
    61c0:	88 23       	and	r24, r24
    61c2:	09 f4       	brne	.+2      	; 0x61c6 <__vector_40+0x48>
    61c4:	f9 c0       	rjmp	.+498    	; 0x63b8 <__vector_40+0x23a>
    61c6:	88 30       	cpi	r24, 0x08	; 8
    61c8:	09 f4       	brne	.+2      	; 0x61cc <__vector_40+0x4e>
    61ca:	95 c0       	rjmp	.+298    	; 0x62f6 <__vector_40+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
      break;
  }
}
    61cc:	ff 91       	pop	r31
    61ce:	ef 91       	pop	r30
    61d0:	bf 91       	pop	r27
    61d2:	af 91       	pop	r26
    61d4:	9f 91       	pop	r25
    61d6:	8f 91       	pop	r24
    61d8:	7f 91       	pop	r23
    61da:	6f 91       	pop	r22
    61dc:	5f 91       	pop	r21
    61de:	4f 91       	pop	r20
    61e0:	3f 91       	pop	r19
    61e2:	2f 91       	pop	r18
    61e4:	0f 90       	pop	r0
    61e6:	0f be       	out	0x3f, r0	; 63
    61e8:	0f 90       	pop	r0
    61ea:	1f 90       	pop	r1
    61ec:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    61ee:	88 31       	cpi	r24, 0x18	; 24
    61f0:	09 f4       	brne	.+2      	; 0x61f4 <__vector_40+0x76>
    61f2:	89 c0       	rjmp	.+274    	; 0x6306 <__vector_40+0x188>
    61f4:	80 32       	cpi	r24, 0x20	; 32
    61f6:	51 f7       	brne	.-44     	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:437
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop1();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    61f8:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <twi_error>
    61fc:	15 c0       	rjmp	.+42     	; 0x6228 <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    61fe:	80 34       	cpi	r24, 0x40	; 64
    6200:	09 f4       	brne	.+2      	; 0x6204 <__vector_40+0x86>
    6202:	9e c0       	rjmp	.+316    	; 0x6340 <__vector_40+0x1c2>
    6204:	48 f4       	brcc	.+18     	; 0x6218 <__vector_40+0x9a>
    6206:	80 33       	cpi	r24, 0x30	; 48
    6208:	b9 f3       	breq	.-18     	; 0x61f8 <__vector_40+0x7a>
    620a:	88 33       	cpi	r24, 0x38	; 56
    620c:	f9 f6       	brne	.-66     	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:441
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop1();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    620e:	80 93 e8 04 	sts	0x04E8, r24	; 0x8004e8 <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:442
      twi_releaseBus1();
    6212:	0e 94 b9 30 	call	0x6172	; 0x6172 <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:443
      break;
    6216:	da cf       	rjmp	.-76     	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6218:	80 35       	cpi	r24, 0x50	; 80
    621a:	09 f4       	brne	.+2      	; 0x621e <__vector_40+0xa0>
    621c:	85 c0       	rjmp	.+266    	; 0x6328 <__vector_40+0x1aa>
    621e:	88 35       	cpi	r24, 0x58	; 88
    6220:	09 f4       	brne	.+2      	; 0x6224 <__vector_40+0xa6>
    6222:	96 c0       	rjmp	.+300    	; 0x6350 <__vector_40+0x1d2>
    6224:	88 34       	cpi	r24, 0x48	; 72
    6226:	91 f6       	brne	.-92     	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:560
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
    6228:	0e 94 af 30 	call	0x615e	; 0x615e <twi_stop1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
      break;
  }
}
    622c:	cf cf       	rjmp	.-98     	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    622e:	88 39       	cpi	r24, 0x98	; 152
    6230:	09 f4       	brne	.+2      	; 0x6234 <__vector_40+0xb6>
    6232:	8c c0       	rjmp	.+280    	; 0x634c <__vector_40+0x1ce>
    6234:	38 f5       	brcc	.+78     	; 0x6284 <__vector_40+0x106>
    6236:	88 37       	cpi	r24, 0x78	; 120
    6238:	29 f0       	breq	.+10     	; 0x6244 <__vector_40+0xc6>
    623a:	50 f4       	brcc	.+20     	; 0x6250 <__vector_40+0xd2>
    623c:	88 36       	cpi	r24, 0x68	; 104
    623e:	11 f0       	breq	.+4      	; 0x6244 <__vector_40+0xc6>
    6240:	80 37       	cpi	r24, 0x70	; 112
    6242:	21 f6       	brne	.-120    	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:483
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6244:	83 e0       	ldi	r24, 0x03	; 3
    6246:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:485
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    624a:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <twi_rxBufferIndex>
    624e:	57 c0       	rjmp	.+174    	; 0x62fe <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6250:	88 38       	cpi	r24, 0x88	; 136
    6252:	09 f4       	brne	.+2      	; 0x6256 <__vector_40+0xd8>
    6254:	7b c0       	rjmp	.+246    	; 0x634c <__vector_40+0x1ce>
    6256:	80 39       	cpi	r24, 0x90	; 144
    6258:	19 f0       	breq	.+6      	; 0x6260 <__vector_40+0xe2>
    625a:	80 38       	cpi	r24, 0x80	; 128
    625c:	09 f0       	breq	.+2      	; 0x6260 <__vector_40+0xe2>
    625e:	b6 cf       	rjmp	.-148    	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:491
      twi_reply1(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    6260:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    6264:	80 32       	cpi	r24, 0x20	; 32
    6266:	08 f0       	brcs	.+2      	; 0x626a <__vector_40+0xec>
    6268:	71 c0       	rjmp	.+226    	; 0x634c <__vector_40+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:493
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR1;
    626a:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    626e:	81 e0       	ldi	r24, 0x01	; 1
    6270:	8e 0f       	add	r24, r30
    6272:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <twi_rxBufferIndex>
    6276:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    627a:	f0 e0       	ldi	r31, 0x00	; 0
    627c:	e6 51       	subi	r30, 0x16	; 22
    627e:	fb 4f       	sbci	r31, 0xFB	; 251
    6280:	80 83       	st	Z, r24
    6282:	3d c0       	rjmp	.+122    	; 0x62fe <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6284:	80 3b       	cpi	r24, 0xB0	; 176
    6286:	39 f0       	breq	.+14     	; 0x6296 <__vector_40+0x118>
    6288:	e0 f4       	brcc	.+56     	; 0x62c2 <__vector_40+0x144>
    628a:	80 3a       	cpi	r24, 0xA0	; 160
    628c:	09 f4       	brne	.+2      	; 0x6290 <__vector_40+0x112>
    628e:	79 c0       	rjmp	.+242    	; 0x6382 <__vector_40+0x204>
    6290:	88 3a       	cpi	r24, 0xA8	; 168
    6292:	09 f0       	breq	.+2      	; 0x6296 <__vector_40+0x118>
    6294:	9b cf       	rjmp	.-202    	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:522
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6296:	84 e0       	ldi	r24, 0x04	; 4
    6298:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:524
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    629c:	10 92 0b 05 	sts	0x050B, r1	; 0x80050b <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:526
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    62a0:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:529
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    62a4:	e0 91 50 05 	lds	r30, 0x0550	; 0x800550 <twi_onSlaveTransmit>
    62a8:	f0 91 51 05 	lds	r31, 0x0551	; 0x800551 <twi_onSlaveTransmit+0x1>
    62ac:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:531
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    62ae:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    62b2:	81 11       	cpse	r24, r1
    62b4:	0f c0       	rjmp	.+30     	; 0x62d4 <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:532
        twi_txBufferLength = 1;
    62b6:	81 e0       	ldi	r24, 0x01	; 1
    62b8:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:533
        twi_txBuffer[0] = 0x00;
    62bc:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <twi_txBuffer>
    62c0:	09 c0       	rjmp	.+18     	; 0x62d4 <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    62c2:	80 3c       	cpi	r24, 0xC0	; 192
    62c4:	09 f4       	brne	.+2      	; 0x62c8 <__vector_40+0x14a>
    62c6:	76 c0       	rjmp	.+236    	; 0x63b4 <__vector_40+0x236>
    62c8:	88 3c       	cpi	r24, 0xC8	; 200
    62ca:	09 f4       	brne	.+2      	; 0x62ce <__vector_40+0x150>
    62cc:	73 c0       	rjmp	.+230    	; 0x63b4 <__vector_40+0x236>
    62ce:	88 3b       	cpi	r24, 0xB8	; 184
    62d0:	09 f0       	breq	.+2      	; 0x62d4 <__vector_40+0x156>
    62d2:	7c cf       	rjmp	.-264    	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:539
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
    62d4:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <twi_txBufferIndex>
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	8e 0f       	add	r24, r30
    62dc:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <twi_txBufferIndex>
    62e0:	f0 e0       	ldi	r31, 0x00	; 0
    62e2:	e4 5f       	subi	r30, 0xF4	; 244
    62e4:	fa 4f       	sbci	r31, 0xFA	; 250
    62e6:	80 81       	ld	r24, Z
    62e8:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    62ec:	90 91 0b 05 	lds	r25, 0x050B	; 0x80050b <twi_txBufferIndex>
    62f0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <twi_txBufferLength>
    62f4:	29 c0       	rjmp	.+82     	; 0x6348 <__vector_40+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:407
  switch(TWSR1 & TW_STATUS_MASK){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR1 = twi_slarw;
    62f6:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    62fa:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    62fe:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    6300:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    6304:	63 cf       	rjmp	.-314    	; 0x61cc <__vector_40+0x4e>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:415

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6306:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_masterBufferIndex>
    630a:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_masterBufferLength>
    630e:	98 17       	cp	r25, r24
    6310:	58 f5       	brcc	.+86     	; 0x6368 <__vector_40+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    6312:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    6316:	81 e0       	ldi	r24, 0x01	; 1
    6318:	8e 0f       	add	r24, r30
    631a:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    631e:	f0 e0       	ldi	r31, 0x00	; 0
    6320:	e2 5d       	subi	r30, 0xD2	; 210
    6322:	fa 4f       	sbci	r31, 0xFA	; 250
    6324:	80 81       	ld	r24, Z
    6326:	e9 cf       	rjmp	.-46     	; 0x62fa <__vector_40+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:448
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    6328:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    632c:	81 e0       	ldi	r24, 0x01	; 1
    632e:	8e 0f       	add	r24, r30
    6330:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    6334:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    6338:	f0 e0       	ldi	r31, 0x00	; 0
    633a:	e2 5d       	subi	r30, 0xD2	; 210
    633c:	fa 4f       	sbci	r31, 0xFA	; 250
    633e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:452
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    6340:	90 91 2d 05 	lds	r25, 0x052D	; 0x80052d <twi_masterBufferIndex>
    6344:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    6348:	98 17       	cp	r25, r24
    634a:	c8 f2       	brcs	.-78     	; 0x62fe <__vector_40+0x180>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    634c:	85 e8       	ldi	r24, 0x85	; 133
    634e:	d8 cf       	rjmp	.-80     	; 0x6300 <__vector_40+0x182>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:460
        twi_reply1(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    6350:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <twi_masterBufferIndex>
    6354:	81 e0       	ldi	r24, 0x01	; 1
    6356:	8e 0f       	add	r24, r30
    6358:	80 93 2d 05 	sts	0x052D, r24	; 0x80052d <twi_masterBufferIndex>
    635c:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    6360:	f0 e0       	ldi	r31, 0x00	; 0
    6362:	e2 5d       	subi	r30, 0xD2	; 210
    6364:	fa 4f       	sbci	r31, 0xFA	; 250
    6366:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:461
  if (twi_sendStop)
    6368:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <twi_sendStop>
    636c:	81 11       	cpse	r24, r1
    636e:	5c cf       	rjmp	.-328    	; 0x6228 <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:464
          twi_stop1();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:468
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR1 = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6376:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6378:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:552
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply1(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    637c:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:553
      break;
    6380:	25 cf       	rjmp	.-438    	; 0x61cc <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:502
        twi_reply1(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus1();
    6382:	0e 94 b9 30 	call	0x6172	; 0x6172 <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:504
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    6386:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    638a:	80 32       	cpi	r24, 0x20	; 32
    638c:	30 f4       	brcc	.+12     	; 0x639a <__vector_40+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:505
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    638e:	e0 91 e9 04 	lds	r30, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    6392:	f0 e0       	ldi	r31, 0x00	; 0
    6394:	e6 51       	subi	r30, 0x16	; 22
    6396:	fb 4f       	sbci	r31, 0xFB	; 251
    6398:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:508
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    639a:	60 91 e9 04 	lds	r22, 0x04E9	; 0x8004e9 <twi_rxBufferIndex>
    639e:	70 e0       	ldi	r23, 0x00	; 0
    63a0:	e0 91 4e 05 	lds	r30, 0x054E	; 0x80054e <twi_onSlaveReceive>
    63a4:	f0 91 4f 05 	lds	r31, 0x054F	; 0x80054f <twi_onSlaveReceive+0x1>
    63a8:	8a ee       	ldi	r24, 0xEA	; 234
    63aa:	94 e0       	ldi	r25, 0x04	; 4
    63ac:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:510
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    63ae:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:511
      break;
    63b2:	0c cf       	rjmp	.-488    	; 0x61cc <__vector_40+0x4e>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    63b4:	85 ec       	ldi	r24, 0xC5	; 197
    63b6:	e0 cf       	rjmp	.-64     	; 0x6378 <__vector_40+0x1fa>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:559

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    63b8:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <twi_error>
    63bc:	35 cf       	rjmp	.-406    	; 0x6228 <__vector_40+0xaa>

000063be <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    63be:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    63c0:	91 8d       	ldd	r25, Z+25	; 0x19
    63c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    63c4:	89 2f       	mov	r24, r25
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	80 5c       	subi	r24, 0xC0	; 192
    63ca:	9f 4f       	sbci	r25, 0xFF	; 255
    63cc:	82 1b       	sub	r24, r18
    63ce:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    63d0:	8f 73       	andi	r24, 0x3F	; 63
    63d2:	99 27       	eor	r25, r25
    63d4:	08 95       	ret

000063d6 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    63d6:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    63d8:	91 8d       	ldd	r25, Z+25	; 0x19
    63da:	82 8d       	ldd	r24, Z+26	; 0x1a
    63dc:	98 17       	cp	r25, r24
    63de:	31 f0       	breq	.+12     	; 0x63ec <HardwareSerial::peek()+0x16>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    63e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    63e2:	e8 0f       	add	r30, r24
    63e4:	f1 1d       	adc	r31, r1
    63e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    63ec:	8f ef       	ldi	r24, 0xFF	; 255
    63ee:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    63f0:	08 95       	ret

000063f2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    63f2:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    63f4:	91 8d       	ldd	r25, Z+25	; 0x19
    63f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    63f8:	98 17       	cp	r25, r24
    63fa:	61 f0       	breq	.+24     	; 0x6414 <HardwareSerial::read()+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    63fc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    63fe:	ae 0f       	add	r26, r30
    6400:	bf 2f       	mov	r27, r31
    6402:	b1 1d       	adc	r27, r1
    6404:	5d 96       	adiw	r26, 0x1d	; 29
    6406:	8c 91       	ld	r24, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6408:	92 8d       	ldd	r25, Z+26	; 0x1a
    640a:	9f 5f       	subi	r25, 0xFF	; 255
    640c:	9f 73       	andi	r25, 0x3F	; 63
    640e:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6414:	8f ef       	ldi	r24, 0xFF	; 255
    6416:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6418:	08 95       	ret

0000641a <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    641a:	fc 01       	movw	r30, r24
    641c:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    641e:	44 8d       	ldd	r20, Z+28	; 0x1c
    6420:	25 2f       	mov	r18, r21
    6422:	30 e0       	ldi	r19, 0x00	; 0
    6424:	84 2f       	mov	r24, r20
    6426:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    6428:	82 1b       	sub	r24, r18
    642a:	93 0b       	sbc	r25, r19
    642c:	54 17       	cp	r21, r20
    642e:	10 f0       	brcs	.+4      	; 0x6434 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    6430:	cf 96       	adiw	r24, 0x3f	; 63
    6432:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    6434:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    6436:	08 95       	ret

00006438 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    6438:	82 e8       	ldi	r24, 0x82	; 130
    643a:	93 e3       	ldi	r25, 0x33	; 51
    643c:	89 2b       	or	r24, r25
    643e:	49 f0       	breq	.+18     	; 0x6452 <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    6440:	80 e0       	ldi	r24, 0x00	; 0
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	89 2b       	or	r24, r25
    6446:	29 f0       	breq	.+10     	; 0x6452 <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    6448:	0e 94 82 33 	call	0x6704	; 0x6704 <Serial0_available()>
    644c:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    644e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    6452:	80 e0       	ldi	r24, 0x00	; 0
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	89 2b       	or	r24, r25
    6458:	49 f0       	breq	.+18     	; 0x646c <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	90 e0       	ldi	r25, 0x00	; 0
    645e:	89 2b       	or	r24, r25
    6460:	29 f0       	breq	.+10     	; 0x646c <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    6462:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    6466:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    6468:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    646c:	08 95       	ret

0000646e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    646e:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6470:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6472:	a8 0f       	add	r26, r24
    6474:	b9 2f       	mov	r27, r25
    6476:	b1 1d       	adc	r27, r1
    6478:	a3 5a       	subi	r26, 0xA3	; 163
    647a:	bf 4f       	sbci	r27, 0xFF	; 255
    647c:	2c 91       	ld	r18, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    647e:	84 8d       	ldd	r24, Z+28	; 0x1c
    6480:	90 e0       	ldi	r25, 0x00	; 0
    6482:	01 96       	adiw	r24, 0x01	; 1
    6484:	8f 73       	andi	r24, 0x3F	; 63
    6486:	99 27       	eor	r25, r25
    6488:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    648a:	a6 89       	ldd	r26, Z+22	; 0x16
    648c:	b7 89       	ldd	r27, Z+23	; 0x17
    648e:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    6490:	a0 89       	ldd	r26, Z+16	; 0x10
    6492:	b1 89       	ldd	r27, Z+17	; 0x11
    6494:	8c 91       	ld	r24, X
    6496:	80 64       	ori	r24, 0x40	; 64
    6498:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    649a:	93 8d       	ldd	r25, Z+27	; 0x1b
    649c:	84 8d       	ldd	r24, Z+28	; 0x1c
    649e:	98 13       	cpse	r25, r24
    64a0:	06 c0       	rjmp	.+12     	; 0x64ae <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    64a2:	02 88       	ldd	r0, Z+18	; 0x12
    64a4:	f3 89       	ldd	r31, Z+19	; 0x13
    64a6:	e0 2d       	mov	r30, r0
    64a8:	80 81       	ld	r24, Z
    64aa:	8f 7d       	andi	r24, 0xDF	; 223
    64ac:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    64ae:	08 95       	ret

000064b0 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    64b0:	cf 93       	push	r28
    64b2:	df 93       	push	r29
    64b4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    64b6:	88 8d       	ldd	r24, Y+24	; 0x18
    64b8:	88 23       	and	r24, r24
    64ba:	b9 f0       	breq	.+46     	; 0x64ea <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    64bc:	aa 89       	ldd	r26, Y+18	; 0x12
    64be:	bb 89       	ldd	r27, Y+19	; 0x13
    64c0:	e8 89       	ldd	r30, Y+16	; 0x10
    64c2:	f9 89       	ldd	r31, Y+17	; 0x11
    64c4:	8c 91       	ld	r24, X
    64c6:	85 fd       	sbrc	r24, 5
    64c8:	03 c0       	rjmp	.+6      	; 0x64d0 <HardwareSerial::flush()+0x20>
    64ca:	80 81       	ld	r24, Z
    64cc:	86 fd       	sbrc	r24, 6
    64ce:	0d c0       	rjmp	.+26     	; 0x64ea <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    64d0:	0f b6       	in	r0, 0x3f	; 63
    64d2:	07 fc       	sbrc	r0, 7
    64d4:	f7 cf       	rjmp	.-18     	; 0x64c4 <HardwareSerial::flush()+0x14>
    64d6:	8c 91       	ld	r24, X
    64d8:	85 ff       	sbrs	r24, 5
    64da:	f2 cf       	rjmp	.-28     	; 0x64c0 <HardwareSerial::flush()+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    64dc:	80 81       	ld	r24, Z
    64de:	85 ff       	sbrs	r24, 5
    64e0:	ed cf       	rjmp	.-38     	; 0x64bc <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    64e2:	ce 01       	movw	r24, r28
    64e4:	0e 94 37 32 	call	0x646e	; 0x646e <HardwareSerial::_tx_udr_empty_irq()>
    64e8:	e9 cf       	rjmp	.-46     	; 0x64bc <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    64ea:	df 91       	pop	r29
    64ec:	cf 91       	pop	r28
    64ee:	08 95       	ret

000064f0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    64f0:	ef 92       	push	r14
    64f2:	ff 92       	push	r15
    64f4:	0f 93       	push	r16
    64f6:	1f 93       	push	r17
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    64fc:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6502:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6504:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6506:	98 13       	cpse	r25, r24
    6508:	16 c0       	rjmp	.+44     	; 0x6536 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    650a:	e8 89       	ldd	r30, Y+16	; 0x10
    650c:	f9 89       	ldd	r31, Y+17	; 0x11
    650e:	80 81       	ld	r24, Z
    6510:	85 ff       	sbrs	r24, 5
    6512:	11 c0       	rjmp	.+34     	; 0x6536 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    6514:	ee 89       	ldd	r30, Y+22	; 0x16
    6516:	ff 89       	ldd	r31, Y+23	; 0x17
    6518:	60 83       	st	Z, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    651a:	e8 89       	ldd	r30, Y+16	; 0x10
    651c:	f9 89       	ldd	r31, Y+17	; 0x11
    651e:	80 81       	ld	r24, Z
    6520:	80 64       	ori	r24, 0x40	; 64
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    6522:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    6524:	81 e0       	ldi	r24, 0x01	; 1
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	df 91       	pop	r29
    652a:	cf 91       	pop	r28
    652c:	1f 91       	pop	r17
    652e:	0f 91       	pop	r16
    6530:	ff 90       	pop	r15
    6532:	ef 90       	pop	r14
    6534:	08 95       	ret
    6536:	f6 2e       	mov	r15, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    6538:	0b 8d       	ldd	r16, Y+27	; 0x1b
    653a:	10 e0       	ldi	r17, 0x00	; 0
    653c:	0f 5f       	subi	r16, 0xFF	; 255
    653e:	1f 4f       	sbci	r17, 0xFF	; 255
    6540:	0f 73       	andi	r16, 0x3F	; 63
    6542:	11 27       	eor	r17, r17
    6544:	e0 2e       	mov	r14, r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6546:	8c 8d       	ldd	r24, Y+28	; 0x1c
    6548:	8e 11       	cpse	r24, r14
    654a:	0c c0       	rjmp	.+24     	; 0x6564 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    654c:	0f b6       	in	r0, 0x3f	; 63
    654e:	07 fc       	sbrc	r0, 7
    6550:	fa cf       	rjmp	.-12     	; 0x6546 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6552:	e8 89       	ldd	r30, Y+16	; 0x10
    6554:	f9 89       	ldd	r31, Y+17	; 0x11
    6556:	80 81       	ld	r24, Z
    6558:	85 ff       	sbrs	r24, 5
    655a:	f5 cf       	rjmp	.-22     	; 0x6546 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    655c:	ce 01       	movw	r24, r28
    655e:	0e 94 37 32 	call	0x646e	; 0x646e <HardwareSerial::_tx_udr_empty_irq()>
    6562:	f1 cf       	rjmp	.-30     	; 0x6546 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6564:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6566:	ec 0f       	add	r30, r28
    6568:	fd 2f       	mov	r31, r29
    656a:	f1 1d       	adc	r31, r1
    656c:	e3 5a       	subi	r30, 0xA3	; 163
    656e:	ff 4f       	sbci	r31, 0xFF	; 255
    6570:	f0 82       	st	Z, r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    6572:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    6574:	ea 89       	ldd	r30, Y+18	; 0x12
    6576:	fb 89       	ldd	r31, Y+19	; 0x13
    6578:	80 81       	ld	r24, Z
    657a:	80 62       	ori	r24, 0x20	; 32
    657c:	d2 cf       	rjmp	.-92     	; 0x6522 <HardwareSerial::write(unsigned char)+0x32>

0000657e <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    657e:	cf 92       	push	r12
    6580:	df 92       	push	r13
    6582:	ef 92       	push	r14
    6584:	ff 92       	push	r15
    6586:	1f 93       	push	r17
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	ec 01       	movw	r28, r24
    658e:	6a 01       	movw	r12, r20
    6590:	7b 01       	movw	r14, r22
    6592:	12 2f       	mov	r17, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6594:	e8 89       	ldd	r30, Y+16	; 0x10
    6596:	f9 89       	ldd	r31, Y+17	; 0x11
    6598:	82 e0       	ldi	r24, 0x02	; 2
    659a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    659c:	c1 14       	cp	r12, r1
    659e:	81 ee       	ldi	r24, 0xE1	; 225
    65a0:	d8 06       	cpc	r13, r24
    65a2:	e1 04       	cpc	r14, r1
    65a4:	f1 04       	cpc	r15, r1
    65a6:	a1 f0       	breq	.+40     	; 0x65d0 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    65a8:	60 e0       	ldi	r22, 0x00	; 0
    65aa:	79 e0       	ldi	r23, 0x09	; 9
    65ac:	8d e3       	ldi	r24, 0x3D	; 61
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	a7 01       	movw	r20, r14
    65b2:	96 01       	movw	r18, r12
    65b4:	0e 94 28 3b 	call	0x7650	; 0x7650 <__udivmodsi4>
    65b8:	21 50       	subi	r18, 0x01	; 1
    65ba:	31 09       	sbc	r19, r1
    65bc:	41 09       	sbc	r20, r1
    65be:	51 09       	sbc	r21, r1
    65c0:	56 95       	lsr	r21
    65c2:	47 95       	ror	r20
    65c4:	37 95       	ror	r19
    65c6:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    65c8:	21 15       	cp	r18, r1
    65ca:	80 e1       	ldi	r24, 0x10	; 16
    65cc:	38 07       	cpc	r19, r24
    65ce:	98 f0       	brcs	.+38     	; 0x65f6 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    65d0:	e8 89       	ldd	r30, Y+16	; 0x10
    65d2:	f9 89       	ldd	r31, Y+17	; 0x11
    65d4:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    65d6:	60 e8       	ldi	r22, 0x80	; 128
    65d8:	74 e8       	ldi	r23, 0x84	; 132
    65da:	8e e1       	ldi	r24, 0x1E	; 30
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	a7 01       	movw	r20, r14
    65e0:	96 01       	movw	r18, r12
    65e2:	0e 94 28 3b 	call	0x7650	; 0x7650 <__udivmodsi4>
    65e6:	21 50       	subi	r18, 0x01	; 1
    65e8:	31 09       	sbc	r19, r1
    65ea:	41 09       	sbc	r20, r1
    65ec:	51 09       	sbc	r21, r1
    65ee:	56 95       	lsr	r21
    65f0:	47 95       	ror	r20
    65f2:	37 95       	ror	r19
    65f4:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    65f6:	ec 85       	ldd	r30, Y+12	; 0x0c
    65f8:	fd 85       	ldd	r31, Y+13	; 0x0d
    65fa:	30 83       	st	Z, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    65fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    65fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    6600:	20 83       	st	Z, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    6602:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    6604:	ec 89       	ldd	r30, Y+20	; 0x14
    6606:	fd 89       	ldd	r31, Y+21	; 0x15
    6608:	10 83       	st	Z, r17
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    660a:	ea 89       	ldd	r30, Y+18	; 0x12
    660c:	fb 89       	ldd	r31, Y+19	; 0x13
    660e:	80 81       	ld	r24, Z
    6610:	88 69       	ori	r24, 0x98	; 152
    6612:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    6614:	ea 89       	ldd	r30, Y+18	; 0x12
    6616:	fb 89       	ldd	r31, Y+19	; 0x13
    6618:	80 81       	ld	r24, Z
    661a:	8f 7d       	andi	r24, 0xDF	; 223
    661c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    661e:	df 91       	pop	r29
    6620:	cf 91       	pop	r28
    6622:	1f 91       	pop	r17
    6624:	ff 90       	pop	r15
    6626:	ef 90       	pop	r14
    6628:	df 90       	pop	r13
    662a:	cf 90       	pop	r12
    662c:	08 95       	ret

0000662e <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    662e:	cf 93       	push	r28
    6630:	df 93       	push	r29
    6632:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    6634:	e8 81       	ld	r30, Y
    6636:	f9 81       	ldd	r31, Y+1	; 0x01
    6638:	06 80       	ldd	r0, Z+6	; 0x06
    663a:	f7 81       	ldd	r31, Z+7	; 0x07
    663c:	e0 2d       	mov	r30, r0
    663e:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    6640:	ea 89       	ldd	r30, Y+18	; 0x12
    6642:	fb 89       	ldd	r31, Y+19	; 0x13
    6644:	80 81       	ld	r24, Z
    6646:	87 74       	andi	r24, 0x47	; 71
    6648:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    664a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    664c:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    664e:	df 91       	pop	r29
    6650:	cf 91       	pop	r28
    6652:	08 95       	ret

00006654 <__vector_18>:
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    6654:	1f 92       	push	r1
    6656:	0f 92       	push	r0
    6658:	0f b6       	in	r0, 0x3f	; 63
    665a:	0f 92       	push	r0
    665c:	11 24       	eor	r1, r1
    665e:	2f 93       	push	r18
    6660:	8f 93       	push	r24
    6662:	9f 93       	push	r25
    6664:	ef 93       	push	r30
    6666:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6668:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <Serial+0x10>
    666c:	f0 91 67 05 	lds	r31, 0x0567	; 0x800567 <Serial+0x11>
    6670:	80 81       	ld	r24, Z
    6672:	e0 91 6c 05 	lds	r30, 0x056C	; 0x80056c <Serial+0x16>
    6676:	f0 91 6d 05 	lds	r31, 0x056D	; 0x80056d <Serial+0x17>
    667a:	82 fd       	sbrc	r24, 2
    667c:	1b c0       	rjmp	.+54     	; 0x66b4 <__vector_18+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    667e:	90 81       	ld	r25, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6680:	80 91 6f 05 	lds	r24, 0x056F	; 0x80056f <Serial+0x19>
    6684:	8f 5f       	subi	r24, 0xFF	; 255
    6686:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6688:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <Serial+0x1a>
    668c:	82 17       	cp	r24, r18
    668e:	41 f0       	breq	.+16     	; 0x66a0 <__vector_18+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    6690:	e0 91 6f 05 	lds	r30, 0x056F	; 0x80056f <Serial+0x19>
    6694:	f0 e0       	ldi	r31, 0x00	; 0
    6696:	ea 5a       	subi	r30, 0xAA	; 170
    6698:	fa 4f       	sbci	r31, 0xFA	; 250
    669a:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    669c:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <Serial+0x19>
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    66a0:	ff 91       	pop	r31
    66a2:	ef 91       	pop	r30
    66a4:	9f 91       	pop	r25
    66a6:	8f 91       	pop	r24
    66a8:	2f 91       	pop	r18
    66aa:	0f 90       	pop	r0
    66ac:	0f be       	out	0x3f, r0	; 63
    66ae:	0f 90       	pop	r0
    66b0:	1f 90       	pop	r1
    66b2:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    66b4:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    66b6:	f4 cf       	rjmp	.-24     	; 0x66a0 <__vector_18+0x4c>

000066b8 <__vector_19>:
__vector_19():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    66b8:	1f 92       	push	r1
    66ba:	0f 92       	push	r0
    66bc:	0f b6       	in	r0, 0x3f	; 63
    66be:	0f 92       	push	r0
    66c0:	11 24       	eor	r1, r1
    66c2:	2f 93       	push	r18
    66c4:	3f 93       	push	r19
    66c6:	4f 93       	push	r20
    66c8:	5f 93       	push	r21
    66ca:	6f 93       	push	r22
    66cc:	7f 93       	push	r23
    66ce:	8f 93       	push	r24
    66d0:	9f 93       	push	r25
    66d2:	af 93       	push	r26
    66d4:	bf 93       	push	r27
    66d6:	ef 93       	push	r30
    66d8:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    66da:	86 e5       	ldi	r24, 0x56	; 86
    66dc:	95 e0       	ldi	r25, 0x05	; 5
    66de:	0e 94 37 32 	call	0x646e	; 0x646e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    66e2:	ff 91       	pop	r31
    66e4:	ef 91       	pop	r30
    66e6:	bf 91       	pop	r27
    66e8:	af 91       	pop	r26
    66ea:	9f 91       	pop	r25
    66ec:	8f 91       	pop	r24
    66ee:	7f 91       	pop	r23
    66f0:	6f 91       	pop	r22
    66f2:	5f 91       	pop	r21
    66f4:	4f 91       	pop	r20
    66f6:	3f 91       	pop	r19
    66f8:	2f 91       	pop	r18
    66fa:	0f 90       	pop	r0
    66fc:	0f be       	out	0x3f, r0	; 63
    66fe:	0f 90       	pop	r0
    6700:	1f 90       	pop	r1
    6702:	18 95       	reti

00006704 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    6704:	86 e5       	ldi	r24, 0x56	; 86
    6706:	95 e0       	ldi	r25, 0x05	; 5
    6708:	0e 94 df 31 	call	0x63be	; 0x63be <HardwareSerial::available()>
    670c:	21 e0       	ldi	r18, 0x01	; 1
    670e:	89 2b       	or	r24, r25
    6710:	09 f4       	brne	.+2      	; 0x6714 <Serial0_available()+0x10>
    6712:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    6714:	82 2f       	mov	r24, r18
    6716:	08 95       	ret

00006718 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    6718:	e6 e5       	ldi	r30, 0x56	; 86
    671a:	f5 e0       	ldi	r31, 0x05	; 5
    671c:	13 82       	std	Z+3, r1	; 0x03
    671e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    6720:	88 ee       	ldi	r24, 0xE8	; 232
    6722:	93 e0       	ldi	r25, 0x03	; 3
    6724:	a0 e0       	ldi	r26, 0x00	; 0
    6726:	b0 e0       	ldi	r27, 0x00	; 0
    6728:	84 83       	std	Z+4, r24	; 0x04
    672a:	95 83       	std	Z+5, r25	; 0x05
    672c:	a6 83       	std	Z+6, r26	; 0x06
    672e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6730:	81 ed       	ldi	r24, 0xD1	; 209
    6732:	91 e0       	ldi	r25, 0x01	; 1
    6734:	91 83       	std	Z+1, r25	; 0x01
    6736:	80 83       	st	Z, r24
    6738:	85 ec       	ldi	r24, 0xC5	; 197
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	95 87       	std	Z+13, r25	; 0x0d
    673e:	84 87       	std	Z+12, r24	; 0x0c
    6740:	84 ec       	ldi	r24, 0xC4	; 196
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	97 87       	std	Z+15, r25	; 0x0f
    6746:	86 87       	std	Z+14, r24	; 0x0e
    6748:	80 ec       	ldi	r24, 0xC0	; 192
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	91 8b       	std	Z+17, r25	; 0x11
    674e:	80 8b       	std	Z+16, r24	; 0x10
    6750:	81 ec       	ldi	r24, 0xC1	; 193
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	93 8b       	std	Z+19, r25	; 0x13
    6756:	82 8b       	std	Z+18, r24	; 0x12
    6758:	82 ec       	ldi	r24, 0xC2	; 194
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	95 8b       	std	Z+21, r25	; 0x15
    675e:	84 8b       	std	Z+20, r24	; 0x14
    6760:	86 ec       	ldi	r24, 0xC6	; 198
    6762:	90 e0       	ldi	r25, 0x00	; 0
    6764:	97 8b       	std	Z+23, r25	; 0x17
    6766:	86 8b       	std	Z+22, r24	; 0x16
    6768:	11 8e       	std	Z+25, r1	; 0x19
    676a:	12 8e       	std	Z+26, r1	; 0x1a
    676c:	13 8e       	std	Z+27, r1	; 0x1b
    676e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    6770:	08 95       	ret

00006772 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6772:	af 92       	push	r10
    6774:	bf 92       	push	r11
    6776:	cf 92       	push	r12
    6778:	df 92       	push	r13
    677a:	ef 92       	push	r14
    677c:	ff 92       	push	r15
    677e:	0f 93       	push	r16
    6780:	1f 93       	push	r17
    6782:	cf 93       	push	r28
    6784:	df 93       	push	r29
    6786:	6c 01       	movw	r12, r24
    6788:	7b 01       	movw	r14, r22
    678a:	8b 01       	movw	r16, r22
    678c:	04 0f       	add	r16, r20
    678e:	15 1f       	adc	r17, r21
    6790:	eb 01       	movw	r28, r22
    6792:	5e 01       	movw	r10, r28
    6794:	ae 18       	sub	r10, r14
    6796:	bf 08       	sbc	r11, r15
    6798:	c0 17       	cp	r28, r16
    679a:	d1 07       	cpc	r29, r17
    679c:	59 f0       	breq	.+22     	; 0x67b4 <Print::write(unsigned char const*, unsigned int)+0x42>
    679e:	69 91       	ld	r22, Y+
    67a0:	d6 01       	movw	r26, r12
    67a2:	ed 91       	ld	r30, X+
    67a4:	fc 91       	ld	r31, X
    67a6:	01 90       	ld	r0, Z+
    67a8:	f0 81       	ld	r31, Z
    67aa:	e0 2d       	mov	r30, r0
    67ac:	c6 01       	movw	r24, r12
    67ae:	09 95       	icall
    67b0:	89 2b       	or	r24, r25
    67b2:	79 f7       	brne	.-34     	; 0x6792 <Print::write(unsigned char const*, unsigned int)+0x20>
    67b4:	c5 01       	movw	r24, r10
    67b6:	df 91       	pop	r29
    67b8:	cf 91       	pop	r28
    67ba:	1f 91       	pop	r17
    67bc:	0f 91       	pop	r16
    67be:	ff 90       	pop	r15
    67c0:	ef 90       	pop	r14
    67c2:	df 90       	pop	r13
    67c4:	cf 90       	pop	r12
    67c6:	bf 90       	pop	r11
    67c8:	af 90       	pop	r10
    67ca:	08 95       	ret

000067cc <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    67cc:	fb 01       	movw	r30, r22
    67ce:	01 90       	ld	r0, Z+
    67d0:	00 20       	and	r0, r0
    67d2:	e9 f7       	brne	.-6      	; 0x67ce <Print::write(char const*) [clone .part.2]+0x2>
    67d4:	31 97       	sbiw	r30, 0x01	; 1
    67d6:	af 01       	movw	r20, r30
    67d8:	46 1b       	sub	r20, r22
    67da:	57 0b       	sbc	r21, r23
    67dc:	dc 01       	movw	r26, r24
    67de:	ed 91       	ld	r30, X+
    67e0:	fc 91       	ld	r31, X
    67e2:	02 80       	ldd	r0, Z+2	; 0x02
    67e4:	f3 81       	ldd	r31, Z+3	; 0x03
    67e6:	e0 2d       	mov	r30, r0
    67e8:	09 94       	ijmp

000067ea <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    67ea:	ef 92       	push	r14
    67ec:	ff 92       	push	r15
    67ee:	0f 93       	push	r16
    67f0:	1f 93       	push	r17
    67f2:	cf 93       	push	r28
    67f4:	df 93       	push	r29
    67f6:	8c 01       	movw	r16, r24
    67f8:	7b 01       	movw	r14, r22
    67fa:	d0 e0       	ldi	r29, 0x00	; 0
    67fc:	c0 e0       	ldi	r28, 0x00	; 0
    67fe:	f7 01       	movw	r30, r14
    6800:	ec 0f       	add	r30, r28
    6802:	fd 1f       	adc	r31, r29
    6804:	64 91       	lpm	r22, Z
    6806:	66 23       	and	r22, r22
    6808:	61 f0       	breq	.+24     	; 0x6822 <Print::print(__FlashStringHelper const*)+0x38>
    680a:	d8 01       	movw	r26, r16
    680c:	ed 91       	ld	r30, X+
    680e:	fc 91       	ld	r31, X
    6810:	01 90       	ld	r0, Z+
    6812:	f0 81       	ld	r31, Z
    6814:	e0 2d       	mov	r30, r0
    6816:	c8 01       	movw	r24, r16
    6818:	09 95       	icall
    681a:	89 2b       	or	r24, r25
    681c:	11 f0       	breq	.+4      	; 0x6822 <Print::print(__FlashStringHelper const*)+0x38>
    681e:	21 96       	adiw	r28, 0x01	; 1
    6820:	ee cf       	rjmp	.-36     	; 0x67fe <Print::print(__FlashStringHelper const*)+0x14>
    6822:	ce 01       	movw	r24, r28
    6824:	df 91       	pop	r29
    6826:	cf 91       	pop	r28
    6828:	1f 91       	pop	r17
    682a:	0f 91       	pop	r16
    682c:	ff 90       	pop	r15
    682e:	ef 90       	pop	r14
    6830:	08 95       	ret

00006832 <Print::print(char)>:
_ZN5Print5printEc():
    6832:	dc 01       	movw	r26, r24
    6834:	ed 91       	ld	r30, X+
    6836:	fc 91       	ld	r31, X
    6838:	01 90       	ld	r0, Z+
    683a:	f0 81       	ld	r31, Z
    683c:	e0 2d       	mov	r30, r0
    683e:	09 94       	ijmp

00006840 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    6840:	8f 92       	push	r8
    6842:	9f 92       	push	r9
    6844:	af 92       	push	r10
    6846:	bf 92       	push	r11
    6848:	ef 92       	push	r14
    684a:	ff 92       	push	r15
    684c:	0f 93       	push	r16
    684e:	1f 93       	push	r17
    6850:	cf 93       	push	r28
    6852:	df 93       	push	r29
    6854:	cd b7       	in	r28, 0x3d	; 61
    6856:	de b7       	in	r29, 0x3e	; 62
    6858:	a1 97       	sbiw	r28, 0x21	; 33
    685a:	0f b6       	in	r0, 0x3f	; 63
    685c:	f8 94       	cli
    685e:	de bf       	out	0x3e, r29	; 62
    6860:	0f be       	out	0x3f, r0	; 63
    6862:	cd bf       	out	0x3d, r28	; 61
    6864:	7c 01       	movw	r14, r24
    6866:	fa 01       	movw	r30, r20
    6868:	cb 01       	movw	r24, r22
    686a:	19 a2       	std	Y+33, r1	; 0x21
    686c:	22 30       	cpi	r18, 0x02	; 2
    686e:	08 f4       	brcc	.+2      	; 0x6872 <Print::printNumber(unsigned long, unsigned char)+0x32>
    6870:	2a e0       	ldi	r18, 0x0A	; 10
    6872:	8e 01       	movw	r16, r28
    6874:	0f 5d       	subi	r16, 0xDF	; 223
    6876:	1f 4f       	sbci	r17, 0xFF	; 255
    6878:	82 2e       	mov	r8, r18
    687a:	91 2c       	mov	r9, r1
    687c:	b1 2c       	mov	r11, r1
    687e:	a1 2c       	mov	r10, r1
    6880:	bf 01       	movw	r22, r30
    6882:	a5 01       	movw	r20, r10
    6884:	94 01       	movw	r18, r8
    6886:	0e 94 28 3b 	call	0x7650	; 0x7650 <__udivmodsi4>
    688a:	f9 01       	movw	r30, r18
    688c:	ca 01       	movw	r24, r20
    688e:	6a 30       	cpi	r22, 0x0A	; 10
    6890:	0c f5       	brge	.+66     	; 0x68d4 <Print::printNumber(unsigned long, unsigned char)+0x94>
    6892:	60 5d       	subi	r22, 0xD0	; 208
    6894:	d8 01       	movw	r26, r16
    6896:	6e 93       	st	-X, r22
    6898:	8d 01       	movw	r16, r26
    689a:	23 2b       	or	r18, r19
    689c:	24 2b       	or	r18, r20
    689e:	25 2b       	or	r18, r21
    68a0:	79 f7       	brne	.-34     	; 0x6880 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	80 e0       	ldi	r24, 0x00	; 0
    68a6:	10 97       	sbiw	r26, 0x00	; 0
    68a8:	21 f0       	breq	.+8      	; 0x68b2 <Print::printNumber(unsigned long, unsigned char)+0x72>
    68aa:	bd 01       	movw	r22, r26
    68ac:	c7 01       	movw	r24, r14
    68ae:	0e 94 e6 33 	call	0x67cc	; 0x67cc <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    68b2:	a1 96       	adiw	r28, 0x21	; 33
    68b4:	0f b6       	in	r0, 0x3f	; 63
    68b6:	f8 94       	cli
    68b8:	de bf       	out	0x3e, r29	; 62
    68ba:	0f be       	out	0x3f, r0	; 63
    68bc:	cd bf       	out	0x3d, r28	; 61
    68be:	df 91       	pop	r29
    68c0:	cf 91       	pop	r28
    68c2:	1f 91       	pop	r17
    68c4:	0f 91       	pop	r16
    68c6:	ff 90       	pop	r15
    68c8:	ef 90       	pop	r14
    68ca:	bf 90       	pop	r11
    68cc:	af 90       	pop	r10
    68ce:	9f 90       	pop	r9
    68d0:	8f 90       	pop	r8
    68d2:	08 95       	ret
    68d4:	69 5c       	subi	r22, 0xC9	; 201
    68d6:	de cf       	rjmp	.-68     	; 0x6894 <Print::printNumber(unsigned long, unsigned char)+0x54>

000068d8 <Print::print(long, int)>:
_ZN5Print5printEli():
    68d8:	cf 92       	push	r12
    68da:	df 92       	push	r13
    68dc:	ef 92       	push	r14
    68de:	ff 92       	push	r15
    68e0:	0f 93       	push	r16
    68e2:	1f 93       	push	r17
    68e4:	cf 93       	push	r28
    68e6:	df 93       	push	r29
    68e8:	21 15       	cp	r18, r1
    68ea:	31 05       	cpc	r19, r1
    68ec:	81 f4       	brne	.+32     	; 0x690e <Print::print(long, int)+0x36>
    68ee:	dc 01       	movw	r26, r24
    68f0:	ed 91       	ld	r30, X+
    68f2:	fc 91       	ld	r31, X
    68f4:	01 90       	ld	r0, Z+
    68f6:	f0 81       	ld	r31, Z
    68f8:	e0 2d       	mov	r30, r0
    68fa:	64 2f       	mov	r22, r20
    68fc:	df 91       	pop	r29
    68fe:	cf 91       	pop	r28
    6900:	1f 91       	pop	r17
    6902:	0f 91       	pop	r16
    6904:	ff 90       	pop	r15
    6906:	ef 90       	pop	r14
    6908:	df 90       	pop	r13
    690a:	cf 90       	pop	r12
    690c:	09 94       	ijmp
    690e:	2a 30       	cpi	r18, 0x0A	; 10
    6910:	31 05       	cpc	r19, r1
    6912:	01 f5       	brne	.+64     	; 0x6954 <Print::print(long, int)+0x7c>
    6914:	2a e0       	ldi	r18, 0x0A	; 10
    6916:	77 ff       	sbrs	r23, 7
    6918:	1d c0       	rjmp	.+58     	; 0x6954 <Print::print(long, int)+0x7c>
    691a:	6a 01       	movw	r12, r20
    691c:	7b 01       	movw	r14, r22
    691e:	ec 01       	movw	r28, r24
    6920:	6d e2       	ldi	r22, 0x2D	; 45
    6922:	0e 94 19 34 	call	0x6832	; 0x6832 <Print::print(char)>
    6926:	8c 01       	movw	r16, r24
    6928:	44 27       	eor	r20, r20
    692a:	55 27       	eor	r21, r21
    692c:	ba 01       	movw	r22, r20
    692e:	4c 19       	sub	r20, r12
    6930:	5d 09       	sbc	r21, r13
    6932:	6e 09       	sbc	r22, r14
    6934:	7f 09       	sbc	r23, r15
    6936:	2a e0       	ldi	r18, 0x0A	; 10
    6938:	ce 01       	movw	r24, r28
    693a:	0e 94 20 34 	call	0x6840	; 0x6840 <Print::printNumber(unsigned long, unsigned char)>
    693e:	80 0f       	add	r24, r16
    6940:	91 1f       	adc	r25, r17
    6942:	df 91       	pop	r29
    6944:	cf 91       	pop	r28
    6946:	1f 91       	pop	r17
    6948:	0f 91       	pop	r16
    694a:	ff 90       	pop	r15
    694c:	ef 90       	pop	r14
    694e:	df 90       	pop	r13
    6950:	cf 90       	pop	r12
    6952:	08 95       	ret
    6954:	df 91       	pop	r29
    6956:	cf 91       	pop	r28
    6958:	1f 91       	pop	r17
    695a:	0f 91       	pop	r16
    695c:	ff 90       	pop	r15
    695e:	ef 90       	pop	r14
    6960:	df 90       	pop	r13
    6962:	cf 90       	pop	r12
    6964:	0c 94 20 34 	jmp	0x6840	; 0x6840 <Print::printNumber(unsigned long, unsigned char)>

00006968 <Print::print(int, int)>:
_ZN5Print5printEii():
    6968:	9a 01       	movw	r18, r20
    696a:	ab 01       	movw	r20, r22
    696c:	77 0f       	add	r23, r23
    696e:	66 0b       	sbc	r22, r22
    6970:	77 0b       	sbc	r23, r23
    6972:	0c 94 6c 34 	jmp	0x68d8	; 0x68d8 <Print::print(long, int)>

00006976 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    6976:	21 15       	cp	r18, r1
    6978:	31 05       	cpc	r19, r1
    697a:	41 f4       	brne	.+16     	; 0x698c <Print::print(unsigned long, int)+0x16>
    697c:	dc 01       	movw	r26, r24
    697e:	ed 91       	ld	r30, X+
    6980:	fc 91       	ld	r31, X
    6982:	01 90       	ld	r0, Z+
    6984:	f0 81       	ld	r31, Z
    6986:	e0 2d       	mov	r30, r0
    6988:	64 2f       	mov	r22, r20
    698a:	09 94       	ijmp
    698c:	0c 94 20 34 	jmp	0x6840	; 0x6840 <Print::printNumber(unsigned long, unsigned char)>

00006990 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    6990:	9a 01       	movw	r18, r20
    6992:	ab 01       	movw	r20, r22
    6994:	70 e0       	ldi	r23, 0x00	; 0
    6996:	60 e0       	ldi	r22, 0x00	; 0
    6998:	0c 94 bb 34 	jmp	0x6976	; 0x6976 <Print::print(unsigned long, int)>

0000699c <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    699c:	2f 92       	push	r2
    699e:	3f 92       	push	r3
    69a0:	4f 92       	push	r4
    69a2:	5f 92       	push	r5
    69a4:	6f 92       	push	r6
    69a6:	7f 92       	push	r7
    69a8:	8f 92       	push	r8
    69aa:	9f 92       	push	r9
    69ac:	af 92       	push	r10
    69ae:	bf 92       	push	r11
    69b0:	cf 92       	push	r12
    69b2:	df 92       	push	r13
    69b4:	ef 92       	push	r14
    69b6:	ff 92       	push	r15
    69b8:	1f 93       	push	r17
    69ba:	cf 93       	push	r28
    69bc:	df 93       	push	r29
    69be:	ec 01       	movw	r28, r24
    69c0:	6a 01       	movw	r12, r20
    69c2:	7b 01       	movw	r14, r22
    69c4:	72 2e       	mov	r7, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    69c6:	ab 01       	movw	r20, r22
    69c8:	96 01       	movw	r18, r12
    69ca:	cb 01       	movw	r24, r22
    69cc:	b6 01       	movw	r22, r12
    69ce:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__unordsf2>
_ZN5Print5writeEPKc():
    69d2:	6f ed       	ldi	r22, 0xDF	; 223
    69d4:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    69d6:	81 11       	cpse	r24, r1
    69d8:	26 c0       	rjmp	.+76     	; 0x6a26 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    69da:	46 01       	movw	r8, r12
    69dc:	57 01       	movw	r10, r14
    69de:	e8 94       	clt
    69e0:	b7 f8       	bld	r11, 7
    69e2:	2f ef       	ldi	r18, 0xFF	; 255
    69e4:	3f ef       	ldi	r19, 0xFF	; 255
    69e6:	4f e7       	ldi	r20, 0x7F	; 127
    69e8:	5f e7       	ldi	r21, 0x7F	; 127
    69ea:	c5 01       	movw	r24, r10
    69ec:	b4 01       	movw	r22, r8
    69ee:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <__unordsf2>
    69f2:	81 11       	cpse	r24, r1
    69f4:	0c c0       	rjmp	.+24     	; 0x6a0e <Print::printFloat(double, unsigned char)+0x72>
    69f6:	2f ef       	ldi	r18, 0xFF	; 255
    69f8:	3f ef       	ldi	r19, 0xFF	; 255
    69fa:	4f e7       	ldi	r20, 0x7F	; 127
    69fc:	5f e7       	ldi	r21, 0x7F	; 127
    69fe:	c5 01       	movw	r24, r10
    6a00:	b4 01       	movw	r22, r8
    6a02:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
_ZN5Print5writeEPKc():
    6a06:	63 ee       	ldi	r22, 0xE3	; 227
    6a08:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    6a0a:	18 16       	cp	r1, r24
    6a0c:	64 f0       	brlt	.+24     	; 0x6a26 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6a0e:	2f ef       	ldi	r18, 0xFF	; 255
    6a10:	3f ef       	ldi	r19, 0xFF	; 255
    6a12:	4f e7       	ldi	r20, 0x7F	; 127
    6a14:	5f e4       	ldi	r21, 0x4F	; 79
    6a16:	c7 01       	movw	r24, r14
    6a18:	b6 01       	movw	r22, r12
    6a1a:	0e 94 cf 39 	call	0x739e	; 0x739e <__gesf2>
    6a1e:	18 16       	cp	r1, r24
    6a20:	b4 f4       	brge	.+44     	; 0x6a4e <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    6a22:	67 ee       	ldi	r22, 0xE7	; 231
    6a24:	71 e0       	ldi	r23, 0x01	; 1
    6a26:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    6a28:	df 91       	pop	r29
    6a2a:	cf 91       	pop	r28
    6a2c:	1f 91       	pop	r17
    6a2e:	ff 90       	pop	r15
    6a30:	ef 90       	pop	r14
    6a32:	df 90       	pop	r13
    6a34:	cf 90       	pop	r12
    6a36:	bf 90       	pop	r11
    6a38:	af 90       	pop	r10
    6a3a:	9f 90       	pop	r9
    6a3c:	8f 90       	pop	r8
    6a3e:	7f 90       	pop	r7
    6a40:	6f 90       	pop	r6
    6a42:	5f 90       	pop	r5
    6a44:	4f 90       	pop	r4
    6a46:	3f 90       	pop	r3
    6a48:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    6a4a:	0c 94 e6 33 	jmp	0x67cc	; 0x67cc <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6a4e:	2f ef       	ldi	r18, 0xFF	; 255
    6a50:	3f ef       	ldi	r19, 0xFF	; 255
    6a52:	4f e7       	ldi	r20, 0x7F	; 127
    6a54:	5f ec       	ldi	r21, 0xCF	; 207
    6a56:	c7 01       	movw	r24, r14
    6a58:	b6 01       	movw	r22, r12
    6a5a:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
    6a5e:	87 fd       	sbrc	r24, 7
    6a60:	e0 cf       	rjmp	.-64     	; 0x6a22 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    6a62:	20 e0       	ldi	r18, 0x00	; 0
    6a64:	30 e0       	ldi	r19, 0x00	; 0
    6a66:	a9 01       	movw	r20, r18
    6a68:	c7 01       	movw	r24, r14
    6a6a:	b6 01       	movw	r22, r12
    6a6c:	0e 94 70 38 	call	0x70e0	; 0x70e0 <__cmpsf2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    6a70:	31 2c       	mov	r3, r1
    6a72:	21 2c       	mov	r2, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    6a74:	87 ff       	sbrs	r24, 7
    6a76:	09 c0       	rjmp	.+18     	; 0x6a8a <Print::printFloat(double, unsigned char)+0xee>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    6a78:	6d e2       	ldi	r22, 0x2D	; 45
    6a7a:	ce 01       	movw	r24, r28
    6a7c:	0e 94 19 34 	call	0x6832	; 0x6832 <Print::print(char)>
    6a80:	1c 01       	movw	r2, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    6a82:	f7 fa       	bst	r15, 7
    6a84:	f0 94       	com	r15
    6a86:	f7 f8       	bld	r15, 7
    6a88:	f0 94       	com	r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6a8a:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6a8c:	60 e0       	ldi	r22, 0x00	; 0
    6a8e:	70 e0       	ldi	r23, 0x00	; 0
    6a90:	80 e0       	ldi	r24, 0x00	; 0
    6a92:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    6a94:	71 16       	cp	r7, r17
    6a96:	41 f0       	breq	.+16     	; 0x6aa8 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    6a98:	20 e0       	ldi	r18, 0x00	; 0
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	40 e2       	ldi	r20, 0x20	; 32
    6a9e:	51 e4       	ldi	r21, 0x41	; 65
    6aa0:	0e 94 75 38 	call	0x70ea	; 0x70ea <__divsf3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6aa4:	1f 5f       	subi	r17, 0xFF	; 255
    6aa6:	f6 cf       	rjmp	.-20     	; 0x6a94 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    6aa8:	a7 01       	movw	r20, r14
    6aaa:	96 01       	movw	r18, r12
    6aac:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    6ab0:	2b 01       	movw	r4, r22
    6ab2:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    6ab4:	0e 94 ee 38 	call	0x71dc	; 0x71dc <__fixunssfsi>
    6ab8:	4b 01       	movw	r8, r22
    6aba:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    6abc:	2a e0       	ldi	r18, 0x0A	; 10
    6abe:	bc 01       	movw	r22, r24
    6ac0:	a4 01       	movw	r20, r8
    6ac2:	ce 01       	movw	r24, r28
    6ac4:	0e 94 20 34 	call	0x6840	; 0x6840 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    6ac8:	7c 01       	movw	r14, r24
    6aca:	e2 0c       	add	r14, r2
    6acc:	f3 1c       	adc	r15, r3
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    6ace:	11 23       	and	r17, r17
    6ad0:	b1 f1       	breq	.+108    	; 0x6b3e <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    6ad2:	c5 01       	movw	r24, r10
    6ad4:	b4 01       	movw	r22, r8
    6ad6:	0e 94 1d 39 	call	0x723a	; 0x723a <__floatunsisf>
    6ada:	9b 01       	movw	r18, r22
    6adc:	ac 01       	movw	r20, r24
    6ade:	c3 01       	movw	r24, r6
    6ae0:	b2 01       	movw	r22, r4
    6ae2:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    6ae6:	4b 01       	movw	r8, r22
    6ae8:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    6aea:	6e e2       	ldi	r22, 0x2E	; 46
    6aec:	ce 01       	movw	r24, r28
    6aee:	0e 94 19 34 	call	0x6832	; 0x6832 <Print::print(char)>
    6af2:	e8 0e       	add	r14, r24
    6af4:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    6af6:	11 50       	subi	r17, 0x01	; 1
    6af8:	10 f1       	brcs	.+68     	; 0x6b3e <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    6afa:	20 e0       	ldi	r18, 0x00	; 0
    6afc:	30 e0       	ldi	r19, 0x00	; 0
    6afe:	40 e2       	ldi	r20, 0x20	; 32
    6b00:	51 e4       	ldi	r21, 0x41	; 65
    6b02:	c5 01       	movw	r24, r10
    6b04:	b4 01       	movw	r22, r8
    6b06:	0e 94 24 3a 	call	0x7448	; 0x7448 <__mulsf3>
    6b0a:	2b 01       	movw	r4, r22
    6b0c:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    6b0e:	0e 94 ee 38 	call	0x71dc	; 0x71dc <__fixunssfsi>
    6b12:	4b 01       	movw	r8, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    6b14:	4a e0       	ldi	r20, 0x0A	; 10
    6b16:	50 e0       	ldi	r21, 0x00	; 0
    6b18:	ce 01       	movw	r24, r28
    6b1a:	0e 94 c8 34 	call	0x6990	; 0x6990 <Print::print(unsigned int, int)>
    6b1e:	e8 0e       	add	r14, r24
    6b20:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    6b22:	b4 01       	movw	r22, r8
    6b24:	90 e0       	ldi	r25, 0x00	; 0
    6b26:	80 e0       	ldi	r24, 0x00	; 0
    6b28:	0e 94 1d 39 	call	0x723a	; 0x723a <__floatunsisf>
    6b2c:	9b 01       	movw	r18, r22
    6b2e:	ac 01       	movw	r20, r24
    6b30:	c3 01       	movw	r24, r6
    6b32:	b2 01       	movw	r22, r4
    6b34:	0e 94 03 38 	call	0x7006	; 0x7006 <__subsf3>
    6b38:	4b 01       	movw	r8, r22
    6b3a:	5c 01       	movw	r10, r24
    6b3c:	dc cf       	rjmp	.-72     	; 0x6af6 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    6b3e:	c7 01       	movw	r24, r14
    6b40:	df 91       	pop	r29
    6b42:	cf 91       	pop	r28
    6b44:	1f 91       	pop	r17
    6b46:	ff 90       	pop	r15
    6b48:	ef 90       	pop	r14
    6b4a:	df 90       	pop	r13
    6b4c:	cf 90       	pop	r12
    6b4e:	bf 90       	pop	r11
    6b50:	af 90       	pop	r10
    6b52:	9f 90       	pop	r9
    6b54:	8f 90       	pop	r8
    6b56:	7f 90       	pop	r7
    6b58:	6f 90       	pop	r6
    6b5a:	5f 90       	pop	r5
    6b5c:	4f 90       	pop	r4
    6b5e:	3f 90       	pop	r3
    6b60:	2f 90       	pop	r2
    6b62:	08 95       	ret

00006b64 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    6b64:	0c 94 ce 34 	jmp	0x699c	; 0x699c <Print::printFloat(double, unsigned char)>

00006b68 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6b68:	4f 92       	push	r4
    6b6a:	5f 92       	push	r5
    6b6c:	6f 92       	push	r6
    6b6e:	7f 92       	push	r7
    6b70:	af 92       	push	r10
    6b72:	bf 92       	push	r11
    6b74:	cf 92       	push	r12
    6b76:	df 92       	push	r13
    6b78:	ef 92       	push	r14
    6b7a:	ff 92       	push	r15
    6b7c:	0f 93       	push	r16
    6b7e:	1f 93       	push	r17
    6b80:	cf 93       	push	r28
    6b82:	df 93       	push	r29
    6b84:	cd b7       	in	r28, 0x3d	; 61
    6b86:	de b7       	in	r29, 0x3e	; 62
    6b88:	29 01       	movw	r4, r18
    6b8a:	3a 01       	movw	r6, r20
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6b8c:	9b 01       	movw	r18, r22
    6b8e:	ac 01       	movw	r20, r24
    6b90:	24 19       	sub	r18, r4
    6b92:	35 09       	sbc	r19, r5
    6b94:	46 09       	sbc	r20, r6
    6b96:	57 09       	sbc	r21, r7
    6b98:	89 89       	ldd	r24, Y+17	; 0x11
    6b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    6b9c:	ab 89       	ldd	r26, Y+19	; 0x13
    6b9e:	bc 89       	ldd	r27, Y+20	; 0x14
    6ba0:	bc 01       	movw	r22, r24
    6ba2:	cd 01       	movw	r24, r26
    6ba4:	6a 19       	sub	r22, r10
    6ba6:	7b 09       	sbc	r23, r11
    6ba8:	8c 09       	sbc	r24, r12
    6baa:	9d 09       	sbc	r25, r13
    6bac:	0e 94 18 3b 	call	0x7630	; 0x7630 <__mulsi3>
    6bb0:	a8 01       	movw	r20, r16
    6bb2:	97 01       	movw	r18, r14
    6bb4:	24 19       	sub	r18, r4
    6bb6:	35 09       	sbc	r19, r5
    6bb8:	46 09       	sbc	r20, r6
    6bba:	57 09       	sbc	r21, r7
    6bbc:	0e 94 4a 3b 	call	0x7694	; 0x7694 <__divmodsi4>
    6bc0:	ca 01       	movw	r24, r20
    6bc2:	b9 01       	movw	r22, r18
    6bc4:	6a 0d       	add	r22, r10
    6bc6:	7b 1d       	adc	r23, r11
    6bc8:	8c 1d       	adc	r24, r12
    6bca:	9d 1d       	adc	r25, r13
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    6bcc:	df 91       	pop	r29
    6bce:	cf 91       	pop	r28
    6bd0:	1f 91       	pop	r17
    6bd2:	0f 91       	pop	r16
    6bd4:	ff 90       	pop	r15
    6bd6:	ef 90       	pop	r14
    6bd8:	df 90       	pop	r13
    6bda:	cf 90       	pop	r12
    6bdc:	bf 90       	pop	r11
    6bde:	af 90       	pop	r10
    6be0:	7f 90       	pop	r7
    6be2:	6f 90       	pop	r6
    6be4:	5f 90       	pop	r5
    6be6:	4f 90       	pop	r4
    6be8:	08 95       	ret

00006bea <yield>:
__empty():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    6bea:	08 95       	ret

00006bec <initVariant>:
initVariant():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6bec:	08 95       	ret

00006bee <main>:
main():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    6bee:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <init>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    6bf2:	0e 94 f6 35 	call	0x6bec	; 0x6bec <initVariant>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    6bf6:	0e 94 3a 12 	call	0x2474	; 0x2474 <setup>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    6bfa:	cc e1       	ldi	r28, 0x1C	; 28
    6bfc:	d2 e3       	ldi	r29, 0x32	; 50
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    6bfe:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <loop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    6c02:	20 97       	sbiw	r28, 0x00	; 0
    6c04:	e1 f3       	breq	.-8      	; 0x6bfe <main+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    6c06:	0e 94 1c 32 	call	0x6438	; 0x6438 <serialEventRun()>
    6c0a:	f9 cf       	rjmp	.-14     	; 0x6bfe <main+0x10>

00006c0c <operator new[](unsigned int)>:
_Znaj():
    6c0c:	0c 94 c6 3b 	jmp	0x778c	; 0x778c <malloc>

00006c10 <operator delete(void*, unsigned int)>:
_ZdlPv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    6c10:	0c 94 62 3c 	jmp	0x78c4	; 0x78c4 <free>

00006c14 <__vector_16>:
__vector_16():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6c14:	1f 92       	push	r1
    6c16:	0f 92       	push	r0
    6c18:	0f b6       	in	r0, 0x3f	; 63
    6c1a:	0f 92       	push	r0
    6c1c:	11 24       	eor	r1, r1
    6c1e:	2f 93       	push	r18
    6c20:	3f 93       	push	r19
    6c22:	8f 93       	push	r24
    6c24:	9f 93       	push	r25
    6c26:	af 93       	push	r26
    6c28:	bf 93       	push	r27
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    6c2a:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_millis>
    6c2e:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_millis+0x1>
    6c32:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_millis+0x2>
    6c36:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    6c3a:	30 91 f7 05 	lds	r19, 0x05F7	; 0x8005f7 <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    6c3e:	23 e0       	ldi	r18, 0x03	; 3
    6c40:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    6c42:	2d 37       	cpi	r18, 0x7D	; 125
    6c44:	68 f1       	brcs	.+90     	; 0x6ca0 <__vector_16+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    6c46:	26 e8       	ldi	r18, 0x86	; 134
    6c48:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    6c4a:	02 96       	adiw	r24, 0x02	; 2
    6c4c:	a1 1d       	adc	r26, r1
    6c4e:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    6c50:	20 93 f7 05 	sts	0x05F7, r18	; 0x8005f7 <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    6c54:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <timer0_millis>
    6c58:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <timer0_millis+0x1>
    6c5c:	a0 93 fa 05 	sts	0x05FA, r26	; 0x8005fa <timer0_millis+0x2>
    6c60:	b0 93 fb 05 	sts	0x05FB, r27	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    6c64:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <timer0_overflow_count>
    6c68:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x1>
    6c6c:	a0 91 f5 05 	lds	r26, 0x05F5	; 0x8005f5 <timer0_overflow_count+0x2>
    6c70:	b0 91 f6 05 	lds	r27, 0x05F6	; 0x8005f6 <timer0_overflow_count+0x3>
    6c74:	01 96       	adiw	r24, 0x01	; 1
    6c76:	a1 1d       	adc	r26, r1
    6c78:	b1 1d       	adc	r27, r1
    6c7a:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <timer0_overflow_count>
    6c7e:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <timer0_overflow_count+0x1>
    6c82:	a0 93 f5 05 	sts	0x05F5, r26	; 0x8005f5 <timer0_overflow_count+0x2>
    6c86:	b0 93 f6 05 	sts	0x05F6, r27	; 0x8005f6 <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    6c8a:	bf 91       	pop	r27
    6c8c:	af 91       	pop	r26
    6c8e:	9f 91       	pop	r25
    6c90:	8f 91       	pop	r24
    6c92:	3f 91       	pop	r19
    6c94:	2f 91       	pop	r18
    6c96:	0f 90       	pop	r0
    6c98:	0f be       	out	0x3f, r0	; 63
    6c9a:	0f 90       	pop	r0
    6c9c:	1f 90       	pop	r1
    6c9e:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    6ca0:	01 96       	adiw	r24, 0x01	; 1
    6ca2:	a1 1d       	adc	r26, r1
    6ca4:	b1 1d       	adc	r27, r1
    6ca6:	d4 cf       	rjmp	.-88     	; 0x6c50 <__vector_16+0x3c>

00006ca8 <millis>:
millis():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    6ca8:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    6caa:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    6cac:	60 91 f8 05 	lds	r22, 0x05F8	; 0x8005f8 <timer0_millis>
    6cb0:	70 91 f9 05 	lds	r23, 0x05F9	; 0x8005f9 <timer0_millis+0x1>
    6cb4:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <timer0_millis+0x2>
    6cb8:	90 91 fb 05 	lds	r25, 0x05FB	; 0x8005fb <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    6cbc:	2f bf       	out	0x3f, r18	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    6cbe:	08 95       	ret

00006cc0 <micros>:
micros():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    6cc0:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    6cc2:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    6cc4:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <timer0_overflow_count>
    6cc8:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x1>
    6ccc:	a0 91 f5 05 	lds	r26, 0x05F5	; 0x8005f5 <timer0_overflow_count+0x2>
    6cd0:	b0 91 f6 05 	lds	r27, 0x05F6	; 0x8005f6 <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    6cd4:	26 b5       	in	r18, 0x26	; 38
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6cd6:	a8 9b       	sbis	0x15, 0	; 21
    6cd8:	05 c0       	rjmp	.+10     	; 0x6ce4 <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    6cda:	2f 3f       	cpi	r18, 0xFF	; 255
    6cdc:	19 f0       	breq	.+6      	; 0x6ce4 <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    6cde:	01 96       	adiw	r24, 0x01	; 1
    6ce0:	a1 1d       	adc	r26, r1
    6ce2:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    6ce4:	3f bf       	out	0x3f, r19	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    6ce6:	ba 2f       	mov	r27, r26
    6ce8:	a9 2f       	mov	r26, r25
    6cea:	98 2f       	mov	r25, r24
    6cec:	88 27       	eor	r24, r24
    6cee:	bc 01       	movw	r22, r24
    6cf0:	cd 01       	movw	r24, r26
    6cf2:	62 0f       	add	r22, r18
    6cf4:	71 1d       	adc	r23, r1
    6cf6:	81 1d       	adc	r24, r1
    6cf8:	91 1d       	adc	r25, r1
    6cfa:	42 e0       	ldi	r20, 0x02	; 2
    6cfc:	66 0f       	add	r22, r22
    6cfe:	77 1f       	adc	r23, r23
    6d00:	88 1f       	adc	r24, r24
    6d02:	99 1f       	adc	r25, r25
    6d04:	4a 95       	dec	r20
    6d06:	d1 f7       	brne	.-12     	; 0x6cfc <micros+0x3c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    6d08:	08 95       	ret

00006d0a <delay>:
delay():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    6d0a:	8f 92       	push	r8
    6d0c:	9f 92       	push	r9
    6d0e:	af 92       	push	r10
    6d10:	bf 92       	push	r11
    6d12:	cf 92       	push	r12
    6d14:	df 92       	push	r13
    6d16:	ef 92       	push	r14
    6d18:	ff 92       	push	r15
    6d1a:	6b 01       	movw	r12, r22
    6d1c:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    6d1e:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <micros>
    6d22:	4b 01       	movw	r8, r22
    6d24:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    6d26:	c1 14       	cp	r12, r1
    6d28:	d1 04       	cpc	r13, r1
    6d2a:	e1 04       	cpc	r14, r1
    6d2c:	f1 04       	cpc	r15, r1
    6d2e:	e9 f0       	breq	.+58     	; 0x6d6a <delay+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    6d30:	0e 94 f5 35 	call	0x6bea	; 0x6bea <yield>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6d34:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <micros>
    6d38:	68 19       	sub	r22, r8
    6d3a:	79 09       	sbc	r23, r9
    6d3c:	8a 09       	sbc	r24, r10
    6d3e:	9b 09       	sbc	r25, r11
    6d40:	68 3e       	cpi	r22, 0xE8	; 232
    6d42:	73 40       	sbci	r23, 0x03	; 3
    6d44:	81 05       	cpc	r24, r1
    6d46:	91 05       	cpc	r25, r1
    6d48:	70 f3       	brcs	.-36     	; 0x6d26 <delay+0x1c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    6d4a:	21 e0       	ldi	r18, 0x01	; 1
    6d4c:	c2 1a       	sub	r12, r18
    6d4e:	d1 08       	sbc	r13, r1
    6d50:	e1 08       	sbc	r14, r1
    6d52:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    6d54:	88 ee       	ldi	r24, 0xE8	; 232
    6d56:	88 0e       	add	r8, r24
    6d58:	83 e0       	ldi	r24, 0x03	; 3
    6d5a:	98 1e       	adc	r9, r24
    6d5c:	a1 1c       	adc	r10, r1
    6d5e:	b1 1c       	adc	r11, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6d60:	c1 14       	cp	r12, r1
    6d62:	d1 04       	cpc	r13, r1
    6d64:	e1 04       	cpc	r14, r1
    6d66:	f1 04       	cpc	r15, r1
    6d68:	29 f7       	brne	.-54     	; 0x6d34 <delay+0x2a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    6d6a:	ff 90       	pop	r15
    6d6c:	ef 90       	pop	r14
    6d6e:	df 90       	pop	r13
    6d70:	cf 90       	pop	r12
    6d72:	bf 90       	pop	r11
    6d74:	af 90       	pop	r10
    6d76:	9f 90       	pop	r9
    6d78:	8f 90       	pop	r8
    6d7a:	08 95       	ret

00006d7c <delayMicroseconds>:
delayMicroseconds():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    6d7c:	82 30       	cpi	r24, 0x02	; 2
    6d7e:	91 05       	cpc	r25, r1
    6d80:	38 f0       	brcs	.+14     	; 0x6d90 <delayMicroseconds+0x14>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    6d82:	88 0f       	add	r24, r24
    6d84:	99 1f       	adc	r25, r25
    6d86:	88 0f       	add	r24, r24
    6d88:	99 1f       	adc	r25, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    6d8a:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    6d8c:	01 97       	sbiw	r24, 0x01	; 1
    6d8e:	f1 f7       	brne	.-4      	; 0x6d8c <delayMicroseconds+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    6d90:	08 95       	ret

00006d92 <init>:
init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    6d92:	78 94       	sei
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    6d94:	84 b5       	in	r24, 0x24	; 36
    6d96:	83 60       	ori	r24, 0x03	; 3
    6d98:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    6d9a:	85 b5       	in	r24, 0x25	; 37
    6d9c:	83 60       	ori	r24, 0x03	; 3
    6d9e:	85 bd       	out	0x25, r24	; 37
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    6da0:	ee e6       	ldi	r30, 0x6E	; 110
    6da2:	f0 e0       	ldi	r31, 0x00	; 0
    6da4:	80 81       	ld	r24, Z
    6da6:	81 60       	ori	r24, 0x01	; 1
    6da8:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    6daa:	e1 e8       	ldi	r30, 0x81	; 129
    6dac:	f0 e0       	ldi	r31, 0x00	; 0
    6dae:	82 e0       	ldi	r24, 0x02	; 2
    6db0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    6db2:	80 81       	ld	r24, Z
    6db4:	81 60       	ori	r24, 0x01	; 1
    6db6:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    6db8:	e0 e8       	ldi	r30, 0x80	; 128
    6dba:	f0 e0       	ldi	r31, 0x00	; 0
    6dbc:	80 81       	ld	r24, Z
    6dbe:	81 60       	ori	r24, 0x01	; 1
    6dc0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    6dc2:	e1 eb       	ldi	r30, 0xB1	; 177
    6dc4:	f0 e0       	ldi	r31, 0x00	; 0
    6dc6:	80 81       	ld	r24, Z
    6dc8:	84 60       	ori	r24, 0x04	; 4
    6dca:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    6dcc:	e0 eb       	ldi	r30, 0xB0	; 176
    6dce:	f0 e0       	ldi	r31, 0x00	; 0
    6dd0:	80 81       	ld	r24, Z
    6dd2:	81 60       	ori	r24, 0x01	; 1
    6dd4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    6dd6:	e1 e9       	ldi	r30, 0x91	; 145
    6dd8:	f0 e0       	ldi	r31, 0x00	; 0
    6dda:	80 81       	ld	r24, Z
    6ddc:	83 60       	ori	r24, 0x03	; 3
    6dde:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    6de0:	e0 e9       	ldi	r30, 0x90	; 144
    6de2:	f0 e0       	ldi	r31, 0x00	; 0
    6de4:	80 81       	ld	r24, Z
    6de6:	81 60       	ori	r24, 0x01	; 1
    6de8:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    6dea:	e1 ea       	ldi	r30, 0xA1	; 161
    6dec:	f0 e0       	ldi	r31, 0x00	; 0
    6dee:	80 81       	ld	r24, Z
    6df0:	83 60       	ori	r24, 0x03	; 3
    6df2:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    6df4:	e0 ea       	ldi	r30, 0xA0	; 160
    6df6:	f0 e0       	ldi	r31, 0x00	; 0
    6df8:	80 81       	ld	r24, Z
    6dfa:	81 60       	ori	r24, 0x01	; 1
    6dfc:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    6dfe:	87 e8       	ldi	r24, 0x87	; 135
    6e00:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    6e04:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    6e08:	08 95       	ret

00006e0a <analogRead>:
analogRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    6e0a:	88 30       	cpi	r24, 0x08	; 8
    6e0c:	38 f0       	brcs	.+14     	; 0x6e1c <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    6e0e:	92 ef       	ldi	r25, 0xF2	; 242
    6e10:	98 0f       	add	r25, r24
    6e12:	9b 30       	cpi	r25, 0x0B	; 11
    6e14:	d8 f0       	brcs	.+54     	; 0x6e4c <analogRead+0x42>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 4)
    6e16:	89 31       	cpi	r24, 0x19	; 25
    6e18:	d8 f0       	brcs	.+54     	; 0x6e50 <analogRead+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 6)
    6e1a:	83 51       	subi	r24, 0x13	; 19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 12)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    6e1c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <analog_reference>
    6e20:	90 e4       	ldi	r25, 0x40	; 64
    6e22:	29 9f       	mul	r18, r25
    6e24:	90 01       	movw	r18, r0
    6e26:	11 24       	eor	r1, r1
    6e28:	87 70       	andi	r24, 0x07	; 7
    6e2a:	82 2b       	or	r24, r18
    6e2c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 12)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    6e30:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    6e34:	80 64       	ori	r24, 0x40	; 64
    6e36:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    6e3a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    6e3e:	86 fd       	sbrc	r24, 6
    6e40:	fc cf       	rjmp	.-8      	; 0x6e3a <analogRead+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    6e42:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    6e46:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    6e4a:	08 95       	ret
    6e4c:	89 2f       	mov	r24, r25
    6e4e:	e6 cf       	rjmp	.-52     	; 0x6e1c <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    6e50:	8f ef       	ldi	r24, 0xFF	; 255
    6e52:	e4 cf       	rjmp	.-56     	; 0x6e1c <analogRead+0x12>

00006e54 <turnOffPWM>:
turnOffPWM():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    6e54:	82 50       	subi	r24, 0x02	; 2
    6e56:	8d 30       	cpi	r24, 0x0D	; 13
    6e58:	08 f0       	brcs	.+2      	; 0x6e5c <turnOffPWM+0x8>
    6e5a:	3e c0       	rjmp	.+124    	; 0x6ed8 <turnOffPWM+0x84>
    6e5c:	e8 2f       	mov	r30, r24
    6e5e:	f0 e0       	ldi	r31, 0x00	; 0
    6e60:	ec 5c       	subi	r30, 0xCC	; 204
    6e62:	f8 4c       	sbci	r31, 0xC8	; 200
    6e64:	0c 94 69 3b 	jmp	0x76d2	; 0x76d2 <__tablejump2__>
    6e68:	69 37       	cpi	r22, 0x79	; 121
    6e6a:	6d 37       	cpi	r22, 0x7D	; 125
    6e6c:	41 37       	cpi	r20, 0x71	; 113
    6e6e:	47 37       	cpi	r20, 0x77	; 119
    6e70:	6c 37       	cpi	r22, 0x7C	; 124
    6e72:	6c 37       	cpi	r22, 0x7C	; 124
    6e74:	4b 37       	cpi	r20, 0x7B	; 123
    6e76:	51 37       	cpi	r21, 0x71	; 113
    6e78:	55 37       	cpi	r21, 0x75	; 117
    6e7a:	5b 37       	cpi	r21, 0x7B	; 123
    6e7c:	6c 37       	cpi	r22, 0x7C	; 124
    6e7e:	5f 37       	cpi	r21, 0x7F	; 127
    6e80:	65 37       	cpi	r22, 0x75	; 117
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    6e82:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    6e86:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    6e88:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    6e8c:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    6e8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    6e92:	8f 7d       	andi	r24, 0xDF	; 223
    6e94:	f9 cf       	rjmp	.-14     	; 0x6e88 <turnOffPWM+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    6e96:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    6e9a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    6e9c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    6ea0:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    6ea2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    6ea6:	8f 7d       	andi	r24, 0xDF	; 223
    6ea8:	f9 cf       	rjmp	.-14     	; 0x6e9c <turnOffPWM+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    6eaa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    6eae:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    6eb0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    6eb4:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    6eb6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    6eba:	8f 7d       	andi	r24, 0xDF	; 223
    6ebc:	f9 cf       	rjmp	.-14     	; 0x6eb0 <turnOffPWM+0x5c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    6ebe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    6ec2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    6ec4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
    6ec8:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    6eca:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    6ece:	8f 7d       	andi	r24, 0xDF	; 223
    6ed0:	f9 cf       	rjmp	.-14     	; 0x6ec4 <turnOffPWM+0x70>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    6ed2:	84 b5       	in	r24, 0x24	; 36
    6ed4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    6ed6:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    6ed8:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    6eda:	84 b5       	in	r24, 0x24	; 36
    6edc:	8f 7d       	andi	r24, 0xDF	; 223
    6ede:	fb cf       	rjmp	.-10     	; 0x6ed6 <turnOffPWM+0x82>

00006ee0 <pinMode>:
pinMode():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6ee0:	cf 93       	push	r28
    6ee2:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	fc 01       	movw	r30, r24
    6ee8:	ed 54       	subi	r30, 0x4D	; 77
    6eea:	fe 4e       	sbci	r31, 0xEE	; 238
    6eec:	24 91       	lpm	r18, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    6eee:	82 53       	subi	r24, 0x32	; 50
    6ef0:	9e 4e       	sbci	r25, 0xEE	; 238
    6ef2:	fc 01       	movw	r30, r24
    6ef4:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    6ef6:	88 23       	and	r24, r24
    6ef8:	c9 f0       	breq	.+50     	; 0x6f2c <pinMode+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    6efa:	90 e0       	ldi	r25, 0x00	; 0
    6efc:	88 0f       	add	r24, r24
    6efe:	99 1f       	adc	r25, r25
    6f00:	fc 01       	movw	r30, r24
    6f02:	ef 5f       	subi	r30, 0xFF	; 255
    6f04:	fd 4e       	sbci	r31, 0xED	; 237
    6f06:	a5 91       	lpm	r26, Z+
    6f08:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    6f0a:	fc 01       	movw	r30, r24
    6f0c:	eb 50       	subi	r30, 0x0B	; 11
    6f0e:	fe 4e       	sbci	r31, 0xEE	; 238
    6f10:	c5 91       	lpm	r28, Z+
    6f12:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    6f14:	61 11       	cpse	r22, r1
    6f16:	0d c0       	rjmp	.+26     	; 0x6f32 <pinMode+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    6f18:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    6f1a:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    6f1c:	8c 91       	ld	r24, X
    6f1e:	20 95       	com	r18
    6f20:	82 23       	and	r24, r18
    6f22:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    6f24:	88 81       	ld	r24, Y
    6f26:	28 23       	and	r18, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    6f28:	28 83       	st	Y, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    6f2a:	9f bf       	out	0x3f, r25	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    6f2c:	df 91       	pop	r29
    6f2e:	cf 91       	pop	r28
    6f30:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    6f32:	62 30       	cpi	r22, 0x02	; 2
    6f34:	51 f4       	brne	.+20     	; 0x6f4a <pinMode+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    6f36:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    6f38:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    6f3a:	3c 91       	ld	r19, X
    6f3c:	82 2f       	mov	r24, r18
    6f3e:	80 95       	com	r24
    6f40:	83 23       	and	r24, r19
    6f42:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    6f44:	e8 81       	ld	r30, Y
    6f46:	2e 2b       	or	r18, r30
    6f48:	ef cf       	rjmp	.-34     	; 0x6f28 <pinMode+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    6f4a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    6f4c:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    6f4e:	ec 91       	ld	r30, X
    6f50:	2e 2b       	or	r18, r30
    6f52:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    6f54:	8f bf       	out	0x3f, r24	; 63
    6f56:	ea cf       	rjmp	.-44     	; 0x6f2c <pinMode+0x4c>

00006f58 <digitalWrite>:
digitalWrite():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6f58:	1f 93       	push	r17
    6f5a:	cf 93       	push	r28
    6f5c:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    6f5e:	28 2f       	mov	r18, r24
    6f60:	30 e0       	ldi	r19, 0x00	; 0
    6f62:	f9 01       	movw	r30, r18
    6f64:	e8 56       	subi	r30, 0x68	; 104
    6f66:	fe 4e       	sbci	r31, 0xEE	; 238
    6f68:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    6f6a:	f9 01       	movw	r30, r18
    6f6c:	ed 54       	subi	r30, 0x4D	; 77
    6f6e:	fe 4e       	sbci	r31, 0xEE	; 238
    6f70:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    6f72:	f9 01       	movw	r30, r18
    6f74:	e2 53       	subi	r30, 0x32	; 50
    6f76:	fe 4e       	sbci	r31, 0xEE	; 238
    6f78:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    6f7a:	cc 23       	and	r28, r28
    6f7c:	a9 f0       	breq	.+42     	; 0x6fa8 <digitalWrite+0x50>
    6f7e:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f80:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    6f82:	0e 94 2a 37 	call	0x6e54	; 0x6e54 <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    6f86:	ec 2f       	mov	r30, r28
    6f88:	f0 e0       	ldi	r31, 0x00	; 0
    6f8a:	ee 0f       	add	r30, r30
    6f8c:	ff 1f       	adc	r31, r31
    6f8e:	eb 50       	subi	r30, 0x0B	; 11
    6f90:	fe 4e       	sbci	r31, 0xEE	; 238
    6f92:	a5 91       	lpm	r26, Z+
    6f94:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    6f96:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    6f98:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    6f9a:	ec 91       	ld	r30, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    6f9c:	11 11       	cpse	r17, r1
    6f9e:	08 c0       	rjmp	.+16     	; 0x6fb0 <digitalWrite+0x58>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    6fa0:	d0 95       	com	r29
    6fa2:	de 23       	and	r29, r30
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    6fa4:	dc 93       	st	X, r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    6fa6:	8f bf       	out	0x3f, r24	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    6fa8:	df 91       	pop	r29
    6faa:	cf 91       	pop	r28
    6fac:	1f 91       	pop	r17
    6fae:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    6fb0:	de 2b       	or	r29, r30
    6fb2:	f8 cf       	rjmp	.-16     	; 0x6fa4 <digitalWrite+0x4c>

00006fb4 <digitalRead>:
digitalRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    6fb4:	cf 93       	push	r28
    6fb6:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    6fb8:	28 2f       	mov	r18, r24
    6fba:	30 e0       	ldi	r19, 0x00	; 0
    6fbc:	f9 01       	movw	r30, r18
    6fbe:	e8 56       	subi	r30, 0x68	; 104
    6fc0:	fe 4e       	sbci	r31, 0xEE	; 238
    6fc2:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    6fc4:	f9 01       	movw	r30, r18
    6fc6:	ed 54       	subi	r30, 0x4D	; 77
    6fc8:	fe 4e       	sbci	r31, 0xEE	; 238
    6fca:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    6fcc:	f9 01       	movw	r30, r18
    6fce:	e2 53       	subi	r30, 0x32	; 50
    6fd0:	fe 4e       	sbci	r31, 0xEE	; 238
    6fd2:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    6fd4:	cc 23       	and	r28, r28
    6fd6:	a1 f0       	breq	.+40     	; 0x7000 <digitalRead+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6fd8:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    6fda:	0e 94 2a 37 	call	0x6e54	; 0x6e54 <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    6fde:	ec 2f       	mov	r30, r28
    6fe0:	f0 e0       	ldi	r31, 0x00	; 0
    6fe2:	ee 0f       	add	r30, r30
    6fe4:	ff 1f       	adc	r31, r31
    6fe6:	e7 51       	subi	r30, 0x17	; 23
    6fe8:	fe 4e       	sbci	r31, 0xEE	; 238
    6fea:	a5 91       	lpm	r26, Z+
    6fec:	b4 91       	lpm	r27, Z
    6fee:	ec 91       	ld	r30, X
    6ff0:	ed 23       	and	r30, r29
    6ff2:	81 e0       	ldi	r24, 0x01	; 1
    6ff4:	90 e0       	ldi	r25, 0x00	; 0
    6ff6:	09 f4       	brne	.+2      	; 0x6ffa <digitalRead+0x46>
    6ff8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    6ffa:	df 91       	pop	r29
    6ffc:	cf 91       	pop	r28
    6ffe:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    7000:	80 e0       	ldi	r24, 0x00	; 0
    7002:	90 e0       	ldi	r25, 0x00	; 0
    7004:	fa cf       	rjmp	.-12     	; 0x6ffa <digitalRead+0x46>

00007006 <__subsf3>:
__subsf3():
    7006:	50 58       	subi	r21, 0x80	; 128

00007008 <__addsf3>:
    7008:	bb 27       	eor	r27, r27
    700a:	aa 27       	eor	r26, r26
    700c:	0e 94 1b 38 	call	0x7036	; 0x7036 <__addsf3x>
    7010:	0c 94 95 39 	jmp	0x732a	; 0x732a <__fp_round>
__addsf3():
    7014:	0e 94 87 39 	call	0x730e	; 0x730e <__fp_pscA>
    7018:	38 f0       	brcs	.+14     	; 0x7028 <__addsf3+0x20>
    701a:	0e 94 8e 39 	call	0x731c	; 0x731c <__fp_pscB>
    701e:	20 f0       	brcs	.+8      	; 0x7028 <__addsf3+0x20>
    7020:	39 f4       	brne	.+14     	; 0x7030 <__addsf3+0x28>
    7022:	9f 3f       	cpi	r25, 0xFF	; 255
    7024:	19 f4       	brne	.+6      	; 0x702c <__addsf3+0x24>
    7026:	26 f4       	brtc	.+8      	; 0x7030 <__addsf3+0x28>
    7028:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__fp_nan>
    702c:	0e f4       	brtc	.+2      	; 0x7030 <__addsf3+0x28>
    702e:	e0 95       	com	r30
    7030:	e7 fb       	bst	r30, 7
    7032:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__fp_inf>

00007036 <__addsf3x>:
__addsf3x():
    7036:	e9 2f       	mov	r30, r25
    7038:	0e 94 a6 39 	call	0x734c	; 0x734c <__fp_split3>
    703c:	58 f3       	brcs	.-42     	; 0x7014 <__addsf3+0xc>
    703e:	ba 17       	cp	r27, r26
    7040:	62 07       	cpc	r22, r18
    7042:	73 07       	cpc	r23, r19
    7044:	84 07       	cpc	r24, r20
    7046:	95 07       	cpc	r25, r21
    7048:	20 f0       	brcs	.+8      	; 0x7052 <__addsf3x+0x1c>
    704a:	79 f4       	brne	.+30     	; 0x706a <__addsf3x+0x34>
    704c:	a6 f5       	brtc	.+104    	; 0x70b6 <__addsf3x+0x80>
    704e:	0c 94 c8 39 	jmp	0x7390	; 0x7390 <__fp_zero>
    7052:	0e f4       	brtc	.+2      	; 0x7056 <__addsf3x+0x20>
    7054:	e0 95       	com	r30
    7056:	0b 2e       	mov	r0, r27
    7058:	ba 2f       	mov	r27, r26
    705a:	a0 2d       	mov	r26, r0
    705c:	0b 01       	movw	r0, r22
    705e:	b9 01       	movw	r22, r18
    7060:	90 01       	movw	r18, r0
    7062:	0c 01       	movw	r0, r24
    7064:	ca 01       	movw	r24, r20
    7066:	a0 01       	movw	r20, r0
    7068:	11 24       	eor	r1, r1
    706a:	ff 27       	eor	r31, r31
    706c:	59 1b       	sub	r21, r25
    706e:	99 f0       	breq	.+38     	; 0x7096 <__addsf3x+0x60>
    7070:	59 3f       	cpi	r21, 0xF9	; 249
    7072:	50 f4       	brcc	.+20     	; 0x7088 <__addsf3x+0x52>
    7074:	50 3e       	cpi	r21, 0xE0	; 224
    7076:	68 f1       	brcs	.+90     	; 0x70d2 <__addsf3x+0x9c>
    7078:	1a 16       	cp	r1, r26
    707a:	f0 40       	sbci	r31, 0x00	; 0
    707c:	a2 2f       	mov	r26, r18
    707e:	23 2f       	mov	r18, r19
    7080:	34 2f       	mov	r19, r20
    7082:	44 27       	eor	r20, r20
    7084:	58 5f       	subi	r21, 0xF8	; 248
    7086:	f3 cf       	rjmp	.-26     	; 0x706e <__addsf3x+0x38>
    7088:	46 95       	lsr	r20
    708a:	37 95       	ror	r19
    708c:	27 95       	ror	r18
    708e:	a7 95       	ror	r26
    7090:	f0 40       	sbci	r31, 0x00	; 0
    7092:	53 95       	inc	r21
    7094:	c9 f7       	brne	.-14     	; 0x7088 <__addsf3x+0x52>
    7096:	7e f4       	brtc	.+30     	; 0x70b6 <__addsf3x+0x80>
    7098:	1f 16       	cp	r1, r31
    709a:	ba 0b       	sbc	r27, r26
    709c:	62 0b       	sbc	r22, r18
    709e:	73 0b       	sbc	r23, r19
    70a0:	84 0b       	sbc	r24, r20
    70a2:	ba f0       	brmi	.+46     	; 0x70d2 <__addsf3x+0x9c>
    70a4:	91 50       	subi	r25, 0x01	; 1
    70a6:	a1 f0       	breq	.+40     	; 0x70d0 <__addsf3x+0x9a>
    70a8:	ff 0f       	add	r31, r31
    70aa:	bb 1f       	adc	r27, r27
    70ac:	66 1f       	adc	r22, r22
    70ae:	77 1f       	adc	r23, r23
    70b0:	88 1f       	adc	r24, r24
    70b2:	c2 f7       	brpl	.-16     	; 0x70a4 <__addsf3x+0x6e>
    70b4:	0e c0       	rjmp	.+28     	; 0x70d2 <__addsf3x+0x9c>
    70b6:	ba 0f       	add	r27, r26
    70b8:	62 1f       	adc	r22, r18
    70ba:	73 1f       	adc	r23, r19
    70bc:	84 1f       	adc	r24, r20
    70be:	48 f4       	brcc	.+18     	; 0x70d2 <__addsf3x+0x9c>
    70c0:	87 95       	ror	r24
    70c2:	77 95       	ror	r23
    70c4:	67 95       	ror	r22
    70c6:	b7 95       	ror	r27
    70c8:	f7 95       	ror	r31
    70ca:	9e 3f       	cpi	r25, 0xFE	; 254
    70cc:	08 f0       	brcs	.+2      	; 0x70d0 <__addsf3x+0x9a>
    70ce:	b0 cf       	rjmp	.-160    	; 0x7030 <__addsf3+0x28>
    70d0:	93 95       	inc	r25
    70d2:	88 0f       	add	r24, r24
    70d4:	08 f0       	brcs	.+2      	; 0x70d8 <__addsf3x+0xa2>
    70d6:	99 27       	eor	r25, r25
    70d8:	ee 0f       	add	r30, r30
    70da:	97 95       	ror	r25
    70dc:	87 95       	ror	r24
    70de:	08 95       	ret

000070e0 <__cmpsf2>:
    70e0:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__fp_cmp>
    70e4:	08 f4       	brcc	.+2      	; 0x70e8 <__cmpsf2+0x8>
    70e6:	81 e0       	ldi	r24, 0x01	; 1
    70e8:	08 95       	ret

000070ea <__divsf3>:
    70ea:	0e 94 89 38 	call	0x7112	; 0x7112 <__divsf3x>
    70ee:	0c 94 95 39 	jmp	0x732a	; 0x732a <__fp_round>
    70f2:	0e 94 8e 39 	call	0x731c	; 0x731c <__fp_pscB>
    70f6:	58 f0       	brcs	.+22     	; 0x710e <__divsf3+0x24>
    70f8:	0e 94 87 39 	call	0x730e	; 0x730e <__fp_pscA>
    70fc:	40 f0       	brcs	.+16     	; 0x710e <__divsf3+0x24>
    70fe:	29 f4       	brne	.+10     	; 0x710a <__divsf3+0x20>
    7100:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    7102:	29 f0       	breq	.+10     	; 0x710e <__divsf3+0x24>
    7104:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__fp_inf>
    7108:	51 11       	cpse	r21, r1
    710a:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__fp_szero>
    710e:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__fp_nan>

00007112 <__divsf3x>:
__divsf3x():
    7112:	0e 94 a6 39 	call	0x734c	; 0x734c <__fp_split3>
    7116:	68 f3       	brcs	.-38     	; 0x70f2 <__divsf3+0x8>

00007118 <__divsf3_pse>:
    7118:	99 23       	and	r25, r25
    711a:	b1 f3       	breq	.-20     	; 0x7108 <__divsf3+0x1e>
    711c:	55 23       	and	r21, r21
    711e:	91 f3       	breq	.-28     	; 0x7104 <__divsf3+0x1a>
    7120:	95 1b       	sub	r25, r21
    7122:	55 0b       	sbc	r21, r21
    7124:	bb 27       	eor	r27, r27
    7126:	aa 27       	eor	r26, r26
    7128:	62 17       	cp	r22, r18
    712a:	73 07       	cpc	r23, r19
    712c:	84 07       	cpc	r24, r20
    712e:	38 f0       	brcs	.+14     	; 0x713e <__divsf3_pse+0x26>
    7130:	9f 5f       	subi	r25, 0xFF	; 255
    7132:	5f 4f       	sbci	r21, 0xFF	; 255
    7134:	22 0f       	add	r18, r18
    7136:	33 1f       	adc	r19, r19
    7138:	44 1f       	adc	r20, r20
    713a:	aa 1f       	adc	r26, r26
    713c:	a9 f3       	breq	.-22     	; 0x7128 <__divsf3_pse+0x10>
    713e:	35 d0       	rcall	.+106    	; 0x71aa <__divsf3_pse+0x92>
    7140:	0e 2e       	mov	r0, r30
    7142:	3a f0       	brmi	.+14     	; 0x7152 <__divsf3_pse+0x3a>
    7144:	e0 e8       	ldi	r30, 0x80	; 128
    7146:	32 d0       	rcall	.+100    	; 0x71ac <__divsf3_pse+0x94>
    7148:	91 50       	subi	r25, 0x01	; 1
    714a:	50 40       	sbci	r21, 0x00	; 0
    714c:	e6 95       	lsr	r30
    714e:	00 1c       	adc	r0, r0
    7150:	ca f7       	brpl	.-14     	; 0x7144 <__divsf3_pse+0x2c>
    7152:	2b d0       	rcall	.+86     	; 0x71aa <__divsf3_pse+0x92>
    7154:	fe 2f       	mov	r31, r30
    7156:	29 d0       	rcall	.+82     	; 0x71aa <__divsf3_pse+0x92>
    7158:	66 0f       	add	r22, r22
    715a:	77 1f       	adc	r23, r23
    715c:	88 1f       	adc	r24, r24
    715e:	bb 1f       	adc	r27, r27
    7160:	26 17       	cp	r18, r22
    7162:	37 07       	cpc	r19, r23
    7164:	48 07       	cpc	r20, r24
    7166:	ab 07       	cpc	r26, r27
    7168:	b0 e8       	ldi	r27, 0x80	; 128
    716a:	09 f0       	breq	.+2      	; 0x716e <__divsf3_pse+0x56>
    716c:	bb 0b       	sbc	r27, r27
    716e:	80 2d       	mov	r24, r0
    7170:	bf 01       	movw	r22, r30
    7172:	ff 27       	eor	r31, r31
    7174:	93 58       	subi	r25, 0x83	; 131
    7176:	5f 4f       	sbci	r21, 0xFF	; 255
    7178:	3a f0       	brmi	.+14     	; 0x7188 <__divsf3_pse+0x70>
    717a:	9e 3f       	cpi	r25, 0xFE	; 254
    717c:	51 05       	cpc	r21, r1
    717e:	78 f0       	brcs	.+30     	; 0x719e <__divsf3_pse+0x86>
    7180:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__fp_inf>
    7184:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__fp_szero>
    7188:	5f 3f       	cpi	r21, 0xFF	; 255
    718a:	e4 f3       	brlt	.-8      	; 0x7184 <__divsf3_pse+0x6c>
    718c:	98 3e       	cpi	r25, 0xE8	; 232
    718e:	d4 f3       	brlt	.-12     	; 0x7184 <__divsf3_pse+0x6c>
    7190:	86 95       	lsr	r24
    7192:	77 95       	ror	r23
    7194:	67 95       	ror	r22
    7196:	b7 95       	ror	r27
    7198:	f7 95       	ror	r31
    719a:	9f 5f       	subi	r25, 0xFF	; 255
    719c:	c9 f7       	brne	.-14     	; 0x7190 <__divsf3_pse+0x78>
    719e:	88 0f       	add	r24, r24
    71a0:	91 1d       	adc	r25, r1
    71a2:	96 95       	lsr	r25
    71a4:	87 95       	ror	r24
    71a6:	97 f9       	bld	r25, 7
    71a8:	08 95       	ret
    71aa:	e1 e0       	ldi	r30, 0x01	; 1
    71ac:	66 0f       	add	r22, r22
    71ae:	77 1f       	adc	r23, r23
    71b0:	88 1f       	adc	r24, r24
    71b2:	bb 1f       	adc	r27, r27
    71b4:	62 17       	cp	r22, r18
    71b6:	73 07       	cpc	r23, r19
    71b8:	84 07       	cpc	r24, r20
    71ba:	ba 07       	cpc	r27, r26
    71bc:	20 f0       	brcs	.+8      	; 0x71c6 <__divsf3_pse+0xae>
    71be:	62 1b       	sub	r22, r18
    71c0:	73 0b       	sbc	r23, r19
    71c2:	84 0b       	sbc	r24, r20
    71c4:	ba 0b       	sbc	r27, r26
    71c6:	ee 1f       	adc	r30, r30
    71c8:	88 f7       	brcc	.-30     	; 0x71ac <__divsf3_pse+0x94>
    71ca:	e0 95       	com	r30
    71cc:	08 95       	ret

000071ce <__fixsfsi>:
    71ce:	0e 94 ee 38 	call	0x71dc	; 0x71dc <__fixunssfsi>
    71d2:	68 94       	set
    71d4:	b1 11       	cpse	r27, r1
    71d6:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__fp_szero>
    71da:	08 95       	ret

000071dc <__fixunssfsi>:
    71dc:	0e 94 ae 39 	call	0x735c	; 0x735c <__fp_splitA>
    71e0:	88 f0       	brcs	.+34     	; 0x7204 <__fixunssfsi+0x28>
    71e2:	9f 57       	subi	r25, 0x7F	; 127
    71e4:	98 f0       	brcs	.+38     	; 0x720c <__fixunssfsi+0x30>
    71e6:	b9 2f       	mov	r27, r25
    71e8:	99 27       	eor	r25, r25
    71ea:	b7 51       	subi	r27, 0x17	; 23
    71ec:	b0 f0       	brcs	.+44     	; 0x721a <__fixunssfsi+0x3e>
__fixunssfsi():
    71ee:	e1 f0       	breq	.+56     	; 0x7228 <__fixunssfsi+0x4c>
    71f0:	66 0f       	add	r22, r22
    71f2:	77 1f       	adc	r23, r23
    71f4:	88 1f       	adc	r24, r24
    71f6:	99 1f       	adc	r25, r25
    71f8:	1a f0       	brmi	.+6      	; 0x7200 <__fixunssfsi+0x24>
    71fa:	ba 95       	dec	r27
    71fc:	c9 f7       	brne	.-14     	; 0x71f0 <__fixunssfsi+0x14>
    71fe:	14 c0       	rjmp	.+40     	; 0x7228 <__fixunssfsi+0x4c>
    7200:	b1 30       	cpi	r27, 0x01	; 1
    7202:	91 f0       	breq	.+36     	; 0x7228 <__fixunssfsi+0x4c>
    7204:	0e 94 c8 39 	call	0x7390	; 0x7390 <__fp_zero>
    7208:	b1 e0       	ldi	r27, 0x01	; 1
    720a:	08 95       	ret
    720c:	0c 94 c8 39 	jmp	0x7390	; 0x7390 <__fp_zero>
    7210:	67 2f       	mov	r22, r23
    7212:	78 2f       	mov	r23, r24
    7214:	88 27       	eor	r24, r24
    7216:	b8 5f       	subi	r27, 0xF8	; 248
    7218:	39 f0       	breq	.+14     	; 0x7228 <__fixunssfsi+0x4c>
    721a:	b9 3f       	cpi	r27, 0xF9	; 249
    721c:	cc f3       	brlt	.-14     	; 0x7210 <__fixunssfsi+0x34>
    721e:	86 95       	lsr	r24
    7220:	77 95       	ror	r23
    7222:	67 95       	ror	r22
    7224:	b3 95       	inc	r27
    7226:	d9 f7       	brne	.-10     	; 0x721e <__fixunssfsi+0x42>
    7228:	3e f4       	brtc	.+14     	; 0x7238 <__fixunssfsi+0x5c>
    722a:	90 95       	com	r25
    722c:	80 95       	com	r24
    722e:	70 95       	com	r23
    7230:	61 95       	neg	r22
    7232:	7f 4f       	sbci	r23, 0xFF	; 255
    7234:	8f 4f       	sbci	r24, 0xFF	; 255
    7236:	9f 4f       	sbci	r25, 0xFF	; 255
    7238:	08 95       	ret

0000723a <__floatunsisf>:
__floatunsisf():
    723a:	e8 94       	clt
    723c:	09 c0       	rjmp	.+18     	; 0x7250 <__floatsisf+0x12>

0000723e <__floatsisf>:
    723e:	97 fb       	bst	r25, 7
    7240:	3e f4       	brtc	.+14     	; 0x7250 <__floatsisf+0x12>
    7242:	90 95       	com	r25
    7244:	80 95       	com	r24
    7246:	70 95       	com	r23
    7248:	61 95       	neg	r22
    724a:	7f 4f       	sbci	r23, 0xFF	; 255
    724c:	8f 4f       	sbci	r24, 0xFF	; 255
    724e:	9f 4f       	sbci	r25, 0xFF	; 255
    7250:	99 23       	and	r25, r25
    7252:	a9 f0       	breq	.+42     	; 0x727e <__floatsisf+0x40>
    7254:	f9 2f       	mov	r31, r25
    7256:	96 e9       	ldi	r25, 0x96	; 150
    7258:	bb 27       	eor	r27, r27
    725a:	93 95       	inc	r25
    725c:	f6 95       	lsr	r31
    725e:	87 95       	ror	r24
    7260:	77 95       	ror	r23
    7262:	67 95       	ror	r22
    7264:	b7 95       	ror	r27
    7266:	f1 11       	cpse	r31, r1
    7268:	f8 cf       	rjmp	.-16     	; 0x725a <__floatsisf+0x1c>
    726a:	fa f4       	brpl	.+62     	; 0x72aa <__floatsisf+0x6c>
    726c:	bb 0f       	add	r27, r27
    726e:	11 f4       	brne	.+4      	; 0x7274 <__floatsisf+0x36>
    7270:	60 ff       	sbrs	r22, 0
    7272:	1b c0       	rjmp	.+54     	; 0x72aa <__floatsisf+0x6c>
    7274:	6f 5f       	subi	r22, 0xFF	; 255
    7276:	7f 4f       	sbci	r23, 0xFF	; 255
    7278:	8f 4f       	sbci	r24, 0xFF	; 255
    727a:	9f 4f       	sbci	r25, 0xFF	; 255
    727c:	16 c0       	rjmp	.+44     	; 0x72aa <__floatsisf+0x6c>
    727e:	88 23       	and	r24, r24
    7280:	11 f0       	breq	.+4      	; 0x7286 <__floatsisf+0x48>
    7282:	96 e9       	ldi	r25, 0x96	; 150
    7284:	11 c0       	rjmp	.+34     	; 0x72a8 <__floatsisf+0x6a>
    7286:	77 23       	and	r23, r23
    7288:	21 f0       	breq	.+8      	; 0x7292 <__floatsisf+0x54>
    728a:	9e e8       	ldi	r25, 0x8E	; 142
    728c:	87 2f       	mov	r24, r23
    728e:	76 2f       	mov	r23, r22
    7290:	05 c0       	rjmp	.+10     	; 0x729c <__floatsisf+0x5e>
    7292:	66 23       	and	r22, r22
    7294:	71 f0       	breq	.+28     	; 0x72b2 <__floatsisf+0x74>
    7296:	96 e8       	ldi	r25, 0x86	; 134
    7298:	86 2f       	mov	r24, r22
    729a:	70 e0       	ldi	r23, 0x00	; 0
    729c:	60 e0       	ldi	r22, 0x00	; 0
    729e:	2a f0       	brmi	.+10     	; 0x72aa <__floatsisf+0x6c>
    72a0:	9a 95       	dec	r25
    72a2:	66 0f       	add	r22, r22
    72a4:	77 1f       	adc	r23, r23
    72a6:	88 1f       	adc	r24, r24
    72a8:	da f7       	brpl	.-10     	; 0x72a0 <__floatsisf+0x62>
    72aa:	88 0f       	add	r24, r24
    72ac:	96 95       	lsr	r25
    72ae:	87 95       	ror	r24
    72b0:	97 f9       	bld	r25, 7
    72b2:	08 95       	ret

000072b4 <__fp_cmp>:
__fp_cmp():
    72b4:	99 0f       	add	r25, r25
    72b6:	00 08       	sbc	r0, r0
    72b8:	55 0f       	add	r21, r21
    72ba:	aa 0b       	sbc	r26, r26
    72bc:	e0 e8       	ldi	r30, 0x80	; 128
    72be:	fe ef       	ldi	r31, 0xFE	; 254
    72c0:	16 16       	cp	r1, r22
    72c2:	17 06       	cpc	r1, r23
    72c4:	e8 07       	cpc	r30, r24
    72c6:	f9 07       	cpc	r31, r25
    72c8:	c0 f0       	brcs	.+48     	; 0x72fa <__fp_cmp+0x46>
    72ca:	12 16       	cp	r1, r18
    72cc:	13 06       	cpc	r1, r19
    72ce:	e4 07       	cpc	r30, r20
    72d0:	f5 07       	cpc	r31, r21
    72d2:	98 f0       	brcs	.+38     	; 0x72fa <__fp_cmp+0x46>
    72d4:	62 1b       	sub	r22, r18
    72d6:	73 0b       	sbc	r23, r19
    72d8:	84 0b       	sbc	r24, r20
    72da:	95 0b       	sbc	r25, r21
    72dc:	39 f4       	brne	.+14     	; 0x72ec <__fp_cmp+0x38>
    72de:	0a 26       	eor	r0, r26
    72e0:	61 f0       	breq	.+24     	; 0x72fa <__fp_cmp+0x46>
    72e2:	23 2b       	or	r18, r19
    72e4:	24 2b       	or	r18, r20
    72e6:	25 2b       	or	r18, r21
    72e8:	21 f4       	brne	.+8      	; 0x72f2 <__fp_cmp+0x3e>
    72ea:	08 95       	ret
    72ec:	0a 26       	eor	r0, r26
    72ee:	09 f4       	brne	.+2      	; 0x72f2 <__fp_cmp+0x3e>
    72f0:	a1 40       	sbci	r26, 0x01	; 1
    72f2:	a6 95       	lsr	r26
    72f4:	8f ef       	ldi	r24, 0xFF	; 255
    72f6:	81 1d       	adc	r24, r1
    72f8:	81 1d       	adc	r24, r1
    72fa:	08 95       	ret

000072fc <__fp_inf>:
__fp_inf():
    72fc:	97 f9       	bld	r25, 7
    72fe:	9f 67       	ori	r25, 0x7F	; 127
    7300:	80 e8       	ldi	r24, 0x80	; 128
    7302:	70 e0       	ldi	r23, 0x00	; 0
    7304:	60 e0       	ldi	r22, 0x00	; 0
    7306:	08 95       	ret

00007308 <__fp_nan>:
__fp_nan():
    7308:	9f ef       	ldi	r25, 0xFF	; 255
    730a:	80 ec       	ldi	r24, 0xC0	; 192
    730c:	08 95       	ret

0000730e <__fp_pscA>:
__fp_pscA():
    730e:	00 24       	eor	r0, r0
    7310:	0a 94       	dec	r0
    7312:	16 16       	cp	r1, r22
    7314:	17 06       	cpc	r1, r23
    7316:	18 06       	cpc	r1, r24
    7318:	09 06       	cpc	r0, r25
    731a:	08 95       	ret

0000731c <__fp_pscB>:
__fp_pscB():
    731c:	00 24       	eor	r0, r0
    731e:	0a 94       	dec	r0
    7320:	12 16       	cp	r1, r18
    7322:	13 06       	cpc	r1, r19
    7324:	14 06       	cpc	r1, r20
    7326:	05 06       	cpc	r0, r21
    7328:	08 95       	ret

0000732a <__fp_round>:
__fp_round():
    732a:	09 2e       	mov	r0, r25
    732c:	03 94       	inc	r0
    732e:	00 0c       	add	r0, r0
    7330:	11 f4       	brne	.+4      	; 0x7336 <__fp_round+0xc>
    7332:	88 23       	and	r24, r24
    7334:	52 f0       	brmi	.+20     	; 0x734a <__fp_round+0x20>
    7336:	bb 0f       	add	r27, r27
    7338:	40 f4       	brcc	.+16     	; 0x734a <__fp_round+0x20>
    733a:	bf 2b       	or	r27, r31
    733c:	11 f4       	brne	.+4      	; 0x7342 <__fp_round+0x18>
    733e:	60 ff       	sbrs	r22, 0
    7340:	04 c0       	rjmp	.+8      	; 0x734a <__fp_round+0x20>
    7342:	6f 5f       	subi	r22, 0xFF	; 255
    7344:	7f 4f       	sbci	r23, 0xFF	; 255
    7346:	8f 4f       	sbci	r24, 0xFF	; 255
    7348:	9f 4f       	sbci	r25, 0xFF	; 255
    734a:	08 95       	ret

0000734c <__fp_split3>:
__fp_split3():
    734c:	57 fd       	sbrc	r21, 7
    734e:	90 58       	subi	r25, 0x80	; 128
    7350:	44 0f       	add	r20, r20
    7352:	55 1f       	adc	r21, r21
    7354:	59 f0       	breq	.+22     	; 0x736c <__fp_splitA+0x10>
    7356:	5f 3f       	cpi	r21, 0xFF	; 255
    7358:	71 f0       	breq	.+28     	; 0x7376 <__fp_splitA+0x1a>
    735a:	47 95       	ror	r20

0000735c <__fp_splitA>:
    735c:	88 0f       	add	r24, r24
    735e:	97 fb       	bst	r25, 7
    7360:	99 1f       	adc	r25, r25
    7362:	61 f0       	breq	.+24     	; 0x737c <__fp_splitA+0x20>
    7364:	9f 3f       	cpi	r25, 0xFF	; 255
    7366:	79 f0       	breq	.+30     	; 0x7386 <__fp_splitA+0x2a>
    7368:	87 95       	ror	r24
    736a:	08 95       	ret
    736c:	12 16       	cp	r1, r18
    736e:	13 06       	cpc	r1, r19
    7370:	14 06       	cpc	r1, r20
    7372:	55 1f       	adc	r21, r21
    7374:	f2 cf       	rjmp	.-28     	; 0x735a <__fp_split3+0xe>
    7376:	46 95       	lsr	r20
    7378:	f1 df       	rcall	.-30     	; 0x735c <__fp_splitA>
    737a:	08 c0       	rjmp	.+16     	; 0x738c <__fp_splitA+0x30>
    737c:	16 16       	cp	r1, r22
    737e:	17 06       	cpc	r1, r23
    7380:	18 06       	cpc	r1, r24
    7382:	99 1f       	adc	r25, r25
    7384:	f1 cf       	rjmp	.-30     	; 0x7368 <__fp_splitA+0xc>
    7386:	86 95       	lsr	r24
    7388:	71 05       	cpc	r23, r1
    738a:	61 05       	cpc	r22, r1
    738c:	08 94       	sec
    738e:	08 95       	ret

00007390 <__fp_zero>:
__fp_zero():
    7390:	e8 94       	clt

00007392 <__fp_szero>:
    7392:	bb 27       	eor	r27, r27
    7394:	66 27       	eor	r22, r22
    7396:	77 27       	eor	r23, r23
    7398:	cb 01       	movw	r24, r22
    739a:	97 f9       	bld	r25, 7
    739c:	08 95       	ret

0000739e <__gesf2>:
__gesf2():
    739e:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__fp_cmp>
    73a2:	08 f4       	brcc	.+2      	; 0x73a6 <__gesf2+0x8>
    73a4:	8f ef       	ldi	r24, 0xFF	; 255
    73a6:	08 95       	ret
    73a8:	16 f0       	brts	.+4      	; 0x73ae <__gesf2+0x10>
    73aa:	0c 94 dc 3a 	jmp	0x75b8	; 0x75b8 <__fp_mpack>
    73ae:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__fp_nan>
    73b2:	68 94       	set
    73b4:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__fp_inf>

000073b8 <log>:
log():
    73b8:	0e 94 ae 39 	call	0x735c	; 0x735c <__fp_splitA>
    73bc:	a8 f3       	brcs	.-22     	; 0x73a8 <__gesf2+0xa>
    73be:	99 23       	and	r25, r25
    73c0:	c1 f3       	breq	.-16     	; 0x73b2 <__gesf2+0x14>
    73c2:	ae f3       	brts	.-22     	; 0x73ae <__gesf2+0x10>
    73c4:	df 93       	push	r29
    73c6:	cf 93       	push	r28
    73c8:	1f 93       	push	r17
    73ca:	0f 93       	push	r16
    73cc:	ff 92       	push	r15
    73ce:	c9 2f       	mov	r28, r25
    73d0:	dd 27       	eor	r29, r29
    73d2:	88 23       	and	r24, r24
    73d4:	2a f0       	brmi	.+10     	; 0x73e0 <log+0x28>
    73d6:	21 97       	sbiw	r28, 0x01	; 1
    73d8:	66 0f       	add	r22, r22
    73da:	77 1f       	adc	r23, r23
    73dc:	88 1f       	adc	r24, r24
    73de:	da f7       	brpl	.-10     	; 0x73d6 <log+0x1e>
    73e0:	20 e0       	ldi	r18, 0x00	; 0
    73e2:	30 e0       	ldi	r19, 0x00	; 0
    73e4:	40 e8       	ldi	r20, 0x80	; 128
    73e6:	5f eb       	ldi	r21, 0xBF	; 191
    73e8:	9f e3       	ldi	r25, 0x3F	; 63
    73ea:	88 39       	cpi	r24, 0x98	; 152
    73ec:	20 f0       	brcs	.+8      	; 0x73f6 <log+0x3e>
    73ee:	80 3e       	cpi	r24, 0xE0	; 224
    73f0:	38 f0       	brcs	.+14     	; 0x7400 <log+0x48>
    73f2:	21 96       	adiw	r28, 0x01	; 1
    73f4:	8f 77       	andi	r24, 0x7F	; 127
    73f6:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    73fa:	e4 eb       	ldi	r30, 0xB4	; 180
    73fc:	f0 e0       	ldi	r31, 0x00	; 0
    73fe:	04 c0       	rjmp	.+8      	; 0x7408 <log+0x50>
    7400:	0e 94 04 38 	call	0x7008	; 0x7008 <__addsf3>
    7404:	e1 ee       	ldi	r30, 0xE1	; 225
    7406:	f0 e0       	ldi	r31, 0x00	; 0
    7408:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <__fp_powser>
    740c:	8b 01       	movw	r16, r22
    740e:	be 01       	movw	r22, r28
    7410:	ec 01       	movw	r28, r24
    7412:	fb 2e       	mov	r15, r27
    7414:	6f 57       	subi	r22, 0x7F	; 127
    7416:	71 09       	sbc	r23, r1
    7418:	75 95       	asr	r23
    741a:	77 1f       	adc	r23, r23
    741c:	88 0b       	sbc	r24, r24
    741e:	99 0b       	sbc	r25, r25
    7420:	0e 94 1f 39 	call	0x723e	; 0x723e <__floatsisf>
    7424:	28 e1       	ldi	r18, 0x18	; 24
    7426:	32 e7       	ldi	r19, 0x72	; 114
    7428:	41 e3       	ldi	r20, 0x31	; 49
    742a:	5f e3       	ldi	r21, 0x3F	; 63
    742c:	0e 94 37 3a 	call	0x746e	; 0x746e <__mulsf3x>
    7430:	af 2d       	mov	r26, r15
    7432:	98 01       	movw	r18, r16
    7434:	ae 01       	movw	r20, r28
    7436:	ff 90       	pop	r15
    7438:	0f 91       	pop	r16
    743a:	1f 91       	pop	r17
    743c:	cf 91       	pop	r28
    743e:	df 91       	pop	r29
    7440:	0e 94 1b 38 	call	0x7036	; 0x7036 <__addsf3x>
    7444:	0c 94 95 39 	jmp	0x732a	; 0x732a <__fp_round>

00007448 <__mulsf3>:
    7448:	0e 94 37 3a 	call	0x746e	; 0x746e <__mulsf3x>
    744c:	0c 94 95 39 	jmp	0x732a	; 0x732a <__fp_round>
    7450:	0e 94 87 39 	call	0x730e	; 0x730e <__fp_pscA>
    7454:	38 f0       	brcs	.+14     	; 0x7464 <__mulsf3+0x1c>
    7456:	0e 94 8e 39 	call	0x731c	; 0x731c <__fp_pscB>
__mulsf3():
    745a:	20 f0       	brcs	.+8      	; 0x7464 <__mulsf3+0x1c>
    745c:	95 23       	and	r25, r21
    745e:	11 f0       	breq	.+4      	; 0x7464 <__mulsf3+0x1c>
    7460:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__fp_inf>
    7464:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__fp_nan>
    7468:	11 24       	eor	r1, r1
    746a:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__fp_szero>

0000746e <__mulsf3x>:
__mulsf3x():
    746e:	0e 94 a6 39 	call	0x734c	; 0x734c <__fp_split3>
    7472:	70 f3       	brcs	.-36     	; 0x7450 <__mulsf3+0x8>

00007474 <__mulsf3_pse>:
    7474:	95 9f       	mul	r25, r21
    7476:	c1 f3       	breq	.-16     	; 0x7468 <__mulsf3+0x20>
    7478:	95 0f       	add	r25, r21
    747a:	50 e0       	ldi	r21, 0x00	; 0
    747c:	55 1f       	adc	r21, r21
    747e:	62 9f       	mul	r22, r18
    7480:	f0 01       	movw	r30, r0
    7482:	72 9f       	mul	r23, r18
    7484:	bb 27       	eor	r27, r27
    7486:	f0 0d       	add	r31, r0
    7488:	b1 1d       	adc	r27, r1
    748a:	63 9f       	mul	r22, r19
    748c:	aa 27       	eor	r26, r26
    748e:	f0 0d       	add	r31, r0
    7490:	b1 1d       	adc	r27, r1
    7492:	aa 1f       	adc	r26, r26
    7494:	64 9f       	mul	r22, r20
    7496:	66 27       	eor	r22, r22
    7498:	b0 0d       	add	r27, r0
    749a:	a1 1d       	adc	r26, r1
    749c:	66 1f       	adc	r22, r22
    749e:	82 9f       	mul	r24, r18
    74a0:	22 27       	eor	r18, r18
    74a2:	b0 0d       	add	r27, r0
    74a4:	a1 1d       	adc	r26, r1
    74a6:	62 1f       	adc	r22, r18
    74a8:	73 9f       	mul	r23, r19
    74aa:	b0 0d       	add	r27, r0
    74ac:	a1 1d       	adc	r26, r1
    74ae:	62 1f       	adc	r22, r18
    74b0:	83 9f       	mul	r24, r19
    74b2:	a0 0d       	add	r26, r0
    74b4:	61 1d       	adc	r22, r1
    74b6:	22 1f       	adc	r18, r18
    74b8:	74 9f       	mul	r23, r20
    74ba:	33 27       	eor	r19, r19
    74bc:	a0 0d       	add	r26, r0
    74be:	61 1d       	adc	r22, r1
    74c0:	23 1f       	adc	r18, r19
    74c2:	84 9f       	mul	r24, r20
    74c4:	60 0d       	add	r22, r0
    74c6:	21 1d       	adc	r18, r1
    74c8:	82 2f       	mov	r24, r18
    74ca:	76 2f       	mov	r23, r22
    74cc:	6a 2f       	mov	r22, r26
    74ce:	11 24       	eor	r1, r1
    74d0:	9f 57       	subi	r25, 0x7F	; 127
    74d2:	50 40       	sbci	r21, 0x00	; 0
    74d4:	9a f0       	brmi	.+38     	; 0x74fc <__mulsf3_pse+0x88>
    74d6:	f1 f0       	breq	.+60     	; 0x7514 <__mulsf3_pse+0xa0>
    74d8:	88 23       	and	r24, r24
    74da:	4a f0       	brmi	.+18     	; 0x74ee <__mulsf3_pse+0x7a>
    74dc:	ee 0f       	add	r30, r30
    74de:	ff 1f       	adc	r31, r31
    74e0:	bb 1f       	adc	r27, r27
    74e2:	66 1f       	adc	r22, r22
    74e4:	77 1f       	adc	r23, r23
    74e6:	88 1f       	adc	r24, r24
    74e8:	91 50       	subi	r25, 0x01	; 1
    74ea:	50 40       	sbci	r21, 0x00	; 0
    74ec:	a9 f7       	brne	.-22     	; 0x74d8 <__mulsf3_pse+0x64>
    74ee:	9e 3f       	cpi	r25, 0xFE	; 254
    74f0:	51 05       	cpc	r21, r1
    74f2:	80 f0       	brcs	.+32     	; 0x7514 <__mulsf3_pse+0xa0>
    74f4:	0c 94 7e 39 	jmp	0x72fc	; 0x72fc <__fp_inf>
    74f8:	0c 94 c9 39 	jmp	0x7392	; 0x7392 <__fp_szero>
    74fc:	5f 3f       	cpi	r21, 0xFF	; 255
    74fe:	e4 f3       	brlt	.-8      	; 0x74f8 <__mulsf3_pse+0x84>
    7500:	98 3e       	cpi	r25, 0xE8	; 232
    7502:	d4 f3       	brlt	.-12     	; 0x74f8 <__mulsf3_pse+0x84>
    7504:	86 95       	lsr	r24
    7506:	77 95       	ror	r23
    7508:	67 95       	ror	r22
    750a:	b7 95       	ror	r27
    750c:	f7 95       	ror	r31
    750e:	e7 95       	ror	r30
    7510:	9f 5f       	subi	r25, 0xFF	; 255
    7512:	c1 f7       	brne	.-16     	; 0x7504 <__mulsf3_pse+0x90>
    7514:	fe 2b       	or	r31, r30
    7516:	88 0f       	add	r24, r24
    7518:	91 1d       	adc	r25, r1
    751a:	96 95       	lsr	r25
    751c:	87 95       	ror	r24
    751e:	97 f9       	bld	r25, 7
    7520:	08 95       	ret
    7522:	19 f4       	brne	.+6      	; 0x752a <__mulsf3_pse+0xb6>
    7524:	16 f4       	brtc	.+4      	; 0x752a <__mulsf3_pse+0xb6>
    7526:	0c 94 84 39 	jmp	0x7308	; 0x7308 <__fp_nan>
    752a:	0c 94 dc 3a 	jmp	0x75b8	; 0x75b8 <__fp_mpack>

0000752e <sqrt>:
    752e:	0e 94 ae 39 	call	0x735c	; 0x735c <__fp_splitA>
    7532:	b8 f3       	brcs	.-18     	; 0x7522 <__mulsf3_pse+0xae>
    7534:	99 23       	and	r25, r25
    7536:	c9 f3       	breq	.-14     	; 0x752a <__mulsf3_pse+0xb6>
    7538:	b6 f3       	brts	.-20     	; 0x7526 <__mulsf3_pse+0xb2>
    753a:	9f 57       	subi	r25, 0x7F	; 127
    753c:	55 0b       	sbc	r21, r21
    753e:	87 ff       	sbrs	r24, 7
sqrt():
    7540:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <__fp_norm2>
    7544:	00 24       	eor	r0, r0
    7546:	a0 e6       	ldi	r26, 0x60	; 96
    7548:	40 ea       	ldi	r20, 0xA0	; 160
    754a:	90 01       	movw	r18, r0
    754c:	80 58       	subi	r24, 0x80	; 128
    754e:	56 95       	lsr	r21
    7550:	97 95       	ror	r25
    7552:	28 f4       	brcc	.+10     	; 0x755e <sqrt+0x30>
    7554:	80 5c       	subi	r24, 0xC0	; 192
    7556:	66 0f       	add	r22, r22
    7558:	77 1f       	adc	r23, r23
    755a:	88 1f       	adc	r24, r24
    755c:	20 f0       	brcs	.+8      	; 0x7566 <sqrt+0x38>
    755e:	26 17       	cp	r18, r22
    7560:	37 07       	cpc	r19, r23
    7562:	48 07       	cpc	r20, r24
    7564:	30 f4       	brcc	.+12     	; 0x7572 <sqrt+0x44>
    7566:	62 1b       	sub	r22, r18
    7568:	73 0b       	sbc	r23, r19
    756a:	84 0b       	sbc	r24, r20
    756c:	20 29       	or	r18, r0
    756e:	31 29       	or	r19, r1
    7570:	4a 2b       	or	r20, r26
    7572:	a6 95       	lsr	r26
    7574:	17 94       	ror	r1
    7576:	07 94       	ror	r0
    7578:	20 25       	eor	r18, r0
    757a:	31 25       	eor	r19, r1
    757c:	4a 27       	eor	r20, r26
    757e:	58 f7       	brcc	.-42     	; 0x7556 <sqrt+0x28>
    7580:	66 0f       	add	r22, r22
    7582:	77 1f       	adc	r23, r23
    7584:	88 1f       	adc	r24, r24
    7586:	20 f0       	brcs	.+8      	; 0x7590 <sqrt+0x62>
    7588:	26 17       	cp	r18, r22
    758a:	37 07       	cpc	r19, r23
    758c:	48 07       	cpc	r20, r24
    758e:	30 f4       	brcc	.+12     	; 0x759c <sqrt+0x6e>
    7590:	62 0b       	sbc	r22, r18
    7592:	73 0b       	sbc	r23, r19
    7594:	84 0b       	sbc	r24, r20
    7596:	20 0d       	add	r18, r0
    7598:	31 1d       	adc	r19, r1
    759a:	41 1d       	adc	r20, r1
    759c:	a0 95       	com	r26
    759e:	81 f7       	brne	.-32     	; 0x7580 <sqrt+0x52>
    75a0:	b9 01       	movw	r22, r18
    75a2:	84 2f       	mov	r24, r20
    75a4:	91 58       	subi	r25, 0x81	; 129
    75a6:	88 0f       	add	r24, r24
    75a8:	96 95       	lsr	r25
    75aa:	87 95       	ror	r24
    75ac:	08 95       	ret

000075ae <__unordsf2>:
    75ae:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__fp_cmp>
    75b2:	88 0b       	sbc	r24, r24
    75b4:	99 0b       	sbc	r25, r25
    75b6:	08 95       	ret

000075b8 <__fp_mpack>:
    75b8:	9f 3f       	cpi	r25, 0xFF	; 255
__fp_mpack():
    75ba:	31 f0       	breq	.+12     	; 0x75c8 <__fp_mpack_finite+0xc>

000075bc <__fp_mpack_finite>:
    75bc:	91 50       	subi	r25, 0x01	; 1
    75be:	20 f4       	brcc	.+8      	; 0x75c8 <__fp_mpack_finite+0xc>
    75c0:	87 95       	ror	r24
    75c2:	77 95       	ror	r23
    75c4:	67 95       	ror	r22
    75c6:	b7 95       	ror	r27
    75c8:	88 0f       	add	r24, r24
    75ca:	91 1d       	adc	r25, r1
    75cc:	96 95       	lsr	r25
    75ce:	87 95       	ror	r24
    75d0:	97 f9       	bld	r25, 7
    75d2:	08 95       	ret

000075d4 <__fp_norm2>:
__fp_norm2():
    75d4:	91 50       	subi	r25, 0x01	; 1
    75d6:	50 40       	sbci	r21, 0x00	; 0
    75d8:	66 0f       	add	r22, r22
    75da:	77 1f       	adc	r23, r23
    75dc:	88 1f       	adc	r24, r24
    75de:	d2 f7       	brpl	.-12     	; 0x75d4 <__fp_norm2>
    75e0:	08 95       	ret

000075e2 <__fp_powser>:
__fp_powser():
    75e2:	df 93       	push	r29
    75e4:	cf 93       	push	r28
    75e6:	1f 93       	push	r17
    75e8:	0f 93       	push	r16
    75ea:	ff 92       	push	r15
    75ec:	ef 92       	push	r14
    75ee:	df 92       	push	r13
    75f0:	7b 01       	movw	r14, r22
    75f2:	8c 01       	movw	r16, r24
    75f4:	68 94       	set
    75f6:	06 c0       	rjmp	.+12     	; 0x7604 <__fp_powser+0x22>
    75f8:	da 2e       	mov	r13, r26
    75fa:	ef 01       	movw	r28, r30
    75fc:	0e 94 37 3a 	call	0x746e	; 0x746e <__mulsf3x>
    7600:	fe 01       	movw	r30, r28
    7602:	e8 94       	clt
    7604:	a5 91       	lpm	r26, Z+
    7606:	25 91       	lpm	r18, Z+
    7608:	35 91       	lpm	r19, Z+
    760a:	45 91       	lpm	r20, Z+
    760c:	55 91       	lpm	r21, Z+
    760e:	a6 f3       	brts	.-24     	; 0x75f8 <__fp_powser+0x16>
    7610:	ef 01       	movw	r28, r30
    7612:	0e 94 1b 38 	call	0x7036	; 0x7036 <__addsf3x>
    7616:	fe 01       	movw	r30, r28
    7618:	97 01       	movw	r18, r14
    761a:	a8 01       	movw	r20, r16
    761c:	da 94       	dec	r13
    761e:	69 f7       	brne	.-38     	; 0x75fa <__fp_powser+0x18>
    7620:	df 90       	pop	r13
    7622:	ef 90       	pop	r14
    7624:	ff 90       	pop	r15
    7626:	0f 91       	pop	r16
    7628:	1f 91       	pop	r17
    762a:	cf 91       	pop	r28
    762c:	df 91       	pop	r29
    762e:	08 95       	ret

00007630 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    7630:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    7632:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    7634:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    7636:	0e 94 85 3b 	call	0x770a	; 0x770a <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    763a:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    763c:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    763e:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    7640:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    7642:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    7644:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    7646:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    7648:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    764a:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    764c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    764e:	08 95       	ret

00007650 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    7650:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    7652:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    7654:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    7656:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    7658:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    765a:	0d c0       	rjmp	.+26     	; 0x7676 <__udivmodsi4_ep>

0000765c <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    765c:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    765e:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    7660:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    7662:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    7664:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    7666:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    7668:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    766a:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    766c:	20 f0       	brcs	.+8      	; 0x7676 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    766e:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    7670:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    7672:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    7674:	f5 0b       	sbc	r31, r21

00007676 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    7676:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    7678:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    767a:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    767c:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    767e:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    7680:	69 f7       	brne	.-38     	; 0x765c <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    7682:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    7684:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    7686:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    7688:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    768a:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    768c:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    768e:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    7690:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    7692:	08 95       	ret

00007694 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    7694:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    7696:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    7698:	1e f4       	brtc	.+6      	; 0x76a0 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    769a:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    769c:	0e 94 61 3b 	call	0x76c2	; 0x76c2 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    76a0:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    76a2:	07 d0       	rcall	.+14     	; 0x76b2 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    76a4:	0e 94 28 3b 	call	0x7650	; 0x7650 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    76a8:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    76aa:	03 d0       	rcall	.+6      	; 0x76b2 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    76ac:	4e f4       	brtc	.+18     	; 0x76c0 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    76ae:	0c 94 61 3b 	jmp	0x76c2	; 0x76c2 <__negsi2>

000076b2 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    76b2:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    76b4:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    76b6:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    76b8:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    76ba:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    76bc:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    76be:	5f 4f       	sbci	r21, 0xFF	; 255

000076c0 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    76c0:	08 95       	ret

000076c2 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    76c2:	90 95       	com	r25
    76c4:	80 95       	com	r24
    76c6:	70 95       	com	r23
    76c8:	61 95       	neg	r22
    76ca:	7f 4f       	sbci	r23, 0xFF	; 255
    76cc:	8f 4f       	sbci	r24, 0xFF	; 255
    76ce:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    76d0:	08 95       	ret

000076d2 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    76d2:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    76d4:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    76d6:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    76d8:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    76da:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    76dc:	09 94       	ijmp

000076de <__bswapsi2>:
__bswapsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3092
    76de:	69 27       	eor	r22, r25
    76e0:	96 27       	eor	r25, r22
    76e2:	69 27       	eor	r22, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3093
    76e4:	78 27       	eor	r23, r24
    76e6:	87 27       	eor	r24, r23
    76e8:	78 27       	eor	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3094
    76ea:	08 95       	ret

000076ec <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    76ec:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    76ee:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    76f0:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    76f2:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    76f4:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    76f6:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    76f8:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    76fa:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    76fc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    76fe:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    7700:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    7702:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    7704:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    7706:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    7708:	08 95       	ret

0000770a <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    770a:	0e 94 76 3b 	call	0x76ec	; 0x76ec <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    770e:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    7710:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    7712:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    7714:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    7716:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    7718:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    771a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    771c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    771e:	08 95       	ret

00007720 <__ashldi3>:
__ashldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    7720:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    7722:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    7724:	90 f0       	brcs	.+36     	; 0x774a <__ashldi3+0x2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    7726:	98 2f       	mov	r25, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    7728:	87 2f       	mov	r24, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    772a:	76 2f       	mov	r23, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    772c:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    772e:	54 2f       	mov	r21, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    7730:	43 2f       	mov	r20, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    7732:	32 2f       	mov	r19, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    7734:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    7736:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    7738:	f4 cf       	rjmp	.-24     	; 0x7722 <__ashldi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    773a:	22 0f       	add	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    773c:	33 1f       	adc	r19, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    773e:	44 1f       	adc	r20, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    7740:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    7742:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    7744:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    7746:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    7748:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    774a:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    774c:	b2 f7       	brpl	.-20     	; 0x773a <__ashldi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    774e:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    7750:	08 95       	ret

00007752 <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    7752:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    7754:	10 94       	com	r1

00007756 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    7756:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    7758:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    775a:	98 f0       	brcs	.+38     	; 0x7782 <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    775c:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    775e:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    7760:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    7762:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    7764:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    7766:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    7768:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    776a:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    776c:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    776e:	f4 cf       	rjmp	.-24     	; 0x7758 <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    7770:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    7772:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    7774:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    7776:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    7778:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    777a:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    777c:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    777e:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    7780:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    7782:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    7784:	aa f7       	brpl	.-22     	; 0x7770 <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    7786:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    7788:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    778a:	08 95       	ret

0000778c <malloc>:
malloc():
    778c:	0f 93       	push	r16
    778e:	1f 93       	push	r17
    7790:	cf 93       	push	r28
    7792:	df 93       	push	r29
    7794:	82 30       	cpi	r24, 0x02	; 2
    7796:	91 05       	cpc	r25, r1
    7798:	10 f4       	brcc	.+4      	; 0x779e <malloc+0x12>
    779a:	82 e0       	ldi	r24, 0x02	; 2
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	e0 91 fe 05 	lds	r30, 0x05FE	; 0x8005fe <__flp>
    77a2:	f0 91 ff 05 	lds	r31, 0x05FF	; 0x8005ff <__flp+0x1>
    77a6:	30 e0       	ldi	r19, 0x00	; 0
    77a8:	20 e0       	ldi	r18, 0x00	; 0
    77aa:	b0 e0       	ldi	r27, 0x00	; 0
    77ac:	a0 e0       	ldi	r26, 0x00	; 0
    77ae:	30 97       	sbiw	r30, 0x00	; 0
    77b0:	99 f4       	brne	.+38     	; 0x77d8 <malloc+0x4c>
    77b2:	21 15       	cp	r18, r1
    77b4:	31 05       	cpc	r19, r1
    77b6:	09 f4       	brne	.+2      	; 0x77ba <malloc+0x2e>
    77b8:	4a c0       	rjmp	.+148    	; 0x784e <malloc+0xc2>
    77ba:	28 1b       	sub	r18, r24
    77bc:	39 0b       	sbc	r19, r25
    77be:	24 30       	cpi	r18, 0x04	; 4
    77c0:	31 05       	cpc	r19, r1
    77c2:	d8 f5       	brcc	.+118    	; 0x783a <malloc+0xae>
    77c4:	8a 81       	ldd	r24, Y+2	; 0x02
    77c6:	9b 81       	ldd	r25, Y+3	; 0x03
    77c8:	61 15       	cp	r22, r1
    77ca:	71 05       	cpc	r23, r1
    77cc:	89 f1       	breq	.+98     	; 0x7830 <malloc+0xa4>
    77ce:	fb 01       	movw	r30, r22
    77d0:	93 83       	std	Z+3, r25	; 0x03
    77d2:	82 83       	std	Z+2, r24	; 0x02
    77d4:	fe 01       	movw	r30, r28
    77d6:	11 c0       	rjmp	.+34     	; 0x77fa <malloc+0x6e>
    77d8:	40 81       	ld	r20, Z
    77da:	51 81       	ldd	r21, Z+1	; 0x01
    77dc:	02 81       	ldd	r16, Z+2	; 0x02
    77de:	13 81       	ldd	r17, Z+3	; 0x03
    77e0:	48 17       	cp	r20, r24
    77e2:	59 07       	cpc	r21, r25
    77e4:	e0 f0       	brcs	.+56     	; 0x781e <malloc+0x92>
    77e6:	48 17       	cp	r20, r24
    77e8:	59 07       	cpc	r21, r25
    77ea:	99 f4       	brne	.+38     	; 0x7812 <malloc+0x86>
    77ec:	10 97       	sbiw	r26, 0x00	; 0
    77ee:	61 f0       	breq	.+24     	; 0x7808 <malloc+0x7c>
    77f0:	12 96       	adiw	r26, 0x02	; 2
    77f2:	0c 93       	st	X, r16
    77f4:	12 97       	sbiw	r26, 0x02	; 2
    77f6:	13 96       	adiw	r26, 0x03	; 3
    77f8:	1c 93       	st	X, r17
    77fa:	32 96       	adiw	r30, 0x02	; 2
    77fc:	cf 01       	movw	r24, r30
    77fe:	df 91       	pop	r29
    7800:	cf 91       	pop	r28
    7802:	1f 91       	pop	r17
    7804:	0f 91       	pop	r16
    7806:	08 95       	ret
    7808:	00 93 fe 05 	sts	0x05FE, r16	; 0x8005fe <__flp>
    780c:	10 93 ff 05 	sts	0x05FF, r17	; 0x8005ff <__flp+0x1>
    7810:	f4 cf       	rjmp	.-24     	; 0x77fa <malloc+0x6e>
    7812:	21 15       	cp	r18, r1
    7814:	31 05       	cpc	r19, r1
    7816:	51 f0       	breq	.+20     	; 0x782c <malloc+0xa0>
    7818:	42 17       	cp	r20, r18
    781a:	53 07       	cpc	r21, r19
    781c:	38 f0       	brcs	.+14     	; 0x782c <malloc+0xa0>
    781e:	a9 01       	movw	r20, r18
    7820:	db 01       	movw	r26, r22
    7822:	9a 01       	movw	r18, r20
    7824:	bd 01       	movw	r22, r26
    7826:	df 01       	movw	r26, r30
    7828:	f8 01       	movw	r30, r16
    782a:	c1 cf       	rjmp	.-126    	; 0x77ae <malloc+0x22>
    782c:	ef 01       	movw	r28, r30
    782e:	f9 cf       	rjmp	.-14     	; 0x7822 <malloc+0x96>
    7830:	90 93 ff 05 	sts	0x05FF, r25	; 0x8005ff <__flp+0x1>
    7834:	80 93 fe 05 	sts	0x05FE, r24	; 0x8005fe <__flp>
    7838:	cd cf       	rjmp	.-102    	; 0x77d4 <malloc+0x48>
    783a:	fe 01       	movw	r30, r28
    783c:	e2 0f       	add	r30, r18
    783e:	f3 1f       	adc	r31, r19
    7840:	81 93       	st	Z+, r24
    7842:	91 93       	st	Z+, r25
    7844:	22 50       	subi	r18, 0x02	; 2
    7846:	31 09       	sbc	r19, r1
    7848:	39 83       	std	Y+1, r19	; 0x01
    784a:	28 83       	st	Y, r18
    784c:	d7 cf       	rjmp	.-82     	; 0x77fc <malloc+0x70>
    784e:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    7852:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    7856:	23 2b       	or	r18, r19
    7858:	41 f4       	brne	.+16     	; 0x786a <malloc+0xde>
    785a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    785e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    7862:	30 93 fd 05 	sts	0x05FD, r19	; 0x8005fd <__brkval+0x1>
    7866:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <__brkval>
    786a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    786e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7872:	21 15       	cp	r18, r1
    7874:	31 05       	cpc	r19, r1
    7876:	41 f4       	brne	.+16     	; 0x7888 <malloc+0xfc>
    7878:	2d b7       	in	r18, 0x3d	; 61
    787a:	3e b7       	in	r19, 0x3e	; 62
    787c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7880:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7884:	24 1b       	sub	r18, r20
    7886:	35 0b       	sbc	r19, r21
    7888:	e0 91 fc 05 	lds	r30, 0x05FC	; 0x8005fc <__brkval>
    788c:	f0 91 fd 05 	lds	r31, 0x05FD	; 0x8005fd <__brkval+0x1>
    7890:	e2 17       	cp	r30, r18
    7892:	f3 07       	cpc	r31, r19
    7894:	a0 f4       	brcc	.+40     	; 0x78be <malloc+0x132>
    7896:	2e 1b       	sub	r18, r30
    7898:	3f 0b       	sbc	r19, r31
    789a:	28 17       	cp	r18, r24
    789c:	39 07       	cpc	r19, r25
    789e:	78 f0       	brcs	.+30     	; 0x78be <malloc+0x132>
    78a0:	ac 01       	movw	r20, r24
    78a2:	4e 5f       	subi	r20, 0xFE	; 254
    78a4:	5f 4f       	sbci	r21, 0xFF	; 255
    78a6:	24 17       	cp	r18, r20
    78a8:	35 07       	cpc	r19, r21
    78aa:	48 f0       	brcs	.+18     	; 0x78be <malloc+0x132>
    78ac:	4e 0f       	add	r20, r30
    78ae:	5f 1f       	adc	r21, r31
    78b0:	50 93 fd 05 	sts	0x05FD, r21	; 0x8005fd <__brkval+0x1>
    78b4:	40 93 fc 05 	sts	0x05FC, r20	; 0x8005fc <__brkval>
    78b8:	81 93       	st	Z+, r24
    78ba:	91 93       	st	Z+, r25
    78bc:	9f cf       	rjmp	.-194    	; 0x77fc <malloc+0x70>
    78be:	f0 e0       	ldi	r31, 0x00	; 0
    78c0:	e0 e0       	ldi	r30, 0x00	; 0
    78c2:	9c cf       	rjmp	.-200    	; 0x77fc <malloc+0x70>

000078c4 <free>:
free():
    78c4:	cf 93       	push	r28
    78c6:	df 93       	push	r29
    78c8:	00 97       	sbiw	r24, 0x00	; 0
    78ca:	e9 f0       	breq	.+58     	; 0x7906 <free+0x42>
    78cc:	fc 01       	movw	r30, r24
    78ce:	32 97       	sbiw	r30, 0x02	; 2
    78d0:	13 82       	std	Z+3, r1	; 0x03
    78d2:	12 82       	std	Z+2, r1	; 0x02
    78d4:	a0 91 fe 05 	lds	r26, 0x05FE	; 0x8005fe <__flp>
    78d8:	b0 91 ff 05 	lds	r27, 0x05FF	; 0x8005ff <__flp+0x1>
    78dc:	ed 01       	movw	r28, r26
    78de:	30 e0       	ldi	r19, 0x00	; 0
    78e0:	20 e0       	ldi	r18, 0x00	; 0
    78e2:	10 97       	sbiw	r26, 0x00	; 0
    78e4:	a1 f4       	brne	.+40     	; 0x790e <free+0x4a>
    78e6:	20 81       	ld	r18, Z
    78e8:	31 81       	ldd	r19, Z+1	; 0x01
    78ea:	82 0f       	add	r24, r18
    78ec:	93 1f       	adc	r25, r19
    78ee:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    78f2:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    78f6:	28 17       	cp	r18, r24
    78f8:	39 07       	cpc	r19, r25
    78fa:	09 f0       	breq	.+2      	; 0x78fe <free+0x3a>
    78fc:	61 c0       	rjmp	.+194    	; 0x79c0 <free+0xfc>
    78fe:	f0 93 fd 05 	sts	0x05FD, r31	; 0x8005fd <__brkval+0x1>
    7902:	e0 93 fc 05 	sts	0x05FC, r30	; 0x8005fc <__brkval>
    7906:	df 91       	pop	r29
    7908:	cf 91       	pop	r28
    790a:	08 95       	ret
    790c:	ea 01       	movw	r28, r20
    790e:	ce 17       	cp	r28, r30
    7910:	df 07       	cpc	r29, r31
    7912:	e8 f5       	brcc	.+122    	; 0x798e <free+0xca>
    7914:	4a 81       	ldd	r20, Y+2	; 0x02
    7916:	5b 81       	ldd	r21, Y+3	; 0x03
    7918:	9e 01       	movw	r18, r28
    791a:	41 15       	cp	r20, r1
    791c:	51 05       	cpc	r21, r1
    791e:	b1 f7       	brne	.-20     	; 0x790c <free+0x48>
    7920:	e9 01       	movw	r28, r18
    7922:	fb 83       	std	Y+3, r31	; 0x03
    7924:	ea 83       	std	Y+2, r30	; 0x02
    7926:	49 91       	ld	r20, Y+
    7928:	59 91       	ld	r21, Y+
    792a:	c4 0f       	add	r28, r20
    792c:	d5 1f       	adc	r29, r21
    792e:	ec 17       	cp	r30, r28
    7930:	fd 07       	cpc	r31, r29
    7932:	61 f4       	brne	.+24     	; 0x794c <free+0x88>
    7934:	80 81       	ld	r24, Z
    7936:	91 81       	ldd	r25, Z+1	; 0x01
    7938:	02 96       	adiw	r24, 0x02	; 2
    793a:	84 0f       	add	r24, r20
    793c:	95 1f       	adc	r25, r21
    793e:	e9 01       	movw	r28, r18
    7940:	99 83       	std	Y+1, r25	; 0x01
    7942:	88 83       	st	Y, r24
    7944:	82 81       	ldd	r24, Z+2	; 0x02
    7946:	93 81       	ldd	r25, Z+3	; 0x03
    7948:	9b 83       	std	Y+3, r25	; 0x03
    794a:	8a 83       	std	Y+2, r24	; 0x02
    794c:	f0 e0       	ldi	r31, 0x00	; 0
    794e:	e0 e0       	ldi	r30, 0x00	; 0
    7950:	12 96       	adiw	r26, 0x02	; 2
    7952:	8d 91       	ld	r24, X+
    7954:	9c 91       	ld	r25, X
    7956:	13 97       	sbiw	r26, 0x03	; 3
    7958:	00 97       	sbiw	r24, 0x00	; 0
    795a:	b9 f5       	brne	.+110    	; 0x79ca <free+0x106>
    795c:	2d 91       	ld	r18, X+
    795e:	3c 91       	ld	r19, X
    7960:	11 97       	sbiw	r26, 0x01	; 1
    7962:	cd 01       	movw	r24, r26
    7964:	02 96       	adiw	r24, 0x02	; 2
    7966:	82 0f       	add	r24, r18
    7968:	93 1f       	adc	r25, r19
    796a:	20 91 fc 05 	lds	r18, 0x05FC	; 0x8005fc <__brkval>
    796e:	30 91 fd 05 	lds	r19, 0x05FD	; 0x8005fd <__brkval+0x1>
    7972:	28 17       	cp	r18, r24
    7974:	39 07       	cpc	r19, r25
    7976:	39 f6       	brne	.-114    	; 0x7906 <free+0x42>
    7978:	30 97       	sbiw	r30, 0x00	; 0
    797a:	51 f5       	brne	.+84     	; 0x79d0 <free+0x10c>
    797c:	10 92 ff 05 	sts	0x05FF, r1	; 0x8005ff <__flp+0x1>
    7980:	10 92 fe 05 	sts	0x05FE, r1	; 0x8005fe <__flp>
    7984:	b0 93 fd 05 	sts	0x05FD, r27	; 0x8005fd <__brkval+0x1>
    7988:	a0 93 fc 05 	sts	0x05FC, r26	; 0x8005fc <__brkval>
    798c:	bc cf       	rjmp	.-136    	; 0x7906 <free+0x42>
    798e:	d3 83       	std	Z+3, r29	; 0x03
    7990:	c2 83       	std	Z+2, r28	; 0x02
    7992:	40 81       	ld	r20, Z
    7994:	51 81       	ldd	r21, Z+1	; 0x01
    7996:	84 0f       	add	r24, r20
    7998:	95 1f       	adc	r25, r21
    799a:	c8 17       	cp	r28, r24
    799c:	d9 07       	cpc	r29, r25
    799e:	61 f4       	brne	.+24     	; 0x79b8 <free+0xf4>
    79a0:	4e 5f       	subi	r20, 0xFE	; 254
    79a2:	5f 4f       	sbci	r21, 0xFF	; 255
    79a4:	88 81       	ld	r24, Y
    79a6:	99 81       	ldd	r25, Y+1	; 0x01
    79a8:	48 0f       	add	r20, r24
    79aa:	59 1f       	adc	r21, r25
    79ac:	51 83       	std	Z+1, r21	; 0x01
    79ae:	40 83       	st	Z, r20
    79b0:	8a 81       	ldd	r24, Y+2	; 0x02
    79b2:	9b 81       	ldd	r25, Y+3	; 0x03
    79b4:	93 83       	std	Z+3, r25	; 0x03
    79b6:	82 83       	std	Z+2, r24	; 0x02
    79b8:	21 15       	cp	r18, r1
    79ba:	31 05       	cpc	r19, r1
    79bc:	09 f0       	breq	.+2      	; 0x79c0 <free+0xfc>
    79be:	b0 cf       	rjmp	.-160    	; 0x7920 <free+0x5c>
    79c0:	f0 93 ff 05 	sts	0x05FF, r31	; 0x8005ff <__flp+0x1>
    79c4:	e0 93 fe 05 	sts	0x05FE, r30	; 0x8005fe <__flp>
    79c8:	9e cf       	rjmp	.-196    	; 0x7906 <free+0x42>
    79ca:	fd 01       	movw	r30, r26
    79cc:	dc 01       	movw	r26, r24
    79ce:	c0 cf       	rjmp	.-128    	; 0x7950 <free+0x8c>
    79d0:	13 82       	std	Z+3, r1	; 0x03
    79d2:	12 82       	std	Z+2, r1	; 0x02
    79d4:	d7 cf       	rjmp	.-82     	; 0x7984 <free+0xc0>

000079d6 <memset>:
memset():
    79d6:	dc 01       	movw	r26, r24
    79d8:	01 c0       	rjmp	.+2      	; 0x79dc <memset+0x6>
    79da:	6d 93       	st	X+, r22
    79dc:	41 50       	subi	r20, 0x01	; 1
    79de:	50 40       	sbci	r21, 0x00	; 0
    79e0:	e0 f7       	brcc	.-8      	; 0x79da <memset+0x4>
    79e2:	08 95       	ret

000079e4 <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:91
    79e4:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:92
    79e6:	fe cf       	rjmp	.-4      	; 0x79e4 <eeprom_read_byte>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:95
    79e8:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:101
    79ea:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:102
    79ec:	f8 9a       	sbi	0x1f, 0	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:103
    79ee:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:104
    79f0:	80 b5       	in	r24, 0x20	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:105
    79f2:	08 95       	ret

000079f4 <eeprom_write_byte>:
eeprom_write_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:42
    79f4:	26 2f       	mov	r18, r22

000079f6 <eeprom_write_r18>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:162
    79f6:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:163
    79f8:	fe cf       	rjmp	.-4      	; 0x79f6 <eeprom_write_r18>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:167
    79fa:	1f ba       	out	0x1f, r1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:174
    79fc:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:180
    79fe:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:181
    7a00:	20 bd       	out	0x20, r18	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:182
    7a02:	0f b6       	in	r0, 0x3f	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:183
    7a04:	f8 94       	cli
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:184
    7a06:	fa 9a       	sbi	0x1f, 2	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:185
    7a08:	f9 9a       	sbi	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:186
    7a0a:	0f be       	out	0x3f, r0	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:187
    7a0c:	01 96       	adiw	r24, 0x01	; 1
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:188
    7a0e:	08 95       	ret

00007a10 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    7a10:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    7a12:	cb e0       	ldi	r28, 0x0B	; 11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    7a14:	d9 e0       	ldi	r29, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    7a16:	04 c0       	rjmp	.+8      	; 0x7a20 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    7a18:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    7a1a:	0e 94 69 3b 	call	0x76d2	; 0x76d2 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    7a1e:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    7a20:	cd 30       	cpi	r28, 0x0D	; 13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    7a22:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    7a24:	c9 f7       	brne	.-14     	; 0x7a18 <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    7a26:	f8 94       	cli

00007a28 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    7a28:	ff cf       	rjmp	.-2      	; 0x7a28 <__stop_program>
