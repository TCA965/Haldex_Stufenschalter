
C:\Users\Thaddaeus\AppData\Local\Temp\arduino\sketches\3ED67F4AD4DF242D66896738D9F27E5F/Haldex_Stufenschalter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
../../../../crt1/gcrt1.S:65
       0:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__dtors_end>
../../../../crt1/gcrt1.S:67
       4:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
       8:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
       c:	0c 94 ea 09 	jmp	0x13d4	; 0x13d4 <__vector_3>
../../../../crt1/gcrt1.S:70
      10:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
      14:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
      18:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
      1c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
      20:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
      24:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
      28:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
      2c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
      30:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
      34:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
      38:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
      3c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
      40:	0c 94 db 36 	jmp	0x6db6	; 0x6db6 <__vector_16>
../../../../crt1/gcrt1.S:83
      44:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
      48:	0c 94 fb 33 	jmp	0x67f6	; 0x67f6 <__vector_18>
../../../../crt1/gcrt1.S:85
      4c:	0c 94 2d 34 	jmp	0x685a	; 0x685a <__vector_19>
../../../../crt1/gcrt1.S:86
      50:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
      54:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
      58:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
      5c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
      60:	0c 94 e3 2e 	jmp	0x5dc6	; 0x5dc6 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
      68:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
      6c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
      70:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
      74:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
      78:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
      7c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
      80:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
      84:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
      88:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
      8c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
      90:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
      94:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
      98:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
      9c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
      a0:	0c 94 90 31 	jmp	0x6320	; 0x6320 <__vector_40>
../../../../crt1/gcrt1.S:107
      a4:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
      a8:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
      ac:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
      b0:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__bad_interrupt>
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <__stack+0x9>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__trampolines_end>:
__trampolines_end():
     10e:	55 6e       	ori	r21, 0xE5	; 229
     110:	74 65       	ori	r23, 0x54	; 84
     112:	72 62       	ori	r23, 0x22	; 34
     114:	72 65       	ori	r23, 0x52	; 82
     116:	63 68       	ori	r22, 0x83	; 131
     118:	75 6e       	ori	r23, 0xE5	; 229
     11a:	67 20       	and	r6, r7
     11c:	53 74       	andi	r21, 0x43	; 67
     11e:	65 70       	andi	r22, 0x05	; 5
     120:	70 65       	ori	r23, 0x50	; 80
     122:	72 00       	.word	0x0072	; ????

00000124 <LeseTMCStatus(bool)::__c>:
     124:	46 65 68 6c 65 72 21 00                             Fehler!.

0000012c <LeseTMCStatus(bool)::__c>:
     12c:	4b 75 72 7a 73 63 68 6c 75 73 73 20 53 74 65 70     Kurzschluss Step
     13c:	70 65 72 00                                         per.

00000140 <LeseTMCStatus(bool)::__c>:
     140:	46 65 68 6c 65 72 21 00                             Fehler!.

00000148 <LeseTMCStatus(bool)::__c>:
     148:	4b 75 72 7a 73 63 68 6c 75 73 73 20 6e 61 63 68     Kurzschluss nach
     158:	20 4d 61 73 73 65 00                                 Masse.

0000015f <LeseTMCStatus(bool)::__c>:
     15f:	46 65 68 6c 65 72 21 00                             Fehler!.

00000167 <LeseTMCStatus(bool)::__c>:
     167:	4d 6f 74 6f 72 74 72 65 69 62 65 72 00              Motortreiber.

00000174 <LeseTMCStatus(bool)::__c>:
     174:	c3 9c 62 65 72 74 65 6d 70 65 72 61 74 75 72 00     ..bertemperatur.

00000184 <LeseTMCStatus(bool)::__c>:
     184:	46 65 68 6c 65 72 21 00                             Fehler!.

0000018c <LeseEingaenge()::__c>:
     18c:	62 65 69 6d 20 6e 61 65 63 68 73 74 65 6e 20 53     beim naechsten S
     19c:	74 61 72 74 00                                      tart.

000001a1 <LeseEingaenge()::__c>:
     1a1:	48 61 6c 64 65 78 20 41 75 74 6f 74 75 6e 65 00     Haldex Autotune.

000001b1 <_ZZ15SchreibeDisplayvE3__c__11_>:
     1b1:	43 00                                               C.

000001b3 <_ZZ15SchreibeDisplayvE3__c__10_>:
     1b3:	20 00                                                .

000001b5 <SchreibeDisplay()::__c>:
     1b5:	21 00                                               !.

000001b7 <SchreibeDisplay()::__c>:
     1b7:	21 00                                               !.

000001b9 <SchreibeDisplay()::__c>:
     1b9:	6c 74 65 6d 70 65 72 61 74 75 72 20 00              ltemperatur .

000001c6 <SchreibeDisplay()::__c>:
     1c6:	62 65 72 74 65 6d 70 65 72 61 74 75 72 00           bertemperatur.

000001d4 <SchreibeDisplay()::__c>:
     1d4:	48 61 75 70 74 73 63 68 61 6c 74 65 72 20 61 75     Hauptschalter au
     1e4:	73 00                                               s.

000001e6 <SchreibeDisplay()::__c>:
     1e6:	74 69 67 74 00                                      tigt.

000001eb <SchreibeDisplay()::__c>:
     1eb:	42 72 65 6d 73 65 20 62 65 74 00                    Bremse bet.

000001f6 <SchreibeDisplay()::__c>:
     1f6:	74 69 67 74 00                                      tigt.

000001fb <SchreibeDisplay()::__c>:
     1fb:	48 61 6e 64 62 72 65 6d 73 65 20 62 65 74 00        Handbremse bet.

0000020a <SchreibeDisplay()::__c>:
     20a:	20 25 00                                             %.

0000020d <SchreibeDisplay()::__c>:
     20d:	48 41 4c 44 45 58 00                                HALDEX.

00000214 <loop::__c>:
     214:	56 6f 72 6c 61 64 65 70 75 6d 70 65 00              Vorladepumpe.

00000221 <loop::__c>:
     221:	46 65 68 6c 65 72 21 00                             Fehler!.

00000229 <setup::__c>:
     229:	20 73 74 65 70 73 00                                 steps.

00000230 <setup::__c>:
     230:	48 61 6c 64 65 78 20 41 75 74 6f 74 75 6e 65 00     Haldex Autotune.

00000240 <setup::__c>:
     240:	48 61 6c 64 65 78 20 41 75 74 6f 74 75 6e 65 00     Haldex Autotune.

00000250 <setup::__c>:
     250:	45 72 73 61 74 7a 77 65 72 74 21 00                 Ersatzwert!.

0000025c <setup::__c>:
     25c:	4e 75 74 7a 65 00                                   Nutze.

00000262 <setup::__c>:
     262:	75 6e 74 65 72 62 72 6f 63 68 65 6e 21 00           unterbrochen!.

00000270 <setup::__c>:
     270:	54 65 6d 70 65 72 61 74 75 72 66 75 65 68 6c 65     Temperaturfuehle
     280:	72 00                                               r.

00000282 <setup::__c>:
     282:	61 6c 6c 72 61 64 62 75 73 2e 63 6f 6d 00           allradbus.com.

00000290 <setup::__c>:
     290:	54 43 41 39 36 35 00                                TCA965.

00000297 <setup::__c>:
     297:	48 61 6c 64 65 78 20 43 6f 6e 74 72 6f 6c 6c 65     Haldex Controlle
     2a7:	72 00                                               r.

000002a9 <u8g2_font_helvR08_tf>:
     2a9:	bf 00 03 02 04 04 02 04 05 0b 0d ff fe 08 fe 08     ................
     2b9:	fe 01 53 02 bd 08 67 20 05 00 e6 04 21 06 81 e3     ..S...g ....!...
     2c9:	c4 25 22 07 23 3b 45 a2 04 23 10 76 a2 55 92 25     .%".#;E..#.v.U.%
     2d9:	d1 20 25 c9 20 25 59 12 01 24 10 a5 9e 55 b6 54     . %. %Y..$...U.T
     2e9:	94 6c 4b a2 44 a9 6c 11 00 25 10 88 62 8e d4 92     .lK.D.l..%..b...
     2f9:	29 79 9c 27 5a 12 95 14 00 26 0d 86 23 8e 16 b5     )y.'Z....&..#...
     309:	69 51 a2 25 91 29 27 06 21 ba 84 00 28 0b a3 1a     iQ.%.)'.!...(...
     319:	55 12 25 51 5b 94 05 29 0c a3 1b 45 16 65 51 4b     U.%Q[..)...E.eQK
     329:	94 44 00 2a 07 33 36 45 d2 01 2b 0a 55 a6 55 18     .D.*.36E..+.U.U.
     339:	0d 52 18 01 2c 07 32 da 4c a2 00 2d 06 13 2e c5     .R..,.2.L..-....
     349:	00 2e 06 11 e3 44 00 2f 0a 83 e2 54 25 6a 89 22     .....D./...T%j."
     359:	00 30 0a 85 a2 cd 92 f9 96 2c 00 31 07 82 a3 cd     .0.......,.1....
     369:	d2 07 32 0c 85 a2 cd 92 85 25 29 0b 07 01 33 0c     ..2......%)...3.
     379:	85 a2 cd 92 85 91 1a 6a c9 02 34 0e 85 a2 5d 26     .......j..4...]&
     389:	25 51 52 4a 06 2d 4c 00 35 0c 85 a2 cd 90 84 e1     %QRJ.-L.5.......
     399:	1a 6a c9 02 36 0c 85 a2 cd 92 89 43 92 d9 92 05     .j..6......C....
     3a9:	37 0b 85 a2 c5 20 66 c5 2c ac 01 38 0c 85 a2 cd     7.... f.,..8....
     3b9:	92 69 c9 92 d9 92 05 39 0c 85 a2 cd 92 d9 92 21     .i.....9.......!
     3c9:	d4 92 05 3a 06 61 e3 44 18 3b 09 82 da 4c 0e 25     ...:.a.D.;...L.%
     3d9:	0a 00 3c 07 53 a7 55 52 2b 3d 08 34 6a c5 10 0e     ..<.S.UR+=.4j...
     3e9:	01 3e 08 53 a7 45 56 29 01 3f 0b 84 a3 8d 12 65     .>.S.EV).?.....e
     3f9:	51 2d 8f 00 40 16 9a de de 20 a6 51 a4 24 52 49     Q-..@.... .Q.$RI
     409:	c9 22 25 aa 44 8a 96 63 83 06 41 0e 87 e2 5d 9c     ."%.D..c..A...].
     419:	26 61 92 95 06 25 55 03 42 0d 85 e3 c5 90 64 da     &a...%U.B.....d.
     429:	a0 64 b6 41 01 43 0c 86 23 ce 90 84 6a c7 64 48     .d.A.C..#...j.dH
     439:	00 44 0d 86 23 c6 10 65 49 e8 2d 19 22 00 45 0a     .D..#..eI.-.".E.
     449:	85 e3 c5 31 1c c6 e2 20 46 0a 85 a3 c5 31 1c 92     ...1... F....1..
     459:	b0 11 47 0c 86 23 ce 90 84 6a 6d 14 93 41 48 0a     ..G..#...jm..AH.
     469:	86 23 46 68 1c 06 d1 31 49 06 81 e3 c4 41 4a 09     .#Fh...1I....AJ.
     479:	84 62 5d 6f 52 a2 00 4b 0d 85 e3 45 26 25 a5 a9     .b]oR..K...E&%..
     489:	12 25 99 16 4c 08 84 a3 45 d6 b7 21 4d 10 87 63     .%..L...E..!M..c
     499:	46 ba 0d d9 52 51 2a 52 24 45 52 01 4e 0f 86 23     F...RQ*R$ER.N..#
     4a9:	86 b6 29 91 12 49 89 94 68 9b 00 4f 0b 86 23 ce     ..)..I..h..O..#.
     4b9:	90 84 3e 26 43 02 50 0c 85 e3 c5 90 64 da a0 84     ..>&C.P.....d...
     4c9:	8d 00 51 12 97 1f ce 10 85 49 98 84 49 98 44 49     ..Q......I..I.DI
     4d9:	4d 1a f4 00 52 0c 85 e3 c5 90 64 da a0 64 6e 01     M...R.....d..dn.
     4e9:	53 0c 85 e3 cd 92 a9 ab a6 25 0b 00 54 09 85 62     S........%..T..b
     4f9:	c5 20 85 7d 02 55 0a 86 23 46 e8 c7 64 48 00 56     . .}.U..#F..dH.V
     509:	0f 87 e2 45 aa 26 59 94 45 59 25 4c d2 0c 57 10     ...E.&Y.EY%L..W.
     519:	89 62 46 96 69 95 a8 2f 6d c5 2c cc 22 00 58 0d     .bF.i../m.,.".X.
     529:	85 e3 45 a6 25 b5 4a 94 d4 b4 00 59 0e 87 e2 45     ..E.%.J....Y...E
     539:	9a 64 51 56 09 93 34 ae 01 5a 0b 85 e3 c5 20 66     .dQV..4..Z.... f
     549:	c5 ac 38 08 5b 08 a2 db c4 d2 2f 02 5c 0a 83 e2     ..8.[...../.\...
     559:	44 94 45 6d 51 00 5d 08 a2 da 84 d2 2f 03 5e 0a     D.EmQ.]...../.^.
     569:	55 ae 55 98 25 51 52 0b 5f 06 16 9a c5 01 60 06     U.U.%QR._.....`.
     579:	22 fe 44 14 61 0c 65 62 c5 1a 2d 51 12 45 4a 00     ".D.a.eb..-Q.EJ.
     589:	62 0c 85 a2 45 58 31 69 da a4 28 00 63 0a 64 62     b...EX1i..(.c.db
     599:	8d 12 69 a5 44 01 64 0a 85 a2 65 c5 b4 99 14 25     ..i.D.d...e....%
     5a9:	65 0b 64 62 8d 12 0d 5b 94 28 00 66 0a 84 22 95     e.db...[.(.f..".
     5b9:	12 4d 59 27 00 67 0c 85 9a 8d 69 33 29 4a 98 2c     .MY'.g....i3)J.,
     5c9:	00 68 0a 85 a2 45 58 31 69 6e 01 69 07 81 a2 44     .h...EX1in.i...D
     5d9:	32 0c 6a 09 a2 99 4c 96 f4 a2 00 6b 0c 84 62 45     2.j...L....k..bE
     5e9:	56 52 12 29 29 49 01 6c 06 81 a2 c4 41 6d 0e 67     VR.))I.l....Am.g
     5f9:	22 c6 a2 44 91 14 49 91 14 49 05 6e 09 65 a2 45     "..D..I..I.n.e.E
     609:	62 d2 dc 02 6f 0a 65 a2 cd 92 b9 25 0b 00 70 0c     b...o.e....%..p.
     619:	85 9a 45 62 d2 b4 49 51 c2 10 71 0a 85 9a 8d 69     ..Eb..IQ..q....i
     629:	33 29 4a 58 72 09 63 22 45 b2 44 4d 00 73 0b 64     3)JXr.c"E.DM.s.d
     639:	62 8d 12 25 a2 94 28 00 74 0a 83 22 4d 94 2c 51     b..%..(.t.."M.,Q
     649:	93 00 75 08 64 62 45 e4 29 19 76 0c 65 a2 45 a6     ..u.dbE.).v.e.E.
     659:	25 a5 24 0b 23 00 77 0e 67 22 46 14 49 95 a6 a4     %.$.#.w.g"F.I...
     669:	96 84 49 04 78 0a 65 a2 45 96 d4 2a 35 2d 79 0e     ..I.x.e.E..*5-y.
     679:	85 59 4d 94 44 49 29 c9 b4 30 d2 00 7a 0a 64 62     .YM.DI)..0..z.db
     689:	c5 90 45 6d 43 00 7b 0a a3 da 54 12 55 b2 a8 2d     ..EmC.{...T.U..-
     699:	7c 07 a1 db c4 43 00 7d 0b a3 da 44 16 d5 92 a8     |....C.}...D....
     6a9:	25 02 7e 07 26 ee 8d 64 01 a0 05 00 e6 04 a1 07     %.~.&..d........
     6b9:	81 db 44 32 0c a2 0e 85 9f 5d b4 54 94 28 89 92     ..D2.....].T.(..
     6c9:	ca 94 01 a3 0c 85 a2 95 54 c9 b6 b0 a4 28 00 a4     ........T....(..
     6d9:	0c 64 66 45 94 28 91 94 28 51 00 a5 0d 85 a2 45     .dfE.(..(Q.....E
     6e9:	66 4b 2a 83 14 0d 52 04 a6 08 a1 db c4 10 0d 01     fK*...R.........
     6f9:	a7 0f a5 9a cd 92 8d 4b 34 44 c9 b8 25 0b 00 a8     .......K4D..%...
     709:	06 13 fe 44 12 a9 0e 77 63 d6 56 89 14 25 93 94     ...D...wc.V..%..
     719:	5a 36 01 aa 08 53 2e c5 a4 64 03 ab 0a 55 a2 55     Z6...S...d...U.U
     729:	d2 5b 92 25 01 ac 07 35 eb c5 20 16 ad 06 13 2e     .[.%...5.. .....
     739:	c5 00 ae 0d 77 63 d6 56 49 16 93 d2 2d 9b 00 af     ....wc.VI...-...
     749:	06 13 fe c4 00 b0 09 44 32 8d 12 49 89 02 b1 0b     .......D2..I....
     759:	75 a2 55 18 0d 52 98 0f 02 b2 07 43 f2 cc 52 19     u.U..R.....C..R.
     769:	b3 08 43 f2 c4 92 2d 00 b4 06 22 fe 8c 02 b5 0a     ..C...-...".....
     779:	84 5a 45 e4 69 d8 32 00 b6 15 a6 9a cd 30 28 c9     .ZE.i.2......0(.
     789:	92 2c 91 92 25 59 92 25 59 92 25 09 00 b7 06 12     .,..%Y.%Y.%.....
     799:	ee 84 00 b8 06 22 da cc 00 b9 06 42 f2 cc 52 ba     .....".....B..R.
     7a9:	09 53 2e c5 90 0c d9 00 bb 0b 55 a2 45 92 25 59     .S........U.E.%Y
     7b9:	d2 13 00 bc 12 89 62 4e 96 69 61 94 46 79 16 46     ......bN.ia.Fy.F
     7c9:	5a 34 44 61 02 bd 10 88 62 4e 16 69 a5 30 8a 23     Z4Da....bN.i.0.#
     7d9:	2d 29 65 a5 01 be 12 89 62 c6 9e a5 51 26 e5 48     -)e.....b...Q&.H
     7e9:	14 46 62 32 44 61 02 bf 0b 84 9b 55 9e 45 b5 28     .Fb2Da.....U.E.(
     7f9:	51 00 c0 10 b7 e2 55 9e c3 d5 24 4c b2 d2 a0 a4     Q.....U...$L....
     809:	6a 00 c1 10 b7 e2 65 9a c3 d5 24 4c b2 d2 a0 a4     j.....e...$L....
     819:	6a 00 c2 11 b7 e2 5d 9a e4 68 9c 26 61 92 95 06     j.....]..h.&a...
     829:	25 55 03 c3 12 b7 e2 5d 92 25 39 1a a7 49 98 64     %U.....].%9..I.d
     839:	a5 41 49 d5 00 c4 10 a7 e2 55 92 a3 71 9a 84 49     .AI......U..q..I
     849:	56 1a 94 54 0d c5 10 b7 e2 5d 9a a4 71 35 09 93     V..T.....]..q5..
     859:	ac 34 28 a9 1a c6 12 89 a2 de b0 c9 49 9c 0c 4a     .4(.........I..J
     869:	94 0e 61 16 66 83 00 c7 0d a6 1b ce 90 84 6a c7     ..a.f.........j.
     879:	64 08 43 09 c8 0c b5 e3 4d 9a 0f 63 38 8c c5 41     d.C.....M..c8..A
     889:	c9 0c b5 e3 5d 7d 18 c3 61 2c 0e 02 ca 0d b5 e3     ....]}..a,......
     899:	55 96 c4 c3 18 0e 63 71 10 cb 0c a5 e3 4d 79 18     U.....cq.....My.
     8a9:	c3 61 2c 0e 02 cc 09 b2 e2 44 94 25 fd 00 cd 09     .a,......D.%....
     8b9:	b2 e3 8c 96 f4 0b 00 ce 09 b3 e2 4c 63 d4 2f 00     ...........Lc./.
     8c9:	cf 09 a3 e2 44 12 46 fd 02 d0 11 87 22 ce 90 95     ....D.F....."...
     8d9:	c2 41 4a c2 24 4c b2 68 88 00 d1 12 b6 23 56 12     .AJ.$L.h.....#V.
     8e9:	25 39 a2 6d 4a a4 44 52 22 25 da 26 d2 0e b6 23     %9.mJ.DR"%.&...#
     8f9:	56 9c 43 43 12 fa 98 0c 09 00 d3 0d b6 23 66 1d     V.CC.........#f.
     909:	1a 92 d0 c7 64 48 00 d4 0e b6 23 56 98 e4 d0 90     ....dH....#V....
     919:	84 3e 26 43 02 d5 0f b6 23 56 12 25 39 34 24 a1     .>&C....#V.%94$.
     929:	8f c9 90 00 d6 0e a6 23 4e 94 23 43 12 fa 98 0c     .......#N.#C....
     939:	09 00 d7 0a 55 a6 45 96 d4 2a b5 00 d8 12 a6 1f     ....U.E..*......
     949:	6e 32 24 d9 94 48 89 12 29 d1 96 0c 49 0a d9 0c     n2$..H..)...I...
     959:	b6 23 56 9c 23 a1 1f 93 21 01 da 0c b6 23 66 1d     .#V.#...!....#f.
     969:	09 fd 98 0c 09 00 db 0d b6 23 56 98 e4 48 e8 c7     .........#V..H..
     979:	64 48 00 dc 0b a6 23 4e 94 87 7e 4c 86 04 dd 10     dH....#N..~L....
     989:	b7 e2 65 9a 63 69 92 45 59 25 4c d2 b8 06 de 0d     ..e.ci.EY%L.....
     999:	85 e3 45 18 0e 49 a6 0d 4a 18 02 df 0b 84 62 8d     ..E..I..J.....b.
     9a9:	12 59 4a 2e 09 00 e0 0d 95 62 4d 9a af d1 12 25     .YJ......bM....%
     9b9:	51 a4 04 e1 0e 95 62 55 96 23 6b b4 44 49 14 29     Q.....bU.#k.DI.)
     9c9:	01 e2 0e 95 62 55 96 c4 6b b4 44 49 14 29 01 e3     ....bU..k.DI.)..
     9d9:	0d 95 62 4d f7 35 5a a2 24 8a 94 00 e4 0c 85 62     ..bM.5Z.$......b
     9e9:	4d 79 8d 96 28 89 22 25 e5 0f 95 62 55 96 64 d1     My..(."%...bU.d.
     9f9:	1a 2d 51 12 45 4a 00 e6 0e 67 22 c6 22 46 c9 30     .-Q.EJ...g"."F.0
     a09:	44 59 54 b1 00 e7 0c 84 5a 8d 12 69 a5 44 8b 14     DYT.....Z..i.D..
     a19:	00 e8 0c 94 62 4d 18 2b d1 b0 45 89 02 e9 0c 94     ....bM.+..E.....
     a29:	62 55 5d 89 86 2d 4a 14 00 ea 0d 94 62 4d 94 c4     bU]..-J.....bM..
     a39:	4a 34 6c 51 a2 00 eb 0c 84 62 45 12 2b d1 b0 45     J4lQ.....bE.+..E
     a49:	89 02 ec 08 92 a1 44 94 25 3d ed 08 92 a2 8c 96     ......D.%=......
     a59:	f4 02 ee 09 93 a1 4c 63 d4 0b 00 ef 09 83 a1 44     ......Lc.......D
     a69:	12 46 bd 00 f0 0d 95 a2 4d 38 48 d1 a0 b9 25 0b     .F......M8H...%.
     a79:	00 f1 0a 94 62 4d a2 a4 4b e4 29 f2 0c 95 a2 4d     ....bM..K.)....M
     a89:	9a 23 4b e6 96 2c 00 f3 0b 95 a2 5d 1d 59 32 b7     .#K..,.....].Y2.
     a99:	64 01 f4 0c 95 a2 55 96 e4 4b e6 96 2c 00 f5 0b     d.....U..K..,...
     aa9:	95 a2 55 d2 be 64 6e c9 02 f6 0a 85 a2 4d 7d c9     ..U..dn......M}.
     ab9:	dc 92 05 f7 09 55 a6 55 3e e8 11 00 f8 0d 67 a1     .....U.U>.....g.
     ac9:	d5 52 92 92 92 54 4b 92 09 f9 0a 94 62 4d 98 46     .R...TK.....bM.F
     ad9:	9e 92 01 fa 0a 94 62 5d 94 46 9e 92 01 fb 0a 94     ......b].F......
     ae9:	62 4d 94 a4 91 a7 64 fc 0a 84 62 45 92 46 9e 92     bM....d...bE.F..
     af9:	01 fd 0f b5 59 65 96 47 49 94 94 92 4c 0b 23 0d     ....Ye.GI...L.#.
     b09:	fe 0d a5 9a 45 58 31 69 da a4 28 61 08 ff 0f a5     ....EX1i..(a....
     b19:	59 4d 3d 4a a2 a4 94 64 5a 18 69 00 00 00 00 04     YM=J...dZ.i.....
     b29:	ff ff 00 00                                         ....

00000b2d <u8g2_font_helvB14_tr>:
     b2d:	5f 00 03 03 05 05 03 05 06 12 12 ff fc 0e fc 0e     _...............
     b3d:	fc 02 25 04 ad 06 84 20 06 00 30 96 00 21 0a c3     ..%.... ..0..!..
     b4d:	15 96 f8 50 11 1e 04 22 0a a5 34 9f 90 70 19 45     ...P..."..4..p.E
     b5d:	00 23 1d ab 11 ae 94 88 25 62 89 ec 30 39 cc 24     .#......%b..09.$
     b6d:	62 89 58 22 3b 4c 0e 33 89 58 22 96 08 01 24 1d     b.X";L.3.X"...$.
     b7d:	0a d2 a9 0d db 0e 91 51 44 32 0a 8e a2 65 73 35     .......QD2...es5
     b8d:	64 09 59 42 93 43 cc 1c 07 45 01 25 1e ad 15 c2     d.YB.C...E.%....
     b9d:	21 8a 6c 22 6d 22 51 d0 22 a5 c8 81 71 a0 84 2a     !.l"m"Q."...q..*
     bad:	31 86 d4 44 da 4c 42 0a 00 26 1d cd 15 ba a3 43     1..D.LB..&.....C
     bbd:	cc a3 a9 50 3a 92 d7 41 33 99 49 34 32 09 69 d2     ...P:..A3.I42.i.
     bcd:	d9 ac 76 99 d5 06 27 08 a2 34 93 38 48 00 28 0f     ..v...'..4.8H.(.
     bdd:	46 96 9d 1b cd 64 33 d9 fe 28 1c 0a 17 29 12 46     F....d3..(...).F
     bed:	92 9d 18 0e 85 43 e1 6c bf c9 66 b2 d1 0c 00 2a     .....C.l..f....*
     bfd:	0f c7 14 a7 8b 49 22 92 da 4c 22 8a 45 00 2b 0d     .....I"..L".E.+.
     c0d:	08 35 ae 13 ab 1d 0e 32 b1 1a 00 2c 0a c3 b4 95     .5.....2...,....
     c1d:	38 48 28 21 00 2d 07 65 90 9a 78 08 2e 07 63 14     8H(!.-.e..x...c.
     c2d:	96 38 08 2f 10 c5 11 96 d3 34 92 29 8d 64 a2 91     .8./.....4.).d..
     c3d:	4c 0d 00 30 0f a9 11 aa 1b 9e 26 6b fe 36 59 3a     L..0......&k.6Y:
     c4d:	ce 00 31 0b a6 15 aa 1b 1d 0e b2 fd 03 32 12 a9     ..1..........2..
     c5d:	11 aa aa 5d 66 b6 f1 74 58 ab 51 97 0f 07 02 33     ...]f..tX.Q....3
     c6d:	13 a9 11 aa aa 5d 46 93 99 78 48 2d 93 6d 26 ca     .....]F..xH-.m&.
     c7d:	ad 04 34 15 a9 11 aa 9d 12 6b 36 c9 68 32 12 4d     ..4......k6.h2.M
     c8d:	46 93 c3 81 3a 5e 01 35 15 a9 11 aa 38 44 0e 91     F...:^.5....8D..
     c9d:	f1 f8 74 88 8c c8 63 9b e9 50 32 01 36 14 a9 11     ..t...c..P2.6...
     cad:	aa 32 1d 22 b3 f2 64 74 88 90 8c 8d a6 c9 ad 04     .2."..dt........
     cbd:	37 10 a9 11 aa 78 20 4f 97 a7 e3 e9 78 3a 5e 05     7....x O....x:^.
     ccd:	38 12 a9 11 aa aa 5d 66 6e 93 5b 6d b2 e6 36 b9     8.....]fn.[m..6.
     cdd:	95 00 39 14 a9 11 aa aa 5d 46 c6 46 13 e5 10 9a     ..9.....]F.F....
     ced:	8c 6b 93 43 c8 04 3a 0a 43 15 9a 38 c8 a1 07 01     .k.C..:.C..8....
     cfd:	3b 0c a3 b5 99 38 c8 a1 07 09 25 04 3c 0d 29 15     ;....8....%.<.).
     d0d:	ae 1e 96 6a c4 39 b9 79 00 3d 0b a9 74 ae 78 a0     ...j.9.y.=..t.x.
     d1d:	83 0e 07 02 3e 0d 29 15 ae 18 37 d3 87 b4 52 71     ....>.)...7...Rq
     d2d:	0c 3f 11 c8 15 aa b1 1c 48 a6 e1 90 b8 ba 0e 9e     .?......H.......
     d3d:	ae 01 40 2a 30 b6 c9 bd 1f 88 54 d2 1c a4 36 91     ..@*0.....T...6.
     d4d:	98 4e 34 91 8c 24 93 91 14 49 6a 12 91 9a 64 72     .N4..$...Ij...dr
     d5d:	18 8d 28 c3 39 9c 0e 3e c8 41 47 00 41 19 cc 15     ..(.9..>.AG.A...
     d6d:	ba a4 43 e8 66 91 58 24 1d 0d 47 43 b5 e1 e8 30     ..C.f.X$..GC...0
     d7d:	3a 4c c6 ce 03 42 1a cb 19 ba 38 1e 44 33 ca 70     :L...B....8.D3.p
     d8d:	32 9c cc 46 07 d1 61 32 bc 3a 1e 2e 87 18 00 43     2..F..a2.:.....C
     d9d:	1b cc 15 ba ac 1e 44 b4 d1 f4 6a 07 cd 41 73 d0     ......D...j..As.
     dad:	1c 44 9d 4c 27 b4 d9 41 5a 03 44 16 cc 15 ba 38     .D.L'..AZ.D....8
     dbd:	04 0f a3 21 65 3a 19 fb eb 64 48 39 8c 0e 41 00     ...!e:...dH9..A.
     dcd:	45 11 ca 19 b6 f8 20 df 7e 90 1c 24 f3 ed 87 83     E..... .~..$....
     ddd:	01 46 0f ca 15 b2 f8 20 df 7e 90 1c 24 f3 bd 03     .F..... .~..$...
     ded:	47 1b cc 15 be ac 1e 44 b4 d1 f4 6a 07 cd 41 b3     G......D...j..A.
     dfd:	83 ec 30 9d 4c 27 34 d2 61 66 11 48 0d cc 15 ba     ..0.L'4.af.H....
     e0d:	18 fb f9 f0 41 ec e7 01 49 07 c3 15 96 f8 07 4a     ....A...I......J
     e1d:	0d c9 11 aa de 9f 6d b6 0b e5 56 02 4b 1b cd 15     ......m...V.K...
     e2d:	ba 98 52 86 a4 19 6d 44 9c 50 cf f6 f3 84 3a 22     ..R...mD.P....:"
     e3d:	ce 68 43 d2 94 32 26 4c 0b c9 15 ae 18 ef 7f 3e     .hC..2&L.......>
     e4d:	1c 08 4d 21 ce 15 c2 98 43 ec 90 f3 21 7c 10 1e     ..M!....C...!|..
     e5d:	86 87 e1 21 22 92 58 44 12 8b 48 62 22 99 48 36     ...!".XD..Hb".H6
     e6d:	99 4d 36 4e 1a cc 15 ba 18 5f 1f 82 07 99 45 66     .M6N....._....Ef
     e7d:	19 99 44 a6 89 4d 62 3c 04 0f d1 f3 00 4f 16 cd     ..D..Mb<.....O..
     e8d:	15 be 2c 1f 64 4c d3 09 f5 ee fd 4a 99 8e 68 b4     ..,.dL.....J..h.
     e9d:	83 b8 08 50 19 cb 15 b6 38 c4 0e 93 e1 d5 e3 e1     ...P....8.......
     ead:	72 88 cd 21 73 c8 1c 32 87 cc 21 00 51 1a ed f5     r..!s..2..!.Q...
     ebd:	bd 2c 1f 64 4c d3 09 f5 ee fd 24 a1 8c 4c a4 da     .,.dL.....$..L..
     ecd:	41 7c 88 03 25 00 52 1e cc 15 ba 38 04 0f a3 21     A|..%.R....8...!
     edd:	65 3a 99 4e 86 94 c3 e8 20 1b 8e a6 93 e9 64 3a     e:.N.... .....d:
     eed:	99 4e a6 04 53 16 cb 15 b6 ba 1d 24 b4 eb 1d 62     .N..S......$...b
     efd:	3e db 21 57 eb 8d 72 90 9d 00 54 1c cb 11 ae f8     >.!W..r...T.....
     f0d:	10 9c 43 e6 90 39 64 0e 99 43 e6 90 39 64 0e 99     ..C..9d..C..9d..
     f1d:	43 e6 90 39 64 08 55 0e cc 15 ba 18 fb 3f 4f 86     C..9d.U......?O.
     f2d:	a3 c3 d0 06 56 1e cd 11 b6 98 db 27 d3 d1 74 26     ....V......'..t&
     f3d:	15 ce 86 b3 e9 64 3c 99 4b e4 90 3a a4 0e 9a c3     .....d<.K..:....
     f4d:	a6 00 57 1d cf 15 c6 98 cd 6c 33 db cc b6 32 da     ..W......l3...2.
     f5d:	bf a8 cc 24 1a 25 1a 2b d5 d9 78 36 9e cd 00 58     ...$.%.+..x6...X
     f6d:	19 cc 11 b2 18 9b 27 c3 11 a3 48 6c a7 9b 45 d2     ......'...Hl..E.
     f7d:	d1 6c 38 1a 4e c6 e6 01 59 1c cd 11 b6 98 db 27     .l8.N...Y......'
     f8d:	d3 d9 e2 6c 3a 19 4f e6 75 d0 1c 36 87 cd 61 73     ...l:.O.u..6..as
     f9d:	d8 1c 36 05 5a 10 ca 15 b2 78 b0 8f d7 c7 db c7     ..6.Z....x......
     fad:	eb 87 83 01 5b 0b 45 96 99 38 98 f6 ff 74 18 5c     ....[.E..8...t.\
     fbd:	0d c5 11 96 90 a9 cd b4 cd d4 66 1a 5d 0b 45 92     ..........f.].E.
     fcd:	99 38 8c f6 ff 74 30 5e 0f ea d0 aa 94 93 a9 22     .8...t0^......."
     fdd:	d9 68 24 94 0c 07 5f 07 4a 90 a9 78 30 60 07 65     .h$..._.J..x0`.e
     fed:	70 97 98 2d 61 13 4a 15 ae 2a de 64 63 da 89 b2     p..-a.J..*.dc...
     ffd:	36 19 51 2a 23 0a 01 62 14 ca 15 b2 98 ef 42 3a     6.Q*#..b......B:
    100d:	48 48 93 a1 c7 d3 e4 20 99 90 00 63 10 49 15 ae     HH..... ...c.I..
    101d:	a3 1d 22 23 f3 f6 d1 e4 10 23 01 64 13 ca 15 b2     .."#.....#.d....
    102d:	df 89 32 39 48 46 47 8f 93 11 e5 20 a2 0c 65 11     ..29HFG.... ..e.
    103d:	49 15 ae a3 9d 46 c6 c3 83 7c 34 39 c4 48 00 66     I....F...|49.H.f
    104d:	0e c7 11 9e 23 95 86 a3 c3 69 b8 9f 00 67 18 ca     ....#....i...g..
    105d:	95 b1 a2 4c 0e 92 d1 d1 e3 64 44 39 88 28 f3 c9     ...L.....dD9.(..
    106d:	68 74 08 d2 00 68 0d c9 15 ae 18 ef 42 39 98 6c     ht...h......B9.l
    107d:	fe 36 69 0a c3 15 96 38 c8 0e 1f 04 6a 0c 45 8e     .6i....8....j.E.
    108d:	95 da 3e da 7f 3a 54 00 6b 12 c9 15 aa 18 ef 34     ..>..:T.k......4
    109d:	59 b2 15 8b b6 c9 68 65 74 1b 6c 07 c3 15 96 f8     Y.....het.l.....
    10ad:	07 6d 18 4f 15 c6 98 90 28 87 43 89 64 9b d9 66     .m.O....(.C.d..f
    10bd:	b6 99 6d 66 9b d9 66 b6 05 6e 0c 49 15 ae 98 50     ..mf..f..n.I...P
    10cd:	0e 26 9b bf 0d 6f 11 4a 15 b2 23 1e 42 2b 43 8f     .&...o.J..#.B+C.
    10dd:	93 d1 e8 10 a4 01 70 15 ca 95 b1 98 90 0e 12 d2     ......p.........
    10ed:	64 e8 f1 34 39 48 26 a4 f9 76 00 71 13 ca 95 b1     d..49H&..v.q....
    10fd:	a2 4c 0e 92 d1 d1 e3 64 44 39 88 28 f3 1d 72 0b     .L.....dD9.(..r.
    110d:	46 15 9e 98 1c 0e b3 7d 03 73 10 49 15 ae 32 1d     F......}.s.I..2.
    111d:	68 e6 43 ec 6c 3b 90 4c 00 74 0d a6 11 9a 99 2d     h.C.l;.L.t.....-
    112d:	1d 2a b3 bd 95 08 75 0b 49 15 ae 98 f9 a7 83 85     .*....u.I.......
    113d:	32 76 11 49 11 a6 98 b9 4d 96 26 a3 c9 ac 58 1d     2v.I....M.&...X.
    114d:	cf 00 77 19 4f 11 be 98 cd 6c 33 db ca 68 4b 65     ..w.O....l3..hKe
    115d:	34 51 99 55 8a 34 ea 6c 3c 9b 01 78 11 49 15 ae     4Q.U.4.l<..x.I..
    116d:	98 d9 26 6b d5 69 6d 32 9a ac d9 06 79 14 c9 95     ..&k.im2....y...
    117d:	ad 98 b9 4d 96 26 a3 c9 ac 58 1d 2f 4b a9 53 00     ...M.&...X./K.S.
    118d:	7a 0c 48 15 aa 78 90 0e f7 7a 38 08 7b 0d 47 96     z.H..x...z8.{.G.
    119d:	a1 9c 2d ee b6 ba b8 d7 05 7c 08 42 96 95 f8 43     ..-......|.B...C
    11ad:	00 7d 0e 47 92 a1 98 2e ee ba b6 b8 b7 45 00 7e     .}.G.........E.~
    11bd:	0a 69 94 ae 21 1d 4c 14 00 00 00 00 04 ff ff 00     .i..!.L.........
	...

000011ce <digital_pin_to_timer_PGM>:
    11ce:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

000011e9 <digital_pin_to_bit_mask_PGM>:
    11e9:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
    11f9:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

00001204 <digital_pin_to_port_PGM>:
    1204:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
    1214:	03 03 03 03 02 02 03 05 05 05 05                    ...........

0000121f <port_to_input_PGM>:
    121f:	00 00 00 00 23 00 26 00 29 00 2c 00                 ....#.&.).,.

0000122b <port_to_output_PGM>:
    122b:	00 00 00 00 25 00 28 00 2b 00 2e 00                 ....%.(.+...

00001237 <port_to_mode_PGM>:
    1237:	00 00 00 00 24 00 27 00 2a 00 2d 00 00              ....$.'.*.-..

00001244 <__ctors_start>:
__ctors_start():
    1244:	ae 15       	cp	r26, r14
    1246:	60 2d       	mov	r22, r0
    1248:	0d 30       	cpi	r16, 0x0D	; 13
    124a:	5d 34       	cpi	r21, 0x4D	; 77

0000124c <__ctors_end>:
__ctors_end():
    124c:	b5 2d       	mov	r27, r5
    124e:	62 30       	cpi	r22, 0x02	; 2

00001250 <__dtors_end>:
__init():
../../../../crt1/gcrt1.S:230
    1250:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
    1252:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
    1254:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
    1256:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
    1258:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
    125a:	cd bf       	out	0x3d, r28	; 61

0000125c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
    125c:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
    125e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
    1260:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
    1262:	ec ec       	ldi	r30, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
    1264:	fb e7       	ldi	r31, 0x7B	; 123
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
    1266:	02 c0       	rjmp	.+4      	; 0x126c <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
    1268:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
    126a:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
    126c:	ac 3e       	cpi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
    126e:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
    1270:	d9 f7       	brne	.-10     	; 0x1268 <__do_copy_data+0xc>

00001272 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
    1272:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
    1274:	ac ee       	ldi	r26, 0xEC	; 236
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
    1276:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
    1278:	01 c0       	rjmp	.+2      	; 0x127c <.do_clear_bss_start>

0000127a <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
    127a:	1d 92       	st	X+, r1

0000127c <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
    127c:	a5 30       	cpi	r26, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
    127e:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
    1280:	e1 f7       	brne	.-8      	; 0x127a <.do_clear_bss_loop>

00001282 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
    1282:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
    1284:	c6 e2       	ldi	r28, 0x26	; 38
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
    1286:	d9 e0       	ldi	r29, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
    128a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
    128c:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
    128e:	0e 94 3a 3c 	call	0x7874	; 0x7874 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
    1292:	c2 32       	cpi	r28, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
    1294:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
    1296:	c9 f7       	brne	.-14     	; 0x128a <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
    1298:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <main>
../../../../crt1/gcrt1.S:315
    129c:	0c 94 d9 3d 	jmp	0x7bb2	; 0x7bb2 <__do_global_dtors>

000012a0 <__bad_interrupt>:
__vector_30():
../../../../crt1/gcrt1.S:209
    12a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000012a4 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	08 95       	ret

000012aa <Print::flush()>:
_ZN5Print5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:65

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    12aa:	08 95       	ret

000012ac <U8G2::write(unsigned char const*, unsigned int)>:
_ZN4U8G25writeEPKhj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:356
	
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	6c 01       	movw	r12, r24
    12be:	eb 01       	movw	r28, r22
    12c0:	7b 01       	movw	r14, r22
    12c2:	e4 0e       	add	r14, r20
    12c4:	f5 1e       	adc	r15, r21
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:357
      size_t cnt = 0;
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	00 e0       	ldi	r16, 0x00	; 0
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:358
      while( size > 0 ) {
    12ca:	ce 15       	cp	r28, r14
    12cc:	df 05       	cpc	r29, r15
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <U8G2::write(unsigned char const*, unsigned int)+0x3c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:359
	cnt += write(*buffer++); 
    12d0:	69 91       	ld	r22, Y+
    12d2:	d6 01       	movw	r26, r12
    12d4:	ed 91       	ld	r30, X+
    12d6:	fc 91       	ld	r31, X
    12d8:	01 90       	ld	r0, Z+
    12da:	f0 81       	ld	r31, Z
    12dc:	e0 2d       	mov	r30, r0
    12de:	c6 01       	movw	r24, r12
    12e0:	09 95       	icall
    12e2:	08 0f       	add	r16, r24
    12e4:	19 1f       	adc	r17, r25
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:358
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
    12e6:	f1 cf       	rjmp	.-30     	; 0x12ca <U8G2::write(unsigned char const*, unsigned int)+0x1e>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:363
	cnt += write(*buffer++); 
	size--;
      }
      return cnt;
    }
    12e8:	c8 01       	movw	r24, r16
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	08 95       	ret

000012fc <U8G2::write(unsigned char)>:
_ZN4U8G25writeEh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:318
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);
#endif

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:319
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
    130e:	6c 01       	movw	r12, r24
    1310:	24 e0       	ldi	r18, 0x04	; 4
    1312:	c2 0e       	add	r12, r18
    1314:	d1 1c       	adc	r13, r1
    1316:	fc 01       	movw	r30, r24
    1318:	e0 57       	subi	r30, 0x70	; 112
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	01 90       	ld	r0, Z+
    131e:	f0 81       	ld	r31, Z
    1320:	e0 2d       	mov	r30, r0
    1322:	c6 01       	movw	r24, r12
    1324:	09 95       	icall
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:321
      
      if ( e < 0x0fffe )
    1326:	8e 3f       	cpi	r24, 0xFE	; 254
    1328:	ef ef       	ldi	r30, 0xFF	; 255
    132a:	9e 07       	cpc	r25, r30
    132c:	d8 f4       	brcc	.+54     	; 0x1364 <U8G2::write(unsigned char)+0x68>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:323
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
    132e:	8e 01       	movw	r16, r28
    1330:	0c 56       	subi	r16, 0x6C	; 108
    1332:	1f 4f       	sbci	r17, 0xFF	; 255
    1334:	f8 01       	movw	r30, r16
    1336:	40 81       	ld	r20, Z
    1338:	51 81       	ldd	r21, Z+1	; 0x01
    133a:	7e 01       	movw	r14, r28
    133c:	f2 e9       	ldi	r31, 0x92	; 146
    133e:	ef 0e       	add	r14, r31
    1340:	f1 1c       	adc	r15, r1
    1342:	f7 01       	movw	r30, r14
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	9c 01       	movw	r18, r24
    134a:	c6 01       	movw	r24, r12
    134c:	0e 94 d1 24 	call	0x49a2	; 0x49a2 <u8g2_DrawGlyph>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:326
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
    1350:	c0 59       	subi	r28, 0x90	; 144
    1352:	df 4f       	sbci	r29, 0xFF	; 255
    1354:	28 81       	ld	r18, Y
    1356:	21 30       	cpi	r18, 0x01	; 1
    1358:	c1 f0       	breq	.+48     	; 0x138a <U8G2::write(unsigned char)+0x8e>
    135a:	78 f0       	brcs	.+30     	; 0x137a <U8G2::write(unsigned char)+0x7e>
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	b9 f0       	breq	.+46     	; 0x138e <U8G2::write(unsigned char)+0x92>
    1360:	23 30       	cpi	r18, 0x03	; 3
    1362:	e9 f0       	breq	.+58     	; 0x139e <U8G2::write(unsigned char)+0xa2>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:354
	
	
	
      }
      return 1;
     }
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:329
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
    137a:	f7 01       	movw	r30, r14
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:332
	    break;
	  case 1:
	    ty += delta;
    137c:	20 81       	ld	r18, Z
    137e:	31 81       	ldd	r19, Z+1	; 0x01
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:333
	    break;
    1388:	ed cf       	rjmp	.-38     	; 0x1364 <U8G2::write(unsigned char)+0x68>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:332
	{
	  case 0:
	    tx += delta;
	    break;
	  case 1:
	    ty += delta;
    138a:	f8 01       	movw	r30, r16
    138c:	f7 cf       	rjmp	.-18     	; 0x137c <U8G2::write(unsigned char)+0x80>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:335
	    break;
	  case 2:
	    tx -= delta;
    138e:	f7 01       	movw	r30, r14
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 3:
	    ty -= delta;
    1390:	20 81       	ld	r18, Z
    1392:	31 81       	ldd	r19, Z+1	; 0x01
    1394:	28 1b       	sub	r18, r24
    1396:	39 0b       	sbc	r19, r25
    1398:	31 83       	std	Z+1, r19	; 0x01
    139a:	20 83       	st	Z, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:339
	    break;
    139c:	e3 cf       	rjmp	.-58     	; 0x1364 <U8G2::write(unsigned char)+0x68>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:338
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
    139e:	f8 01       	movw	r30, r16
    13a0:	f7 cf       	rjmp	.-18     	; 0x1390 <U8G2::write(unsigned char)+0x94>

000013a2 <EERef::update(unsigned char)>:
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    13ae:	f6 2e       	mov	r15, r22
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    13b0:	08 81       	ld	r16, Y
    13b2:	19 81       	ldd	r17, Y+1	; 0x01
    13b4:	c8 01       	movw	r24, r16
    13b6:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <eeprom_read_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    13ba:	f8 16       	cp	r15, r24
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <EERef::update(unsigned char)+0x24>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    13be:	6f 2d       	mov	r22, r15
    13c0:	c8 01       	movw	r24, r16
    13c2:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <eeprom_write_byte>
_ZN5EERef6updateEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:59 (discriminator 4)
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    13c6:	ce 01       	movw	r24, r28
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	08 95       	ret

000013d4 <__vector_3>:
__vector_3():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:97
bool TempGetrennt = false;


// Interrupt-Routine
// Interrupt Vector für Port B (PCINT0_vect)
ISR(PCINT0_vect) {
    13d4:	1f 92       	push	r1
    13d6:	0f 92       	push	r0
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	0f 92       	push	r0
    13dc:	11 24       	eor	r1, r1
    13de:	2f 93       	push	r18
    13e0:	3f 93       	push	r19
    13e2:	4f 93       	push	r20
    13e4:	5f 93       	push	r21
    13e6:	6f 93       	push	r22
    13e8:	7f 93       	push	r23
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    13ee:	af 93       	push	r26
    13f0:	bf 93       	push	r27
    13f2:	ef 93       	push	r30
    13f4:	ff 93       	push	r31
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:99
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    13f6:	8c e0       	ldi	r24, 0x0C	; 12
    13f8:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    13fc:	89 2b       	or	r24, r25
    13fe:	b1 f1       	breq	.+108    	; 0x146c <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:99 (discriminator 1)
    1400:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ZustandBremse>
    1404:	81 11       	cpse	r24, r1
    1406:	32 c0       	rjmp	.+100    	; 0x146c <__vector_3+0x98>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:100
    ZustandBremse = true;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:104
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    ZustandBremse = false;
    ZustandBearbeitet = false;
    140e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:108
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    1412:	8b e0       	ldi	r24, 0x0B	; 11
    1414:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1418:	89 2b       	or	r24, r25
    141a:	21 f4       	brne	.+8      	; 0x1424 <__vector_3+0x50>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:108 (discriminator 1)
    141c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandHandbremse>
    1420:	88 23       	and	r24, r24
    1422:	81 f1       	breq	.+96     	; 0x1484 <__vector_3+0xb0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:111
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    1424:	8b e0       	ldi	r24, 0x0B	; 11
    1426:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    142a:	89 2b       	or	r24, r25
    142c:	89 f5       	brne	.+98     	; 0x1490 <__vector_3+0xbc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:117
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    142e:	8a e0       	ldi	r24, 0x0A	; 10
    1430:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1434:	89 2b       	or	r24, r25
    1436:	21 f4       	brne	.+8      	; 0x1440 <__vector_3+0x6c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:117 (discriminator 1)
    1438:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHauptschalter>
    143c:	88 23       	and	r24, r24
    143e:	79 f1       	breq	.+94     	; 0x149e <__vector_3+0xca>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:120
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    1440:	8a e0       	ldi	r24, 0x0A	; 10
    1442:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1446:	89 2b       	or	r24, r25
    1448:	81 f5       	brne	.+96     	; 0x14aa <__vector_3+0xd6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:124
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:102
ISR(PCINT0_vect) {
  // Wenn die Bremse von 0 auf 12 V wechselt
  if (digitalRead(IO_Bremse) && ZustandBremse == false) {
    ZustandBremse = true;
    ZustandBearbeitet = false;
  } else if (!digitalRead(IO_Bremse) && ZustandBremse == true) {
    146c:	8c e0       	ldi	r24, 0x0C	; 12
    146e:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1472:	89 2b       	or	r24, r25
    1474:	71 f6       	brne	.-100    	; 0x1412 <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:102 (discriminator 1)
    1476:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ZustandBremse>
    147a:	88 23       	and	r24, r24
    147c:	51 f2       	breq	.-108    	; 0x1412 <__vector_3+0x3e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:103
    ZustandBremse = false;
    147e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <ZustandBremse>
    1482:	c5 cf       	rjmp	.-118    	; 0x140e <__vector_3+0x3a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:109
    ZustandBearbeitet = false;
  }

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    ZustandHandbremse = true;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:113
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    ZustandHandbremse = false;
    ZustandBearbeitet = false;
    148a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
    148e:	cf cf       	rjmp	.-98     	; 0x142e <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:111 (discriminator 1)

  // Wenn die Handbremse von 0 auf 12 V wechselt
  if (!digitalRead(IO_Handbremse) && ZustandHandbremse == false) {
    ZustandHandbremse = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Handbremse) && ZustandHandbremse == true) {
    1490:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandHandbremse>
    1494:	88 23       	and	r24, r24
    1496:	59 f2       	breq	.-106    	; 0x142e <__vector_3+0x5a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:112
    ZustandHandbremse = false;
    1498:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <ZustandHandbremse>
    149c:	f6 cf       	rjmp	.-20     	; 0x148a <__vector_3+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:118
    ZustandBearbeitet = false;
  }

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    ZustandHauptschalter = true;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:122
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
    14a4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:124
  }
}
    14a8:	d0 cf       	rjmp	.-96     	; 0x144a <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:120 (discriminator 1)

  // Wenn der Hauptschalter von 12 auf 0 V wechselt
  if (!digitalRead(IO_Hauptschalter) && ZustandHauptschalter == false) {
    ZustandHauptschalter = true;
    ZustandBearbeitet = false;
  } else if (digitalRead(IO_Hauptschalter) && ZustandHauptschalter == true) {
    14aa:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHauptschalter>
    14ae:	88 23       	and	r24, r24
    14b0:	61 f2       	breq	.-104    	; 0x144a <__vector_3+0x76>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:121
    ZustandHauptschalter = false;
    14b2:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <ZustandHauptschalter>
    14b6:	f6 cf       	rjmp	.-20     	; 0x14a4 <__vector_3+0xd0>

000014b8 <SchreibeDisplay()>:
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:401
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}

void SchreibeDisplay() {
    14b8:	2f 92       	push	r2
    14ba:	3f 92       	push	r3
    14bc:	4f 92       	push	r4
    14be:	5f 92       	push	r5
    14c0:	6f 92       	push	r6
    14c2:	7f 92       	push	r7
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:402
  if (!PumpeFehler && !TMCFehler) {
    14dc:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <PumpeFehler>
    14e0:	81 11       	cpse	r24, r1
    14e2:	9a c1       	rjmp	.+820    	; 0x1818 <SchreibeDisplay()+0x360>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:402 (discriminator 1)
    14e4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <TMCFehler>
    14e8:	81 11       	cpse	r24, r1
    14ea:	96 c1       	rjmp	.+812    	; 0x1818 <SchreibeDisplay()+0x360>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:403
    int BreiteBox = map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 118);
    14ec:	e0 90 b3 02 	lds	r14, 0x02B3	; 0x8002b3 <Schrittzahl100Prozent>
    14f0:	f0 90 b4 02 	lds	r15, 0x02B4	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    14f4:	0f 2c       	mov	r0, r15
    14f6:	00 0c       	add	r0, r0
    14f8:	00 0b       	sbc	r16, r16
    14fa:	11 0b       	sbc	r17, r17
    14fc:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Schrittzahl0Prozent>
    1500:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Schrittzahl0Prozent+0x1>
    1504:	03 2e       	mov	r0, r19
    1506:	00 0c       	add	r0, r0
    1508:	44 0b       	sbc	r20, r20
    150a:	55 0b       	sbc	r21, r21
    150c:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <Sperrgrad>
    1510:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <Sperrgrad+0x1>
    1514:	07 2e       	mov	r0, r23
    1516:	00 0c       	add	r0, r0
    1518:	88 0b       	sbc	r24, r24
    151a:	99 0b       	sbc	r25, r25
    151c:	1f 92       	push	r1
    151e:	1f 92       	push	r1
    1520:	1f 92       	push	r1
    1522:	e6 e7       	ldi	r30, 0x76	; 118
    1524:	ef 93       	push	r30
    1526:	a1 2c       	mov	r10, r1
    1528:	b1 2c       	mov	r11, r1
    152a:	65 01       	movw	r12, r10
    152c:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
    1530:	2b 01       	movw	r4, r22
    1532:	4b 01       	movw	r8, r22
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1534:	89 e1       	ldi	r24, 0x19	; 25
    1536:	92 e0       	ldi	r25, 0x02	; 2
    1538:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1544:	c5 e0       	ldi	r28, 0x05	; 5
    1546:	d0 e0       	ldi	r29, 0x00	; 0
    1548:	8d e3       	ldi	r24, 0x3D	; 61
    154a:	28 2e       	mov	r2, r24
    154c:	31 2c       	mov	r3, r1
_ZN4U8G29drawHLineEjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    154e:	20 e8       	ldi	r18, 0x80	; 128
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	89 e1       	ldi	r24, 0x19	; 25
    155c:	92 e0       	ldi	r25, 0x02	; 2
    155e:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <u8g2_DrawHLine>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1562:	69 ea       	ldi	r22, 0xA9	; 169
    1564:	72 e0       	ldi	r23, 0x02	; 2
    1566:	89 e1       	ldi	r24, 0x19	; 25
    1568:	92 e0       	ldi	r25, 0x02	; 2
    156a:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    156e:	d0 93 a8 02 	sts	0x02A8, r29	; 0x8002a8 <u8g2+0x93>
    1572:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <u8g2+0x92>
    1576:	8b e0       	ldi	r24, 0x0B	; 11
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <u8g2+0x95>
    157e:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:409
    u8g2.firstPage();
    do {
      u8g2.drawHLine(0, 0, 128);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(5, 11);
      u8g2.print(F("HALDEX"));
    1582:	6d e0       	ldi	r22, 0x0D	; 13
    1584:	72 e0       	ldi	r23, 0x02	; 2
    1586:	85 e1       	ldi	r24, 0x15	; 21
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawFrameEjjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:227
    void drawVLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t h) { u8g2_DrawVLine(&u8g2, x, y, h); }
    void drawHVLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir) {
      u8g2_DrawHVLine(&u8g2, x, y, len, dir); }
    
    /* u8g2_box.c */
    void drawFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawFrame(&u8g2, x, y, w, h); }
    158e:	0f e0       	ldi	r16, 0x0F	; 15
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	26 e7       	ldi	r18, 0x76	; 118
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	4f e0       	ldi	r20, 0x0F	; 15
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	65 e0       	ldi	r22, 0x05	; 5
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	89 e1       	ldi	r24, 0x19	; 25
    15a0:	92 e0       	ldi	r25, 0x02	; 2
    15a2:	0e 94 f6 20 	call	0x41ec	; 0x41ec <u8g2_DrawFrame>
_ZN4U8G28drawLineEjjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:244
    void drawEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawEllipse(&u8g2, x0, y0, rx, ry, opt); }
    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }    

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2) 
      { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
    15a6:	00 e1       	ldi	r16, 0x10	; 16
    15a8:	10 e0       	ldi	r17, 0x00	; 0
    15aa:	2b e4       	ldi	r18, 0x4B	; 75
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4f e0       	ldi	r20, 0x0F	; 15
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	6b e4       	ldi	r22, 0x4B	; 75
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	89 e1       	ldi	r24, 0x19	; 25
    15b8:	92 e0       	ldi	r25, 0x02	; 2
    15ba:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
    15be:	04 e1       	ldi	r16, 0x14	; 20
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	2b e4       	ldi	r18, 0x4B	; 75
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	43 e1       	ldi	r20, 0x13	; 19
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	6b e4       	ldi	r22, 0x4B	; 75
    15cc:	70 e0       	ldi	r23, 0x00	; 0
    15ce:	89 e1       	ldi	r24, 0x19	; 25
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
    15d6:	08 e1       	ldi	r16, 0x18	; 24
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	2b e4       	ldi	r18, 0x4B	; 75
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	47 e1       	ldi	r20, 0x17	; 23
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	6b e4       	ldi	r22, 0x4B	; 75
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	89 e1       	ldi	r24, 0x19	; 25
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
    15ee:	0c e1       	ldi	r16, 0x1C	; 28
    15f0:	10 e0       	ldi	r17, 0x00	; 0
    15f2:	2b e4       	ldi	r18, 0x4B	; 75
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4b e1       	ldi	r20, 0x1B	; 27
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	6b e4       	ldi	r22, 0x4B	; 75
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1606:	d0 93 a8 02 	sts	0x02A8, r29	; 0x8002a8 <u8g2+0x93>
    160a:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <u8g2+0x92>
    160e:	8f e2       	ldi	r24, 0x2F	; 47
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <u8g2+0x95>
    1616:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:419
      u8g2.drawLine(75, 23, 75, 24);
      u8g2.drawLine(75, 27, 75, 28);

      u8g2.setCursor(5, 47);

      if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur) {
    161a:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ZustandBremse>
    161e:	81 11       	cpse	r24, r1
    1620:	0e c1       	rjmp	.+540    	; 0x183e <SchreibeDisplay()+0x386>
    1622:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandHandbremse>
    1626:	81 11       	cpse	r24, r1
    1628:	0a c1       	rjmp	.+532    	; 0x183e <SchreibeDisplay()+0x386>
    162a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHauptschalter>
    162e:	81 11       	cpse	r24, r1
    1630:	06 c1       	rjmp	.+524    	; 0x183e <SchreibeDisplay()+0x386>
    1632:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandTemperatur>
    1636:	81 11       	cpse	r24, r1
    1638:	02 c1       	rjmp	.+516    	; 0x183e <SchreibeDisplay()+0x386>
_ZN4U8G27drawBoxEjjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:229
      u8g2_DrawHVLine(&u8g2, x, y, len, dir); }
    
    /* u8g2_box.c */
    void drawFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawFrame(&u8g2, x, y, w, h); }
    void drawRFrame(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, u8g2_uint_t r) { u8g2_DrawRFrame(&u8g2, x, y, w, h,r); }
    void drawBox(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h) { u8g2_DrawBox(&u8g2, x, y, w, h); }
    163a:	0f e0       	ldi	r16, 0x0F	; 15
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	92 01       	movw	r18, r4
    1640:	4f e0       	ldi	r20, 0x0F	; 15
    1642:	50 e0       	ldi	r21, 0x00	; 0
    1644:	65 e0       	ldi	r22, 0x05	; 5
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	89 e1       	ldi	r24, 0x19	; 25
    164a:	92 e0       	ldi	r25, 0x02	; 2
    164c:	0e 94 c2 20 	call	0x4184	; 0x4184 <u8g2_DrawBox>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:422

        u8g2.drawBox(5, 15, BreiteBox, 15);
        if (BreiteBox >= 71) {
    1650:	97 e4       	ldi	r25, 0x47	; 71
    1652:	89 16       	cp	r8, r25
    1654:	91 04       	cpc	r9, r1
    1656:	d4 f1       	brlt	.+116    	; 0x16cc <SchreibeDisplay()+0x214>
_ZN4U8G212setDrawColorEh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	89 e1       	ldi	r24, 0x19	; 25
    165c:	92 e0       	ldi	r25, 0x02	; 2
    165e:	0e 94 80 26 	call	0x4d00	; 0x4d00 <u8g2_SetDrawColor>
_ZN4U8G28drawLineEjjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:244
    void drawEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawEllipse(&u8g2, x0, y0, rx, ry, opt); }
    void drawFilledEllipse(u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_t opt = U8G2_DRAW_ALL) { u8g2_DrawFilledEllipse(&u8g2, x0, y0, rx, ry, opt); }    

    /* u8g2_line.c */
    void drawLine(u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2) 
      { u8g2_DrawLine(&u8g2, x1, y1, x2, y2); }
    1662:	00 e1       	ldi	r16, 0x10	; 16
    1664:	10 e0       	ldi	r17, 0x00	; 0
    1666:	2b e4       	ldi	r18, 0x4B	; 75
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4f e0       	ldi	r20, 0x0F	; 15
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	6b e4       	ldi	r22, 0x4B	; 75
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	89 e1       	ldi	r24, 0x19	; 25
    1674:	92 e0       	ldi	r25, 0x02	; 2
    1676:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
    167a:	04 e1       	ldi	r16, 0x14	; 20
    167c:	10 e0       	ldi	r17, 0x00	; 0
    167e:	2b e4       	ldi	r18, 0x4B	; 75
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	43 e1       	ldi	r20, 0x13	; 19
    1684:	50 e0       	ldi	r21, 0x00	; 0
    1686:	6b e4       	ldi	r22, 0x4B	; 75
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	89 e1       	ldi	r24, 0x19	; 25
    168c:	92 e0       	ldi	r25, 0x02	; 2
    168e:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
    1692:	08 e1       	ldi	r16, 0x18	; 24
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	2b e4       	ldi	r18, 0x4B	; 75
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	47 e1       	ldi	r20, 0x17	; 23
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	6b e4       	ldi	r22, 0x4B	; 75
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	89 e1       	ldi	r24, 0x19	; 25
    16a4:	92 e0       	ldi	r25, 0x02	; 2
    16a6:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
    16aa:	0c e1       	ldi	r16, 0x1C	; 28
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	2b e4       	ldi	r18, 0x4B	; 75
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	4b e1       	ldi	r20, 0x1B	; 27
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	6b e4       	ldi	r22, 0x4B	; 75
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	89 e1       	ldi	r24, 0x19	; 25
    16bc:	92 e0       	ldi	r25, 0x02	; 2
    16be:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <u8g2_DrawLine>
_ZN4U8G212setDrawColorEh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	89 e1       	ldi	r24, 0x19	; 25
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	0e 94 80 26 	call	0x4d00	; 0x4d00 <u8g2_SetDrawColor>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    16cc:	6d e2       	ldi	r22, 0x2D	; 45
    16ce:	7b e0       	ldi	r23, 0x0B	; 11
    16d0:	89 e1       	ldi	r24, 0x19	; 25
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:432
          u8g2.drawLine(75, 27, 75, 28);
          u8g2.setDrawColor(1);
        }

        u8g2.setFont(u8g2_font_helvB14_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
    16d8:	e0 90 b3 02 	lds	r14, 0x02B3	; 0x8002b3 <Schrittzahl100Prozent>
    16dc:	f0 90 b4 02 	lds	r15, 0x02B4	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    16e0:	0f 2c       	mov	r0, r15
    16e2:	00 0c       	add	r0, r0
    16e4:	00 0b       	sbc	r16, r16
    16e6:	11 0b       	sbc	r17, r17
    16e8:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Schrittzahl0Prozent>
    16ec:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Schrittzahl0Prozent+0x1>
    16f0:	03 2e       	mov	r0, r19
    16f2:	00 0c       	add	r0, r0
    16f4:	44 0b       	sbc	r20, r20
    16f6:	55 0b       	sbc	r21, r21
    16f8:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <Sperrgrad>
    16fc:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <Sperrgrad+0x1>
    1700:	07 2e       	mov	r0, r23
    1702:	00 0c       	add	r0, r0
    1704:	88 0b       	sbc	r24, r24
    1706:	99 0b       	sbc	r25, r25
    1708:	1f 92       	push	r1
    170a:	1f 92       	push	r1
    170c:	1f 92       	push	r1
    170e:	e4 e6       	ldi	r30, 0x64	; 100
    1710:	ef 93       	push	r30
    1712:	a1 2c       	mov	r10, r1
    1714:	b1 2c       	mov	r11, r1
    1716:	65 01       	movw	r12, r10
    1718:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
    171c:	ab 01       	movw	r20, r22
    171e:	bc 01       	movw	r22, r24
    1720:	2a e0       	ldi	r18, 0x0A	; 10
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	85 e1       	ldi	r24, 0x15	; 21
    1726:	92 e0       	ldi	r25, 0x02	; 2
    1728:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <Print::print(long, int)>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    172c:	69 ea       	ldi	r22, 0xA9	; 169
    172e:	72 e0       	ldi	r23, 0x02	; 2
    1730:	89 e1       	ldi	r24, 0x19	; 25
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:434
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
    1738:	6a e0       	ldi	r22, 0x0A	; 10
    173a:	72 e0       	ldi	r23, 0x02	; 2
    173c:	85 e1       	ldi	r24, 0x15	; 21
    173e:	92 e0       	ldi	r25, 0x02	; 2
    1740:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
_ZN4U8G29drawHLineEjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    174c:	20 e8       	ldi	r18, 0x80	; 128
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	41 e3       	ldi	r20, 0x31	; 49
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	70 e0       	ldi	r23, 0x00	; 0
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	89 e1       	ldi	r24, 0x19	; 25
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <u8g2_DrawHLine>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1760:	69 ea       	ldi	r22, 0xA9	; 169
    1762:	72 e0       	ldi	r23, 0x02	; 2
    1764:	89 e1       	ldi	r24, 0x19	; 25
    1766:	92 e0       	ldi	r25, 0x02	; 2
    1768:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    176c:	d0 93 a8 02 	sts	0x02A8, r29	; 0x8002a8 <u8g2+0x93>
    1770:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <u8g2+0x92>
    1774:	30 92 aa 02 	sts	0x02AA, r3	; 0x8002aa <u8g2+0x95>
    1778:	20 92 a9 02 	sts	0x02A9, r2	; 0x8002a9 <u8g2+0x94>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:458
      }

      u8g2.drawHLine(0, 49, 128);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.setCursor(5, 61);
      u8g2.write(0xD6);
    177c:	66 ed       	ldi	r22, 0xD6	; 214
    177e:	85 e1       	ldi	r24, 0x15	; 21
    1780:	92 e0       	ldi	r25, 0x02	; 2
    1782:	0e 94 7e 09 	call	0x12fc	; 0x12fc <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:459
      u8g2.print(F("ltemperatur "));
    1786:	69 eb       	ldi	r22, 0xB9	; 185
    1788:	71 e0       	ldi	r23, 0x01	; 1
    178a:	85 e1       	ldi	r24, 0x15	; 21
    178c:	92 e0       	ldi	r25, 0x02	; 2
    178e:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:460
      if(TempGetrennt) u8g2.print(F("!")); 
    1792:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
    1796:	88 23       	and	r24, r24
    1798:	31 f0       	breq	.+12     	; 0x17a6 <SchreibeDisplay()+0x2ee>
    179a:	67 eb       	ldi	r22, 0xB7	; 183
    179c:	71 e0       	ldi	r23, 0x01	; 1
    179e:	85 e1       	ldi	r24, 0x15	; 21
    17a0:	92 e0       	ldi	r25, 0x02	; 2
    17a2:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:461
      u8g2.print(Temperatur, 0);
    17a6:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <Temperatur>
    17aa:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <Temperatur+0x1>
    17ae:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <Temperatur+0x2>
    17b2:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <Temperatur+0x3>
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	85 e1       	ldi	r24, 0x15	; 21
    17bc:	92 e0       	ldi	r25, 0x02	; 2
    17be:	0e 94 83 36 	call	0x6d06	; 0x6d06 <Print::print(double, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:462
      if(TempGetrennt) u8g2.print(F("!"));
    17c2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
    17c6:	88 23       	and	r24, r24
    17c8:	31 f0       	breq	.+12     	; 0x17d6 <SchreibeDisplay()+0x31e>
    17ca:	65 eb       	ldi	r22, 0xB5	; 181
    17cc:	71 e0       	ldi	r23, 0x01	; 1
    17ce:	85 e1       	ldi	r24, 0x15	; 21
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:463
      u8g2.print(F(" "));
    17d6:	63 eb       	ldi	r22, 0xB3	; 179
    17d8:	71 e0       	ldi	r23, 0x01	; 1
    17da:	85 e1       	ldi	r24, 0x15	; 21
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:464
      u8g2.write(0xB0);
    17e2:	60 eb       	ldi	r22, 0xB0	; 176
    17e4:	85 e1       	ldi	r24, 0x15	; 21
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:465
      u8g2.print(F("C"));
    17ec:	61 eb       	ldi	r22, 0xB1	; 177
    17ee:	71 e0       	ldi	r23, 0x01	; 1
    17f0:	85 e1       	ldi	r24, 0x15	; 21
    17f2:	92 e0       	ldi	r25, 0x02	; 2
    17f4:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    17f8:	20 e8       	ldi	r18, 0x80	; 128
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4f e3       	ldi	r20, 0x3F	; 63
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	89 e1       	ldi	r24, 0x19	; 25
    1806:	92 e0       	ldi	r25, 0x02	; 2
    1808:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <u8g2_DrawHLine>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    180c:	89 e1       	ldi	r24, 0x19	; 25
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
_Z15SchreibeDisplayv():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:468
      u8g2.drawHLine(0, 63, 128);

    } while (u8g2.nextPage());
    1814:	81 11       	cpse	r24, r1
    1816:	9b ce       	rjmp	.-714    	; 0x154e <SchreibeDisplay()+0x96>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:470
  }
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	5f 90       	pop	r5
    1836:	4f 90       	pop	r4
    1838:	3f 90       	pop	r3
    183a:	2f 90       	pop	r2
    183c:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:436
        u8g2.setFont(u8g2_font_helvB14_tr);
        u8g2.print(map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100));
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.print(F(" %"));
      } else {
        if (ZustandHandbremse) {
    183e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandHandbremse>
    1842:	88 23       	and	r24, r24
    1844:	89 f0       	breq	.+34     	; 0x1868 <SchreibeDisplay()+0x3b0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:437
          u8g2.print(F("Handbremse bet"));
    1846:	6b ef       	ldi	r22, 0xFB	; 251
    1848:	71 e0       	ldi	r23, 0x01	; 1
    184a:	85 e1       	ldi	r24, 0x15	; 21
    184c:	92 e0       	ldi	r25, 0x02	; 2
    184e:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:438
          u8g2.write(0xE4);
    1852:	64 ee       	ldi	r22, 0xE4	; 228
    1854:	85 e1       	ldi	r24, 0x15	; 21
    1856:	92 e0       	ldi	r25, 0x02	; 2
    1858:	0e 94 7e 09 	call	0x12fc	; 0x12fc <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:439
          u8g2.print(F("tigt"));
    185c:	66 ef       	ldi	r22, 0xF6	; 246
    185e:	71 e0       	ldi	r23, 0x01	; 1
    1860:	85 e1       	ldi	r24, 0x15	; 21
    1862:	92 e0       	ldi	r25, 0x02	; 2
    1864:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:441
        }
        if (ZustandBremse) {
    1868:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ZustandBremse>
    186c:	88 23       	and	r24, r24
    186e:	89 f0       	breq	.+34     	; 0x1892 <SchreibeDisplay()+0x3da>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:442
          u8g2.print(F("Bremse bet"));
    1870:	6b ee       	ldi	r22, 0xEB	; 235
    1872:	71 e0       	ldi	r23, 0x01	; 1
    1874:	85 e1       	ldi	r24, 0x15	; 21
    1876:	92 e0       	ldi	r25, 0x02	; 2
    1878:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:443
          u8g2.write(0xE4);
    187c:	64 ee       	ldi	r22, 0xE4	; 228
    187e:	85 e1       	ldi	r24, 0x15	; 21
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	0e 94 7e 09 	call	0x12fc	; 0x12fc <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:444
          u8g2.print(F("tigt"));
    1886:	66 ee       	ldi	r22, 0xE6	; 230
    1888:	71 e0       	ldi	r23, 0x01	; 1
    188a:	85 e1       	ldi	r24, 0x15	; 21
    188c:	92 e0       	ldi	r25, 0x02	; 2
    188e:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:446
        }
        if (ZustandHauptschalter) {
    1892:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHauptschalter>
    1896:	88 23       	and	r24, r24
    1898:	31 f0       	breq	.+12     	; 0x18a6 <SchreibeDisplay()+0x3ee>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:447
          u8g2.print(F("Hauptschalter aus"));
    189a:	64 ed       	ldi	r22, 0xD4	; 212
    189c:	71 e0       	ldi	r23, 0x01	; 1
    189e:	85 e1       	ldi	r24, 0x15	; 21
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:449
        }
        if (ZustandTemperatur) {
    18a6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandTemperatur>
    18aa:	88 23       	and	r24, r24
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <SchreibeDisplay()+0x3f8>
    18ae:	4e cf       	rjmp	.-356    	; 0x174c <SchreibeDisplay()+0x294>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:450
          u8g2.write(0xDC);
    18b0:	6c ed       	ldi	r22, 0xDC	; 220
    18b2:	85 e1       	ldi	r24, 0x15	; 21
    18b4:	92 e0       	ldi	r25, 0x02	; 2
    18b6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <U8G2::write(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:451
          u8g2.print(F("bertemperatur"));
    18ba:	66 ec       	ldi	r22, 0xC6	; 198
    18bc:	71 e0       	ldi	r23, 0x01	; 1
    18be:	85 e1       	ldi	r24, 0x15	; 21
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
    18c6:	42 cf       	rjmp	.-380    	; 0x174c <SchreibeDisplay()+0x294>

000018c8 <LeseTMCStatus(bool)>:
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:516
  }

  LeseTMCStatus(false);
}

void LeseTMCStatus(bool PruefeOpenLoad) {
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	c8 2f       	mov	r28, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:517
  TMCStatus = stepper_driver.getStatus();
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	92 e0       	ldi	r25, 0x02	; 2
    18de:	0e 94 70 18 	call	0x30e0	; 0x30e0 <TMC2209::getStatus()>
    18e2:	60 93 fb 02 	sts	0x02FB, r22	; 0x8002fb <TMCStatus>
    18e6:	70 93 fc 02 	sts	0x02FC, r23	; 0x8002fc <TMCStatus+0x1>
    18ea:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <TMCStatus+0x2>
    18ee:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <TMCStatus+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:519

  if (TMCStatus.over_temperature_shutdown == 1) {
    18f2:	61 ff       	sbrs	r22, 1
    18f4:	51 c0       	rjmp	.+162    	; 0x1998 <LeseTMCStatus(bool)+0xd0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:520
    TMCFehler = true;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <TMCFehler>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    18fc:	89 e1       	ldi	r24, 0x19	; 25
    18fe:	92 e0       	ldi	r25, 0x02	; 2
    1900:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1904:	2f e0       	ldi	r18, 0x0F	; 15
    1906:	c2 2e       	mov	r12, r18
    1908:	d1 2c       	mov	r13, r1
    190a:	38 e2       	ldi	r19, 0x28	; 40
    190c:	e3 2e       	mov	r14, r19
    190e:	f1 2c       	mov	r15, r1
    1910:	02 e3       	ldi	r16, 0x32	; 50
    1912:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1914:	6d e2       	ldi	r22, 0x2D	; 45
    1916:	7b e0       	ldi	r23, 0x0B	; 11
    1918:	89 e1       	ldi	r24, 0x19	; 25
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1920:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1924:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1928:	d0 92 aa 02 	sts	0x02AA, r13	; 0x8002aa <u8g2+0x95>
    192c:	c0 92 a9 02 	sts	0x02A9, r12	; 0x8002a9 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:525
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1930:	64 e8       	ldi	r22, 0x84	; 132
    1932:	71 e0       	ldi	r23, 0x01	; 1
    1934:	85 e1       	ldi	r24, 0x15	; 21
    1936:	92 e0       	ldi	r25, 0x02	; 2
    1938:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    193c:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1940:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1944:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <u8g2+0x95>
    1948:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    194c:	69 ea       	ldi	r22, 0xA9	; 169
    194e:	72 e0       	ldi	r23, 0x02	; 2
    1950:	89 e1       	ldi	r24, 0x19	; 25
    1952:	92 e0       	ldi	r25, 0x02	; 2
    1954:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:528
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Übertemperatur"));
    1958:	64 e7       	ldi	r22, 0x74	; 116
    195a:	71 e0       	ldi	r23, 0x01	; 1
    195c:	85 e1       	ldi	r24, 0x15	; 21
    195e:	92 e0       	ldi	r25, 0x02	; 2
    1960:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1964:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1968:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    196c:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    1970:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:530
      u8g2.setCursor(0, 50);
      u8g2.print(F("Motortreiber"));
    1974:	67 e6       	ldi	r22, 0x67	; 103
    1976:	71 e0       	ldi	r23, 0x01	; 1
    1978:	85 e1       	ldi	r24, 0x15	; 21
    197a:	92 e0       	ldi	r25, 0x02	; 2
    197c:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1980:	89 e1       	ldi	r24, 0x19	; 25
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:531
    } while (u8g2.nextPage());
    1988:	81 11       	cpse	r24, r1
    198a:	c4 cf       	rjmp	.-120    	; 0x1914 <LeseTMCStatus(bool)+0x4c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:532
    delay(10000);
    198c:	60 e1       	ldi	r22, 0x10	; 16
    198e:	77 e2       	ldi	r23, 0x27	; 39
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:535
  }

  if (TMCStatus.short_to_ground_a == 1 || TMCStatus.short_to_ground_b == 1) {
    1998:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TMCStatus>
    199c:	8c 70       	andi	r24, 0x0C	; 12
    199e:	09 f4       	brne	.+2      	; 0x19a2 <LeseTMCStatus(bool)+0xda>
    19a0:	40 c0       	rjmp	.+128    	; 0x1a22 <LeseTMCStatus(bool)+0x15a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:536
    TMCFehler = true;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <TMCFehler>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    19a8:	89 e1       	ldi	r24, 0x19	; 25
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19b0:	9f e0       	ldi	r25, 0x0F	; 15
    19b2:	e9 2e       	mov	r14, r25
    19b4:	f1 2c       	mov	r15, r1
    19b6:	08 e2       	ldi	r16, 0x28	; 40
    19b8:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    19ba:	6d e2       	ldi	r22, 0x2D	; 45
    19bc:	7b e0       	ldi	r23, 0x0B	; 11
    19be:	89 e1       	ldi	r24, 0x19	; 25
    19c0:	92 e0       	ldi	r25, 0x02	; 2
    19c2:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    19c6:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    19ca:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    19ce:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <u8g2+0x95>
    19d2:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:541
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    19d6:	6f e5       	ldi	r22, 0x5F	; 95
    19d8:	71 e0       	ldi	r23, 0x01	; 1
    19da:	85 e1       	ldi	r24, 0x15	; 21
    19dc:	92 e0       	ldi	r25, 0x02	; 2
    19de:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    19e2:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    19e6:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    19ea:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    19ee:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    19f2:	69 ea       	ldi	r22, 0xA9	; 169
    19f4:	72 e0       	ldi	r23, 0x02	; 2
    19f6:	89 e1       	ldi	r24, 0x19	; 25
    19f8:	92 e0       	ldi	r25, 0x02	; 2
    19fa:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:544
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Kurzschluss nach Masse"));
    19fe:	68 e4       	ldi	r22, 0x48	; 72
    1a00:	71 e0       	ldi	r23, 0x01	; 1
    1a02:	85 e1       	ldi	r24, 0x15	; 21
    1a04:	92 e0       	ldi	r25, 0x02	; 2
    1a06:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a0a:	89 e1       	ldi	r24, 0x19	; 25
    1a0c:	92 e0       	ldi	r25, 0x02	; 2
    1a0e:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:545
    } while (u8g2.nextPage());
    1a12:	81 11       	cpse	r24, r1
    1a14:	d2 cf       	rjmp	.-92     	; 0x19ba <LeseTMCStatus(bool)+0xf2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:546
    delay(10000);
    1a16:	60 e1       	ldi	r22, 0x10	; 16
    1a18:	77 e2       	ldi	r23, 0x27	; 39
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:549
  }

  if (TMCStatus.low_side_short_a == 1 || TMCStatus.low_side_short_b == 1) {
    1a22:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TMCStatus>
    1a26:	80 73       	andi	r24, 0x30	; 48
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <LeseTMCStatus(bool)+0x164>
    1a2a:	40 c0       	rjmp	.+128    	; 0x1aac <LeseTMCStatus(bool)+0x1e4>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:550
    TMCFehler = true;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <TMCFehler>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1a32:	89 e1       	ldi	r24, 0x19	; 25
    1a34:	92 e0       	ldi	r25, 0x02	; 2
    1a36:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a3a:	8f e0       	ldi	r24, 0x0F	; 15
    1a3c:	e8 2e       	mov	r14, r24
    1a3e:	f1 2c       	mov	r15, r1
    1a40:	08 e2       	ldi	r16, 0x28	; 40
    1a42:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1a44:	6d e2       	ldi	r22, 0x2D	; 45
    1a46:	7b e0       	ldi	r23, 0x0B	; 11
    1a48:	89 e1       	ldi	r24, 0x19	; 25
    1a4a:	92 e0       	ldi	r25, 0x02	; 2
    1a4c:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1a50:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1a54:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1a58:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <u8g2+0x95>
    1a5c:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:555
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1a60:	60 e4       	ldi	r22, 0x40	; 64
    1a62:	71 e0       	ldi	r23, 0x01	; 1
    1a64:	85 e1       	ldi	r24, 0x15	; 21
    1a66:	92 e0       	ldi	r25, 0x02	; 2
    1a68:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1a6c:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1a70:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1a74:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    1a78:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1a7c:	69 ea       	ldi	r22, 0xA9	; 169
    1a7e:	72 e0       	ldi	r23, 0x02	; 2
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	92 e0       	ldi	r25, 0x02	; 2
    1a84:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:558
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Kurzschluss Stepper"));
    1a88:	6c e2       	ldi	r22, 0x2C	; 44
    1a8a:	71 e0       	ldi	r23, 0x01	; 1
    1a8c:	85 e1       	ldi	r24, 0x15	; 21
    1a8e:	92 e0       	ldi	r25, 0x02	; 2
    1a90:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1a94:	89 e1       	ldi	r24, 0x19	; 25
    1a96:	92 e0       	ldi	r25, 0x02	; 2
    1a98:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:559
    } while (u8g2.nextPage());
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	d2 cf       	rjmp	.-92     	; 0x1a44 <LeseTMCStatus(bool)+0x17c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:560
    delay(10000);
    1aa0:	60 e1       	ldi	r22, 0x10	; 16
    1aa2:	77 e2       	ldi	r23, 0x27	; 39
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:562
  }
  if ((TMCStatus.open_load_a == 1 || TMCStatus.open_load_b == 1) && PruefeOpenLoad) {
    1aac:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <TMCStatus>
    1ab0:	80 7c       	andi	r24, 0xC0	; 192
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <LeseTMCStatus(bool)+0x1ee>
    1ab4:	4a c0       	rjmp	.+148    	; 0x1b4a <LeseTMCStatus(bool)+0x282>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:562 (discriminator 1)
    1ab6:	cc 23       	and	r28, r28
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <LeseTMCStatus(bool)+0x1f4>
    1aba:	47 c0       	rjmp	.+142    	; 0x1b4a <LeseTMCStatus(bool)+0x282>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:563
    TMCFehler = true;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <TMCFehler>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1ac2:	89 e1       	ldi	r24, 0x19	; 25
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    1ac6:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1aca:	0f e0       	ldi	r16, 0x0F	; 15
    1acc:	10 e0       	ldi	r17, 0x00	; 0
    1ace:	c8 e2       	ldi	r28, 0x28	; 40
    1ad0:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1ad2:	6d e2       	ldi	r22, 0x2D	; 45
    1ad4:	7b e0       	ldi	r23, 0x0B	; 11
    1ad6:	89 e1       	ldi	r24, 0x19	; 25
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1ade:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1ae2:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1ae6:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    1aea:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:568
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    1aee:	64 e2       	ldi	r22, 0x24	; 36
    1af0:	71 e0       	ldi	r23, 0x01	; 1
    1af2:	85 e1       	ldi	r24, 0x15	; 21
    1af4:	92 e0       	ldi	r25, 0x02	; 2
    1af6:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1afa:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1afe:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1b02:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    1b06:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1b0a:	69 ea       	ldi	r22, 0xA9	; 169
    1b0c:	72 e0       	ldi	r23, 0x02	; 2
    1b0e:	89 e1       	ldi	r24, 0x19	; 25
    1b10:	92 e0       	ldi	r25, 0x02	; 2
    1b12:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:571
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Unterbrechung Stepper"));
    1b16:	6e e0       	ldi	r22, 0x0E	; 14
    1b18:	71 e0       	ldi	r23, 0x01	; 1
    1b1a:	85 e1       	ldi	r24, 0x15	; 21
    1b1c:	92 e0       	ldi	r25, 0x02	; 2
    1b1e:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1b22:	89 e1       	ldi	r24, 0x19	; 25
    1b24:	92 e0       	ldi	r25, 0x02	; 2
    1b26:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
_Z13LeseTMCStatusb():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:572
    } while (u8g2.nextPage());
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	d2 cf       	rjmp	.-92     	; 0x1ad2 <LeseTMCStatus(bool)+0x20a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:573
    delay(10000);
    1b2e:	60 e1       	ldi	r22, 0x10	; 16
    1b30:	77 e2       	ldi	r23, 0x27	; 39
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:575
  }
}
    1b36:	df 91       	pop	r29
    1b38:	cf 91       	pop	r28
    1b3a:	1f 91       	pop	r17
    1b3c:	0f 91       	pop	r16
    1b3e:	ff 90       	pop	r15
    1b40:	ef 90       	pop	r14
    1b42:	df 90       	pop	r13
    1b44:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:573
      u8g2.print(F("Fehler!"));
      u8g2.setCursor(0, 40);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Unterbrechung Stepper"));
    } while (u8g2.nextPage());
    delay(10000);
    1b46:	0c 94 56 37 	jmp	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:575
  }
}
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	cf 90       	pop	r12
    1b5a:	08 95       	ret

00001b5c <BerechneTemperatur(int)>:
_Z18BerechneTemperaturi():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:577

void BerechneTemperatur(int temp) {
    1b5c:	8f 92       	push	r8
    1b5e:	9f 92       	push	r9
    1b60:	af 92       	push	r10
    1b62:	bf 92       	push	r11
    1b64:	cf 92       	push	r12
    1b66:	df 92       	push	r13
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:578
  float TemperaturTiefpass = 0.01 * (float)temp + 0.99 * (float)TemperaturAlt;
    1b72:	24 ea       	ldi	r18, 0xA4	; 164
    1b74:	30 e7       	ldi	r19, 0x70	; 112
    1b76:	4d e7       	ldi	r20, 0x7D	; 125
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <TemperaturAlt>
    1b7e:	70 91 f4 01 	lds	r23, 0x01F4	; 0x8001f4 <TemperaturAlt+0x1>
    1b82:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <TemperaturAlt+0x2>
    1b86:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <TemperaturAlt+0x3>
    1b8a:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1b8e:	4b 01       	movw	r8, r22
    1b90:	5c 01       	movw	r10, r24
    1b92:	b7 01       	movw	r22, r14
    1b94:	ff 0c       	add	r15, r15
    1b96:	88 0b       	sbc	r24, r24
    1b98:	99 0b       	sbc	r25, r25
    1b9a:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    1b9e:	2a e0       	ldi	r18, 0x0A	; 10
    1ba0:	37 ed       	ldi	r19, 0xD7	; 215
    1ba2:	43 e2       	ldi	r20, 0x23	; 35
    1ba4:	5c e3       	ldi	r21, 0x3C	; 60
    1ba6:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1baa:	9b 01       	movw	r18, r22
    1bac:	ac 01       	movw	r20, r24
    1bae:	c5 01       	movw	r24, r10
    1bb0:	b4 01       	movw	r22, r8
    1bb2:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:579
  TemperaturAlt = TemperaturTiefpass;
    1bb6:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <TemperaturAlt>
    1bba:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <TemperaturAlt+0x1>
    1bbe:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <TemperaturAlt+0x2>
    1bc2:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <TemperaturAlt+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:581
  //TemperaturTiefpass = temp;
  int Vo = map((int)TemperaturTiefpass, 0, 1023, 1023, 0);
    1bc6:	0e 94 b8 39 	call	0x7370	; 0x7370 <__fixsfsi>
    1bca:	07 2e       	mov	r0, r23
    1bcc:	00 0c       	add	r0, r0
    1bce:	88 0b       	sbc	r24, r24
    1bd0:	99 0b       	sbc	r25, r25
    1bd2:	1f 92       	push	r1
    1bd4:	1f 92       	push	r1
    1bd6:	1f 92       	push	r1
    1bd8:	1f 92       	push	r1
    1bda:	aa 24       	eor	r10, r10
    1bdc:	aa 94       	dec	r10
    1bde:	23 e0       	ldi	r18, 0x03	; 3
    1be0:	b2 2e       	mov	r11, r18
    1be2:	c1 2c       	mov	r12, r1
    1be4:	d1 2c       	mov	r13, r1
    1be6:	ee 24       	eor	r14, r14
    1be8:	ea 94       	dec	r14
    1bea:	13 e0       	ldi	r17, 0x03	; 3
    1bec:	f1 2e       	mov	r15, r17
    1bee:	00 e0       	ldi	r16, 0x00	; 0
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:582
  if (Vo < 2) {
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	62 30       	cpi	r22, 0x02	; 2
    1c06:	71 05       	cpc	r23, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <BerechneTemperatur(int)+0xb8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:584
    Vo = 525;
    TempGetrennt = true;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:583
  float TemperaturTiefpass = 0.01 * (float)temp + 0.99 * (float)TemperaturAlt;
  TemperaturAlt = TemperaturTiefpass;
  //TemperaturTiefpass = temp;
  int Vo = map((int)TemperaturTiefpass, 0, 1023, 1023, 0);
  if (Vo < 2) {
    Vo = 525;
    1c10:	6d e0       	ldi	r22, 0x0D	; 13
    1c12:	72 e0       	ldi	r23, 0x02	; 2
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:586
    TempGetrennt = true;
  }
  R2 = R1 * (1023.0 / (float)Vo - 1.0);
    1c14:	07 2e       	mov	r0, r23
    1c16:	00 0c       	add	r0, r0
    1c18:	88 0b       	sbc	r24, r24
    1c1a:	99 0b       	sbc	r25, r25
    1c1c:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	70 ec       	ldi	r23, 0xC0	; 192
    1c28:	8f e7       	ldi	r24, 0x7F	; 127
    1c2a:	94 e4       	ldi	r25, 0x44	; 68
    1c2c:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    1c3c:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <R1>
    1c40:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <R1+0x1>
    1c44:	40 91 15 01 	lds	r20, 0x0115	; 0x800115 <R1+0x2>
    1c48:	50 91 16 01 	lds	r21, 0x0116	; 0x800116 <R1+0x3>
    1c4c:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1c50:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <R2>
    1c54:	70 93 0e 02 	sts	0x020E, r23	; 0x80020e <R2+0x1>
    1c58:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <R2+0x2>
    1c5c:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <R2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:587
  logR2 = log(R2);
    1c60:	0e 94 ad 3a 	call	0x755a	; 0x755a <log>
    1c64:	6b 01       	movw	r12, r22
    1c66:	7c 01       	movw	r14, r24
    1c68:	c0 92 11 02 	sts	0x0211, r12	; 0x800211 <logR2>
    1c6c:	d0 92 12 02 	sts	0x0212, r13	; 0x800212 <logR2+0x1>
    1c70:	e0 92 13 02 	sts	0x0213, r14	; 0x800213 <logR2+0x2>
    1c74:	f0 92 14 02 	sts	0x0214, r15	; 0x800214 <logR2+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:589
  
  Temperatur = (1.0 / (c1 + c2 * logR2 + c3 * logR2 * logR2 * logR2));
    1c78:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <c2>
    1c7c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <c2+0x1>
    1c80:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <c2+0x2>
    1c84:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <c2+0x3>
    1c88:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1c8c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <c1>
    1c90:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <c1+0x1>
    1c94:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <c1+0x2>
    1c98:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <c1+0x3>
    1c9c:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    1ca0:	4b 01       	movw	r8, r22
    1ca2:	5c 01       	movw	r10, r24
    1ca4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <c3>
    1ca8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <c3+0x1>
    1cac:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <c3+0x2>
    1cb0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <c3+0x3>
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1cbc:	a7 01       	movw	r20, r14
    1cbe:	96 01       	movw	r18, r12
    1cc0:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1cc4:	a7 01       	movw	r20, r14
    1cc6:	96 01       	movw	r18, r12
    1cc8:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1ccc:	9b 01       	movw	r18, r22
    1cce:	ac 01       	movw	r20, r24
    1cd0:	c5 01       	movw	r24, r10
    1cd2:	b4 01       	movw	r22, r8
    1cd4:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    1cd8:	9b 01       	movw	r18, r22
    1cda:	ac 01       	movw	r20, r24
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	80 e8       	ldi	r24, 0x80	; 128
    1ce2:	9f e3       	ldi	r25, 0x3F	; 63
    1ce4:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:590
  Temperatur = Temperatur - 273.15;
    1ce8:	23 e3       	ldi	r18, 0x33	; 51
    1cea:	33 e9       	ldi	r19, 0x93	; 147
    1cec:	48 e8       	ldi	r20, 0x88	; 136
    1cee:	53 e4       	ldi	r21, 0x43	; 67
    1cf0:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    1cf4:	60 93 09 02 	sts	0x0209, r22	; 0x800209 <Temperatur>
    1cf8:	70 93 0a 02 	sts	0x020A, r23	; 0x80020a <Temperatur+0x1>
    1cfc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <Temperatur+0x2>
    1d00:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <Temperatur+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:591
}
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	08 95       	ret

00001d1a <BerechneSperrgradPoti(int)>:
_Z21BerechneSperrgradPotii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:595



int BerechneSperrgradPoti(int poti) {
    1d1a:	4f 92       	push	r4
    1d1c:	5f 92       	push	r5
    1d1e:	6f 92       	push	r6
    1d20:	7f 92       	push	r7
    1d22:	8f 92       	push	r8
    1d24:	9f 92       	push	r9
    1d26:	af 92       	push	r10
    1d28:	bf 92       	push	r11
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	0f 93       	push	r16
    1d34:	1f 93       	push	r17
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:596
  float SperrgradRAW = map(poti, 0, 1020, 0, 100);
    1d36:	bc 01       	movw	r22, r24
    1d38:	99 0f       	add	r25, r25
    1d3a:	88 0b       	sbc	r24, r24
    1d3c:	99 0b       	sbc	r25, r25
    1d3e:	1f 92       	push	r1
    1d40:	1f 92       	push	r1
    1d42:	1f 92       	push	r1
    1d44:	24 e6       	ldi	r18, 0x64	; 100
    1d46:	2f 93       	push	r18
    1d48:	a1 2c       	mov	r10, r1
    1d4a:	b1 2c       	mov	r11, r1
    1d4c:	65 01       	movw	r12, r10
    1d4e:	1c ef       	ldi	r17, 0xFC	; 252
    1d50:	e1 2e       	mov	r14, r17
    1d52:	13 e0       	ldi	r17, 0x03	; 3
    1d54:	f1 2e       	mov	r15, r17
    1d56:	00 e0       	ldi	r16, 0x00	; 0
    1d58:	10 e0       	ldi	r17, 0x00	; 0
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	a9 01       	movw	r20, r18
    1d60:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
    1d64:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:597
  SperrgradRAW = SperrgradRAW / 100;
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	48 ec       	ldi	r20, 0xC8	; 200
    1d6e:	52 e4       	ldi	r21, 0x42	; 66
    1d70:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    1d74:	6b 01       	movw	r12, r22
    1d76:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:598
  float SperrgradRAWKorrigiert = 0.9 * (SperrgradRAW * SperrgradRAW * SperrgradRAW) - 1.3 * (SperrgradRAW * SperrgradRAW) + 1.35 * SperrgradRAW + 0.03;
    1d78:	ac 01       	movw	r20, r24
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1d80:	4b 01       	movw	r8, r22
    1d82:	5c 01       	movw	r10, r24
    1d84:	a7 01       	movw	r20, r14
    1d86:	96 01       	movw	r18, r12
    1d88:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1d8c:	26 e6       	ldi	r18, 0x66	; 102
    1d8e:	36 e6       	ldi	r19, 0x66	; 102
    1d90:	46 e6       	ldi	r20, 0x66	; 102
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1d98:	2b 01       	movw	r4, r22
    1d9a:	3c 01       	movw	r6, r24
    1d9c:	26 e6       	ldi	r18, 0x66	; 102
    1d9e:	36 e6       	ldi	r19, 0x66	; 102
    1da0:	46 ea       	ldi	r20, 0xA6	; 166
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	c5 01       	movw	r24, r10
    1da6:	b4 01       	movw	r22, r8
    1da8:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1dac:	9b 01       	movw	r18, r22
    1dae:	ac 01       	movw	r20, r24
    1db0:	c3 01       	movw	r24, r6
    1db2:	b2 01       	movw	r22, r4
    1db4:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    1db8:	4b 01       	movw	r8, r22
    1dba:	5c 01       	movw	r10, r24
    1dbc:	2d ec       	ldi	r18, 0xCD	; 205
    1dbe:	3c ec       	ldi	r19, 0xCC	; 204
    1dc0:	4c ea       	ldi	r20, 0xAC	; 172
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	c7 01       	movw	r24, r14
    1dc6:	b6 01       	movw	r22, r12
    1dc8:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1dcc:	9b 01       	movw	r18, r22
    1dce:	ac 01       	movw	r20, r24
    1dd0:	c5 01       	movw	r24, r10
    1dd2:	b4 01       	movw	r22, r8
    1dd4:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    1dd8:	2f e8       	ldi	r18, 0x8F	; 143
    1dda:	32 ec       	ldi	r19, 0xC2	; 194
    1ddc:	45 ef       	ldi	r20, 0xF5	; 245
    1dde:	5c e3       	ldi	r21, 0x3C	; 60
    1de0:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:599
  SperrgradRAWKorrigiert = SperrgradRAWKorrigiert * 100;
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	48 ec       	ldi	r20, 0xC8	; 200
    1dea:	52 e4       	ldi	r21, 0x42	; 66
    1dec:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:600
  int temp = (int)SperrgradRAWKorrigiert;
    1df0:	0e 94 b8 39 	call	0x7370	; 0x7370 <__fixsfsi>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:603
  if (temp < 0)
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
    1df4:	a0 90 ab 02 	lds	r10, 0x02AB	; 0x8002ab <Schrittzahl0Prozent>
    1df8:	b0 90 ac 02 	lds	r11, 0x02AC	; 0x8002ac <Schrittzahl0Prozent+0x1>
    1dfc:	0b 2c       	mov	r0, r11
    1dfe:	00 0c       	add	r0, r0
    1e00:	cc 08       	sbc	r12, r12
    1e02:	dd 08       	sbc	r13, r13
    1e04:	77 ff       	sbrs	r23, 7
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <BerechneSperrgradPoti(int)+0xf2>
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	07 2e       	mov	r0, r23
    1e0e:	00 0c       	add	r0, r0
    1e10:	88 0b       	sbc	r24, r24
    1e12:	99 0b       	sbc	r25, r25
    1e14:	00 91 b3 02 	lds	r16, 0x02B3	; 0x8002b3 <Schrittzahl100Prozent>
    1e18:	10 91 b4 02 	lds	r17, 0x02B4	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    1e1c:	01 2e       	mov	r0, r17
    1e1e:	00 0c       	add	r0, r0
    1e20:	22 0b       	sbc	r18, r18
    1e22:	33 0b       	sbc	r19, r19
    1e24:	3f 93       	push	r19
    1e26:	2f 93       	push	r18
    1e28:	1f 93       	push	r17
    1e2a:	0f 93       	push	r16
    1e2c:	12 e6       	ldi	r17, 0x62	; 98
    1e2e:	e1 2e       	mov	r14, r17
    1e30:	f1 2c       	mov	r15, r1
    1e32:	00 e0       	ldi	r16, 0x00	; 0
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	23 e0       	ldi	r18, 0x03	; 3
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:604
  return temp;
    1e42:	2d b7       	in	r18, 0x3d	; 61
    1e44:	3e b7       	in	r19, 0x3e	; 62
    1e46:	28 5f       	subi	r18, 0xF8	; 248
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	3e bf       	out	0x3e, r19	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	2d bf       	out	0x3d, r18	; 61
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:605
}
    1e54:	cb 01       	movw	r24, r22
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	9f 90       	pop	r9
    1e68:	8f 90       	pop	r8
    1e6a:	7f 90       	pop	r7
    1e6c:	6f 90       	pop	r6
    1e6e:	5f 90       	pop	r5
    1e70:	4f 90       	pop	r4
    1e72:	08 95       	ret

00001e74 <LeseEingaenge()>:
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:472

    } while (u8g2.nextPage());
  }
}

void LeseEingaenge() {
    1e74:	cf 92       	push	r12
    1e76:	df 92       	push	r13
    1e78:	ef 92       	push	r14
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:474
  // Lese Eingaenge
  BerechneTemperatur(analogRead(IO_Temperatur));
    1e84:	8e e0       	ldi	r24, 0x0E	; 14
    1e86:	0e 94 d6 37 	call	0x6fac	; 0x6fac <analogRead>
    1e8a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <BerechneTemperatur(int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:476

  if (!digitalRead(IO_Eingabe_50) && !digitalRead(IO_Eingabe_75)) {
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1e94:	89 2b       	or	r24, r25
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <LeseEingaenge()+0x26>
    1e98:	40 c0       	rjmp	.+128    	; 0x1f1a <LeseEingaenge()+0xa6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:476 (discriminator 1)
    1e9a:	83 e0       	ldi	r24, 0x03	; 3
    1e9c:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1ea0:	89 2b       	or	r24, r25
    1ea2:	d9 f5       	brne	.+118    	; 0x1f1a <LeseEingaenge()+0xa6>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    1ea4:	89 e1       	ldi	r24, 0x19	; 25
    1ea6:	92 e0       	ldi	r25, 0x02	; 2
    1ea8:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1eac:	04 e1       	ldi	r16, 0x14	; 20
    1eae:	10 e0       	ldi	r17, 0x00	; 0
    1eb0:	c2 e3       	ldi	r28, 0x32	; 50
    1eb2:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    1eb4:	69 ea       	ldi	r22, 0xA9	; 169
    1eb6:	72 e0       	ldi	r23, 0x02	; 2
    1eb8:	89 e1       	ldi	r24, 0x19	; 25
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    1ec0:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1ec4:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1ec8:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    1ecc:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:481
    u8g2.firstPage();
      do {
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.setCursor(0, 20);
        u8g2.print(F("Haldex Autotune"));
    1ed0:	61 ea       	ldi	r22, 0xA1	; 161
    1ed2:	71 e0       	ldi	r23, 0x01	; 1
    1ed4:	85 e1       	ldi	r24, 0x15	; 21
    1ed6:	92 e0       	ldi	r25, 0x02	; 2
    1ed8:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    1edc:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    1ee0:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    1ee4:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    1ee8:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:483
        u8g2.setCursor(0, 50);
        u8g2.print(F("beim naechsten Start"));
    1eec:	6c e8       	ldi	r22, 0x8C	; 140
    1eee:	71 e0       	ldi	r23, 0x01	; 1
    1ef0:	85 e1       	ldi	r24, 0x15	; 21
    1ef2:	92 e0       	ldi	r25, 0x02	; 2
    1ef4:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    1ef8:	89 e1       	ldi	r24, 0x19	; 25
    1efa:	92 e0       	ldi	r25, 0x02	; 2
    1efc:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:484
      } while (u8g2.nextPage());
    1f00:	81 11       	cpse	r24, r1
    1f02:	d8 cf       	rjmp	.-80     	; 0x1eb4 <LeseEingaenge()+0x40>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:485
      delay(2000);
    1f04:	60 ed       	ldi	r22, 0xD0	; 208
    1f06:	77 e0       	ldi	r23, 0x07	; 7
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <eeprom_write_byte>
_Z13LeseEingaengev():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:489
    EEPROM.write(0, 0);
  }

  if (!digitalRead(IO_Eingabe_25)) {
    1f1a:	8f e0       	ldi	r24, 0x0F	; 15
    1f1c:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1f20:	89 2b       	or	r24, r25
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <LeseEingaenge()+0xb2>
    1f24:	47 c0       	rjmp	.+142    	; 0x1fb4 <LeseEingaenge()+0x140>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:490
    Sperrgrad = BerechneSperrgradPoti(230);
    1f26:	86 ee       	ldi	r24, 0xE6	; 230
    1f28:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:497
    Sperrgrad = BerechneSperrgradPoti(550);
  } else if (!digitalRead(IO_Eingabe_75)) {
    Sperrgrad = BerechneSperrgradPoti(840);
  } else if (!digitalRead(IO_Eingabe_100)) {
    Sperrgrad = BerechneSperrgradPoti(1023);
  } else Sperrgrad = BerechneSperrgradPoti(0);
    1f2a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <BerechneSperrgradPoti(int)>
    1f2e:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <Sperrgrad+0x1>
    1f32:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <Sperrgrad>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:503

  

  // Anpassung des Sperrgrades über die Öltemperatur:
  // Bei wärmer werdendem Öl, wird das Ventil weiter geschlossen
  TempOffset = (Temperatur - 20) / 2;
    1f36:	c0 90 09 02 	lds	r12, 0x0209	; 0x800209 <Temperatur>
    1f3a:	d0 90 0a 02 	lds	r13, 0x020A	; 0x80020a <Temperatur+0x1>
    1f3e:	e0 90 0b 02 	lds	r14, 0x020B	; 0x80020b <Temperatur+0x2>
    1f42:	f0 90 0c 02 	lds	r15, 0x020C	; 0x80020c <Temperatur+0x3>
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 ea       	ldi	r20, 0xA0	; 160
    1f4c:	51 e4       	ldi	r21, 0x41	; 65
    1f4e:	c7 01       	movw	r24, r14
    1f50:	b6 01       	movw	r22, r12
    1f52:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    1f62:	0e 94 b8 39 	call	0x7370	; 0x7370 <__fixsfsi>
    1f66:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <TempOffset+0x1>
    1f6a:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <TempOffset>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:506

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	48 ec       	ldi	r20, 0xC8	; 200
    1f74:	52 e4       	ldi	r21, 0x42	; 66
    1f76:	c7 01       	movw	r24, r14
    1f78:	b6 01       	movw	r22, r12
    1f7a:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__gesf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	24 f4       	brge	.+8      	; 0x1f8a <LeseEingaenge()+0x116>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:506 (discriminator 1)
    1f82:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandTemperatur>
    1f86:	88 23       	and	r24, r24
    1f88:	81 f1       	breq	.+96     	; 0x1fea <LeseEingaenge()+0x176>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:509
    ZustandTemperatur = true;
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4e eb       	ldi	r20, 0xBE	; 190
    1f90:	52 e4       	ldi	r21, 0x42	; 66
    1f92:	c7 01       	movw	r24, r14
    1f94:	b6 01       	movw	r22, r12
    1f96:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	64 f5       	brge	.+88     	; 0x1ff6 <LeseEingaenge()+0x182>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:513
    ZustandTemperatur = false;
  }

  LeseTMCStatus(false);
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:514
}
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:513
    ZustandBearbeitet = false;
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    ZustandTemperatur = false;
  }

  LeseTMCStatus(false);
    1fb0:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:491
    EEPROM.write(0, 0);
  }

  if (!digitalRead(IO_Eingabe_25)) {
    Sperrgrad = BerechneSperrgradPoti(230);
  } else if (!digitalRead(IO_Eingabe_50)) {
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
    1fb6:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1fba:	89 2b       	or	r24, r25
    1fbc:	19 f4       	brne	.+6      	; 0x1fc4 <LeseEingaenge()+0x150>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:492
    Sperrgrad = BerechneSperrgradPoti(550);
    1fbe:	86 e2       	ldi	r24, 0x26	; 38
    1fc0:	92 e0       	ldi	r25, 0x02	; 2
    1fc2:	b3 cf       	rjmp	.-154    	; 0x1f2a <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:493
  } else if (!digitalRead(IO_Eingabe_75)) {
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1fca:	89 2b       	or	r24, r25
    1fcc:	19 f4       	brne	.+6      	; 0x1fd4 <LeseEingaenge()+0x160>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:494
    Sperrgrad = BerechneSperrgradPoti(840);
    1fce:	88 e4       	ldi	r24, 0x48	; 72
    1fd0:	93 e0       	ldi	r25, 0x03	; 3
    1fd2:	ab cf       	rjmp	.-170    	; 0x1f2a <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:495
  } else if (!digitalRead(IO_Eingabe_100)) {
    1fd4:	81 e1       	ldi	r24, 0x11	; 17
    1fd6:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    1fda:	89 2b       	or	r24, r25
    1fdc:	19 f4       	brne	.+6      	; 0x1fe4 <LeseEingaenge()+0x170>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:496
    Sperrgrad = BerechneSperrgradPoti(1023);
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	93 e0       	ldi	r25, 0x03	; 3
    1fe2:	a3 cf       	rjmp	.-186    	; 0x1f2a <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:497
  } else Sperrgrad = BerechneSperrgradPoti(0);
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	a0 cf       	rjmp	.-192    	; 0x1f2a <LeseEingaenge()+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:507
  // Bei wärmer werdendem Öl, wird das Ventil weiter geschlossen
  TempOffset = (Temperatur - 20) / 2;

  // Sobald das Öl 100°C überschreitet, wird das Ventil jedoch geöffnet
  if (Temperatur > 100 && ZustandTemperatur == false) {
    ZustandTemperatur = true;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ZustandTemperatur>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:508
    ZustandBearbeitet = false;
    1ff0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ZustandBearbeitet>
    1ff4:	d4 cf       	rjmp	.-88     	; 0x1f9e <LeseEingaenge()+0x12a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:509 (discriminator 1)
  } else if (Temperatur <= 95 && ZustandTemperatur == true) {
    1ff6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandTemperatur>
    1ffa:	88 23       	and	r24, r24
    1ffc:	81 f2       	breq	.-96     	; 0x1f9e <LeseEingaenge()+0x12a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:510
    ZustandTemperatur = false;
    1ffe:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <ZustandTemperatur>
    2002:	cd cf       	rjmp	.-102    	; 0x1f9e <LeseEingaenge()+0x12a>

00002004 <loop>:
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:287
  stepper_driver.setHoldCurrent(40);

  
}

void loop() {
    2004:	af 92       	push	r10
    2006:	bf 92       	push	r11
    2008:	cf 92       	push	r12
    200a:	df 92       	push	r13
    200c:	ef 92       	push	r14
    200e:	ff 92       	push	r15
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
    2014:	cf 93       	push	r28
    2016:	df 93       	push	r29
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:289
  // Lese Eingänge alle 250 ms
  if (millis() - MillisLeseEingaenge >= IntervalLeseEingaenge) {
    2018:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <millis>
    201c:	00 91 05 02 	lds	r16, 0x0205	; 0x800205 <MillisLeseEingaenge>
    2020:	10 91 06 02 	lds	r17, 0x0206	; 0x800206 <MillisLeseEingaenge+0x1>
    2024:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <MillisLeseEingaenge+0x2>
    2028:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <MillisLeseEingaenge+0x3>
    202c:	60 1b       	sub	r22, r16
    202e:	71 0b       	sbc	r23, r17
    2030:	82 0b       	sbc	r24, r18
    2032:	93 0b       	sbc	r25, r19
    2034:	6a 3f       	cpi	r22, 0xFA	; 250
    2036:	71 05       	cpc	r23, r1
    2038:	81 05       	cpc	r24, r1
    203a:	91 05       	cpc	r25, r1
    203c:	60 f0       	brcs	.+24     	; 0x2056 <loop+0x52>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:290
    MillisLeseEingaenge = millis();
    203e:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <millis>
    2042:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <MillisLeseEingaenge>
    2046:	70 93 06 02 	sts	0x0206, r23	; 0x800206 <MillisLeseEingaenge+0x1>
    204a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <MillisLeseEingaenge+0x2>
    204e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <MillisLeseEingaenge+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:291
    LeseEingaenge();
    2052:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <LeseEingaenge()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:295
  }

  // Lese Eingänge alle 250 ms
  if (millis() - MillisSchreibe >= IntervalSchreibe) {
    2056:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <millis>
    205a:	00 91 01 02 	lds	r16, 0x0201	; 0x800201 <MillisSchreibe>
    205e:	10 91 02 02 	lds	r17, 0x0202	; 0x800202 <MillisSchreibe+0x1>
    2062:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <MillisSchreibe+0x2>
    2066:	30 91 04 02 	lds	r19, 0x0204	; 0x800204 <MillisSchreibe+0x3>
    206a:	60 1b       	sub	r22, r16
    206c:	71 0b       	sbc	r23, r17
    206e:	82 0b       	sbc	r24, r18
    2070:	93 0b       	sbc	r25, r19
    2072:	64 36       	cpi	r22, 0x64	; 100
    2074:	71 05       	cpc	r23, r1
    2076:	81 05       	cpc	r24, r1
    2078:	91 05       	cpc	r25, r1
    207a:	f8 f0       	brcs	.+62     	; 0x20ba <loop+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:296
    MillisSchreibe = millis();
    207c:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <millis>
    2080:	60 93 01 02 	sts	0x0201, r22	; 0x800201 <MillisSchreibe>
    2084:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <MillisSchreibe+0x1>
    2088:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <MillisSchreibe+0x2>
    208c:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <MillisSchreibe+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:297
    if ((stepper.distanceToGo() * stepper.distanceToGo()) < 4) {
    2090:	87 eb       	ldi	r24, 0xB7	; 183
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <AccelStepper::distanceToGo()>
    2098:	6b 01       	movw	r12, r22
    209a:	7c 01       	movw	r14, r24
    209c:	87 eb       	ldi	r24, 0xB7	; 183
    209e:	92 e0       	ldi	r25, 0x02	; 2
    20a0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <AccelStepper::distanceToGo()>
    20a4:	a7 01       	movw	r20, r14
    20a6:	96 01       	movw	r18, r12
    20a8:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <__mulsi3>
    20ac:	64 30       	cpi	r22, 0x04	; 4
    20ae:	71 05       	cpc	r23, r1
    20b0:	81 05       	cpc	r24, r1
    20b2:	91 05       	cpc	r25, r1
    20b4:	14 f4       	brge	.+4      	; 0x20ba <loop+0xb6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:298
      SchreibeDisplay();
    20b6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <SchreibeDisplay()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:303
    }
  }

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    20ba:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <millis>
    20be:	00 91 fd 01 	lds	r16, 0x01FD	; 0x8001fd <MillisLED>
    20c2:	10 91 fe 01 	lds	r17, 0x01FE	; 0x8001fe <MillisLED+0x1>
    20c6:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <MillisLED+0x2>
    20ca:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <MillisLED+0x3>
    20ce:	60 1b       	sub	r22, r16
    20d0:	71 0b       	sbc	r23, r17
    20d2:	82 0b       	sbc	r24, r18
    20d4:	93 0b       	sbc	r25, r19
    20d6:	64 3f       	cpi	r22, 0xF4	; 244
    20d8:	71 40       	sbci	r23, 0x01	; 1
    20da:	81 05       	cpc	r24, r1
    20dc:	91 05       	cpc	r25, r1
    20de:	08 f4       	brcc	.+2      	; 0x20e2 <loop+0xde>
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <loop+0x15c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:304
    MillisLED = millis();
    20e2:	0e 94 25 37 	call	0x6e4a	; 0x6e4a <millis>
    20e6:	60 93 fd 01 	sts	0x01FD, r22	; 0x8001fd <MillisLED>
    20ea:	70 93 fe 01 	sts	0x01FE, r23	; 0x8001fe <MillisLED+0x1>
    20ee:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <MillisLED+0x2>
    20f2:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <MillisLED+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:305
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) >= 60) {
    20f6:	e0 90 b3 02 	lds	r14, 0x02B3	; 0x8002b3 <Schrittzahl100Prozent>
    20fa:	f0 90 b4 02 	lds	r15, 0x02B4	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    20fe:	0f 2c       	mov	r0, r15
    2100:	00 0c       	add	r0, r0
    2102:	00 0b       	sbc	r16, r16
    2104:	11 0b       	sbc	r17, r17
    2106:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <Schrittzahl0Prozent>
    210a:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <Schrittzahl0Prozent+0x1>
    210e:	03 2e       	mov	r0, r19
    2110:	00 0c       	add	r0, r0
    2112:	44 0b       	sbc	r20, r20
    2114:	55 0b       	sbc	r21, r21
    2116:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <Sperrgrad>
    211a:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <Sperrgrad+0x1>
    211e:	07 2e       	mov	r0, r23
    2120:	00 0c       	add	r0, r0
    2122:	88 0b       	sbc	r24, r24
    2124:	99 0b       	sbc	r25, r25
    2126:	1f 92       	push	r1
    2128:	1f 92       	push	r1
    212a:	1f 92       	push	r1
    212c:	e4 e6       	ldi	r30, 0x64	; 100
    212e:	ef 93       	push	r30
    2130:	a1 2c       	mov	r10, r1
    2132:	b1 2c       	mov	r11, r1
    2134:	65 01       	movw	r12, r10
    2136:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	6c 33       	cpi	r22, 0x3C	; 60
    2144:	71 05       	cpc	r23, r1
    2146:	81 05       	cpc	r24, r1
    2148:	91 05       	cpc	r25, r1
    214a:	34 f0       	brlt	.+12     	; 0x2158 <loop+0x154>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:306
      if (digitalRead(IO_LED_Sperrgrad))
    214c:	8d e0       	ldi	r24, 0x0D	; 13
    214e:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:309
        digitalWrite(IO_LED_Sperrgrad, LOW);
      else
        digitalWrite(IO_LED_Sperrgrad, HIGH);
    2152:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:306

  // LED blinken lassen
  if (millis() - MillisLED >= IntervalLED) {
    MillisLED = millis();
    if (map(Sperrgrad, Schrittzahl0Prozent, Schrittzahl100Prozent, 0, 100) >= 60) {
      if (digitalRead(IO_LED_Sperrgrad))
    2154:	89 2b       	or	r24, r25
    2156:	09 f0       	breq	.+2      	; 0x215a <loop+0x156>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:307
        digitalWrite(IO_LED_Sperrgrad, LOW);
    2158:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:309
      else
        digitalWrite(IO_LED_Sperrgrad, HIGH);
    215a:	8d e0       	ldi	r24, 0x0D	; 13
    215c:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:316
      digitalWrite(IO_LED_Sperrgrad, LOW);
    }
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    2160:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ZustandBremse>
    2164:	81 11       	cpse	r24, r1
    2166:	2c c0       	rjmp	.+88     	; 0x21c0 <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:316 (discriminator 2)
    2168:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandHandbremse>
    216c:	81 11       	cpse	r24, r1
    216e:	28 c0       	rjmp	.+80     	; 0x21c0 <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:316 (discriminator 4)
    2170:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandTemperatur>
    2174:	81 11       	cpse	r24, r1
    2176:	24 c0       	rjmp	.+72     	; 0x21c0 <loop+0x1bc>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:324
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
      ZustandBearbeitet = true;
      stepper.setCurrentPosition(0);
    }
  } else if (ZustandHauptschalter) {
    2178:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHauptschalter>
    217c:	88 23       	and	r24, r24
    217e:	09 f4       	brne	.+2      	; 0x2182 <loop+0x17e>
    2180:	6f c0       	rjmp	.+222    	; 0x2260 <loop+0x25c>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:326
    // Wenn der Hauptschalter aus ist, Stepper und Pumpe stromlos machen
    digitalWrite(IO_Enable, HIGH);
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	84 e0       	ldi	r24, 0x04	; 4
    2186:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:327
    digitalWrite(IO_Pumpe, LOW);
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	87 e1       	ldi	r24, 0x17	; 23
    218e:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:329
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    2192:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    2196:	81 11       	cpse	r24, r1
    2198:	25 c0       	rjmp	.+74     	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:330
      ZustandBearbeitet = true;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:331
      stepper.setCurrentPosition(0);
    21a0:	40 e0       	ldi	r20, 0x00	; 0
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	ba 01       	movw	r22, r20
    21a6:	87 eb       	ldi	r24, 0xB7	; 183
    21a8:	92 e0       	ldi	r25, 0x02	; 2
    21aa:	0e 94 55 1e 	call	0x3caa	; 0x3caa <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:332
      stepper.setSpeed(1000);
    21ae:	40 e0       	ldi	r20, 0x00	; 0
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	6a e7       	ldi	r22, 0x7A	; 122
    21b4:	74 e4       	ldi	r23, 0x44	; 68
    21b6:	87 eb       	ldi	r24, 0xB7	; 183
    21b8:	92 e0       	ldi	r25, 0x02	; 2
    21ba:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <AccelStepper::setSpeed(float)>
    21be:	12 c0       	rjmp	.+36     	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:318
  }

  // Prüfe ob Abschaltgründe vorliegen
  if (ZustandBremse || ZustandHandbremse || ZustandTemperatur) {
    // Wenn Bremse, Handbremse oder Übertemperatur vorhanden sind, Stepper stromlos machen
    digitalWrite(IO_Enable, HIGH);
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	84 e0       	ldi	r24, 0x04	; 4
    21c4:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:320
    // Sofern der Zustand gewechselt hat, Position des Steppers zurücksetzen
    if (!ZustandBearbeitet) {
    21c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    21cc:	81 11       	cpse	r24, r1
    21ce:	0a c0       	rjmp	.+20     	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:321
      ZustandBearbeitet = true;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:322
      stepper.setCurrentPosition(0);
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	ba 01       	movw	r22, r20
    21dc:	87 eb       	ldi	r24, 0xB7	; 183
    21de:	92 e0       	ldi	r25, 0x02	; 2
    21e0:	0e 94 55 1e 	call	0x3caa	; 0x3caa <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:358
      }
    }
  }

  // Fehler im Treiber des Schrittmotors
  if (TMCFehler) {
    21e4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <TMCFehler>
    21e8:	88 23       	and	r24, r24
    21ea:	41 f0       	breq	.+16     	; 0x21fc <loop+0x1f8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:360
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	84 e0       	ldi	r24, 0x04	; 4
    21f0:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:361
    digitalWrite(IO_Pumpe, LOW);
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	87 e1       	ldi	r24, 0x17	; 23
    21f8:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:366
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    21fc:	89 e0       	ldi	r24, 0x09	; 9
    21fe:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    2202:	89 2b       	or	r24, r25
    2204:	09 f4       	brne	.+2      	; 0x2208 <loop+0x204>
    2206:	a1 c0       	rjmp	.+322    	; 0x234a <loop+0x346>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:383
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Vorladepumpe"));

    } while (u8g2.nextPage());
  } else {
    PumpeFehler = false;
    2208:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <PumpeFehler>
    220c:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <Sperrgrad>
    2210:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <Sperrgrad+0x1>
    2214:	40 91 f7 01 	lds	r20, 0x01F7	; 0x8001f7 <TempOffset>
    2218:	50 91 f8 01 	lds	r21, 0x01F8	; 0x8001f8 <TempOffset+0x1>
    221c:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <SchrittzahlMaximum>
    2220:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <SchrittzahlMaximum+0x1>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:390



  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    2224:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <Schrittzahl0Prozent>
    2228:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <Schrittzahl0Prozent+0x1>
    222c:	77 ff       	sbrs	r23, 7
    222e:	db c0       	rjmp	.+438    	; 0x23e6 <loop+0x3e2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:391
    SperrgradKompensiert = Sperrgrad - TempOffset;
    2230:	24 1b       	sub	r18, r20
    2232:	35 0b       	sbc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:392
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
    2234:	ac 01       	movw	r20, r24
    2236:	4c 5f       	subi	r20, 0xFC	; 252
    2238:	5f 4f       	sbci	r21, 0xFF	; 255
    223a:	42 17       	cp	r20, r18
    223c:	53 07       	cpc	r21, r19
    223e:	0c f0       	brlt	.+2      	; 0x2242 <loop+0x23e>
    2240:	cc c0       	rjmp	.+408    	; 0x23da <loop+0x3d6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:395
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    2242:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <SperrgradKompensiert+0x1>
    2246:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:399
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
  }
}
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	cf 90       	pop	r12
    225a:	bf 90       	pop	r11
    225c:	af 90       	pop	r10
    225e:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:337
      stepper.setSpeed(1000);
    }
  }
  // Kein Abschaltgrund liegt vor
  // Stepper aktivieren, Vorladepumpe einschalten
  else if (!ZustandBremse && !ZustandHandbremse && !ZustandHauptschalter && !ZustandTemperatur && !TMCFehler) {
    2260:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <ZustandBremse>
    2264:	81 11       	cpse	r24, r1
    2266:	be cf       	rjmp	.-132    	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:337 (discriminator 1)
    2268:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <ZustandHandbremse>
    226c:	81 11       	cpse	r24, r1
    226e:	ba cf       	rjmp	.-140    	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:337 (discriminator 3)
    2270:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <ZustandHauptschalter>
    2274:	81 11       	cpse	r24, r1
    2276:	b6 cf       	rjmp	.-148    	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:337 (discriminator 5)
    2278:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ZustandTemperatur>
    227c:	81 11       	cpse	r24, r1
    227e:	b2 cf       	rjmp	.-156    	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:337 (discriminator 7)
    2280:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <TMCFehler>
    2284:	81 11       	cpse	r24, r1
    2286:	b2 cf       	rjmp	.-156    	; 0x21ec <loop+0x1e8>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:338
    digitalWrite(IO_Enable, LOW);
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	84 e0       	ldi	r24, 0x04	; 4
    228c:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:339
    digitalWrite(IO_Pumpe, HIGH);
    2290:	61 e0       	ldi	r22, 0x01	; 1
    2292:	87 e1       	ldi	r24, 0x17	; 23
    2294:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:340
    stepper.moveTo(SperrgradKompensiert);
    2298:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <SperrgradKompensiert>
    229c:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <SperrgradKompensiert+0x1>
    22a0:	05 2e       	mov	r0, r21
    22a2:	00 0c       	add	r0, r0
    22a4:	66 0b       	sbc	r22, r22
    22a6:	77 0b       	sbc	r23, r23
    22a8:	87 eb       	ldi	r24, 0xB7	; 183
    22aa:	92 e0       	ldi	r25, 0x02	; 2
    22ac:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:341
    stepper.setSpeed(1000);
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	6a e7       	ldi	r22, 0x7A	; 122
    22b6:	74 e4       	ldi	r23, 0x44	; 68
    22b8:	87 eb       	ldi	r24, 0xB7	; 183
    22ba:	92 e0       	ldi	r25, 0x02	; 2
    22bc:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:342
    stepper.runSpeedToPosition();
    22c0:	87 eb       	ldi	r24, 0xB7	; 183
    22c2:	92 e0       	ldi	r25, 0x02	; 2
    22c4:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:345

    // Sofern der Zustand gewechselt hat, Stepper aktivieren und zur alten Position fahren
    if (!ZustandBearbeitet) {
    22c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ZustandBearbeitet>
    22cc:	81 11       	cpse	r24, r1
    22ce:	8a cf       	rjmp	.-236    	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:346
      stepper.setCurrentPosition(0);
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	ba 01       	movw	r22, r20
    22d6:	87 eb       	ldi	r24, 0xB7	; 183
    22d8:	92 e0       	ldi	r25, 0x02	; 2
    22da:	0e 94 55 1e 	call	0x3caa	; 0x3caa <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:347
      stepper.setSpeed(1000);
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	6a e7       	ldi	r22, 0x7A	; 122
    22e4:	74 e4       	ldi	r23, 0x44	; 68
    22e6:	87 eb       	ldi	r24, 0xB7	; 183
    22e8:	92 e0       	ldi	r25, 0x02	; 2
    22ea:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:348
      ZustandBearbeitet = true;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ZustandBearbeitet>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:349
      stepper.moveTo(SperrgradKompensiert);
    22f4:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <SperrgradKompensiert>
    22f8:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <SperrgradKompensiert+0x1>
    22fc:	05 2e       	mov	r0, r21
    22fe:	00 0c       	add	r0, r0
    2300:	66 0b       	sbc	r22, r22
    2302:	77 0b       	sbc	r23, r23
    2304:	87 eb       	ldi	r24, 0xB7	; 183
    2306:	92 e0       	ldi	r25, 0x02	; 2
    2308:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:350
      stepper.setSpeed(1000);
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	6a e7       	ldi	r22, 0x7A	; 122
    2312:	74 e4       	ldi	r23, 0x44	; 68
    2314:	87 eb       	ldi	r24, 0xB7	; 183
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:351
      while (stepper.currentPosition() != SperrgradKompensiert) {
    231c:	87 eb       	ldi	r24, 0xB7	; 183
    231e:	92 e0       	ldi	r25, 0x02	; 2
    2320:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <AccelStepper::currentPosition()>
    2324:	20 91 f9 01 	lds	r18, 0x01F9	; 0x8001f9 <SperrgradKompensiert>
    2328:	30 91 fa 01 	lds	r19, 0x01FA	; 0x8001fa <SperrgradKompensiert+0x1>
    232c:	89 01       	movw	r16, r18
    232e:	33 0f       	add	r19, r19
    2330:	22 0b       	sbc	r18, r18
    2332:	33 0b       	sbc	r19, r19
    2334:	60 17       	cp	r22, r16
    2336:	71 07       	cpc	r23, r17
    2338:	82 07       	cpc	r24, r18
    233a:	93 07       	cpc	r25, r19
    233c:	09 f4       	brne	.+2      	; 0x2340 <loop+0x33c>
    233e:	52 cf       	rjmp	.-348    	; 0x21e4 <loop+0x1e0>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:352
        stepper.runSpeedToPosition();
    2340:	87 eb       	ldi	r24, 0xB7	; 183
    2342:	92 e0       	ldi	r25, 0x02	; 2
    2344:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:351
      stepper.setCurrentPosition(0);
      stepper.setSpeed(1000);
      ZustandBearbeitet = true;
      stepper.moveTo(SperrgradKompensiert);
      stepper.setSpeed(1000);
      while (stepper.currentPosition() != SperrgradKompensiert) {
    2348:	e9 cf       	rjmp	.-46     	; 0x231c <loop+0x318>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:366 (discriminator 1)
    digitalWrite(IO_Pumpe, LOW);
  }

  // Fehlerstatus abfragen
  // Wenn der Diagnosepin der Pumpe Low ist, während die Pumpe angesteuert wird, gibt es einen Kurzschluss
  if (!digitalRead(IO_Diagnose_Pumpe) && digitalRead(IO_Pumpe)) {
    234a:	87 e1       	ldi	r24, 0x17	; 23
    234c:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    2350:	89 2b       	or	r24, r25
    2352:	09 f4       	brne	.+2      	; 0x2356 <loop+0x352>
    2354:	59 cf       	rjmp	.-334    	; 0x2208 <loop+0x204>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:367
    PumpeFehler = true;
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <PumpeFehler>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:369
    // Pumpe und Stepper abschalten
    digitalWrite(IO_Enable, HIGH);
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	84 e0       	ldi	r24, 0x04	; 4
    2360:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:370
    digitalWrite(IO_Pumpe, LOW);
    2364:	60 e0       	ldi	r22, 0x00	; 0
    2366:	87 e1       	ldi	r24, 0x17	; 23
    2368:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    236c:	89 e1       	ldi	r24, 0x19	; 25
    236e:	92 e0       	ldi	r25, 0x02	; 2
    2370:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2374:	cf e0       	ldi	r28, 0x0F	; 15
    2376:	d0 e0       	ldi	r29, 0x00	; 0
    2378:	09 e1       	ldi	r16, 0x19	; 25
    237a:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    237c:	6d e2       	ldi	r22, 0x2D	; 45
    237e:	7b e0       	ldi	r23, 0x0B	; 11
    2380:	89 e1       	ldi	r24, 0x19	; 25
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2388:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    238c:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    2390:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    2394:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:376
    u8g2.firstPage();
    do {

      u8g2.setFont(u8g2_font_helvB14_tr);
      u8g2.setCursor(0, 15);
      u8g2.print(F("Fehler!"));
    2398:	61 e2       	ldi	r22, 0x21	; 33
    239a:	72 e0       	ldi	r23, 0x02	; 2
    239c:	85 e1       	ldi	r24, 0x15	; 21
    239e:	92 e0       	ldi	r25, 0x02	; 2
    23a0:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    23a4:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    23a8:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    23ac:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    23b0:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    23b4:	69 ea       	ldi	r22, 0xA9	; 169
    23b6:	72 e0       	ldi	r23, 0x02	; 2
    23b8:	89 e1       	ldi	r24, 0x19	; 25
    23ba:	92 e0       	ldi	r25, 0x02	; 2
    23bc:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:379
      u8g2.setCursor(0, 25);
      u8g2.setFont(u8g2_font_helvR08_tf);
      u8g2.print(F("Vorladepumpe"));
    23c0:	64 e1       	ldi	r22, 0x14	; 20
    23c2:	72 e0       	ldi	r23, 0x02	; 2
    23c4:	85 e1       	ldi	r24, 0x15	; 21
    23c6:	92 e0       	ldi	r25, 0x02	; 2
    23c8:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    23cc:	89 e1       	ldi	r24, 0x19	; 25
    23ce:	92 e0       	ldi	r25, 0x02	; 2
    23d0:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
loop():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:381

    } while (u8g2.nextPage());
    23d4:	81 11       	cpse	r24, r1
    23d6:	d2 cf       	rjmp	.-92     	; 0x237c <loop+0x378>
    23d8:	19 cf       	rjmp	.-462    	; 0x220c <loop+0x208>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:393
  // Temperaturkompensation einbauen
  // Beachten, ob Stepper in positive oder negative Richtung läuft
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
    23da:	05 96       	adiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:397
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    23dc:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <SperrgradKompensiert+0x1>
    23e0:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <SperrgradKompensiert>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:399
  }
}
    23e4:	32 cf       	rjmp	.-412    	; 0x224a <loop+0x246>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:395
  if (Schrittzahl0Prozent < 0) {
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    23e6:	24 0f       	add	r18, r20
    23e8:	35 1f       	adc	r19, r21
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:396
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    23ea:	ac 01       	movw	r20, r24
    23ec:	44 50       	subi	r20, 0x04	; 4
    23ee:	51 09       	sbc	r21, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:397
      SperrgradKompensiert = SchrittzahlMaximum - 5;
    23f0:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:396
    SperrgradKompensiert = Sperrgrad - TempOffset;
    if (SperrgradKompensiert < (SchrittzahlMaximum + 5))
      SperrgradKompensiert = SchrittzahlMaximum + 5;
  } else {
    SperrgradKompensiert = Sperrgrad + TempOffset;
    if (SperrgradKompensiert > (SchrittzahlMaximum - 5))
    23f2:	24 17       	cp	r18, r20
    23f4:	35 07       	cpc	r19, r21
    23f6:	94 f7       	brge	.-28     	; 0x23dc <loop+0x3d8>
    23f8:	24 cf       	rjmp	.-440    	; 0x2242 <loop+0x23e>

000023fa <autoHome(int)>:
_Z8autoHomei():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:607
    temp = 0;
  temp = map(temp, 3, 98, Schrittzahl0Prozent, Schrittzahl100Prozent);
  return temp;
}

int autoHome(int pos) {
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	6c 01       	movw	r12, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:608
  LeseTMCStatus(true);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:609
  digitalWrite(IO_Enable, LOW);
    2412:	60 e0       	ldi	r22, 0x00	; 0
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:612
  

  stepper.setCurrentPosition(0);
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	ba 01       	movw	r22, r20
    2420:	87 eb       	ldi	r24, 0xB7	; 183
    2422:	92 e0       	ldi	r25, 0x02	; 2
    2424:	0e 94 55 1e 	call	0x3caa	; 0x3caa <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:614
  // Fahre zur angegebenen Position
  stepper.moveTo(pos);
    2428:	0d 2c       	mov	r0, r13
    242a:	00 0c       	add	r0, r0
    242c:	ee 08       	sbc	r14, r14
    242e:	ff 08       	sbc	r15, r15
    2430:	b7 01       	movw	r22, r14
    2432:	a6 01       	movw	r20, r12
    2434:	87 eb       	ldi	r24, 0xB7	; 183
    2436:	92 e0       	ldi	r25, 0x02	; 2
    2438:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <AccelStepper::moveTo(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:616
  // Fahre langsam
  stepper.setSpeed(250);
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	6a e7       	ldi	r22, 0x7A	; 122
    2442:	73 e4       	ldi	r23, 0x43	; 67
    2444:	87 eb       	ldi	r24, 0xB7	; 183
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:620
  // Die ersten Schritte ohne StallGuard


  while (stepper.currentPosition() != (pos * 0.1)) {
    244c:	87 eb       	ldi	r24, 0xB7	; 183
    244e:	92 e0       	ldi	r25, 0x02	; 2
    2450:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <AccelStepper::currentPosition()>
    2454:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    2458:	4b 01       	movw	r8, r22
    245a:	5c 01       	movw	r10, r24
    245c:	c7 01       	movw	r24, r14
    245e:	b6 01       	movw	r22, r12
    2460:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    2464:	2d ec       	ldi	r18, 0xCD	; 205
    2466:	3c ec       	ldi	r19, 0xCC	; 204
    2468:	4c ec       	ldi	r20, 0xCC	; 204
    246a:	5d e3       	ldi	r21, 0x3D	; 61
    246c:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    2470:	9b 01       	movw	r18, r22
    2472:	ac 01       	movw	r20, r24
    2474:	c5 01       	movw	r24, r10
    2476:	b4 01       	movw	r22, r8
    2478:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    247c:	88 23       	and	r24, r24
    247e:	29 f0       	breq	.+10     	; 0x248a <autoHome(int)+0x90>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:621
    stepper.runSpeedToPosition();
    2480:	87 eb       	ldi	r24, 0xB7	; 183
    2482:	92 e0       	ldi	r25, 0x02	; 2
    2484:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:620
  // Fahre langsam
  stepper.setSpeed(250);
  // Die ersten Schritte ohne StallGuard


  while (stepper.currentPosition() != (pos * 0.1)) {
    2488:	e1 cf       	rjmp	.-62     	; 0x244c <autoHome(int)+0x52>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:626
    stepper.runSpeedToPosition();
    
  }

  // Wenn der Stepper in Bewegung ist, StallGuard laufend auslesen
  while (stepper.currentPosition() != pos) {
    248a:	87 eb       	ldi	r24, 0xB7	; 183
    248c:	92 e0       	ldi	r25, 0x02	; 2
    248e:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <AccelStepper::currentPosition()>
    2492:	c6 16       	cp	r12, r22
    2494:	d7 06       	cpc	r13, r23
    2496:	e8 06       	cpc	r14, r24
    2498:	f9 06       	cpc	r15, r25
    249a:	c1 f0       	breq	.+48     	; 0x24cc <autoHome(int)+0xd2>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:628

    stepper.runSpeedToPosition();
    249c:	87 eb       	ldi	r24, 0xB7	; 183
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <AccelStepper::runSpeedToPosition()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:629
    int stall_guard_result = stepper_driver.getStallGuardResult();
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	92 e0       	ldi	r25, 0x02	; 2
    24a8:	0e 94 74 18 	call	0x30e8	; 0x30e8 <TMC2209::getStallGuardResult()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:631
    // Wenn der Rückgabewert des Stallguards höher als die Schwelle ist, blockiert der Motor
    if ((stall_guard_result < (STALL_GUARD_THRESHOLD * 2))) {
    24ac:	44 97       	sbiw	r24, 0x14	; 20
    24ae:	6c f7       	brge	.-38     	; 0x248a <autoHome(int)+0x90>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:634
      
      // Ermittelten Wert nach oben geben
      return stepper.currentPosition();
    24b0:	87 eb       	ldi	r24, 0xB7	; 183
    24b2:	92 e0       	ldi	r25, 0x02	; 2
    24b4:	0e 94 4f 1e 	call	0x3c9e	; 0x3c9e <AccelStepper::currentPosition()>
    24b8:	cb 01       	movw	r24, r22
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:638
    }
  }
        return 0;
}
    24ba:	ff 90       	pop	r15
    24bc:	ef 90       	pop	r14
    24be:	df 90       	pop	r13
    24c0:	cf 90       	pop	r12
    24c2:	bf 90       	pop	r11
    24c4:	af 90       	pop	r10
    24c6:	9f 90       	pop	r9
    24c8:	8f 90       	pop	r8
    24ca:	08 95       	ret
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:637
      
      // Ermittelten Wert nach oben geben
      return stepper.currentPosition();
    }
  }
        return 0;
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	f4 cf       	rjmp	.-24     	; 0x24ba <autoHome(int)+0xc0>

000024d2 <eepromWriteInt(int, int)>:
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:640
}

void eepromWriteInt(int adr, int wert) {
    24d2:	ff 92       	push	r15
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	00 d0       	rcall	.+0      	; 0x24de <eepromWriteInt(int, int)+0xc>
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8c 01       	movw	r16, r24
    24e4:	f7 2e       	mov	r15, r23
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    24ea:	ce 01       	movw	r24, r28
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:645
  byte low, high;
  low = wert & 0xFF;
  high = (wert >> 8) & 0xFF;
  EEPROM.update(adr, low);
  EEPROM.update(adr + 1, high);
    24f2:	0f 5f       	subi	r16, 0xFF	; 255
    24f4:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN5EERefC4Ei():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:39
***/

struct EERef{

    EERef( const int index )
        : index( index )                 {}
    24f6:	1a 83       	std	Y+2, r17	; 0x02
    24f8:	09 83       	std	Y+1, r16	; 0x01
_ZN11EEPROMClass6updateEih():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:122

    //Basic user access methods.
    EERef operator[]( const int idx )    { return idx; }
    uint8_t read( int idx )              { return EERef( idx ); }
    void write( int idx, uint8_t val )   { (EERef( idx )) = val; }
    void update( int idx, uint8_t val )  { EERef( idx ).update( val ); }
    24fa:	6f 2d       	mov	r22, r15
    24fc:	ce 01       	movw	r24, r28
    24fe:	01 96       	adiw	r24, 0x01	; 1
    2500:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <EERef::update(unsigned char)>
_Z14eepromWriteIntii():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:647
  return;
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	08 95       	ret

00002514 <eepromReadInt(int)>:
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:649

int eepromReadInt(int adr) {
    2514:	1f 93       	push	r17
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	ec 01       	movw	r28, r24
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    251c:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <eeprom_read_byte>
    2520:	18 2f       	mov	r17, r24
    2522:	ce 01       	movw	r24, r28
    2524:	01 96       	adiw	r24, 0x01	; 1
    2526:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <eeprom_read_byte>
_Z13eepromReadInti():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:653
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	98 2f       	mov	r25, r24
    252e:	88 27       	eor	r24, r24
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:654
    2530:	81 0f       	add	r24, r17
    2532:	91 1d       	adc	r25, r1
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	1f 91       	pop	r17
    253a:	08 95       	ret

0000253c <setup>:
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:126
    ZustandHauptschalter = false;
    ZustandBearbeitet = false;
  }
}

void setup() {
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
_ZN4U8G211setBusClockEm():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:77
    void sendF(const char *fmt, ...) 
      { va_list va; va_start(va, fmt); u8x8_cad_vsendf(u8g2_GetU8x8(&u8g2), fmt, va); va_end(va); }


    uint32_t getBusClock(void) { return u8g2_GetU8x8(&u8g2)->bus_clock; }
    void setBusClock(uint32_t clock_speed) { u8g2_GetU8x8(&u8g2)->bus_clock = clock_speed; }
    254c:	80 ea       	ldi	r24, 0xA0	; 160
    254e:	96 e8       	ldi	r25, 0x86	; 134
    2550:	a1 e0       	ldi	r26, 0x01	; 1
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <u8g2+0x10>
    2558:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <u8g2+0x11>
    255c:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <u8g2+0x12>
    2560:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <u8g2+0x13>
_ZN4U8G211initDisplayEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:119
    /* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
    /* U8X8_MSG_GPIO_MENU_HOME */
    uint8_t getMenuEvent(void) { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

    void initDisplay(void) {
      u8g2_InitDisplay(&u8g2); }
    2564:	89 e1       	ldi	r24, 0x19	; 25
    2566:	92 e0       	ldi	r25, 0x02	; 2
    2568:	0e 94 50 2b 	call	0x56a0	; 0x56a0 <u8x8_InitDisplay>
_ZN4U8G212clearDisplayEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:127
    /* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */       
    void initInterface(void) {          
      u8g2_InitInterface(&u8g2); }
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    256c:	89 e1       	ldi	r24, 0x19	; 25
    256e:	92 e0       	ldi	r25, 0x02	; 2
    2570:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <u8g2_ClearDisplay>
_ZN4U8G212setPowerSaveEh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:130
      
    void setPowerSave(uint8_t is_enable) {
      u8g2_SetPowerSave(&u8g2, is_enable); }
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	89 e1       	ldi	r24, 0x19	; 25
    2578:	92 e0       	ldi	r25, 0x02	; 2
    257a:	0e 94 59 2b 	call	0x56b2	; 0x56b2 <u8x8_SetPowerSave>
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    257e:	69 ea       	ldi	r22, 0xA9	; 169
    2580:	72 e0       	ldi	r23, 0x02	; 2
    2582:	89 e1       	ldi	r24, 0x19	; 25
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    258a:	89 e1       	ldi	r24, 0x19	; 25
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    2592:	dc e0       	ldi	r29, 0x0C	; 12
    2594:	ed 2e       	mov	r14, r29
    2596:	f1 2c       	mov	r15, r1
    2598:	08 e2       	ldi	r16, 0x28	; 40
    259a:	10 e0       	ldi	r17, 0x00	; 0
    259c:	cc e3       	ldi	r28, 0x3C	; 60
    259e:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    25a0:	69 ea       	ldi	r22, 0xA9	; 169
    25a2:	72 e0       	ldi	r23, 0x02	; 2
    25a4:	89 e1       	ldi	r24, 0x19	; 25
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    25ac:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    25b0:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    25b4:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <u8g2+0x95>
    25b8:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:135
  u8g2.setFont(u8g2_font_helvR08_tf);
  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.setCursor(0, 12);
    u8g2.print(F("Haldex Controller"));
    25bc:	67 e9       	ldi	r22, 0x97	; 151
    25be:	72 e0       	ldi	r23, 0x02	; 2
    25c0:	85 e1       	ldi	r24, 0x15	; 21
    25c2:	92 e0       	ldi	r25, 0x02	; 2
    25c4:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29drawHLineEjjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:221

    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    uint8_t getDrawColor(void) { return u8g2_GetDrawColor(&u8g2); }
    void drawPixel(u8g2_uint_t x, u8g2_uint_t y) { u8g2_DrawPixel(&u8g2, x, y); }
    void drawHLine(u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w) { u8g2_DrawHLine(&u8g2, x, y, w); }
    25c8:	20 e8       	ldi	r18, 0x80	; 128
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4c e0       	ldi	r20, 0x0C	; 12
    25ce:	50 e0       	ldi	r21, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	89 e1       	ldi	r24, 0x19	; 25
    25d6:	92 e0       	ldi	r25, 0x02	; 2
    25d8:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <u8g2_DrawHLine>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    25dc:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    25e0:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    25e4:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    25e8:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:138
    u8g2.drawHLine(0, 12, 128);
    u8g2.setCursor(0, 40);
    u8g2.print(F("TCA965"));
    25ec:	60 e9       	ldi	r22, 0x90	; 144
    25ee:	72 e0       	ldi	r23, 0x02	; 2
    25f0:	85 e1       	ldi	r24, 0x15	; 21
    25f2:	92 e0       	ldi	r25, 0x02	; 2
    25f4:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    25f8:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    25fc:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    2600:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    2604:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:140
    u8g2.setCursor(0, 60);
    u8g2.print(F("allradbus.com"));
    2608:	62 e8       	ldi	r22, 0x82	; 130
    260a:	72 e0       	ldi	r23, 0x02	; 2
    260c:	85 e1       	ldi	r24, 0x15	; 21
    260e:	92 e0       	ldi	r25, 0x02	; 2
    2610:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2614:	89 e1       	ldi	r24, 0x19	; 25
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:142

  } while (u8g2.nextPage());
    261c:	81 11       	cpse	r24, r1
    261e:	c0 cf       	rjmp	.-128    	; 0x25a0 <setup+0x64>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:145

  // Konfiguriere Stepper
  stepper_driver.setup(serial_stream);
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	00 e0       	ldi	r16, 0x00	; 0
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	32 ec       	ldi	r19, 0xC2	; 194
    2628:	41 e0       	ldi	r20, 0x01	; 1
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	6b e5       	ldi	r22, 0x5B	; 91
    262e:	75 e0       	ldi	r23, 0x05	; 5
    2630:	8f ef       	ldi	r24, 0xFF	; 255
    2632:	92 e0       	ldi	r25, 0x02	; 2
    2634:	0e 94 b7 19 	call	0x336e	; 0x336e <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:146
  stepper_driver.setRunCurrent(60);
    2638:	6c e3       	ldi	r22, 0x3C	; 60
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	92 e0       	ldi	r25, 0x02	; 2
    263e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:147
  stepper_driver.setHoldCurrent(40);
    2642:	68 e2       	ldi	r22, 0x28	; 40
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	92 e0       	ldi	r25, 0x02	; 2
    2648:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:148
  stepper_driver.enableAutomaticCurrentScaling();
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	92 e0       	ldi	r25, 0x02	; 2
    2650:	0e 94 8a 19 	call	0x3314	; 0x3314 <TMC2209::enableAutomaticCurrentScaling()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:150
  //stepper_driver.enableAutomaticGradientAdaptation();
  stepper_driver.setStallGuardThreshold(STALL_GUARD_THRESHOLD);
    2654:	6a e0       	ldi	r22, 0x0A	; 10
    2656:	8f ef       	ldi	r24, 0xFF	; 255
    2658:	92 e0       	ldi	r25, 0x02	; 2
    265a:	0e 94 d7 16 	call	0x2dae	; 0x2dae <TMC2209::setStallGuardThreshold(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:151
  stepper_driver.setMicrostepsPerStep(4);
    265e:	64 e0       	ldi	r22, 0x04	; 4
    2660:	70 e0       	ldi	r23, 0x00	; 0
    2662:	8f ef       	ldi	r24, 0xFF	; 255
    2664:	92 e0       	ldi	r25, 0x02	; 2
    2666:	0e 94 67 19 	call	0x32ce	; 0x32ce <TMC2209::setMicrostepsPerStep(unsigned int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:152
  stepper_driver.setStandstillMode(TMC2209::BRAKING);
    266a:	63 e0       	ldi	r22, 0x03	; 3
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	8f ef       	ldi	r24, 0xFF	; 255
    2670:	92 e0       	ldi	r25, 0x02	; 2
    2672:	0e 94 7e 19 	call	0x32fc	; 0x32fc <TMC2209::setStandstillMode(TMC2209::StandstillMode)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:153
  stepper_driver.setCoolStepDurationThreshold(COOL_STEP_DURATION_THRESHOLD);
    2676:	40 ed       	ldi	r20, 0xD0	; 208
    2678:	57 e0       	ldi	r21, 0x07	; 7
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	8f ef       	ldi	r24, 0xFF	; 255
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <TMC2209::setCoolStepDurationThreshold(unsigned long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:154
  stepper.setMaxSpeed(4000);
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	50 e0       	ldi	r21, 0x00	; 0
    268a:	6a e7       	ldi	r22, 0x7A	; 122
    268c:	75 e4       	ldi	r23, 0x45	; 69
    268e:	87 eb       	ldi	r24, 0xB7	; 183
    2690:	92 e0       	ldi	r25, 0x02	; 2
    2692:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <AccelStepper::setMaxSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:155
  stepper.setAcceleration(4000);
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	6a e7       	ldi	r22, 0x7A	; 122
    269c:	75 e4       	ldi	r23, 0x45	; 69
    269e:	87 eb       	ldi	r24, 0xB7	; 183
    26a0:	92 e0       	ldi	r25, 0x02	; 2
    26a2:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <AccelStepper::setAcceleration(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:158

  // Konfiguriere I/O
  pinMode(IO_Enable, OUTPUT);
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	84 e0       	ldi	r24, 0x04	; 4
    26aa:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:159
  pinMode(IO_Step, OUTPUT);
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	86 e0       	ldi	r24, 0x06	; 6
    26b2:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:160
  pinMode(IO_Direction, OUTPUT);
    26b6:	61 e0       	ldi	r22, 0x01	; 1
    26b8:	85 e0       	ldi	r24, 0x05	; 5
    26ba:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:161
  pinMode(IO_Eingabe_25, INPUT_PULLUP);
    26be:	62 e0       	ldi	r22, 0x02	; 2
    26c0:	8f e0       	ldi	r24, 0x0F	; 15
    26c2:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:162
  pinMode(IO_Eingabe_50, INPUT_PULLUP);
    26c6:	62 e0       	ldi	r22, 0x02	; 2
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:163
  pinMode(IO_Eingabe_75, INPUT_PULLUP);
    26ce:	62 e0       	ldi	r22, 0x02	; 2
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:164
  pinMode(IO_Eingabe_100, INPUT_PULLUP);
    26d6:	62 e0       	ldi	r22, 0x02	; 2
    26d8:	81 e1       	ldi	r24, 0x11	; 17
    26da:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:165
  pinMode(IO_Temperatur, INPUT);
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	8e e0       	ldi	r24, 0x0E	; 14
    26e2:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:166
  pinMode(IO_Bremse, INPUT);
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	8c e0       	ldi	r24, 0x0C	; 12
    26ea:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:167
  pinMode(IO_Handbremse, INPUT_PULLUP);
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	8b e0       	ldi	r24, 0x0B	; 11
    26f2:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:168
  pinMode(IO_Hauptschalter, INPUT);
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	8a e0       	ldi	r24, 0x0A	; 10
    26fa:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:169
  pinMode(IO_Diagnose_Pumpe, INPUT);
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	89 e0       	ldi	r24, 0x09	; 9
    2702:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:170
  pinMode(IO_Pumpe, OUTPUT);
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	87 e1       	ldi	r24, 0x17	; 23
    270a:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:171
  pinMode(IO_LED_Sperrgrad, OUTPUT);
    270e:	61 e0       	ldi	r22, 0x01	; 1
    2710:	8d e0       	ldi	r24, 0x0D	; 13
    2712:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:173

  if (digitalRead(IO_Bremse))
    2716:	8c e0       	ldi	r24, 0x0C	; 12
    2718:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    271c:	89 2b       	or	r24, r25
    271e:	19 f0       	breq	.+6      	; 0x2726 <setup+0x1ea>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:174
    ZustandBremse = true;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <ZustandBremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:175
  if (!digitalRead(IO_Handbremse))
    2726:	8b e0       	ldi	r24, 0x0B	; 11
    2728:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    272c:	89 2b       	or	r24, r25
    272e:	19 f4       	brne	.+6      	; 0x2736 <setup+0x1fa>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:176
    ZustandHandbremse = true;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <ZustandHandbremse>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:177
  if (!digitalRead(IO_Hauptschalter))
    2736:	8a e0       	ldi	r24, 0x0A	; 10
    2738:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    273c:	89 2b       	or	r24, r25
    273e:	19 f4       	brne	.+6      	; 0x2746 <setup+0x20a>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:178
    ZustandHauptschalter = true;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <ZustandHauptschalter>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:181

  // PinChange Interrupt konfigurieren
  PCICR = (1 << PCIE0);                                    // enable PCINT[23:16] interrupts
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:182
  PCMSK0 = (1 << PCINT4) | (1 << PCINT3) | (1 << PCINT2);  // PB4 = PCINT4 | PB2 = PCINT2
    274c:	8c e1       	ldi	r24, 0x1C	; 28
    274e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:185

  // Aktiviere Endstufen in TMC2209
  digitalWrite(IO_Enable, LOW);
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	84 e0       	ldi	r24, 0x04	; 4
    2756:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:187
  // Aktiviere TMC2209
  stepper_driver.enable();
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	92 e0       	ldi	r25, 0x02	; 2
    275e:	0e 94 14 19 	call	0x3228	; 0x3228 <TMC2209::enable()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:190

  // Prüfe Temperatursensor
  TemperaturAlt = analogRead(IO_Temperatur);
    2762:	8e e0       	ldi	r24, 0x0E	; 14
    2764:	0e 94 d6 37 	call	0x6fac	; 0x6fac <analogRead>
    2768:	bc 01       	movw	r22, r24
    276a:	99 0f       	add	r25, r25
    276c:	88 0b       	sbc	r24, r24
    276e:	99 0b       	sbc	r25, r25
    2770:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    2774:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <TemperaturAlt>
    2778:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <TemperaturAlt+0x1>
    277c:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <TemperaturAlt+0x2>
    2780:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <TemperaturAlt+0x3>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:191
  BerechneTemperatur(analogRead(IO_Temperatur));
    2784:	8e e0       	ldi	r24, 0x0E	; 14
    2786:	0e 94 d6 37 	call	0x6fac	; 0x6fac <analogRead>
    278a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <BerechneTemperatur(int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:192
  if (TempGetrennt) {
    278e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
    2792:	88 23       	and	r24, r24
    2794:	09 f4       	brne	.+2      	; 0x2798 <setup+0x25c>
    2796:	58 c0       	rjmp	.+176    	; 0x2848 <setup+0x30c>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    2798:	89 e1       	ldi	r24, 0x19	; 25
    279a:	92 e0       	ldi	r25, 0x02	; 2
    279c:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    27a0:	ba e0       	ldi	r27, 0x0A	; 10
    27a2:	cb 2e       	mov	r12, r27
    27a4:	d1 2c       	mov	r13, r1
    27a6:	c4 e1       	ldi	r28, 0x14	; 20
    27a8:	ec 2e       	mov	r14, r28
    27aa:	f1 2c       	mov	r15, r1
    27ac:	08 e2       	ldi	r16, 0x28	; 40
    27ae:	10 e0       	ldi	r17, 0x00	; 0
    27b0:	c2 e3       	ldi	r28, 0x32	; 50
    27b2:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    27b4:	69 ea       	ldi	r22, 0xA9	; 169
    27b6:	72 e0       	ldi	r23, 0x02	; 2
    27b8:	89 e1       	ldi	r24, 0x19	; 25
    27ba:	92 e0       	ldi	r25, 0x02	; 2
    27bc:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    27c0:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    27c4:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    27c8:	d0 92 aa 02 	sts	0x02AA, r13	; 0x8002aa <u8g2+0x95>
    27cc:	c0 92 a9 02 	sts	0x02A9, r12	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:197
    u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_helvR08_tf);
    u8g2.setCursor(0, 10);
    u8g2.print(F("Temperaturfuehler"));
    27d0:	60 e7       	ldi	r22, 0x70	; 112
    27d2:	72 e0       	ldi	r23, 0x02	; 2
    27d4:	85 e1       	ldi	r24, 0x15	; 21
    27d6:	92 e0       	ldi	r25, 0x02	; 2
    27d8:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    27dc:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    27e0:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    27e4:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <u8g2+0x95>
    27e8:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:199
    u8g2.setCursor(0, 20);
    u8g2.print(F("unterbrochen!"));
    27ec:	62 e6       	ldi	r22, 0x62	; 98
    27ee:	72 e0       	ldi	r23, 0x02	; 2
    27f0:	85 e1       	ldi	r24, 0x15	; 21
    27f2:	92 e0       	ldi	r25, 0x02	; 2
    27f4:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    27f8:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    27fc:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    2800:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    2804:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:202
    
    u8g2.setCursor(0, 40);
    u8g2.print(F("Nutze"));
    2808:	6c e5       	ldi	r22, 0x5C	; 92
    280a:	72 e0       	ldi	r23, 0x02	; 2
    280c:	85 e1       	ldi	r24, 0x15	; 21
    280e:	92 e0       	ldi	r25, 0x02	; 2
    2810:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    2814:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    2818:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    281c:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    2820:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:204
    u8g2.setCursor(0, 50);
    u8g2.print(F("Ersatzwert!"));
    2824:	60 e5       	ldi	r22, 0x50	; 80
    2826:	72 e0       	ldi	r23, 0x02	; 2
    2828:	85 e1       	ldi	r24, 0x15	; 21
    282a:	92 e0       	ldi	r25, 0x02	; 2
    282c:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2830:	89 e1       	ldi	r24, 0x19	; 25
    2832:	92 e0       	ldi	r25, 0x02	; 2
    2834:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:206

  } while (u8g2.nextPage());
    2838:	81 11       	cpse	r24, r1
    283a:	bc cf       	rjmp	.-136    	; 0x27b4 <setup+0x278>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:207
  delay(5000);
    283c:	68 e8       	ldi	r22, 0x88	; 136
    283e:	73 e1       	ldi	r23, 0x13	; 19
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:211

  }

  delay(250);
    2848:	6a ef       	ldi	r22, 0xFA	; 250
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:212
  LeseTMCStatus(true);
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <LeseTMCStatus(bool)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:213
  delay(250);
    285a:	6a ef       	ldi	r22, 0xFA	; 250
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
_ZNK5EERefdeEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:42
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <eeprom_read_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:216

  // Prüfe, ob AutoTune durchgeführt werden soll
  if (EEPROM.read(0) != 123) {
    286e:	8b 37       	cpi	r24, 0x7B	; 123
    2870:	09 f4       	brne	.+2      	; 0x2874 <setup+0x338>
    2872:	43 c1       	rjmp	.+646    	; 0x2afa <setup+0x5be>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    2874:	89 e1       	ldi	r24, 0x19	; 25
    2876:	92 e0       	ldi	r25, 0x02	; 2
    2878:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    287c:	c4 e1       	ldi	r28, 0x14	; 20
    287e:	d0 e0       	ldi	r29, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    2880:	69 ea       	ldi	r22, 0xA9	; 169
    2882:	72 e0       	ldi	r23, 0x02	; 2
    2884:	89 e1       	ldi	r24, 0x19	; 25
    2886:	92 e0       	ldi	r25, 0x02	; 2
    2888:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    288c:	d0 93 a8 02 	sts	0x02A8, r29	; 0x8002a8 <u8g2+0x93>
    2890:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <u8g2+0x92>
    2894:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    2898:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:222

      u8g2.firstPage();
      do {
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.setCursor(20, 20);
        u8g2.print(F("Haldex Autotune"));
    289c:	60 e4       	ldi	r22, 0x40	; 64
    289e:	72 e0       	ldi	r23, 0x02	; 2
    28a0:	85 e1       	ldi	r24, 0x15	; 21
    28a2:	92 e0       	ldi	r25, 0x02	; 2
    28a4:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    28a8:	89 e1       	ldi	r24, 0x19	; 25
    28aa:	92 e0       	ldi	r25, 0x02	; 2
    28ac:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:223
      } while (u8g2.nextPage());
    28b0:	81 11       	cpse	r24, r1
    28b2:	e6 cf       	rjmp	.-52     	; 0x2880 <setup+0x344>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:227
      

    // Lasse Stepper 400 Steps in Positive Richtung laufen und erwarte Rückgabewert
    SchrittzahlMaximum = autoHome(-400);
    28b4:	80 e7       	ldi	r24, 0x70	; 112
    28b6:	9e ef       	ldi	r25, 0xFE	; 254
    28b8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <autoHome(int)>
    28bc:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <SchrittzahlMaximum+0x1>
    28c0:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <SchrittzahlMaximum>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:230

    // Wenn der Rückgabewert kleiner als 50 Steps ist, scheint die Drehrichtung falsch zu sein
    if (SchrittzahlMaximum > -50) {
    28c4:	8f 3c       	cpi	r24, 0xCF	; 207
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	44 f0       	brlt	.+16     	; 0x28da <setup+0x39e>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:232
      // Lasse den Stepper nun also 400 Steps in negative Richtung laufen
      SchrittzahlMaximum = autoHome(400);
    28ca:	80 e9       	ldi	r24, 0x90	; 144
    28cc:	91 e0       	ldi	r25, 0x01	; 1
    28ce:	0e 94 fd 11 	call	0x23fa	; 0x23fa <autoHome(int)>
    28d2:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <SchrittzahlMaximum+0x1>
    28d6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <SchrittzahlMaximum>
_ZN4U8G29firstPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    28da:	89 e1       	ldi	r24, 0x19	; 25
    28dc:	92 e0       	ldi	r25, 0x02	; 2
    28de:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    28e2:	c4 e1       	ldi	r28, 0x14	; 20
    28e4:	d0 e0       	ldi	r29, 0x00	; 0
    28e6:	02 e3       	ldi	r16, 0x32	; 50
    28e8:	10 e0       	ldi	r17, 0x00	; 0
_ZN4U8G27setFontEPKh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:266
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
    28ea:	69 ea       	ldi	r22, 0xA9	; 169
    28ec:	72 e0       	ldi	r23, 0x02	; 2
    28ee:	89 e1       	ldi	r24, 0x19	; 25
    28f0:	92 e0       	ldi	r25, 0x02	; 2
    28f2:	0e 94 84 25 	call	0x4b08	; 0x4b08 <u8g2_SetFont>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    void clear(void) { home(); clearDisplay(); clearBuffer();  }
    void noDisplay(void) { u8g2_SetPowerSave(&u8g2, 1); }
    void display(void) { u8g2_SetPowerSave(&u8g2, 0); }
    void setCursor(u8g2_uint_t x, u8g2_uint_t y) { tx = x; ty = y; }
    28f6:	d0 93 a8 02 	sts	0x02A8, r29	; 0x8002a8 <u8g2+0x93>
    28fa:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <u8g2+0x92>
    28fe:	d0 93 aa 02 	sts	0x02AA, r29	; 0x8002aa <u8g2+0x95>
    2902:	c0 93 a9 02 	sts	0x02A9, r28	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:238
    }
    u8g2.firstPage();
      do {
        u8g2.setFont(u8g2_font_helvR08_tf);
        u8g2.setCursor(20, 20);
        u8g2.print(F("Haldex Autotune"));
    2906:	60 e3       	ldi	r22, 0x30	; 48
    2908:	72 e0       	ldi	r23, 0x02	; 2
    290a:	85 e1       	ldi	r24, 0x15	; 21
    290c:	92 e0       	ldi	r25, 0x02	; 2
    290e:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G29setCursorEjj():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:386
    2912:	d0 93 a8 02 	sts	0x02A8, r29	; 0x8002a8 <u8g2+0x93>
    2916:	c0 93 a7 02 	sts	0x02A7, r28	; 0x8002a7 <u8g2+0x92>
    291a:	10 93 aa 02 	sts	0x02AA, r17	; 0x8002aa <u8g2+0x95>
    291e:	00 93 a9 02 	sts	0x02A9, r16	; 0x8002a9 <u8g2+0x94>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:240
        u8g2.setCursor(20, 50);
        u8g2.print(SchrittzahlMaximum);
    2922:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <SchrittzahlMaximum>
    2926:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <SchrittzahlMaximum+0x1>
    292a:	4a e0       	ldi	r20, 0x0A	; 10
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	85 e1       	ldi	r24, 0x15	; 21
    2930:	92 e0       	ldi	r25, 0x02	; 2
    2932:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <Print::print(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:241
        u8g2.print(F(" steps"));
    2936:	69 e2       	ldi	r22, 0x29	; 41
    2938:	72 e0       	ldi	r23, 0x02	; 2
    293a:	85 e1       	ldi	r24, 0x15	; 21
    293c:	92 e0       	ldi	r25, 0x02	; 2
    293e:	0e 94 c6 34 	call	0x698c	; 0x698c <Print::print(__FlashStringHelper const*)>
_ZN4U8G28nextPageEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:191
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    2942:	89 e1       	ldi	r24, 0x19	; 25
    2944:	92 e0       	ldi	r25, 0x02	; 2
    2946:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:242
      } while (u8g2.nextPage());
    294a:	81 11       	cpse	r24, r1
    294c:	ce cf       	rjmp	.-100    	; 0x28ea <setup+0x3ae>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:243
      delay(2000);
    294e:	60 ed       	ldi	r22, 0xD0	; 208
    2950:	77 e0       	ldi	r23, 0x07	; 7
    2952:	80 e0       	ldi	r24, 0x00	; 0
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:245

    if (SchrittzahlMaximum < -50) {
    295a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <SchrittzahlMaximum>
    295e:	90 91 b6 02 	lds	r25, 0x02B6	; 0x8002b6 <SchrittzahlMaximum+0x1>
    2962:	8e 3c       	cpi	r24, 0xCE	; 206
    2964:	2f ef       	ldi	r18, 0xFF	; 255
    2966:	92 07       	cpc	r25, r18
    2968:	0c f0       	brlt	.+2      	; 0x296c <setup+0x430>
    296a:	90 c0       	rjmp	.+288    	; 0x2a8c <setup+0x550>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:246
      Schrittzahl0Prozent = -100;
    296c:	2c e9       	ldi	r18, 0x9C	; 156
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	30 93 ac 02 	sts	0x02AC, r19	; 0x8002ac <Schrittzahl0Prozent+0x1>
    2974:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:247
      Schrittzahl100Prozent = SchrittzahlMaximum + 60;
    2978:	9c 01       	movw	r18, r24
    297a:	24 5c       	subi	r18, 0xC4	; 196
    297c:	3f 4f       	sbci	r19, 0xFF	; 255
    297e:	30 93 b4 02 	sts	0x02B4, r19	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    2982:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:248
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2986:	80 56       	subi	r24, 0x60	; 96
    2988:	9f 4f       	sbci	r25, 0xFF	; 255
    298a:	ac 01       	movw	r20, r24
    298c:	97 ff       	sbrs	r25, 7
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <setup+0x458>
    2990:	4f 5f       	subi	r20, 0xFF	; 255
    2992:	5f 4f       	sbci	r21, 0xFF	; 255
    2994:	55 95       	asr	r21
    2996:	47 95       	ror	r20
    2998:	44 56       	subi	r20, 0x64	; 100
    299a:	51 09       	sbc	r21, r1
    299c:	50 93 b0 02 	sts	0x02B0, r21	; 0x8002b0 <Schrittzahl50Prozent+0x1>
    29a0:	40 93 af 02 	sts	0x02AF, r20	; 0x8002af <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:249
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    29a4:	24 1b       	sub	r18, r20
    29a6:	35 0b       	sbc	r19, r21
    29a8:	37 ff       	sbrs	r19, 7
    29aa:	02 c0       	rjmp	.+4      	; 0x29b0 <setup+0x474>
    29ac:	2f 5f       	subi	r18, 0xFF	; 255
    29ae:	3f 4f       	sbci	r19, 0xFF	; 255
    29b0:	35 95       	asr	r19
    29b2:	27 95       	ror	r18
    29b4:	24 0f       	add	r18, r20
    29b6:	35 1f       	adc	r19, r21
    29b8:	30 93 b2 02 	sts	0x02B2, r19	; 0x8002b2 <Schrittzahl75Prozent+0x1>
    29bc:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:250
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    29c0:	97 fd       	sbrc	r25, 7
    29c2:	03 96       	adiw	r24, 0x03	; 3
    29c4:	95 95       	asr	r25
    29c6:	87 95       	ror	r24
    29c8:	95 95       	asr	r25
    29ca:	87 95       	ror	r24
    29cc:	84 56       	subi	r24, 0x64	; 100
    29ce:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:257
    } else if (SchrittzahlMaximum > 50) {
      Schrittzahl0Prozent = 100;
      Schrittzahl100Prozent = SchrittzahlMaximum - 60;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    29d0:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <Schrittzahl25Prozent+0x1>
    29d4:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <Schrittzahl25Prozent>
_ZN5EERefaSEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\EEPROM\src/EEPROM.h:47
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    29d8:	6b e7       	ldi	r22, 0x7B	; 123
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <eeprom_write_byte>
setup():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:260
      EEPROM.write(0, 123);
    }
    eepromWriteInt(2, Schrittzahl0Prozent);
    29e2:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <Schrittzahl0Prozent>
    29e6:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <Schrittzahl0Prozent+0x1>
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:261
    eepromWriteInt(4, Schrittzahl25Prozent);
    29f2:	60 91 ad 02 	lds	r22, 0x02AD	; 0x8002ad <Schrittzahl25Prozent>
    29f6:	70 91 ae 02 	lds	r23, 0x02AE	; 0x8002ae <Schrittzahl25Prozent+0x1>
    29fa:	84 e0       	ldi	r24, 0x04	; 4
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:262
    eepromWriteInt(6, Schrittzahl50Prozent);
    2a02:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <Schrittzahl50Prozent>
    2a06:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <Schrittzahl50Prozent+0x1>
    2a0a:	86 e0       	ldi	r24, 0x06	; 6
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:263
    eepromWriteInt(8, Schrittzahl75Prozent);
    2a12:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <Schrittzahl75Prozent>
    2a16:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <Schrittzahl75Prozent+0x1>
    2a1a:	88 e0       	ldi	r24, 0x08	; 8
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:264
    eepromWriteInt(10, Schrittzahl100Prozent);
    2a22:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <Schrittzahl100Prozent>
    2a26:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    2a2a:	8a e0       	ldi	r24, 0x0A	; 10
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:265
    eepromWriteInt(12, SchrittzahlMaximum);
    2a32:	60 91 b5 02 	lds	r22, 0x02B5	; 0x8002b5 <SchrittzahlMaximum>
    2a36:	70 91 b6 02 	lds	r23, 0x02B6	; 0x8002b6 <SchrittzahlMaximum+0x1>
    2a3a:	8c e0       	ldi	r24, 0x0C	; 12
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	0e 94 69 12 	call	0x24d2	; 0x24d2 <eepromWriteInt(int, int)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:276
    Schrittzahl75Prozent = eepromReadInt(8);
    Schrittzahl100Prozent = eepromReadInt(10);
    SchrittzahlMaximum = eepromReadInt(12);
  }

  digitalWrite(IO_Enable, HIGH);
    2a42:	61 e0       	ldi	r22, 0x01	; 1
    2a44:	84 e0       	ldi	r24, 0x04	; 4
    2a46:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:277
  stepper.setCurrentPosition(0);
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	ba 01       	movw	r22, r20
    2a50:	87 eb       	ldi	r24, 0xB7	; 183
    2a52:	92 e0       	ldi	r25, 0x02	; 2
    2a54:	0e 94 55 1e 	call	0x3caa	; 0x3caa <AccelStepper::setCurrentPosition(long)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:278
  stepper.setSpeed(1000);
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	50 e0       	ldi	r21, 0x00	; 0
    2a5c:	6a e7       	ldi	r22, 0x7A	; 122
    2a5e:	74 e4       	ldi	r23, 0x44	; 68
    2a60:	87 eb       	ldi	r24, 0xB7	; 183
    2a62:	92 e0       	ldi	r25, 0x02	; 2
    2a64:	0e 94 6f 1f 	call	0x3ede	; 0x3ede <AccelStepper::setSpeed(float)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:281

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
    2a68:	6c e3       	ldi	r22, 0x3C	; 60
    2a6a:	8f ef       	ldi	r24, 0xFF	; 255
    2a6c:	92 e0       	ldi	r25, 0x02	; 2
    2a6e:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <TMC2209::setRunCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:282
  stepper_driver.setHoldCurrent(40);
    2a72:	68 e2       	ldi	r22, 0x28	; 40
    2a74:	8f ef       	ldi	r24, 0xFF	; 255
    2a76:	92 e0       	ldi	r25, 0x02	; 2
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:285

  
}
    2a78:	df 91       	pop	r29
    2a7a:	cf 91       	pop	r28
    2a7c:	1f 91       	pop	r17
    2a7e:	0f 91       	pop	r16
    2a80:	ff 90       	pop	r15
    2a82:	ef 90       	pop	r14
    2a84:	df 90       	pop	r13
    2a86:	cf 90       	pop	r12
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:282
  stepper.setCurrentPosition(0);
  stepper.setSpeed(1000);

  // Motorstrom auf passende Werte für den Betrieb setzen
  stepper_driver.setRunCurrent(60);
  stepper_driver.setHoldCurrent(40);
    2a88:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <TMC2209::setHoldCurrent(unsigned char)>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:252
      Schrittzahl100Prozent = SchrittzahlMaximum + 60;
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
      EEPROM.write(0, 123);
    } else if (SchrittzahlMaximum > 50) {
    2a8c:	83 33       	cpi	r24, 0x33	; 51
    2a8e:	91 05       	cpc	r25, r1
    2a90:	0c f4       	brge	.+2      	; 0x2a94 <setup+0x558>
    2a92:	a7 cf       	rjmp	.-178    	; 0x29e2 <setup+0x4a6>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:253
      Schrittzahl0Prozent = 100;
    2a94:	24 e6       	ldi	r18, 0x64	; 100
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	30 93 ac 02 	sts	0x02AC, r19	; 0x8002ac <Schrittzahl0Prozent+0x1>
    2a9c:	20 93 ab 02 	sts	0x02AB, r18	; 0x8002ab <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:254
      Schrittzahl100Prozent = SchrittzahlMaximum - 60;
    2aa0:	9c 01       	movw	r18, r24
    2aa2:	2c 53       	subi	r18, 0x3C	; 60
    2aa4:	31 09       	sbc	r19, r1
    2aa6:	30 93 b4 02 	sts	0x02B4, r19	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    2aaa:	20 93 b3 02 	sts	0x02B3, r18	; 0x8002b3 <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:255
      Schrittzahl50Prozent = (Schrittzahl100Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2aae:	80 5a       	subi	r24, 0xA0	; 160
    2ab0:	91 09       	sbc	r25, r1
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	97 ff       	sbrs	r25, 7
    2ab6:	02 c0       	rjmp	.+4      	; 0x2abc <setup+0x580>
    2ab8:	4f 5f       	subi	r20, 0xFF	; 255
    2aba:	5f 4f       	sbci	r21, 0xFF	; 255
    2abc:	55 95       	asr	r21
    2abe:	47 95       	ror	r20
    2ac0:	4c 59       	subi	r20, 0x9C	; 156
    2ac2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac4:	50 93 b0 02 	sts	0x02B0, r21	; 0x8002b0 <Schrittzahl50Prozent+0x1>
    2ac8:	40 93 af 02 	sts	0x02AF, r20	; 0x8002af <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:256
      Schrittzahl75Prozent = (Schrittzahl100Prozent - Schrittzahl50Prozent) / 2 + Schrittzahl50Prozent;
    2acc:	24 1b       	sub	r18, r20
    2ace:	35 0b       	sbc	r19, r21
    2ad0:	37 ff       	sbrs	r19, 7
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <setup+0x59c>
    2ad4:	2f 5f       	subi	r18, 0xFF	; 255
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	35 95       	asr	r19
    2ada:	27 95       	ror	r18
    2adc:	24 0f       	add	r18, r20
    2ade:	35 1f       	adc	r19, r21
    2ae0:	30 93 b2 02 	sts	0x02B2, r19	; 0x8002b2 <Schrittzahl75Prozent+0x1>
    2ae4:	20 93 b1 02 	sts	0x02B1, r18	; 0x8002b1 <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:257
      Schrittzahl25Prozent = (Schrittzahl50Prozent - Schrittzahl0Prozent) / 2 + Schrittzahl0Prozent;
    2ae8:	97 fd       	sbrc	r25, 7
    2aea:	03 96       	adiw	r24, 0x03	; 3
    2aec:	95 95       	asr	r25
    2aee:	87 95       	ror	r24
    2af0:	95 95       	asr	r25
    2af2:	87 95       	ror	r24
    2af4:	8c 59       	subi	r24, 0x9C	; 156
    2af6:	9f 4f       	sbci	r25, 0xFF	; 255
    2af8:	6b cf       	rjmp	.-298    	; 0x29d0 <setup+0x494>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:268
    eepromWriteInt(8, Schrittzahl75Prozent);
    eepromWriteInt(10, Schrittzahl100Prozent);
    eepromWriteInt(12, SchrittzahlMaximum);
  } else {
    // Wenn nicht, nehme Werte aus dem EEPROM
    Schrittzahl0Prozent = eepromReadInt(2);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	0e 94 8a 12 	call	0x2514	; 0x2514 <eepromReadInt(int)>
    2b02:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <Schrittzahl0Prozent+0x1>
    2b06:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <Schrittzahl0Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:269
    Schrittzahl25Prozent = eepromReadInt(4);
    2b0a:	84 e0       	ldi	r24, 0x04	; 4
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 8a 12 	call	0x2514	; 0x2514 <eepromReadInt(int)>
    2b12:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <Schrittzahl25Prozent+0x1>
    2b16:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <Schrittzahl25Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:270
    Schrittzahl50Prozent = eepromReadInt(6);
    2b1a:	86 e0       	ldi	r24, 0x06	; 6
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	0e 94 8a 12 	call	0x2514	; 0x2514 <eepromReadInt(int)>
    2b22:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <Schrittzahl50Prozent+0x1>
    2b26:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <Schrittzahl50Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:271
    Schrittzahl75Prozent = eepromReadInt(8);
    2b2a:	88 e0       	ldi	r24, 0x08	; 8
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 8a 12 	call	0x2514	; 0x2514 <eepromReadInt(int)>
    2b32:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <Schrittzahl75Prozent+0x1>
    2b36:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <Schrittzahl75Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:272
    Schrittzahl100Prozent = eepromReadInt(10);
    2b3a:	8a e0       	ldi	r24, 0x0A	; 10
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 8a 12 	call	0x2514	; 0x2514 <eepromReadInt(int)>
    2b42:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <Schrittzahl100Prozent+0x1>
    2b46:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <Schrittzahl100Prozent>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:273
    SchrittzahlMaximum = eepromReadInt(12);
    2b4a:	8c e0       	ldi	r24, 0x0C	; 12
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 8a 12 	call	0x2514	; 0x2514 <eepromReadInt(int)>
    2b52:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <SchrittzahlMaximum+0x1>
    2b56:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <SchrittzahlMaximum>
    2b5a:	73 cf       	rjmp	.-282    	; 0x2a42 <setup+0x506>

00002b5c <_GLOBAL__sub_I_serial_stream>:
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:654
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2b5c:	cf 92       	push	r12
    2b5e:	ef 92       	push	r14
    2b60:	0f 93       	push	r16
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:51
#define IO_LED_Sperrgrad 13
#define IO_Pumpe 23

// TMC2209
HardwareSerial &serial_stream = Serial;
TMC2209 stepper_driver;
    2b66:	8f ef       	ldi	r24, 0xFF	; 255
    2b68:	92 e0       	ldi	r25, 0x02	; 2
    2b6a:	0e 94 f7 15 	call	0x2bee	; 0x2bee <TMC2209::TMC2209()>
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:54
TMC2209::Status TMCStatus;

AccelStepper stepper(1, IO_Step, IO_Direction);
    2b6e:	cc 24       	eor	r12, r12
    2b70:	c3 94       	inc	r12
    2b72:	85 e0       	ldi	r24, 0x05	; 5
    2b74:	e8 2e       	mov	r14, r24
    2b76:	04 e0       	ldi	r16, 0x04	; 4
    2b78:	25 e0       	ldi	r18, 0x05	; 5
    2b7a:	46 e0       	ldi	r20, 0x06	; 6
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	87 eb       	ldi	r24, 0xB7	; 183
    2b80:	92 e0       	ldi	r25, 0x02	; 2
    2b82:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b86:	c5 e1       	ldi	r28, 0x15	; 21
    2b88:	d2 e0       	ldi	r29, 0x02	; 2
    2b8a:	1b 82       	std	Y+3, r1	; 0x03
    2b8c:	1a 82       	std	Y+2, r1	; 0x02
_ZN4U8G2C4Ev():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:68
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    2b8e:	8c e1       	ldi	r24, 0x1C	; 28
    2b90:	91 e0       	ldi	r25, 0x01	; 1
    2b92:	99 83       	std	Y+1, r25	; 0x01
    2b94:	88 83       	st	Y, r24
    2b96:	8c e1       	ldi	r24, 0x1C	; 28
    2b98:	99 e2       	ldi	r25, 0x29	; 41
    2b9a:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <u8g2+0x91>
    2b9e:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <u8g2+0x90>
_ZN4U8G24homeEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:382
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    2ba2:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <u8g2+0x93>
    2ba6:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <u8g2+0x92>
    2baa:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <u8g2+0x95>
    2bae:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <u8g2+0x94>
    2bb2:	89 e1       	ldi	r24, 0x19	; 25
    2bb4:	92 e0       	ldi	r25, 0x02	; 2
    2bb6:	0e 94 26 29 	call	0x524c	; 0x524c <u8x8_utf8_init>
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:2893
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_sw_i2c, u8x8_gpio_and_delay_arduino);
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SH1106_128X64_NONAME_2_HW_I2C : public U8G2 {
  public: U8G2_SH1106_128X64_NONAME_2_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    2bba:	88 e2       	ldi	r24, 0x28	; 40
    2bbc:	91 e0       	ldi	r25, 0x01	; 1
    2bbe:	99 83       	std	Y+1, r25	; 0x01
    2bc0:	88 83       	st	Y, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:2894
    u8g2_Setup_sh1106_i2c_128x64_noname_2(&u8g2, rotation, u8x8_byte_arduino_hw_i2c, u8x8_gpio_and_delay_arduino);
    2bc2:	25 e0       	ldi	r18, 0x05	; 5
    2bc4:	30 e2       	ldi	r19, 0x20	; 32
    2bc6:	46 e7       	ldi	r20, 0x76	; 118
    2bc8:	50 e2       	ldi	r21, 0x20	; 32
    2bca:	60 e5       	ldi	r22, 0x50	; 80
    2bcc:	71 e0       	ldi	r23, 0x01	; 1
    2bce:	89 e1       	ldi	r24, 0x19	; 25
    2bd0:	92 e0       	ldi	r25, 0x02	; 2
    2bd2:	0e 94 01 22 	call	0x4402	; 0x4402 <u8g2_Setup_sh1106_i2c_128x64_noname_2>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    u8x8_SetPin_HW_I2C(getU8x8(), reset, clock, data);
    2bd6:	2f ef       	ldi	r18, 0xFF	; 255
    2bd8:	4f ef       	ldi	r20, 0xFF	; 255
    2bda:	6f ef       	ldi	r22, 0xFF	; 255
    2bdc:	89 e1       	ldi	r24, 0x19	; 25
    2bde:	92 e0       	ldi	r25, 0x02	; 2
_GLOBAL__sub_I_serial_stream():
C:\Users\Thaddaeus\Nextcloud\T4\Projekte\Haldex_Controller_Projekt\Haldex_Stufenschalter/Haldex_Stufenschalter.ino:654
int eepromReadInt(int adr) {
  byte low, high;
  low = EEPROM.read(adr);
  high = EEPROM.read(adr + 1);
  return low + ((high << 8) & 0xFF00);
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	0f 91       	pop	r16
    2be6:	ef 90       	pop	r14
    2be8:	cf 90       	pop	r12
_ZN34U8G2_SH1106_128X64_NONAME_2_HW_I2CC4EPK14u8g2_cb_structhhh():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8g2lib.h:2895
    2bea:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>

00002bee <TMC2209::TMC2209()>:
_ZN7TMC2209C2Ev():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:247
}

void TMC2209::enableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
  writeStoredPwmConfig();
    2bee:	fc 01       	movw	r30, r24
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	82 8f       	std	Z+26, r24	; 0x1a
    2bf4:	11 82       	std	Z+1, r1	; 0x01
    2bf6:	10 82       	st	Z, r1
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	92 ec       	ldi	r25, 0xC2	; 194
    2bfc:	a1 e0       	ldi	r26, 0x01	; 1
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	82 83       	std	Z+2, r24	; 0x02
    2c02:	93 83       	std	Z+3, r25	; 0x03
    2c04:	a4 83       	std	Z+4, r26	; 0x04
    2c06:	b5 83       	std	Z+5, r27	; 0x05
    2c08:	16 82       	std	Z+6, r1	; 0x06
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	90 87       	std	Z+8, r25	; 0x08
    2c10:	87 83       	std	Z+7, r24	; 0x07
    2c12:	15 8a       	std	Z+21, r1	; 0x15
    2c14:	08 95       	ret

00002c16 <TMC2209::serialAvailable()>:
_ZN7TMC220915serialAvailableEv():
    2c16:	dc 01       	movw	r26, r24
    2c18:	8d 91       	ld	r24, X+
    2c1a:	9c 91       	ld	r25, X
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	39 f0       	breq	.+14     	; 0x2c2e <TMC2209::serialAvailable()+0x18>
    2c20:	dc 01       	movw	r26, r24
    2c22:	ed 91       	ld	r30, X+
    2c24:	fc 91       	ld	r31, X
    2c26:	00 84       	ldd	r0, Z+8	; 0x08
    2c28:	f1 85       	ldd	r31, Z+9	; 0x09
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	09 94       	ijmp
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	08 95       	ret

00002c34 <TMC2209::serialWrite(unsigned char)>:
_ZN7TMC220911serialWriteEh():
    2c34:	dc 01       	movw	r26, r24
    2c36:	8d 91       	ld	r24, X+
    2c38:	9c 91       	ld	r25, X
    2c3a:	00 97       	sbiw	r24, 0x00	; 0
    2c3c:	39 f0       	breq	.+14     	; 0x2c4c <TMC2209::serialWrite(unsigned char)+0x18>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	ed 91       	ld	r30, X+
    2c42:	fc 91       	ld	r31, X
    2c44:	01 90       	ld	r0, Z+
    2c46:	f0 81       	ld	r31, Z
    2c48:	e0 2d       	mov	r30, r0
    2c4a:	09 94       	ijmp
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	08 95       	ret

00002c52 <TMC2209::serialRead()>:
_ZN7TMC220910serialReadEv():
    2c52:	dc 01       	movw	r26, r24
    2c54:	8d 91       	ld	r24, X+
    2c56:	9c 91       	ld	r25, X
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	39 f0       	breq	.+14     	; 0x2c6a <TMC2209::serialRead()+0x18>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	ed 91       	ld	r30, X+
    2c60:	fc 91       	ld	r31, X
    2c62:	02 84       	ldd	r0, Z+10	; 0x0a
    2c64:	f3 85       	ldd	r31, Z+11	; 0x0b
    2c66:	e0 2d       	mov	r30, r0
    2c68:	09 94       	ijmp
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	08 95       	ret

00002c70 <TMC2209::serialFlush()>:
_ZN7TMC220911serialFlushEv():
    2c70:	dc 01       	movw	r26, r24
    2c72:	8d 91       	ld	r24, X+
    2c74:	9c 91       	ld	r25, X
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	39 f0       	breq	.+14     	; 0x2c88 <TMC2209::serialFlush()+0x18>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	ed 91       	ld	r30, X+
    2c7e:	fc 91       	ld	r31, X
    2c80:	06 80       	ldd	r0, Z+6	; 0x06
    2c82:	f7 81       	ldd	r31, Z+7	; 0x07
    2c84:	e0 2d       	mov	r30, r0
    2c86:	09 94       	ijmp
    2c88:	08 95       	ret

00002c8a <TMC2209::reverseData(unsigned long)>:
_ZN7TMC220911reverseDataEm():
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	ba 01       	movw	r22, r20
    2c8e:	0e 94 40 3c 	call	0x7880	; 0x7880 <__bswapsi2>
    2c92:	08 95       	ret

00002c94 <TMC2209::write(unsigned char, unsigned long)>:
_ZN7TMC22095writeEhm():
    2c94:	7f 92       	push	r7
    2c96:	8f 92       	push	r8
    2c98:	9f 92       	push	r9
    2c9a:	af 92       	push	r10
    2c9c:	bf 92       	push	r11
    2c9e:	cf 92       	push	r12
    2ca0:	df 92       	push	r13
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	28 97       	sbiw	r28, 0x08	; 8
    2cb4:	0f b6       	in	r0, 0x3f	; 63
    2cb6:	f8 94       	cli
    2cb8:	de bf       	out	0x3e, r29	; 62
    2cba:	0f be       	out	0x3f, r0	; 63
    2cbc:	cd bf       	out	0x3d, r28	; 61
    2cbe:	7c 01       	movw	r14, r24
    2cc0:	16 2f       	mov	r17, r22
    2cc2:	ba 01       	movw	r22, r20
    2cc4:	a9 01       	movw	r20, r18
    2cc6:	85 e0       	ldi	r24, 0x05	; 5
    2cc8:	89 83       	std	Y+1, r24	; 0x01
    2cca:	f7 01       	movw	r30, r14
    2ccc:	b6 80       	ldd	r11, Z+6	; 0x06
    2cce:	ba 82       	std	Y+2, r11	; 0x02
    2cd0:	1f 77       	andi	r17, 0x7F	; 127
    2cd2:	10 68       	ori	r17, 0x80	; 128
    2cd4:	1b 83       	std	Y+3, r17	; 0x03
    2cd6:	c7 01       	movw	r24, r14
    2cd8:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <TMC2209::reverseData(unsigned long)>
    2cdc:	6c 83       	std	Y+4, r22	; 0x04
    2cde:	7d 83       	std	Y+5, r23	; 0x05
    2ce0:	8e 83       	std	Y+6, r24	; 0x06
    2ce2:	9f 83       	std	Y+7, r25	; 0x07
_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h():
    2ce4:	f6 2f       	mov	r31, r22
    2ce6:	a7 2e       	mov	r10, r23
    2ce8:	98 2e       	mov	r9, r24
    2cea:	89 2e       	mov	r8, r25
    2cec:	e0 e0       	ldi	r30, 0x00	; 0
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	a0 e0       	ldi	r26, 0x00	; 0
    2cf2:	87 e0       	ldi	r24, 0x07	; 7
    2cf4:	78 2e       	mov	r7, r24
    2cf6:	25 e0       	ldi	r18, 0x05	; 5
    2cf8:	3b 2d       	mov	r19, r11
    2cfa:	41 2f       	mov	r20, r17
    2cfc:	5f 2f       	mov	r21, r31
    2cfe:	6a 2d       	mov	r22, r10
    2d00:	79 2d       	mov	r23, r9
    2d02:	88 2d       	mov	r24, r8
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0a 2f       	mov	r16, r26
    2d08:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <__lshrdi3>
    2d0c:	38 e0       	ldi	r19, 0x08	; 8
    2d0e:	8e 2f       	mov	r24, r30
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	42 2f       	mov	r20, r18
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	bc 01       	movw	r22, r24
    2d18:	66 0f       	add	r22, r22
    2d1a:	67 2f       	mov	r22, r23
    2d1c:	66 1f       	adc	r22, r22
    2d1e:	77 0b       	sbc	r23, r23
    2d20:	20 fb       	bst	r18, 0
    2d22:	cc 24       	eor	r12, r12
    2d24:	c0 f8       	bld	r12, 0
    2d26:	d1 2c       	mov	r13, r1
    2d28:	ee 0f       	add	r30, r30
    2d2a:	6c 15       	cp	r22, r12
    2d2c:	7d 05       	cpc	r23, r13
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <TMC2209::write(unsigned char, unsigned long)+0xa4>
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	e8 2f       	mov	r30, r24
    2d36:	e7 25       	eor	r30, r7
    2d38:	55 95       	asr	r21
    2d3a:	47 95       	ror	r20
    2d3c:	24 2f       	mov	r18, r20
    2d3e:	31 50       	subi	r19, 0x01	; 1
    2d40:	31 f7       	brne	.-52     	; 0x2d0e <TMC2209::write(unsigned char, unsigned long)+0x7a>
    2d42:	18 96       	adiw	r26, 0x08	; 8
    2d44:	a8 33       	cpi	r26, 0x38	; 56
    2d46:	b1 05       	cpc	r27, r1
    2d48:	b1 f6       	brne	.-84     	; 0x2cf6 <TMC2209::write(unsigned char, unsigned long)+0x62>
_ZN7TMC22095writeEhm():
    2d4a:	e8 87       	std	Y+8, r30	; 0x08
    2d4c:	d1 2c       	mov	r13, r1
    2d4e:	c1 2c       	mov	r12, r1
_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h():
    2d50:	29 81       	ldd	r18, Y+1	; 0x01
    2d52:	3a 81       	ldd	r19, Y+2	; 0x02
    2d54:	4b 81       	ldd	r20, Y+3	; 0x03
    2d56:	5c 81       	ldd	r21, Y+4	; 0x04
    2d58:	6d 81       	ldd	r22, Y+5	; 0x05
    2d5a:	7e 81       	ldd	r23, Y+6	; 0x06
    2d5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d5e:	98 85       	ldd	r25, Y+8	; 0x08
    2d60:	0c 2d       	mov	r16, r12
    2d62:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <__lshrdi3>
    2d66:	62 2f       	mov	r22, r18
    2d68:	c7 01       	movw	r24, r14
    2d6a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <TMC2209::serialWrite(unsigned char)>
    2d6e:	f8 e0       	ldi	r31, 0x08	; 8
    2d70:	cf 0e       	add	r12, r31
    2d72:	d1 1c       	adc	r13, r1
    2d74:	80 e4       	ldi	r24, 0x40	; 64
    2d76:	c8 16       	cp	r12, r24
    2d78:	d1 04       	cpc	r13, r1
    2d7a:	51 f7       	brne	.-44     	; 0x2d50 <TMC2209::write(unsigned char, unsigned long)+0xbc>
_ZN7TMC22095writeEhm():
    2d7c:	28 96       	adiw	r28, 0x08	; 8
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	df 90       	pop	r13
    2d96:	cf 90       	pop	r12
    2d98:	bf 90       	pop	r11
    2d9a:	af 90       	pop	r10
    2d9c:	9f 90       	pop	r9
    2d9e:	8f 90       	pop	r8
    2da0:	7f 90       	pop	r7
    2da2:	08 95       	ret

00002da4 <TMC2209::setCoolStepDurationThreshold(unsigned long)>:
_ZN7TMC220928setCoolStepDurationThresholdEm():
    2da4:	9a 01       	movw	r18, r20
    2da6:	ab 01       	movw	r20, r22
    2da8:	64 e1       	ldi	r22, 0x14	; 20
    2daa:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>

00002dae <TMC2209::setStallGuardThreshold(unsigned char)>:
_ZN7TMC220922setStallGuardThresholdEh():
    2dae:	26 2f       	mov	r18, r22
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	60 e4       	ldi	r22, 0x40	; 64
    2db8:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>

00002dbc <TMC2209::setRegistersToDefaults()>:
_ZN7TMC220922setRegistersToDefaultsEv():
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	ec 01       	movw	r28, r24
    2dc2:	1d 86       	std	Y+13, r1	; 0x0d
    2dc4:	1e 86       	std	Y+14, r1	; 0x0e
    2dc6:	1f 86       	std	Y+15, r1	; 0x0f
    2dc8:	18 8a       	std	Y+16, r1	; 0x10
    2dca:	80 e1       	ldi	r24, 0x10	; 16
    2dcc:	8d 87       	std	Y+13, r24	; 0x0d
    2dce:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dd0:	8f 61       	ori	r24, 0x1F	; 31
    2dd2:	8e 87       	std	Y+14, r24	; 0x0e
    2dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd6:	80 7f       	andi	r24, 0xF0	; 240
    2dd8:	81 60       	ori	r24, 0x01	; 1
    2dda:	8f 87       	std	Y+15, r24	; 0x0f
    2ddc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2dde:	3e 85       	ldd	r19, Y+14	; 0x0e
    2de0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2de2:	58 89       	ldd	r21, Y+16	; 0x10
    2de4:	60 e1       	ldi	r22, 0x10	; 16
    2de6:	ce 01       	movw	r24, r28
    2de8:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2dec:	83 e5       	ldi	r24, 0x53	; 83
    2dee:	8e 8b       	std	Y+22, r24	; 0x16
    2df0:	1f 8a       	std	Y+23, r1	; 0x17
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	88 8f       	std	Y+24, r24	; 0x18
    2df6:	80 e1       	ldi	r24, 0x10	; 16
    2df8:	89 8f       	std	Y+25, r24	; 0x19
    2dfa:	2e 89       	ldd	r18, Y+22	; 0x16
    2dfc:	3f 89       	ldd	r19, Y+23	; 0x17
    2dfe:	48 8d       	ldd	r20, Y+24	; 0x18
    2e00:	59 8d       	ldd	r21, Y+25	; 0x19
    2e02:	6c e6       	ldi	r22, 0x6C	; 108
    2e04:	ce 01       	movw	r24, r28
    2e06:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e0a:	84 e2       	ldi	r24, 0x24	; 36
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	ad e0       	ldi	r26, 0x0D	; 13
    2e10:	b1 ec       	ldi	r27, 0xC1	; 193
    2e12:	8b 8f       	std	Y+27, r24	; 0x1b
    2e14:	9c 8f       	std	Y+28, r25	; 0x1c
    2e16:	ad 8f       	std	Y+29, r26	; 0x1d
    2e18:	be 8f       	std	Y+30, r27	; 0x1e
    2e1a:	24 e2       	ldi	r18, 0x24	; 36
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	4d e0       	ldi	r20, 0x0D	; 13
    2e20:	51 ec       	ldi	r21, 0xC1	; 193
    2e22:	60 e7       	ldi	r22, 0x70	; 112
    2e24:	ce 01       	movw	r24, r28
    2e26:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e2a:	19 8a       	std	Y+17, r1	; 0x11
    2e2c:	1a 8a       	std	Y+18, r1	; 0x12
    2e2e:	1b 8a       	std	Y+19, r1	; 0x13
    2e30:	1c 8a       	std	Y+20, r1	; 0x14
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	a9 01       	movw	r20, r18
    2e38:	62 e4       	ldi	r22, 0x42	; 66
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e40:	24 e1       	ldi	r18, 0x14	; 20
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	50 e0       	ldi	r21, 0x00	; 0
    2e48:	61 e1       	ldi	r22, 0x11	; 17
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	a9 01       	movw	r20, r18
    2e56:	63 e1       	ldi	r22, 0x13	; 19
    2e58:	ce 01       	movw	r24, r28
    2e5a:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	a9 01       	movw	r20, r18
    2e64:	62 e2       	ldi	r22, 0x22	; 34
    2e66:	ce 01       	movw	r24, r28
    2e68:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	a9 01       	movw	r20, r18
    2e72:	64 e1       	ldi	r22, 0x14	; 20
    2e74:	ce 01       	movw	r24, r28
    2e76:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	a9 01       	movw	r20, r18
    2e80:	60 e4       	ldi	r22, 0x40	; 64
    2e82:	ce 01       	movw	r24, r28
    2e84:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    2e88:	20 e0       	ldi	r18, 0x00	; 0
    2e8a:	30 e0       	ldi	r19, 0x00	; 0
    2e8c:	a9 01       	movw	r20, r18
    2e8e:	62 e4       	ldi	r22, 0x42	; 66
    2e90:	ce 01       	movw	r24, r28
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>

00002e9a <TMC2209::read(unsigned char)>:
_ZN7TMC22094readEh():
    2e9a:	8f 92       	push	r8
    2e9c:	9f 92       	push	r9
    2e9e:	af 92       	push	r10
    2ea0:	bf 92       	push	r11
    2ea2:	df 92       	push	r13
    2ea4:	ef 92       	push	r14
    2ea6:	ff 92       	push	r15
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	28 97       	sbiw	r28, 0x08	; 8
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	7c 01       	movw	r14, r24
    2ec2:	45 e0       	ldi	r20, 0x05	; 5
    2ec4:	84 2e       	mov	r8, r20
    2ec6:	91 2c       	mov	r9, r1
    2ec8:	a1 2c       	mov	r10, r1
    2eca:	b1 2c       	mov	r11, r1
    2ecc:	fc 01       	movw	r30, r24
    2ece:	96 80       	ldd	r9, Z+6	; 0x06
    2ed0:	6f 77       	andi	r22, 0x7F	; 127
    2ed2:	8a 2d       	mov	r24, r10
    2ed4:	80 78       	andi	r24, 0x80	; 128
    2ed6:	a8 2e       	mov	r10, r24
    2ed8:	a6 2a       	or	r10, r22
    2eda:	e8 94       	clt
    2edc:	a7 f8       	bld	r10, 7
_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h():
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	e0 e0       	ldi	r30, 0x00	; 0
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	57 e0       	ldi	r21, 0x07	; 7
    2ee6:	d5 2e       	mov	r13, r21
    2ee8:	b5 01       	movw	r22, r10
    2eea:	a4 01       	movw	r20, r8
    2eec:	0e 2e       	mov	r0, r30
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <TMC2209::read(unsigned char)+0x5e>
    2ef0:	76 95       	lsr	r23
    2ef2:	67 95       	ror	r22
    2ef4:	57 95       	ror	r21
    2ef6:	47 95       	ror	r20
    2ef8:	0a 94       	dec	r0
    2efa:	d2 f7       	brpl	.-12     	; 0x2ef0 <TMC2209::read(unsigned char)+0x56>
    2efc:	58 e0       	ldi	r21, 0x08	; 8
    2efe:	68 2f       	mov	r22, r24
    2f00:	70 e0       	ldi	r23, 0x00	; 0
    2f02:	a4 2f       	mov	r26, r20
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	8b 01       	movw	r16, r22
    2f08:	00 0f       	add	r16, r16
    2f0a:	01 2f       	mov	r16, r17
    2f0c:	00 1f       	adc	r16, r16
    2f0e:	11 0b       	sbc	r17, r17
    2f10:	24 2f       	mov	r18, r20
    2f12:	21 70       	andi	r18, 0x01	; 1
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	88 0f       	add	r24, r24
    2f18:	02 17       	cp	r16, r18
    2f1a:	13 07       	cpc	r17, r19
    2f1c:	21 f0       	breq	.+8      	; 0x2f26 <TMC2209::read(unsigned char)+0x8c>
    2f1e:	cb 01       	movw	r24, r22
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	8d 25       	eor	r24, r13
    2f26:	b5 95       	asr	r27
    2f28:	a7 95       	ror	r26
    2f2a:	4a 2f       	mov	r20, r26
    2f2c:	51 50       	subi	r21, 0x01	; 1
    2f2e:	39 f7       	brne	.-50     	; 0x2efe <TMC2209::read(unsigned char)+0x64>
    2f30:	38 96       	adiw	r30, 0x08	; 8
    2f32:	e8 31       	cpi	r30, 0x18	; 24
    2f34:	f1 05       	cpc	r31, r1
    2f36:	c1 f6       	brne	.-80     	; 0x2ee8 <TMC2209::read(unsigned char)+0x4e>
_ZN7TMC22094readEh():
    2f38:	b8 2e       	mov	r11, r24
_ZN7TMC220925sendDatagramBidirectionalINS_19ReadRequestDatagramEEEvRT_h():
    2f3a:	c7 01       	movw	r24, r14
    2f3c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <TMC2209::serialFlush()>
    2f40:	c7 01       	movw	r24, r14
    2f42:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <TMC2209::serialAvailable()>
    2f46:	18 16       	cp	r1, r24
    2f48:	19 06       	cpc	r1, r25
    2f4a:	24 f4       	brge	.+8      	; 0x2f54 <TMC2209::read(unsigned char)+0xba>
    2f4c:	c7 01       	movw	r24, r14
    2f4e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <TMC2209::serialRead()>
    2f52:	f6 cf       	rjmp	.-20     	; 0x2f40 <TMC2209::read(unsigned char)+0xa6>
    2f54:	10 e0       	ldi	r17, 0x00	; 0
    2f56:	00 e0       	ldi	r16, 0x00	; 0
    2f58:	c5 01       	movw	r24, r10
    2f5a:	b4 01       	movw	r22, r8
    2f5c:	00 2e       	mov	r0, r16
    2f5e:	04 c0       	rjmp	.+8      	; 0x2f68 <TMC2209::read(unsigned char)+0xce>
    2f60:	96 95       	lsr	r25
    2f62:	87 95       	ror	r24
    2f64:	77 95       	ror	r23
    2f66:	67 95       	ror	r22
    2f68:	0a 94       	dec	r0
    2f6a:	d2 f7       	brpl	.-12     	; 0x2f60 <TMC2209::read(unsigned char)+0xc6>
    2f6c:	c7 01       	movw	r24, r14
    2f6e:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <TMC2209::serialWrite(unsigned char)>
    2f72:	08 5f       	subi	r16, 0xF8	; 248
    2f74:	1f 4f       	sbci	r17, 0xFF	; 255
    2f76:	00 32       	cpi	r16, 0x20	; 32
    2f78:	11 05       	cpc	r17, r1
    2f7a:	71 f7       	brne	.-36     	; 0x2f58 <TMC2209::read(unsigned char)+0xbe>
    2f7c:	c7 01       	movw	r24, r14
    2f7e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <TMC2209::serialFlush()>
    2f82:	81 2c       	mov	r8, r1
    2f84:	91 2c       	mov	r9, r1
    2f86:	54 01       	movw	r10, r8
    2f88:	c7 01       	movw	r24, r14
    2f8a:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <TMC2209::serialAvailable()>
    2f8e:	04 97       	sbiw	r24, 0x04	; 4
    2f90:	8c f4       	brge	.+34     	; 0x2fb4 <TMC2209::read(unsigned char)+0x11a>
    2f92:	f0 ea       	ldi	r31, 0xA0	; 160
    2f94:	8f 16       	cp	r8, r31
    2f96:	ff e0       	ldi	r31, 0x0F	; 15
    2f98:	9f 06       	cpc	r9, r31
    2f9a:	a1 04       	cpc	r10, r1
    2f9c:	b1 04       	cpc	r11, r1
    2f9e:	e9 f0       	breq	.+58     	; 0x2fda <TMC2209::read(unsigned char)+0x140>
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <delayMicroseconds>
    2fa8:	8f ef       	ldi	r24, 0xFF	; 255
    2faa:	88 1a       	sub	r8, r24
    2fac:	98 0a       	sbc	r9, r24
    2fae:	a8 0a       	sbc	r10, r24
    2fb0:	b8 0a       	sbc	r11, r24
    2fb2:	ea cf       	rjmp	.-44     	; 0x2f88 <TMC2209::read(unsigned char)+0xee>
    2fb4:	e0 ea       	ldi	r30, 0xA0	; 160
    2fb6:	8e 16       	cp	r8, r30
    2fb8:	ef e0       	ldi	r30, 0x0F	; 15
    2fba:	9e 06       	cpc	r9, r30
    2fbc:	a1 04       	cpc	r10, r1
    2fbe:	b1 04       	cpc	r11, r1
    2fc0:	61 f0       	breq	.+24     	; 0x2fda <TMC2209::read(unsigned char)+0x140>
    2fc2:	c7 01       	movw	r24, r14
    2fc4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <TMC2209::serialRead()>
    2fc8:	c7 01       	movw	r24, r14
    2fca:	0e 94 29 16 	call	0x2c52	; 0x2c52 <TMC2209::serialRead()>
    2fce:	c7 01       	movw	r24, r14
    2fd0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <TMC2209::serialRead()>
    2fd4:	c7 01       	movw	r24, r14
    2fd6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <TMC2209::serialRead()>
    2fda:	81 2c       	mov	r8, r1
    2fdc:	91 2c       	mov	r9, r1
    2fde:	54 01       	movw	r10, r8
_ZN7TMC22094readEh():
    2fe0:	c7 01       	movw	r24, r14
    2fe2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <TMC2209::serialAvailable()>
    2fe6:	08 97       	sbiw	r24, 0x08	; 8
    2fe8:	94 f4       	brge	.+36     	; 0x300e <TMC2209::read(unsigned char)+0x174>
    2fea:	f0 e1       	ldi	r31, 0x10	; 16
    2fec:	8f 16       	cp	r8, r31
    2fee:	f7 e2       	ldi	r31, 0x27	; 39
    2ff0:	9f 06       	cpc	r9, r31
    2ff2:	a1 04       	cpc	r10, r1
    2ff4:	b1 04       	cpc	r11, r1
    2ff6:	09 f4       	brne	.+2      	; 0x2ffa <TMC2209::read(unsigned char)+0x160>
    2ff8:	5e c0       	rjmp	.+188    	; 0x30b6 <TMC2209::read(unsigned char)+0x21c>
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <delayMicroseconds>
    3002:	8f ef       	ldi	r24, 0xFF	; 255
    3004:	88 1a       	sub	r8, r24
    3006:	98 0a       	sbc	r9, r24
    3008:	a8 0a       	sbc	r10, r24
    300a:	b8 0a       	sbc	r11, r24
    300c:	e9 cf       	rjmp	.-46     	; 0x2fe0 <TMC2209::read(unsigned char)+0x146>
    300e:	e0 e1       	ldi	r30, 0x10	; 16
    3010:	8e 16       	cp	r8, r30
    3012:	e7 e2       	ldi	r30, 0x27	; 39
    3014:	9e 06       	cpc	r9, r30
    3016:	a1 04       	cpc	r10, r1
    3018:	b1 04       	cpc	r11, r1
    301a:	09 f4       	brne	.+2      	; 0x301e <TMC2209::read(unsigned char)+0x184>
    301c:	4c c0       	rjmp	.+152    	; 0x30b6 <TMC2209::read(unsigned char)+0x21c>
    301e:	19 82       	std	Y+1, r1	; 0x01
    3020:	1a 82       	std	Y+2, r1	; 0x02
    3022:	1b 82       	std	Y+3, r1	; 0x03
    3024:	1c 82       	std	Y+4, r1	; 0x04
    3026:	1d 82       	std	Y+5, r1	; 0x05
    3028:	1e 82       	std	Y+6, r1	; 0x06
    302a:	1f 82       	std	Y+7, r1	; 0x07
    302c:	18 86       	std	Y+8, r1	; 0x08
    302e:	b1 2c       	mov	r11, r1
    3030:	a1 2c       	mov	r10, r1
    3032:	c7 01       	movw	r24, r14
    3034:	0e 94 29 16 	call	0x2c52	; 0x2c52 <TMC2209::serialRead()>
    3038:	9c 01       	movw	r18, r24
    303a:	93 2f       	mov	r25, r19
    303c:	99 0f       	add	r25, r25
    303e:	99 0b       	sbc	r25, r25
    3040:	49 2f       	mov	r20, r25
    3042:	59 2f       	mov	r21, r25
    3044:	69 2f       	mov	r22, r25
    3046:	79 2f       	mov	r23, r25
    3048:	89 2f       	mov	r24, r25
    304a:	0a 2d       	mov	r16, r10
    304c:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <__ashldi3>
    3050:	f9 81       	ldd	r31, Y+1	; 0x01
    3052:	2f 2b       	or	r18, r31
    3054:	fa 81       	ldd	r31, Y+2	; 0x02
    3056:	3f 2b       	or	r19, r31
    3058:	eb 81       	ldd	r30, Y+3	; 0x03
    305a:	e4 2b       	or	r30, r20
    305c:	4c 81       	ldd	r20, Y+4	; 0x04
    305e:	45 2b       	or	r20, r21
    3060:	5d 81       	ldd	r21, Y+5	; 0x05
    3062:	56 2b       	or	r21, r22
    3064:	6e 81       	ldd	r22, Y+6	; 0x06
    3066:	67 2b       	or	r22, r23
    3068:	7f 81       	ldd	r23, Y+7	; 0x07
    306a:	78 2b       	or	r23, r24
    306c:	88 85       	ldd	r24, Y+8	; 0x08
    306e:	98 2b       	or	r25, r24
    3070:	29 83       	std	Y+1, r18	; 0x01
    3072:	3a 83       	std	Y+2, r19	; 0x02
    3074:	eb 83       	std	Y+3, r30	; 0x03
    3076:	4c 83       	std	Y+4, r20	; 0x04
    3078:	5d 83       	std	Y+5, r21	; 0x05
    307a:	6e 83       	std	Y+6, r22	; 0x06
    307c:	7f 83       	std	Y+7, r23	; 0x07
    307e:	98 87       	std	Y+8, r25	; 0x08
    3080:	f8 e0       	ldi	r31, 0x08	; 8
    3082:	af 0e       	add	r10, r31
    3084:	b1 1c       	adc	r11, r1
    3086:	80 e4       	ldi	r24, 0x40	; 64
    3088:	a8 16       	cp	r10, r24
    308a:	b1 04       	cpc	r11, r1
    308c:	91 f6       	brne	.-92     	; 0x3032 <TMC2209::read(unsigned char)+0x198>
    308e:	c7 01       	movw	r24, r14
    3090:	28 96       	adiw	r28, 0x08	; 8
    3092:	0f b6       	in	r0, 0x3f	; 63
    3094:	f8 94       	cli
    3096:	de bf       	out	0x3e, r29	; 62
    3098:	0f be       	out	0x3f, r0	; 63
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	df 91       	pop	r29
    309e:	cf 91       	pop	r28
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	bf 90       	pop	r11
    30ac:	af 90       	pop	r10
    30ae:	9f 90       	pop	r9
    30b0:	8f 90       	pop	r8
    30b2:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <TMC2209::reverseData(unsigned long)>
    30b6:	60 e0       	ldi	r22, 0x00	; 0
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	cb 01       	movw	r24, r22
    30bc:	28 96       	adiw	r28, 0x08	; 8
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	df 91       	pop	r29
    30ca:	cf 91       	pop	r28
    30cc:	1f 91       	pop	r17
    30ce:	0f 91       	pop	r16
    30d0:	ff 90       	pop	r15
    30d2:	ef 90       	pop	r14
    30d4:	df 90       	pop	r13
    30d6:	bf 90       	pop	r11
    30d8:	af 90       	pop	r10
    30da:	9f 90       	pop	r9
    30dc:	8f 90       	pop	r8
    30de:	08 95       	ret

000030e0 <TMC2209::getStatus()>:
_ZN7TMC22099getStatusEv():
    30e0:	6f e6       	ldi	r22, 0x6F	; 111
    30e2:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <TMC2209::read(unsigned char)>
    30e6:	08 95       	ret

000030e8 <TMC2209::getStallGuardResult()>:
_ZN7TMC220919getStallGuardResultEv():
    30e8:	61 e4       	ldi	r22, 0x41	; 65
    30ea:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <TMC2209::read(unsigned char)>
    30ee:	cb 01       	movw	r24, r22
    30f0:	08 95       	ret

000030f2 <TMC2209::percentToCurrentSetting(unsigned char)>:
_ZN7TMC220923percentToCurrentSettingEh():
    30f2:	af 92       	push	r10
    30f4:	bf 92       	push	r11
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	0f 93       	push	r16
    3100:	1f 93       	push	r17
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	65 36       	cpi	r22, 0x65	; 101
    310a:	71 05       	cpc	r23, r1
    310c:	81 05       	cpc	r24, r1
    310e:	91 05       	cpc	r25, r1
    3110:	20 f0       	brcs	.+8      	; 0x311a <TMC2209::percentToCurrentSetting(unsigned char)+0x28>
    3112:	64 e6       	ldi	r22, 0x64	; 100
    3114:	70 e0       	ldi	r23, 0x00	; 0
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	1f 92       	push	r1
    311c:	1f 92       	push	r1
    311e:	1f 92       	push	r1
    3120:	2f e1       	ldi	r18, 0x1F	; 31
    3122:	2f 93       	push	r18
    3124:	a1 2c       	mov	r10, r1
    3126:	b1 2c       	mov	r11, r1
    3128:	65 01       	movw	r12, r10
    312a:	14 e6       	ldi	r17, 0x64	; 100
    312c:	e1 2e       	mov	r14, r17
    312e:	f1 2c       	mov	r15, r1
    3130:	00 e0       	ldi	r16, 0x00	; 0
    3132:	10 e0       	ldi	r17, 0x00	; 0
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	a9 01       	movw	r20, r18
    313a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <map(long, long, long, long, long)>
    313e:	86 2f       	mov	r24, r22
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	1f 91       	pop	r17
    314a:	0f 91       	pop	r16
    314c:	ff 90       	pop	r15
    314e:	ef 90       	pop	r14
    3150:	df 90       	pop	r13
    3152:	cf 90       	pop	r12
    3154:	bf 90       	pop	r11
    3156:	af 90       	pop	r10
    3158:	08 95       	ret

0000315a <TMC2209::writeStoredGlobalConfig()>:
_ZN7TMC220923writeStoredGlobalConfigEv():
    315a:	fc 01       	movw	r30, r24
    315c:	21 85       	ldd	r18, Z+9	; 0x09
    315e:	32 85       	ldd	r19, Z+10	; 0x0a
    3160:	43 85       	ldd	r20, Z+11	; 0x0b
    3162:	54 85       	ldd	r21, Z+12	; 0x0c
    3164:	60 e0       	ldi	r22, 0x00	; 0
    3166:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>

0000316a <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>:
_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE():
    316a:	fc 01       	movw	r30, r24
    316c:	66 83       	std	Z+6, r22	; 0x06
    316e:	80 ec       	ldi	r24, 0xC0	; 192
    3170:	81 87       	std	Z+9, r24	; 0x09
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	82 87       	std	Z+10, r24	; 0x0a
    3176:	13 86       	std	Z+11, r1	; 0x0b
    3178:	14 86       	std	Z+12, r1	; 0x0c
    317a:	cf 01       	movw	r24, r30
    317c:	0c 94 ad 18 	jmp	0x315a	; 0x315a <TMC2209::writeStoredGlobalConfig()>

00003180 <TMC2209::writeStoredDriverCurrent()>:
_ZN7TMC220924writeStoredDriverCurrentEv():
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	ec 01       	movw	r28, r24
    3186:	2d 85       	ldd	r18, Y+13	; 0x0d
    3188:	3e 85       	ldd	r19, Y+14	; 0x0e
    318a:	4f 85       	ldd	r20, Y+15	; 0x0f
    318c:	58 89       	ldd	r21, Y+16	; 0x10
    318e:	60 e1       	ldi	r22, 0x10	; 16
    3190:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    3194:	9e 85       	ldd	r25, Y+14	; 0x0e
    3196:	9f 71       	andi	r25, 0x1F	; 31
    3198:	8a 89       	ldd	r24, Y+18	; 0x12
    319a:	94 31       	cpi	r25, 0x14	; 20
    319c:	78 f0       	brcs	.+30     	; 0x31bc <TMC2209::writeStoredDriverCurrent()+0x3c>
    319e:	80 68       	ori	r24, 0x80	; 128
    31a0:	8a 8b       	std	Y+18, r24	; 0x12
    31a2:	8d 89       	ldd	r24, Y+21	; 0x15
    31a4:	88 23       	and	r24, r24
    31a6:	61 f0       	breq	.+24     	; 0x31c0 <TMC2209::writeStoredDriverCurrent()+0x40>
    31a8:	29 89       	ldd	r18, Y+17	; 0x11
    31aa:	3a 89       	ldd	r19, Y+18	; 0x12
    31ac:	4b 89       	ldd	r20, Y+19	; 0x13
    31ae:	5c 89       	ldd	r21, Y+20	; 0x14
    31b0:	62 e4       	ldi	r22, 0x42	; 66
    31b2:	ce 01       	movw	r24, r28
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>
    31bc:	8f 77       	andi	r24, 0x7F	; 127
    31be:	f0 cf       	rjmp	.-32     	; 0x31a0 <TMC2209::writeStoredDriverCurrent()+0x20>
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	08 95       	ret

000031c6 <TMC2209::setRunCurrent(unsigned char)>:
_ZN7TMC220913setRunCurrentEh():
    31c6:	cf 93       	push	r28
    31c8:	df 93       	push	r29
    31ca:	ec 01       	movw	r28, r24
    31cc:	0e 94 79 18 	call	0x30f2	; 0x30f2 <TMC2209::percentToCurrentSetting(unsigned char)>
    31d0:	98 2f       	mov	r25, r24
    31d2:	9f 71       	andi	r25, 0x1F	; 31
    31d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    31d6:	80 7e       	andi	r24, 0xE0	; 224
    31d8:	89 2b       	or	r24, r25
    31da:	8e 87       	std	Y+14, r24	; 0x0e
    31dc:	ce 01       	movw	r24, r28
    31de:	df 91       	pop	r29
    31e0:	cf 91       	pop	r28
    31e2:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <TMC2209::writeStoredDriverCurrent()>

000031e6 <TMC2209::setHoldCurrent(unsigned char)>:
_ZN7TMC220914setHoldCurrentEh():
    31e6:	cf 93       	push	r28
    31e8:	df 93       	push	r29
    31ea:	ec 01       	movw	r28, r24
    31ec:	0e 94 79 18 	call	0x30f2	; 0x30f2 <TMC2209::percentToCurrentSetting(unsigned char)>
    31f0:	98 2f       	mov	r25, r24
    31f2:	9f 71       	andi	r25, 0x1F	; 31
    31f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f6:	80 7e       	andi	r24, 0xE0	; 224
    31f8:	89 2b       	or	r24, r25
    31fa:	8d 87       	std	Y+13, r24	; 0x0d
    31fc:	ce 01       	movw	r24, r28
    31fe:	df 91       	pop	r29
    3200:	cf 91       	pop	r28
    3202:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <TMC2209::writeStoredDriverCurrent()>

00003206 <TMC2209::minimizeMotorCurrent()>:
_ZN7TMC220920minimizeMotorCurrentEv():
    3206:	fc 01       	movw	r30, r24
    3208:	26 85       	ldd	r18, Z+14	; 0x0e
    320a:	20 7e       	andi	r18, 0xE0	; 224
    320c:	26 87       	std	Z+14, r18	; 0x0e
    320e:	25 85       	ldd	r18, Z+13	; 0x0d
    3210:	20 7e       	andi	r18, 0xE0	; 224
    3212:	25 87       	std	Z+13, r18	; 0x0d
    3214:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <TMC2209::writeStoredDriverCurrent()>

00003218 <TMC2209::writeStoredChopperConfig()>:
_ZN7TMC220924writeStoredChopperConfigEv():
    3218:	fc 01       	movw	r30, r24
    321a:	26 89       	ldd	r18, Z+22	; 0x16
    321c:	37 89       	ldd	r19, Z+23	; 0x17
    321e:	40 8d       	ldd	r20, Z+24	; 0x18
    3220:	51 8d       	ldd	r21, Z+25	; 0x19
    3222:	6c e6       	ldi	r22, 0x6C	; 108
    3224:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>

00003228 <TMC2209::enable()>:
_ZN7TMC22096enableEv():
    3228:	cf 93       	push	r28
    322a:	df 93       	push	r29
    322c:	ec 01       	movw	r28, r24
    322e:	8f 81       	ldd	r24, Y+7	; 0x07
    3230:	98 85       	ldd	r25, Y+8	; 0x08
    3232:	97 fd       	sbrc	r25, 7
    3234:	03 c0       	rjmp	.+6      	; 0x323c <TMC2209::enable()+0x14>
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
    323c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    323e:	9f 70       	andi	r25, 0x0F	; 15
    3240:	8e 89       	ldd	r24, Y+22	; 0x16
    3242:	80 7f       	andi	r24, 0xF0	; 240
    3244:	89 2b       	or	r24, r25
    3246:	8e 8b       	std	Y+22, r24	; 0x16
    3248:	ce 01       	movw	r24, r28
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <TMC2209::writeStoredChopperConfig()>

00003252 <TMC2209::disable()>:
_ZN7TMC22097disableEv():
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	ec 01       	movw	r28, r24
    3258:	8f 81       	ldd	r24, Y+7	; 0x07
    325a:	98 85       	ldd	r25, Y+8	; 0x08
    325c:	97 fd       	sbrc	r25, 7
    325e:	03 c0       	rjmp	.+6      	; 0x3266 <TMC2209::disable()+0x14>
    3260:	61 e0       	ldi	r22, 0x01	; 1
    3262:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
    3266:	8e 89       	ldd	r24, Y+22	; 0x16
    3268:	80 7f       	andi	r24, 0xF0	; 240
    326a:	8e 8b       	std	Y+22, r24	; 0x16
    326c:	ce 01       	movw	r24, r28
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <TMC2209::writeStoredChopperConfig()>

00003276 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>:
_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh():
    3276:	dc 01       	movw	r26, r24
    3278:	59 96       	adiw	r26, 0x19	; 25
    327a:	9c 91       	ld	r25, X
    327c:	59 97       	sbiw	r26, 0x19	; 25
    327e:	68 30       	cpi	r22, 0x08	; 8
    3280:	20 f5       	brcc	.+72     	; 0x32ca <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x54>
    3282:	e6 2f       	mov	r30, r22
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	e8 5b       	subi	r30, 0xB8	; 184
    3288:	f6 4e       	sbci	r31, 0xE6	; 230
    328a:	90 7f       	andi	r25, 0xF0	; 240
    328c:	0c 94 3a 3c 	jmp	0x7874	; 0x7874 <__tablejump2__>
    3290:	50 19       	sub	r21, r0
    3292:	57 19       	sub	r21, r7
    3294:	59 19       	sub	r21, r9
    3296:	5b 19       	sub	r21, r11
    3298:	5d 19       	sub	r21, r13
    329a:	5f 19       	sub	r21, r15
    329c:	61 19       	sub	r22, r1
    329e:	63 19       	sub	r22, r3
    32a0:	98 60       	ori	r25, 0x08	; 8
    32a2:	59 96       	adiw	r26, 0x19	; 25
    32a4:	9c 93       	st	X, r25
    32a6:	59 97       	sbiw	r26, 0x19	; 25
    32a8:	cd 01       	movw	r24, r26
    32aa:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <TMC2209::writeStoredChopperConfig()>
    32ae:	97 60       	ori	r25, 0x07	; 7
    32b0:	f8 cf       	rjmp	.-16     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32b2:	96 60       	ori	r25, 0x06	; 6
    32b4:	f6 cf       	rjmp	.-20     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32b6:	95 60       	ori	r25, 0x05	; 5
    32b8:	f4 cf       	rjmp	.-24     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32ba:	94 60       	ori	r25, 0x04	; 4
    32bc:	f2 cf       	rjmp	.-28     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32be:	93 60       	ori	r25, 0x03	; 3
    32c0:	f0 cf       	rjmp	.-32     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32c2:	92 60       	ori	r25, 0x02	; 2
    32c4:	ee cf       	rjmp	.-36     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32c6:	91 60       	ori	r25, 0x01	; 1
    32c8:	ec cf       	rjmp	.-40     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>
    32ca:	90 7f       	andi	r25, 0xF0	; 240
    32cc:	ea cf       	rjmp	.-44     	; 0x32a2 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)+0x2c>

000032ce <TMC2209::setMicrostepsPerStep(unsigned int)>:
_ZN7TMC220920setMicrostepsPerStepEj():
    32ce:	9b 01       	movw	r18, r22
    32d0:	36 95       	lsr	r19
    32d2:	27 95       	ror	r18
    32d4:	70 e0       	ldi	r23, 0x00	; 0
    32d6:	60 e0       	ldi	r22, 0x00	; 0
    32d8:	21 15       	cp	r18, r1
    32da:	31 05       	cpc	r19, r1
    32dc:	29 f0       	breq	.+10     	; 0x32e8 <TMC2209::setMicrostepsPerStep(unsigned int)+0x1a>
    32de:	36 95       	lsr	r19
    32e0:	27 95       	ror	r18
    32e2:	6f 5f       	subi	r22, 0xFF	; 255
    32e4:	7f 4f       	sbci	r23, 0xFF	; 255
    32e6:	f8 cf       	rjmp	.-16     	; 0x32d8 <TMC2209::setMicrostepsPerStep(unsigned int)+0xa>
    32e8:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <TMC2209::setMicrostepsPerStepPowerOfTwo(unsigned char)>

000032ec <TMC2209::writeStoredPwmConfig()>:
_ZN7TMC220920writeStoredPwmConfigEv():
    32ec:	fc 01       	movw	r30, r24
    32ee:	23 8d       	ldd	r18, Z+27	; 0x1b
    32f0:	34 8d       	ldd	r19, Z+28	; 0x1c
    32f2:	45 8d       	ldd	r20, Z+29	; 0x1d
    32f4:	56 8d       	ldd	r21, Z+30	; 0x1e
    32f6:	60 e7       	ldi	r22, 0x70	; 112
    32f8:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <TMC2209::write(unsigned char, unsigned long)>

000032fc <TMC2209::setStandstillMode(TMC2209::StandstillMode)>:
_ZN7TMC220917setStandstillModeENS_14StandstillModeE():
    32fc:	fc 01       	movw	r30, r24
    32fe:	63 70       	andi	r22, 0x03	; 3
    3300:	96 2f       	mov	r25, r22
    3302:	92 95       	swap	r25
    3304:	90 7f       	andi	r25, 0xF0	; 240
    3306:	65 8d       	ldd	r22, Z+29	; 0x1d
    3308:	6f 7c       	andi	r22, 0xCF	; 207
    330a:	69 2b       	or	r22, r25
    330c:	65 8f       	std	Z+29, r22	; 0x1d
    330e:	cf 01       	movw	r24, r30
    3310:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <TMC2209::writeStoredPwmConfig()>

00003314 <TMC2209::enableAutomaticCurrentScaling()>:
_ZN7TMC220929enableAutomaticCurrentScalingEv():
    3314:	fc 01       	movw	r30, r24
    3316:	25 8d       	ldd	r18, Z+29	; 0x1d
    3318:	24 60       	ori	r18, 0x04	; 4
    331a:	25 8f       	std	Z+29, r18	; 0x1d
    331c:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <TMC2209::writeStoredPwmConfig()>

00003320 <TMC2209::disableAutomaticCurrentScaling()>:
_ZN7TMC220930disableAutomaticCurrentScalingEv():
    3320:	fc 01       	movw	r30, r24
    3322:	25 8d       	ldd	r18, Z+29	; 0x1d
    3324:	2b 7f       	andi	r18, 0xFB	; 251
    3326:	25 8f       	std	Z+29, r18	; 0x1d
    3328:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <TMC2209::writeStoredPwmConfig()>

0000332c <TMC2209::disableAutomaticGradientAdaptation()>:
_ZN7TMC220934disableAutomaticGradientAdaptationEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:252
}

void TMC2209::disableAutomaticGradientAdaptation()
{
  pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
    332c:	fc 01       	movw	r30, r24
    332e:	25 8d       	ldd	r18, Z+29	; 0x1d
    3330:	27 7f       	andi	r18, 0xF7	; 247
    3332:	25 8f       	std	Z+29, r18	; 0x1d
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:253
  writeStoredPwmConfig();
    3334:	0c 94 76 19 	jmp	0x32ec	; 0x32ec <TMC2209::writeStoredPwmConfig()>

00003338 <TMC2209::initialize(long, TMC2209::SerialAddress)>:
_ZN7TMC220910initializeElNS_13SerialAddressE():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:582
}

// private
void TMC2209::initialize(long serial_baud_rate,
  SerialAddress serial_address)
{
    3338:	cf 93       	push	r28
    333a:	df 93       	push	r29
    333c:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:583
  serial_baud_rate_ = serial_baud_rate;
    333e:	4a 83       	std	Y+2, r20	; 0x02
    3340:	5b 83       	std	Y+3, r21	; 0x03
    3342:	6c 83       	std	Y+4, r22	; 0x04
    3344:	7d 83       	std	Y+5, r23	; 0x05
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:585

  setOperationModeToSerial(serial_address);
    3346:	b9 01       	movw	r22, r18
    3348:	0e 94 b5 18 	call	0x316a	; 0x316a <TMC2209::setOperationModeToSerial(TMC2209::SerialAddress)>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:586
  setRegistersToDefaults();
    334c:	ce 01       	movw	r24, r28
    334e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <TMC2209::setRegistersToDefaults()>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:588

  minimizeMotorCurrent();
    3352:	ce 01       	movw	r24, r28
    3354:	0e 94 03 19 	call	0x3206	; 0x3206 <TMC2209::minimizeMotorCurrent()>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:589
  disable();
    3358:	ce 01       	movw	r24, r28
    335a:	0e 94 29 19 	call	0x3252	; 0x3252 <TMC2209::disable()>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:590
  disableAutomaticCurrentScaling();
    335e:	ce 01       	movw	r24, r28
    3360:	0e 94 90 19 	call	0x3320	; 0x3320 <TMC2209::disableAutomaticCurrentScaling()>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:591
  disableAutomaticGradientAdaptation();
    3364:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:592
}
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:591
  setRegistersToDefaults();

  minimizeMotorCurrent();
  disable();
  disableAutomaticCurrentScaling();
  disableAutomaticGradientAdaptation();
    336a:	0c 94 96 19 	jmp	0x332c	; 0x332c <TMC2209::disableAutomaticGradientAdaptation()>

0000336e <TMC2209::setup(HardwareSerial&, long, TMC2209::SerialAddress)>:
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:68
}
#else
void TMC2209::setup(HardwareSerial & serial,
  long serial_baud_rate,
  SerialAddress serial_address)
{
    336e:	cf 92       	push	r12
    3370:	df 92       	push	r13
    3372:	ef 92       	push	r14
    3374:	ff 92       	push	r15
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	ec 01       	movw	r28, r24
    3380:	cb 01       	movw	r24, r22
    3382:	69 01       	movw	r12, r18
    3384:	7a 01       	movw	r14, r20
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:69
  hardware_serial_ptr_ = &serial;
    3386:	79 83       	std	Y+1, r23	; 0x01
    3388:	68 83       	st	Y, r22
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:70
  hardware_serial_ptr_->end();
    338a:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <HardwareSerial::end()>
_ZN14HardwareSerial5beginEm():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    338e:	26 e0       	ldi	r18, 0x06	; 6
    3390:	b7 01       	movw	r22, r14
    3392:	a6 01       	movw	r20, r12
    3394:	88 81       	ld	r24, Y
    3396:	99 81       	ldd	r25, Y+1	; 0x01
    3398:	0e 94 90 33 	call	0x6720	; 0x6720 <HardwareSerial::begin(unsigned long, unsigned char)>
_ZN7TMC22095setupER14HardwareSeriallNS_13SerialAddressE():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:73
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    339c:	98 01       	movw	r18, r16
    339e:	b7 01       	movw	r22, r14
    33a0:	a6 01       	movw	r20, r12
    33a2:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:74
}
    33a4:	df 91       	pop	r29
    33a6:	cf 91       	pop	r28
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\TMC2209\src\TMC2209/TMC2209.cpp:73
{
  hardware_serial_ptr_ = &serial;
  hardware_serial_ptr_->end();
  hardware_serial_ptr_->begin(serial_baud_rate);

  initialize(serial_baud_rate, serial_address);
    33b4:	0c 94 9c 19 	jmp	0x3338	; 0x3338 <TMC2209::initialize(long, TMC2209::SerialAddress)>

000033b8 <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD2Ev():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:644
// Blocks until the target position is reached and stopped
void AccelStepper::runToPosition()
{
    while (run())
	YIELD; // Let system housekeeping occur
}
    33b8:	08 95       	ret

000033ba <AccelStepper::computeNewSpeed()>:
_ZN12AccelStepper15computeNewSpeedEv():
    33ba:	4f 92       	push	r4
    33bc:	5f 92       	push	r5
    33be:	6f 92       	push	r6
    33c0:	7f 92       	push	r7
    33c2:	8f 92       	push	r8
    33c4:	9f 92       	push	r9
    33c6:	af 92       	push	r10
    33c8:	bf 92       	push	r11
    33ca:	cf 92       	push	r12
    33cc:	df 92       	push	r13
    33ce:	ef 92       	push	r14
    33d0:	ff 92       	push	r15
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	cf 93       	push	r28
    33d8:	df 93       	push	r29
    33da:	ec 01       	movw	r28, r24
_ZN12AccelStepper12distanceToGoEv():
    33dc:	cc 88       	ldd	r12, Y+20	; 0x14
    33de:	dd 88       	ldd	r13, Y+21	; 0x15
    33e0:	ee 88       	ldd	r14, Y+22	; 0x16
    33e2:	ff 88       	ldd	r15, Y+23	; 0x17
    33e4:	88 89       	ldd	r24, Y+16	; 0x10
    33e6:	99 89       	ldd	r25, Y+17	; 0x11
    33e8:	aa 89       	ldd	r26, Y+18	; 0x12
    33ea:	bb 89       	ldd	r27, Y+19	; 0x13
    33ec:	c8 1a       	sub	r12, r24
    33ee:	d9 0a       	sbc	r13, r25
    33f0:	ea 0a       	sbc	r14, r26
    33f2:	fb 0a       	sbc	r15, r27
_ZN12AccelStepper15computeNewSpeedEv():
    33f4:	68 8d       	ldd	r22, Y+24	; 0x18
    33f6:	79 8d       	ldd	r23, Y+25	; 0x19
    33f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    33fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    33fc:	9b 01       	movw	r18, r22
    33fe:	ac 01       	movw	r20, r24
    3400:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    3404:	4b 01       	movw	r8, r22
    3406:	5c 01       	movw	r10, r24
    3408:	68 a1       	ldd	r22, Y+32	; 0x20
    340a:	79 a1       	ldd	r23, Y+33	; 0x21
    340c:	8a a1       	ldd	r24, Y+34	; 0x22
    340e:	9b a1       	ldd	r25, Y+35	; 0x23
    3410:	9b 01       	movw	r18, r22
    3412:	ac 01       	movw	r20, r24
    3414:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    3418:	9b 01       	movw	r18, r22
    341a:	ac 01       	movw	r20, r24
    341c:	c5 01       	movw	r24, r10
    341e:	b4 01       	movw	r22, r8
    3420:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3424:	0e 94 b8 39 	call	0x7370	; 0x7370 <__fixsfsi>
    3428:	c1 14       	cp	r12, r1
    342a:	d1 04       	cpc	r13, r1
    342c:	e1 04       	cpc	r14, r1
    342e:	f1 04       	cpc	r15, r1
    3430:	09 f0       	breq	.+2      	; 0x3434 <AccelStepper::computeNewSpeed()+0x7a>
    3432:	b6 c0       	rjmp	.+364    	; 0x35a0 <AccelStepper::computeNewSpeed()+0x1e6>
    3434:	62 30       	cpi	r22, 0x02	; 2
    3436:	71 05       	cpc	r23, r1
    3438:	81 05       	cpc	r24, r1
    343a:	91 05       	cpc	r25, r1
    343c:	0c f0       	brlt	.+2      	; 0x3440 <AccelStepper::computeNewSpeed()+0x86>
    343e:	d0 c0       	rjmp	.+416    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    3440:	1b 82       	std	Y+3, r1	; 0x03
    3442:	1c 82       	std	Y+4, r1	; 0x04
    3444:	1d 82       	std	Y+5, r1	; 0x05
    3446:	1e 82       	std	Y+6, r1	; 0x06
    3448:	18 8e       	std	Y+24, r1	; 0x18
    344a:	19 8e       	std	Y+25, r1	; 0x19
    344c:	1a 8e       	std	Y+26, r1	; 0x1a
    344e:	1b 8e       	std	Y+27, r1	; 0x1b
    3450:	1c aa       	std	Y+52, r1	; 0x34
    3452:	1d aa       	std	Y+53, r1	; 0x35
    3454:	1e aa       	std	Y+54, r1	; 0x36
    3456:	1f aa       	std	Y+55, r1	; 0x37
    3458:	c1 2c       	mov	r12, r1
    345a:	d1 2c       	mov	r13, r1
    345c:	76 01       	movw	r14, r12
    345e:	c7 01       	movw	r24, r14
    3460:	b6 01       	movw	r22, r12
    3462:	df 91       	pop	r29
    3464:	cf 91       	pop	r28
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ff 90       	pop	r15
    346c:	ef 90       	pop	r14
    346e:	df 90       	pop	r13
    3470:	cf 90       	pop	r12
    3472:	bf 90       	pop	r11
    3474:	af 90       	pop	r10
    3476:	9f 90       	pop	r9
    3478:	8f 90       	pop	r8
    347a:	7f 90       	pop	r7
    347c:	6f 90       	pop	r6
    347e:	5f 90       	pop	r5
    3480:	4f 90       	pop	r4
    3482:	08 95       	ret
    3484:	10 16       	cp	r1, r16
    3486:	11 06       	cpc	r1, r17
    3488:	12 06       	cpc	r1, r18
    348a:	13 06       	cpc	r1, r19
    348c:	b4 f4       	brge	.+44     	; 0x34ba <AccelStepper::computeNewSpeed()+0x100>
    348e:	6c 15       	cp	r22, r12
    3490:	7d 05       	cpc	r23, r13
    3492:	8e 05       	cpc	r24, r14
    3494:	9f 05       	cpc	r25, r15
    3496:	1c f4       	brge	.+6      	; 0x349e <AccelStepper::computeNewSpeed()+0xe4>
    3498:	2a 81       	ldd	r18, Y+2	; 0x02
    349a:	21 11       	cpse	r18, r1
    349c:	a1 c0       	rjmp	.+322    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    349e:	9b 01       	movw	r18, r22
    34a0:	ac 01       	movw	r20, r24
    34a2:	88 27       	eor	r24, r24
    34a4:	99 27       	eor	r25, r25
    34a6:	dc 01       	movw	r26, r24
    34a8:	82 1b       	sub	r24, r18
    34aa:	93 0b       	sbc	r25, r19
    34ac:	a4 0b       	sbc	r26, r20
    34ae:	b5 0b       	sbc	r27, r21
    34b0:	8c ab       	std	Y+52, r24	; 0x34
    34b2:	9d ab       	std	Y+53, r25	; 0x35
    34b4:	ae ab       	std	Y+54, r26	; 0x36
    34b6:	bf ab       	std	Y+55, r27	; 0x37
    34b8:	93 c0       	rjmp	.+294    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    34ba:	01 15       	cp	r16, r1
    34bc:	11 05       	cpc	r17, r1
    34be:	21 05       	cpc	r18, r1
    34c0:	31 05       	cpc	r19, r1
    34c2:	09 f4       	brne	.+2      	; 0x34c6 <AccelStepper::computeNewSpeed()+0x10c>
    34c4:	8d c0       	rjmp	.+282    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    34c6:	6c 15       	cp	r22, r12
    34c8:	7d 05       	cpc	r23, r13
    34ca:	8e 05       	cpc	r24, r14
    34cc:	9f 05       	cpc	r25, r15
    34ce:	0c f0       	brlt	.+2      	; 0x34d2 <AccelStepper::computeNewSpeed()+0x118>
    34d0:	87 c0       	rjmp	.+270    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	88 23       	and	r24, r24
    34d6:	09 f4       	brne	.+2      	; 0x34da <AccelStepper::computeNewSpeed()+0x120>
    34d8:	83 c0       	rjmp	.+262    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    34da:	30 95       	com	r19
    34dc:	20 95       	com	r18
    34de:	10 95       	com	r17
    34e0:	01 95       	neg	r16
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	2f 4f       	sbci	r18, 0xFF	; 255
    34e6:	3f 4f       	sbci	r19, 0xFF	; 255
    34e8:	0c ab       	std	Y+52, r16	; 0x34
    34ea:	1d ab       	std	Y+53, r17	; 0x35
    34ec:	2e ab       	std	Y+54, r18	; 0x36
    34ee:	3f ab       	std	Y+55, r19	; 0x37
    34f0:	77 c0       	rjmp	.+238    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    34f2:	01 15       	cp	r16, r1
    34f4:	11 05       	cpc	r17, r1
    34f6:	21 05       	cpc	r18, r1
    34f8:	31 05       	cpc	r19, r1
    34fa:	09 f4       	brne	.+2      	; 0x34fe <AccelStepper::computeNewSpeed()+0x144>
    34fc:	71 c0       	rjmp	.+226    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    34fe:	88 24       	eor	r8, r8
    3500:	99 24       	eor	r9, r9
    3502:	54 01       	movw	r10, r8
    3504:	8c 18       	sub	r8, r12
    3506:	9d 08       	sbc	r9, r13
    3508:	ae 08       	sbc	r10, r14
    350a:	bf 08       	sbc	r11, r15
    350c:	68 15       	cp	r22, r8
    350e:	79 05       	cpc	r23, r9
    3510:	8a 05       	cpc	r24, r10
    3512:	9b 05       	cpc	r25, r11
    3514:	0c f0       	brlt	.+2      	; 0x3518 <AccelStepper::computeNewSpeed()+0x15e>
    3516:	64 c0       	rjmp	.+200    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	81 11       	cpse	r24, r1
    351c:	61 c0       	rjmp	.+194    	; 0x35e0 <AccelStepper::computeNewSpeed()+0x226>
    351e:	dd cf       	rjmp	.-70     	; 0x34da <AccelStepper::computeNewSpeed()+0x120>
    3520:	cc ac       	ldd	r12, Y+60	; 0x3c
    3522:	dd ac       	ldd	r13, Y+61	; 0x3d
    3524:	ee ac       	ldd	r14, Y+62	; 0x3e
    3526:	ff ac       	ldd	r15, Y+63	; 0x3f
    3528:	a7 01       	movw	r20, r14
    352a:	96 01       	movw	r18, r12
    352c:	c7 01       	movw	r24, r14
    352e:	b6 01       	movw	r22, r12
    3530:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    3534:	2b 01       	movw	r4, r22
    3536:	3c 01       	movw	r6, r24
    3538:	c5 01       	movw	r24, r10
    353a:	b4 01       	movw	r22, r8
    353c:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	50 e4       	ldi	r21, 0x40	; 64
    3548:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e8       	ldi	r20, 0x80	; 128
    3552:	5f e3       	ldi	r21, 0x3F	; 63
    3554:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    3558:	9b 01       	movw	r18, r22
    355a:	ac 01       	movw	r20, r24
    355c:	c3 01       	movw	r24, r6
    355e:	b2 01       	movw	r22, r4
    3560:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3564:	9b 01       	movw	r18, r22
    3566:	ac 01       	movw	r20, r24
    3568:	c7 01       	movw	r24, r14
    356a:	b6 01       	movw	r22, r12
    356c:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    3570:	3b 01       	movw	r6, r22
    3572:	6c 01       	movw	r12, r24
    3574:	fe 01       	movw	r30, r28
    3576:	e0 5c       	subi	r30, 0xC0	; 192
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	e0 80       	ld	r14, Z
    357c:	f1 80       	ldd	r15, Z+1	; 0x01
    357e:	02 81       	ldd	r16, Z+2	; 0x02
    3580:	13 81       	ldd	r17, Z+3	; 0x03
    3582:	97 01       	movw	r18, r14
    3584:	a8 01       	movw	r20, r16
    3586:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__gesf2>
    358a:	18 16       	cp	r1, r24
    358c:	14 f4       	brge	.+4      	; 0x3592 <AccelStepper::computeNewSpeed()+0x1d8>
    358e:	73 01       	movw	r14, r6
    3590:	86 01       	movw	r16, r12
    3592:	c7 01       	movw	r24, r14
    3594:	d8 01       	movw	r26, r16
    3596:	8c af       	std	Y+60, r24	; 0x3c
    3598:	9d af       	std	Y+61, r25	; 0x3d
    359a:	ae af       	std	Y+62, r26	; 0x3e
    359c:	bf af       	std	Y+63, r27	; 0x3f
    359e:	3a c0       	rjmp	.+116    	; 0x3614 <AccelStepper::computeNewSpeed()+0x25a>
    35a0:	0c a9       	ldd	r16, Y+52	; 0x34
    35a2:	1d a9       	ldd	r17, Y+53	; 0x35
    35a4:	2e a9       	ldd	r18, Y+54	; 0x36
    35a6:	3f a9       	ldd	r19, Y+55	; 0x37
    35a8:	1c 14       	cp	r1, r12
    35aa:	1d 04       	cpc	r1, r13
    35ac:	1e 04       	cpc	r1, r14
    35ae:	1f 04       	cpc	r1, r15
    35b0:	0c f4       	brge	.+2      	; 0x35b4 <AccelStepper::computeNewSpeed()+0x1fa>
    35b2:	68 cf       	rjmp	.-304    	; 0x3484 <AccelStepper::computeNewSpeed()+0xca>
    35b4:	10 16       	cp	r1, r16
    35b6:	11 06       	cpc	r1, r17
    35b8:	12 06       	cpc	r1, r18
    35ba:	13 06       	cpc	r1, r19
    35bc:	0c f0       	brlt	.+2      	; 0x35c0 <AccelStepper::computeNewSpeed()+0x206>
    35be:	99 cf       	rjmp	.-206    	; 0x34f2 <AccelStepper::computeNewSpeed()+0x138>
    35c0:	00 27       	eor	r16, r16
    35c2:	11 27       	eor	r17, r17
    35c4:	98 01       	movw	r18, r16
    35c6:	0c 19       	sub	r16, r12
    35c8:	1d 09       	sbc	r17, r13
    35ca:	2e 09       	sbc	r18, r14
    35cc:	3f 09       	sbc	r19, r15
    35ce:	60 17       	cp	r22, r16
    35d0:	71 07       	cpc	r23, r17
    35d2:	82 07       	cpc	r24, r18
    35d4:	93 07       	cpc	r25, r19
    35d6:	0c f0       	brlt	.+2      	; 0x35da <AccelStepper::computeNewSpeed()+0x220>
    35d8:	62 cf       	rjmp	.-316    	; 0x349e <AccelStepper::computeNewSpeed()+0xe4>
    35da:	2a 81       	ldd	r18, Y+2	; 0x02
    35dc:	21 11       	cpse	r18, r1
    35de:	5f cf       	rjmp	.-322    	; 0x349e <AccelStepper::computeNewSpeed()+0xe4>
    35e0:	8c a8       	ldd	r8, Y+52	; 0x34
    35e2:	9d a8       	ldd	r9, Y+53	; 0x35
    35e4:	ae a8       	ldd	r10, Y+54	; 0x36
    35e6:	bf a8       	ldd	r11, Y+55	; 0x37
    35e8:	81 14       	cp	r8, r1
    35ea:	91 04       	cpc	r9, r1
    35ec:	a1 04       	cpc	r10, r1
    35ee:	b1 04       	cpc	r11, r1
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <AccelStepper::computeNewSpeed()+0x23a>
    35f2:	96 cf       	rjmp	.-212    	; 0x3520 <AccelStepper::computeNewSpeed()+0x166>
    35f4:	88 ad       	ldd	r24, Y+56	; 0x38
    35f6:	99 ad       	ldd	r25, Y+57	; 0x39
    35f8:	aa ad       	ldd	r26, Y+58	; 0x3a
    35fa:	bb ad       	ldd	r27, Y+59	; 0x3b
    35fc:	8c af       	std	Y+60, r24	; 0x3c
    35fe:	9d af       	std	Y+61, r25	; 0x3d
    3600:	ae af       	std	Y+62, r26	; 0x3e
    3602:	bf af       	std	Y+63, r27	; 0x3f
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	1c 14       	cp	r1, r12
    3608:	1d 04       	cpc	r1, r13
    360a:	1e 04       	cpc	r1, r14
    360c:	1f 04       	cpc	r1, r15
    360e:	0c f0       	brlt	.+2      	; 0x3612 <AccelStepper::computeNewSpeed()+0x258>
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	8a 83       	std	Y+2, r24	; 0x02
    3614:	3f ef       	ldi	r19, 0xFF	; 255
    3616:	83 1a       	sub	r8, r19
    3618:	93 0a       	sbc	r9, r19
    361a:	a3 0a       	sbc	r10, r19
    361c:	b3 0a       	sbc	r11, r19
    361e:	8c aa       	std	Y+52, r8	; 0x34
    3620:	9d aa       	std	Y+53, r9	; 0x35
    3622:	ae aa       	std	Y+54, r10	; 0x36
    3624:	bf aa       	std	Y+55, r11	; 0x37
    3626:	8c ac       	ldd	r8, Y+60	; 0x3c
    3628:	9d ac       	ldd	r9, Y+61	; 0x3d
    362a:	ae ac       	ldd	r10, Y+62	; 0x3e
    362c:	bf ac       	ldd	r11, Y+63	; 0x3f
    362e:	c5 01       	movw	r24, r10
    3630:	b4 01       	movw	r22, r8
    3632:	0e 94 bf 39 	call	0x737e	; 0x737e <__fixunssfsi>
    3636:	6b 01       	movw	r12, r22
    3638:	7c 01       	movw	r14, r24
    363a:	cb 82       	std	Y+3, r12	; 0x03
    363c:	dc 82       	std	Y+4, r13	; 0x04
    363e:	ed 82       	std	Y+5, r14	; 0x05
    3640:	fe 82       	std	Y+6, r15	; 0x06
    3642:	a5 01       	movw	r20, r10
    3644:	94 01       	movw	r18, r8
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	74 e2       	ldi	r23, 0x24	; 36
    364a:	84 e7       	ldi	r24, 0x74	; 116
    364c:	99 e4       	ldi	r25, 0x49	; 73
    364e:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3652:	68 8f       	std	Y+24, r22	; 0x18
    3654:	79 8f       	std	Y+25, r23	; 0x19
    3656:	8a 8f       	std	Y+26, r24	; 0x1a
    3658:	9b 8f       	std	Y+27, r25	; 0x1b
    365a:	2a 81       	ldd	r18, Y+2	; 0x02
    365c:	21 11       	cpse	r18, r1
    365e:	ff ce       	rjmp	.-514    	; 0x345e <AccelStepper::computeNewSpeed()+0xa4>
    3660:	90 58       	subi	r25, 0x80	; 128
    3662:	68 8f       	std	Y+24, r22	; 0x18
    3664:	79 8f       	std	Y+25, r23	; 0x19
    3666:	8a 8f       	std	Y+26, r24	; 0x1a
    3668:	9b 8f       	std	Y+27, r25	; 0x1b
    366a:	f9 ce       	rjmp	.-526    	; 0x345e <AccelStepper::computeNewSpeed()+0xa4>

0000366c <AccelStepper::step(long)>:
_ZN12AccelStepper4stepEl():
    366c:	dc 01       	movw	r26, r24
    366e:	17 96       	adiw	r26, 0x07	; 7
    3670:	ec 91       	ld	r30, X
    3672:	17 97       	sbiw	r26, 0x07	; 7
    3674:	e9 30       	cpi	r30, 0x09	; 9
    3676:	08 f0       	brcs	.+2      	; 0x367a <AccelStepper::step(long)+0xe>
    3678:	38 c0       	rjmp	.+112    	; 0x36ea <AccelStepper::step(long)+0x7e>
    367a:	f0 e0       	ldi	r31, 0x00	; 0
    367c:	ee 5b       	subi	r30, 0xBE	; 190
    367e:	f4 4e       	sbci	r31, 0xE4	; 228
    3680:	0c 94 3a 3c 	jmp	0x7874	; 0x7874 <__tablejump2__>
    3684:	4b 1b       	sub	r20, r27
    3686:	51 1b       	sub	r21, r17
    3688:	57 1b       	sub	r21, r23
    368a:	5d 1b       	sub	r21, r29
    368c:	63 1b       	sub	r22, r19
    368e:	75 1b       	sub	r23, r21
    3690:	69 1b       	sub	r22, r25
    3692:	75 1b       	sub	r23, r21
    3694:	6f 1b       	sub	r22, r31
    3696:	ed 91       	ld	r30, X+
    3698:	fc 91       	ld	r31, X
    369a:	06 84       	ldd	r0, Z+14	; 0x0e
    369c:	f7 85       	ldd	r31, Z+15	; 0x0f
    369e:	e0 2d       	mov	r30, r0
    36a0:	09 94       	ijmp
    36a2:	ed 91       	ld	r30, X+
    36a4:	fc 91       	ld	r31, X
    36a6:	00 88       	ldd	r0, Z+16	; 0x10
    36a8:	f1 89       	ldd	r31, Z+17	; 0x11
    36aa:	e0 2d       	mov	r30, r0
    36ac:	f9 cf       	rjmp	.-14     	; 0x36a0 <AccelStepper::step(long)+0x34>
    36ae:	ed 91       	ld	r30, X+
    36b0:	fc 91       	ld	r31, X
    36b2:	02 88       	ldd	r0, Z+18	; 0x12
    36b4:	f3 89       	ldd	r31, Z+19	; 0x13
    36b6:	e0 2d       	mov	r30, r0
    36b8:	f3 cf       	rjmp	.-26     	; 0x36a0 <AccelStepper::step(long)+0x34>
    36ba:	ed 91       	ld	r30, X+
    36bc:	fc 91       	ld	r31, X
    36be:	04 88       	ldd	r0, Z+20	; 0x14
    36c0:	f5 89       	ldd	r31, Z+21	; 0x15
    36c2:	e0 2d       	mov	r30, r0
    36c4:	ed cf       	rjmp	.-38     	; 0x36a0 <AccelStepper::step(long)+0x34>
    36c6:	ed 91       	ld	r30, X+
    36c8:	fc 91       	ld	r31, X
    36ca:	06 88       	ldd	r0, Z+22	; 0x16
    36cc:	f7 89       	ldd	r31, Z+23	; 0x17
    36ce:	e0 2d       	mov	r30, r0
    36d0:	e7 cf       	rjmp	.-50     	; 0x36a0 <AccelStepper::step(long)+0x34>
    36d2:	ed 91       	ld	r30, X+
    36d4:	fc 91       	ld	r31, X
    36d6:	00 8c       	ldd	r0, Z+24	; 0x18
    36d8:	f1 8d       	ldd	r31, Z+25	; 0x19
    36da:	e0 2d       	mov	r30, r0
    36dc:	e1 cf       	rjmp	.-62     	; 0x36a0 <AccelStepper::step(long)+0x34>
    36de:	ed 91       	ld	r30, X+
    36e0:	fc 91       	ld	r31, X
    36e2:	02 8c       	ldd	r0, Z+26	; 0x1a
    36e4:	f3 8d       	ldd	r31, Z+27	; 0x1b
    36e6:	e0 2d       	mov	r30, r0
    36e8:	db cf       	rjmp	.-74     	; 0x36a0 <AccelStepper::step(long)+0x34>
    36ea:	08 95       	ret

000036ec <AccelStepper::step6(long)>:
_ZN12AccelStepper5step6El():
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	ec 01       	movw	r28, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	ba 01       	movw	r22, r20
    36f6:	26 e0       	ldi	r18, 0x06	; 6
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	0e 94 1b 3c 	call	0x7836	; 0x7836 <__divmodsi4>
    3702:	62 30       	cpi	r22, 0x02	; 2
    3704:	71 05       	cpc	r23, r1
    3706:	81 05       	cpc	r24, r1
    3708:	91 05       	cpc	r25, r1
    370a:	89 f1       	breq	.+98     	; 0x376e <AccelStepper::step6(long)+0x82>
    370c:	6c f4       	brge	.+26     	; 0x3728 <AccelStepper::step6(long)+0x3c>
    370e:	61 15       	cp	r22, r1
    3710:	71 05       	cpc	r23, r1
    3712:	81 05       	cpc	r24, r1
    3714:	91 05       	cpc	r25, r1
    3716:	d1 f0       	breq	.+52     	; 0x374c <AccelStepper::step6(long)+0x60>
    3718:	61 30       	cpi	r22, 0x01	; 1
    371a:	71 05       	cpc	r23, r1
    371c:	81 05       	cpc	r24, r1
    371e:	91 05       	cpc	r25, r1
    3720:	f9 f0       	breq	.+62     	; 0x3760 <AccelStepper::step6(long)+0x74>
    3722:	df 91       	pop	r29
    3724:	cf 91       	pop	r28
    3726:	08 95       	ret
    3728:	64 30       	cpi	r22, 0x04	; 4
    372a:	71 05       	cpc	r23, r1
    372c:	81 05       	cpc	r24, r1
    372e:	91 05       	cpc	r25, r1
    3730:	61 f1       	breq	.+88     	; 0x378a <AccelStepper::step6(long)+0x9e>
    3732:	24 f1       	brlt	.+72     	; 0x377c <AccelStepper::step6(long)+0x90>
    3734:	65 30       	cpi	r22, 0x05	; 5
    3736:	71 05       	cpc	r23, r1
    3738:	81 05       	cpc	r24, r1
    373a:	91 05       	cpc	r25, r1
    373c:	91 f7       	brne	.-28     	; 0x3722 <AccelStepper::step6(long)+0x36>
    373e:	e8 81       	ld	r30, Y
    3740:	f9 81       	ldd	r31, Y+1	; 0x01
    3742:	02 84       	ldd	r0, Z+10	; 0x0a
    3744:	f3 85       	ldd	r31, Z+11	; 0x0b
    3746:	e0 2d       	mov	r30, r0
    3748:	66 e0       	ldi	r22, 0x06	; 6
    374a:	06 c0       	rjmp	.+12     	; 0x3758 <AccelStepper::step6(long)+0x6c>
    374c:	e8 81       	ld	r30, Y
    374e:	f9 81       	ldd	r31, Y+1	; 0x01
    3750:	02 84       	ldd	r0, Z+10	; 0x0a
    3752:	f3 85       	ldd	r31, Z+11	; 0x0b
    3754:	e0 2d       	mov	r30, r0
    3756:	64 e0       	ldi	r22, 0x04	; 4
    3758:	ce 01       	movw	r24, r28
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	09 94       	ijmp
    3760:	e8 81       	ld	r30, Y
    3762:	f9 81       	ldd	r31, Y+1	; 0x01
    3764:	02 84       	ldd	r0, Z+10	; 0x0a
    3766:	f3 85       	ldd	r31, Z+11	; 0x0b
    3768:	e0 2d       	mov	r30, r0
    376a:	65 e0       	ldi	r22, 0x05	; 5
    376c:	f5 cf       	rjmp	.-22     	; 0x3758 <AccelStepper::step6(long)+0x6c>
    376e:	e8 81       	ld	r30, Y
    3770:	f9 81       	ldd	r31, Y+1	; 0x01
    3772:	02 84       	ldd	r0, Z+10	; 0x0a
    3774:	f3 85       	ldd	r31, Z+11	; 0x0b
    3776:	e0 2d       	mov	r30, r0
    3778:	61 e0       	ldi	r22, 0x01	; 1
    377a:	ee cf       	rjmp	.-36     	; 0x3758 <AccelStepper::step6(long)+0x6c>
    377c:	e8 81       	ld	r30, Y
    377e:	f9 81       	ldd	r31, Y+1	; 0x01
    3780:	02 84       	ldd	r0, Z+10	; 0x0a
    3782:	f3 85       	ldd	r31, Z+11	; 0x0b
    3784:	e0 2d       	mov	r30, r0
    3786:	63 e0       	ldi	r22, 0x03	; 3
    3788:	e7 cf       	rjmp	.-50     	; 0x3758 <AccelStepper::step6(long)+0x6c>
    378a:	e8 81       	ld	r30, Y
    378c:	f9 81       	ldd	r31, Y+1	; 0x01
    378e:	02 84       	ldd	r0, Z+10	; 0x0a
    3790:	f3 85       	ldd	r31, Z+11	; 0x0b
    3792:	e0 2d       	mov	r30, r0
    3794:	62 e0       	ldi	r22, 0x02	; 2
    3796:	e0 cf       	rjmp	.-64     	; 0x3758 <AccelStepper::step6(long)+0x6c>

00003798 <AccelStepper::step8(long)>:
_ZN12AccelStepper5step8El():
    3798:	dc 01       	movw	r26, r24
    379a:	ed 91       	ld	r30, X+
    379c:	fc 91       	ld	r31, X
    379e:	22 85       	ldd	r18, Z+10	; 0x0a
    37a0:	33 85       	ldd	r19, Z+11	; 0x0b
    37a2:	47 70       	andi	r20, 0x07	; 7
    37a4:	55 27       	eor	r21, r21
    37a6:	66 27       	eor	r22, r22
    37a8:	77 27       	eor	r23, r23
    37aa:	41 50       	subi	r20, 0x01	; 1
    37ac:	51 09       	sbc	r21, r1
    37ae:	61 09       	sbc	r22, r1
    37b0:	71 09       	sbc	r23, r1
    37b2:	47 30       	cpi	r20, 0x07	; 7
    37b4:	51 05       	cpc	r21, r1
    37b6:	61 05       	cpc	r22, r1
    37b8:	71 05       	cpc	r23, r1
    37ba:	60 f4       	brcc	.+24     	; 0x37d4 <AccelStepper::step8(long)+0x3c>
    37bc:	fa 01       	movw	r30, r20
    37be:	ed 51       	subi	r30, 0x1D	; 29
    37c0:	f4 4e       	sbci	r31, 0xE4	; 228
    37c2:	0c 94 3a 3c 	jmp	0x7874	; 0x7874 <__tablejump2__>
    37c6:	ed 1b       	sub	r30, r29
    37c8:	ef 1b       	sub	r30, r31
    37ca:	f1 1b       	sub	r31, r17
    37cc:	f3 1b       	sub	r31, r19
    37ce:	f5 1b       	sub	r31, r21
    37d0:	f7 1b       	sub	r31, r23
    37d2:	f9 1b       	sub	r31, r25
    37d4:	61 e0       	ldi	r22, 0x01	; 1
    37d6:	f9 01       	movw	r30, r18
    37d8:	09 94       	ijmp
    37da:	65 e0       	ldi	r22, 0x05	; 5
    37dc:	fc cf       	rjmp	.-8      	; 0x37d6 <AccelStepper::step8(long)+0x3e>
    37de:	64 e0       	ldi	r22, 0x04	; 4
    37e0:	fa cf       	rjmp	.-12     	; 0x37d6 <AccelStepper::step8(long)+0x3e>
    37e2:	66 e0       	ldi	r22, 0x06	; 6
    37e4:	f8 cf       	rjmp	.-16     	; 0x37d6 <AccelStepper::step8(long)+0x3e>
    37e6:	62 e0       	ldi	r22, 0x02	; 2
    37e8:	f6 cf       	rjmp	.-20     	; 0x37d6 <AccelStepper::step8(long)+0x3e>
    37ea:	6a e0       	ldi	r22, 0x0A	; 10
    37ec:	f4 cf       	rjmp	.-24     	; 0x37d6 <AccelStepper::step8(long)+0x3e>
    37ee:	68 e0       	ldi	r22, 0x08	; 8
    37f0:	f2 cf       	rjmp	.-28     	; 0x37d6 <AccelStepper::step8(long)+0x3e>
    37f2:	69 e0       	ldi	r22, 0x09	; 9
    37f4:	f0 cf       	rjmp	.-32     	; 0x37d6 <AccelStepper::step8(long)+0x3e>

000037f6 <AccelStepper::setOutputPins(unsigned char)>:
_ZN12AccelStepper13setOutputPinsEh():
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	dc 01       	movw	r26, r24
    3808:	17 96       	adiw	r26, 0x07	; 7
    380a:	cc 91       	ld	r28, X
    380c:	c4 30       	cpi	r28, 0x04	; 4
    380e:	39 f0       	breq	.+14     	; 0x381e <AccelStepper::setOutputPins(unsigned char)+0x28>
    3810:	c8 30       	cpi	r28, 0x08	; 8
    3812:	59 f1       	breq	.+86     	; 0x386a <AccelStepper::setOutputPins(unsigned char)+0x74>
    3814:	c3 30       	cpi	r28, 0x03	; 3
    3816:	19 f0       	breq	.+6      	; 0x381e <AccelStepper::setOutputPins(unsigned char)+0x28>
    3818:	c6 30       	cpi	r28, 0x06	; 6
    381a:	49 f1       	breq	.+82     	; 0x386e <AccelStepper::setOutputPins(unsigned char)+0x78>
    381c:	c2 e0       	ldi	r28, 0x02	; 2
    381e:	8c 01       	movw	r16, r24
    3820:	08 5f       	subi	r16, 0xF8	; 248
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	f1 2c       	mov	r15, r1
    3826:	e1 2c       	mov	r14, r1
    3828:	c6 2e       	mov	r12, r22
    382a:	d1 2c       	mov	r13, r1
    382c:	d1 e0       	ldi	r29, 0x01	; 1
    382e:	f8 01       	movw	r30, r16
    3830:	64 81       	ldd	r22, Z+4	; 0x04
    3832:	c6 01       	movw	r24, r12
    3834:	0e 2c       	mov	r0, r14
    3836:	02 c0       	rjmp	.+4      	; 0x383c <AccelStepper::setOutputPins(unsigned char)+0x46>
    3838:	95 95       	asr	r25
    383a:	87 95       	ror	r24
    383c:	0a 94       	dec	r0
    383e:	e2 f7       	brpl	.-8      	; 0x3838 <AccelStepper::setOutputPins(unsigned char)+0x42>
    3840:	80 fd       	sbrc	r24, 0
    3842:	6d 27       	eor	r22, r29
    3844:	0f 5f       	subi	r16, 0xFF	; 255
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	80 81       	ld	r24, Z
    384a:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
    384e:	bf ef       	ldi	r27, 0xFF	; 255
    3850:	eb 1a       	sub	r14, r27
    3852:	fb 0a       	sbc	r15, r27
    3854:	ec 16       	cp	r14, r28
    3856:	58 f3       	brcs	.-42     	; 0x382e <AccelStepper::setOutputPins(unsigned char)+0x38>
    3858:	df 91       	pop	r29
    385a:	cf 91       	pop	r28
    385c:	1f 91       	pop	r17
    385e:	0f 91       	pop	r16
    3860:	ff 90       	pop	r15
    3862:	ef 90       	pop	r14
    3864:	df 90       	pop	r13
    3866:	cf 90       	pop	r12
    3868:	08 95       	ret
    386a:	c4 e0       	ldi	r28, 0x04	; 4
    386c:	d8 cf       	rjmp	.-80     	; 0x381e <AccelStepper::setOutputPins(unsigned char)+0x28>
    386e:	c3 e0       	ldi	r28, 0x03	; 3
    3870:	d6 cf       	rjmp	.-84     	; 0x381e <AccelStepper::setOutputPins(unsigned char)+0x28>

00003872 <AccelStepper::step1(long)>:
_ZN12AccelStepper5step1El():
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	ec 01       	movw	r28, r24
    3878:	e8 81       	ld	r30, Y
    387a:	f9 81       	ldd	r31, Y+1	; 0x01
    387c:	02 84       	ldd	r0, Z+10	; 0x0a
    387e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3880:	e0 2d       	mov	r30, r0
    3882:	8a 81       	ldd	r24, Y+2	; 0x02
    3884:	60 e0       	ldi	r22, 0x00	; 0
    3886:	81 11       	cpse	r24, r1
    3888:	62 e0       	ldi	r22, 0x02	; 2
    388a:	ce 01       	movw	r24, r28
    388c:	09 95       	icall
    388e:	e8 81       	ld	r30, Y
    3890:	f9 81       	ldd	r31, Y+1	; 0x01
    3892:	02 84       	ldd	r0, Z+10	; 0x0a
    3894:	f3 85       	ldd	r31, Z+11	; 0x0b
    3896:	e0 2d       	mov	r30, r0
    3898:	8a 81       	ldd	r24, Y+2	; 0x02
    389a:	61 e0       	ldi	r22, 0x01	; 1
    389c:	81 11       	cpse	r24, r1
    389e:	63 e0       	ldi	r22, 0x03	; 3
    38a0:	ce 01       	movw	r24, r28
    38a2:	09 95       	icall
    38a4:	8c a5       	ldd	r24, Y+44	; 0x2c
    38a6:	9d a5       	ldd	r25, Y+45	; 0x2d
    38a8:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <delayMicroseconds>
    38ac:	e8 81       	ld	r30, Y
    38ae:	f9 81       	ldd	r31, Y+1	; 0x01
    38b0:	02 84       	ldd	r0, Z+10	; 0x0a
    38b2:	f3 85       	ldd	r31, Z+11	; 0x0b
    38b4:	e0 2d       	mov	r30, r0
    38b6:	8a 81       	ldd	r24, Y+2	; 0x02
    38b8:	60 e0       	ldi	r22, 0x00	; 0
    38ba:	81 11       	cpse	r24, r1
    38bc:	62 e0       	ldi	r22, 0x02	; 2
    38be:	ce 01       	movw	r24, r28
    38c0:	df 91       	pop	r29
    38c2:	cf 91       	pop	r28
    38c4:	09 94       	ijmp

000038c6 <AccelStepper::~AccelStepper()>:
_ZN12AccelStepperD0Ev():
    38c6:	64 e4       	ldi	r22, 0x44	; 68
    38c8:	70 e0       	ldi	r23, 0x00	; 0
    38ca:	0c 94 d9 36 	jmp	0x6db2	; 0x6db2 <operator delete(void*, unsigned int)>

000038ce <AccelStepper::step0(long)>:
_ZN12AccelStepper5step0El():
    38ce:	cf 93       	push	r28
    38d0:	df 93       	push	r29
    38d2:	ec 01       	movw	r28, r24
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	a9 01       	movw	r20, r18
    38da:	68 8d       	ldd	r22, Y+24	; 0x18
    38dc:	79 8d       	ldd	r23, Y+25	; 0x19
    38de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    38e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    38e2:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__gesf2>
    38e6:	18 16       	cp	r1, r24
    38e8:	2c f4       	brge	.+10     	; 0x38f4 <AccelStepper::step0(long)+0x26>
    38ea:	e8 a9       	ldd	r30, Y+48	; 0x30
    38ec:	f9 a9       	ldd	r31, Y+49	; 0x31
    38ee:	df 91       	pop	r29
    38f0:	cf 91       	pop	r28
    38f2:	09 94       	ijmp
    38f4:	ea a9       	ldd	r30, Y+50	; 0x32
    38f6:	fb a9       	ldd	r31, Y+51	; 0x33
    38f8:	fa cf       	rjmp	.-12     	; 0x38ee <AccelStepper::step0(long)+0x20>

000038fa <AccelStepper::step2(long)>:
_ZN12AccelStepper5step2El():
    38fa:	dc 01       	movw	r26, r24
    38fc:	ed 91       	ld	r30, X+
    38fe:	fc 91       	ld	r31, X
    3900:	02 84       	ldd	r0, Z+10	; 0x0a
    3902:	f3 85       	ldd	r31, Z+11	; 0x0b
    3904:	e0 2d       	mov	r30, r0
    3906:	43 70       	andi	r20, 0x03	; 3
    3908:	55 27       	eor	r21, r21
    390a:	66 27       	eor	r22, r22
    390c:	77 27       	eor	r23, r23
    390e:	42 30       	cpi	r20, 0x02	; 2
    3910:	51 05       	cpc	r21, r1
    3912:	61 05       	cpc	r22, r1
    3914:	71 05       	cpc	r23, r1
    3916:	71 f0       	breq	.+28     	; 0x3934 <AccelStepper::step2(long)+0x3a>
    3918:	43 30       	cpi	r20, 0x03	; 3
    391a:	51 05       	cpc	r21, r1
    391c:	61 05       	cpc	r22, r1
    391e:	71 05       	cpc	r23, r1
    3920:	59 f0       	breq	.+22     	; 0x3938 <AccelStepper::step2(long)+0x3e>
    3922:	41 30       	cpi	r20, 0x01	; 1
    3924:	51 05       	cpc	r21, r1
    3926:	61 05       	cpc	r22, r1
    3928:	71 05       	cpc	r23, r1
    392a:	11 f0       	breq	.+4      	; 0x3930 <AccelStepper::step2(long)+0x36>
    392c:	62 e0       	ldi	r22, 0x02	; 2
    392e:	09 94       	ijmp
    3930:	63 e0       	ldi	r22, 0x03	; 3
    3932:	fd cf       	rjmp	.-6      	; 0x392e <AccelStepper::step2(long)+0x34>
    3934:	61 e0       	ldi	r22, 0x01	; 1
    3936:	fb cf       	rjmp	.-10     	; 0x392e <AccelStepper::step2(long)+0x34>
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	f9 cf       	rjmp	.-14     	; 0x392e <AccelStepper::step2(long)+0x34>

0000393c <AccelStepper::step3(long)>:
_ZN12AccelStepper5step3El():
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	ec 01       	movw	r28, r24
    3942:	cb 01       	movw	r24, r22
    3944:	ba 01       	movw	r22, r20
    3946:	23 e0       	ldi	r18, 0x03	; 3
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	0e 94 1b 3c 	call	0x7836	; 0x7836 <__divmodsi4>
    3952:	61 30       	cpi	r22, 0x01	; 1
    3954:	71 05       	cpc	r23, r1
    3956:	81 05       	cpc	r24, r1
    3958:	91 05       	cpc	r25, r1
    395a:	99 f0       	breq	.+38     	; 0x3982 <AccelStepper::step3(long)+0x46>
    395c:	62 30       	cpi	r22, 0x02	; 2
    395e:	71 05       	cpc	r23, r1
    3960:	81 05       	cpc	r24, r1
    3962:	91 05       	cpc	r25, r1
    3964:	a9 f0       	breq	.+42     	; 0x3990 <AccelStepper::step3(long)+0x54>
    3966:	67 2b       	or	r22, r23
    3968:	68 2b       	or	r22, r24
    396a:	69 2b       	or	r22, r25
    396c:	c1 f4       	brne	.+48     	; 0x399e <AccelStepper::step3(long)+0x62>
    396e:	e8 81       	ld	r30, Y
    3970:	f9 81       	ldd	r31, Y+1	; 0x01
    3972:	02 84       	ldd	r0, Z+10	; 0x0a
    3974:	f3 85       	ldd	r31, Z+11	; 0x0b
    3976:	e0 2d       	mov	r30, r0
    3978:	64 e0       	ldi	r22, 0x04	; 4
    397a:	ce 01       	movw	r24, r28
    397c:	df 91       	pop	r29
    397e:	cf 91       	pop	r28
    3980:	09 94       	ijmp
    3982:	e8 81       	ld	r30, Y
    3984:	f9 81       	ldd	r31, Y+1	; 0x01
    3986:	02 84       	ldd	r0, Z+10	; 0x0a
    3988:	f3 85       	ldd	r31, Z+11	; 0x0b
    398a:	e0 2d       	mov	r30, r0
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	f5 cf       	rjmp	.-22     	; 0x397a <AccelStepper::step3(long)+0x3e>
    3990:	e8 81       	ld	r30, Y
    3992:	f9 81       	ldd	r31, Y+1	; 0x01
    3994:	02 84       	ldd	r0, Z+10	; 0x0a
    3996:	f3 85       	ldd	r31, Z+11	; 0x0b
    3998:	e0 2d       	mov	r30, r0
    399a:	62 e0       	ldi	r22, 0x02	; 2
    399c:	ee cf       	rjmp	.-36     	; 0x397a <AccelStepper::step3(long)+0x3e>
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	08 95       	ret

000039a4 <AccelStepper::step4(long)>:
_ZN12AccelStepper5step4El():
    39a4:	dc 01       	movw	r26, r24
    39a6:	ed 91       	ld	r30, X+
    39a8:	fc 91       	ld	r31, X
    39aa:	02 84       	ldd	r0, Z+10	; 0x0a
    39ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    39ae:	e0 2d       	mov	r30, r0
    39b0:	43 70       	andi	r20, 0x03	; 3
    39b2:	55 27       	eor	r21, r21
    39b4:	66 27       	eor	r22, r22
    39b6:	77 27       	eor	r23, r23
    39b8:	42 30       	cpi	r20, 0x02	; 2
    39ba:	51 05       	cpc	r21, r1
    39bc:	61 05       	cpc	r22, r1
    39be:	71 05       	cpc	r23, r1
    39c0:	71 f0       	breq	.+28     	; 0x39de <AccelStepper::step4(long)+0x3a>
    39c2:	43 30       	cpi	r20, 0x03	; 3
    39c4:	51 05       	cpc	r21, r1
    39c6:	61 05       	cpc	r22, r1
    39c8:	71 05       	cpc	r23, r1
    39ca:	59 f0       	breq	.+22     	; 0x39e2 <AccelStepper::step4(long)+0x3e>
    39cc:	41 30       	cpi	r20, 0x01	; 1
    39ce:	51 05       	cpc	r21, r1
    39d0:	61 05       	cpc	r22, r1
    39d2:	71 05       	cpc	r23, r1
    39d4:	11 f0       	breq	.+4      	; 0x39da <AccelStepper::step4(long)+0x36>
    39d6:	65 e0       	ldi	r22, 0x05	; 5
    39d8:	09 94       	ijmp
    39da:	66 e0       	ldi	r22, 0x06	; 6
    39dc:	fd cf       	rjmp	.-6      	; 0x39d8 <AccelStepper::step4(long)+0x34>
    39de:	6a e0       	ldi	r22, 0x0A	; 10
    39e0:	fb cf       	rjmp	.-10     	; 0x39d8 <AccelStepper::step4(long)+0x34>
    39e2:	69 e0       	ldi	r22, 0x09	; 9
    39e4:	f9 cf       	rjmp	.-14     	; 0x39d8 <AccelStepper::step4(long)+0x34>

000039e6 <AccelStepper::disableOutputs()>:
_ZN12AccelStepper14disableOutputsEv():
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	fc 01       	movw	r30, r24
    39ec:	27 81       	ldd	r18, Z+7	; 0x07
    39ee:	22 23       	and	r18, r18
    39f0:	a9 f0       	breq	.+42     	; 0x3a1c <AccelStepper::disableOutputs()+0x36>
    39f2:	ec 01       	movw	r28, r24
    39f4:	01 90       	ld	r0, Z+
    39f6:	f0 81       	ld	r31, Z
    39f8:	e0 2d       	mov	r30, r0
    39fa:	02 84       	ldd	r0, Z+10	; 0x0a
    39fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    39fe:	e0 2d       	mov	r30, r0
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	09 95       	icall
    3a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a06:	8f 3f       	cpi	r24, 0xFF	; 255
    3a08:	49 f0       	breq	.+18     	; 0x3a1c <AccelStepper::disableOutputs()+0x36>
    3a0a:	61 e0       	ldi	r22, 0x01	; 1
    3a0c:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    3a10:	6e a5       	ldd	r22, Y+46	; 0x2e
    3a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a14:	df 91       	pop	r29
    3a16:	cf 91       	pop	r28
    3a18:	0c 94 7d 38 	jmp	0x70fa	; 0x70fa <digitalWrite>
    3a1c:	df 91       	pop	r29
    3a1e:	cf 91       	pop	r28
    3a20:	08 95       	ret

00003a22 <AccelStepper::enableOutputs()>:
_ZN12AccelStepper13enableOutputsEv():
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	fc 01       	movw	r30, r24
    3a28:	27 81       	ldd	r18, Z+7	; 0x07
    3a2a:	22 23       	and	r18, r18
    3a2c:	59 f1       	breq	.+86     	; 0x3a84 <AccelStepper::enableOutputs()+0x62>
    3a2e:	ec 01       	movw	r28, r24
    3a30:	61 e0       	ldi	r22, 0x01	; 1
    3a32:	80 85       	ldd	r24, Z+8	; 0x08
    3a34:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    3a38:	61 e0       	ldi	r22, 0x01	; 1
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    3a40:	8f 81       	ldd	r24, Y+7	; 0x07
    3a42:	84 30       	cpi	r24, 0x04	; 4
    3a44:	11 f0       	breq	.+4      	; 0x3a4a <AccelStepper::enableOutputs()+0x28>
    3a46:	88 30       	cpi	r24, 0x08	; 8
    3a48:	b1 f4       	brne	.+44     	; 0x3a76 <AccelStepper::enableOutputs()+0x54>
    3a4a:	61 e0       	ldi	r22, 0x01	; 1
    3a4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a4e:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    3a52:	61 e0       	ldi	r22, 0x01	; 1
    3a54:	8b 85       	ldd	r24, Y+11	; 0x0b
    3a56:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    3a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a5c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a5e:	91 f0       	breq	.+36     	; 0x3a84 <AccelStepper::enableOutputs()+0x62>
    3a60:	61 e0       	ldi	r22, 0x01	; 1
    3a62:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    3a66:	6e a5       	ldd	r22, Y+46	; 0x2e
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	68 27       	eor	r22, r24
    3a6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	0c 94 7d 38 	jmp	0x70fa	; 0x70fa <digitalWrite>
    3a76:	83 30       	cpi	r24, 0x03	; 3
    3a78:	11 f0       	breq	.+4      	; 0x3a7e <AccelStepper::enableOutputs()+0x5c>
    3a7a:	86 30       	cpi	r24, 0x06	; 6
    3a7c:	71 f7       	brne	.-36     	; 0x3a5a <AccelStepper::enableOutputs()+0x38>
    3a7e:	61 e0       	ldi	r22, 0x01	; 1
    3a80:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a82:	e9 cf       	rjmp	.-46     	; 0x3a56 <AccelStepper::enableOutputs()+0x34>
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	08 95       	ret

00003a8a <AccelStepper::setAcceleration(float) [clone .part.10]>:
_ZN12AccelStepper15setAccelerationEf():
    3a8a:	4f 92       	push	r4
    3a8c:	5f 92       	push	r5
    3a8e:	6f 92       	push	r6
    3a90:	7f 92       	push	r7
    3a92:	8f 92       	push	r8
    3a94:	9f 92       	push	r9
    3a96:	af 92       	push	r10
    3a98:	bf 92       	push	r11
    3a9a:	cf 92       	push	r12
    3a9c:	df 92       	push	r13
    3a9e:	ef 92       	push	r14
    3aa0:	ff 92       	push	r15
    3aa2:	cf 93       	push	r28
    3aa4:	df 93       	push	r29
    3aa6:	ec 01       	movw	r28, r24
    3aa8:	6a 01       	movw	r12, r20
    3aaa:	7b 01       	movw	r14, r22
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	a9 01       	movw	r20, r18
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	b6 01       	movw	r22, r12
    3ab6:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3aba:	87 ff       	sbrs	r24, 7
    3abc:	04 c0       	rjmp	.+8      	; 0x3ac6 <AccelStepper::setAcceleration(float) [clone .part.10]+0x3c>
    3abe:	f7 fa       	bst	r15, 7
    3ac0:	f0 94       	com	r15
    3ac2:	f7 f8       	bld	r15, 7
    3ac4:	f0 94       	com	r15
    3ac6:	88 a0       	ldd	r8, Y+32	; 0x20
    3ac8:	99 a0       	ldd	r9, Y+33	; 0x21
    3aca:	aa a0       	ldd	r10, Y+34	; 0x22
    3acc:	bb a0       	ldd	r11, Y+35	; 0x23
    3ace:	a7 01       	movw	r20, r14
    3ad0:	96 01       	movw	r18, r12
    3ad2:	c5 01       	movw	r24, r10
    3ad4:	b4 01       	movw	r22, r8
    3ad6:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3ada:	88 23       	and	r24, r24
    3adc:	09 f4       	brne	.+2      	; 0x3ae0 <AccelStepper::setAcceleration(float) [clone .part.10]+0x56>
    3ade:	4d c0       	rjmp	.+154    	; 0x3b7a <AccelStepper::setAcceleration(float) [clone .part.10]+0xf0>
    3ae0:	6c a9       	ldd	r22, Y+52	; 0x34
    3ae2:	7d a9       	ldd	r23, Y+53	; 0x35
    3ae4:	8e a9       	ldd	r24, Y+54	; 0x36
    3ae6:	9f a9       	ldd	r25, Y+55	; 0x37
    3ae8:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    3aec:	2b 01       	movw	r4, r22
    3aee:	3c 01       	movw	r6, r24
    3af0:	a7 01       	movw	r20, r14
    3af2:	96 01       	movw	r18, r12
    3af4:	c5 01       	movw	r24, r10
    3af6:	b4 01       	movw	r22, r8
    3af8:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3afc:	9b 01       	movw	r18, r22
    3afe:	ac 01       	movw	r20, r24
    3b00:	c3 01       	movw	r24, r6
    3b02:	b2 01       	movw	r22, r4
    3b04:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    3b08:	0e 94 b8 39 	call	0x7370	; 0x7370 <__fixsfsi>
    3b0c:	6c ab       	std	Y+52, r22	; 0x34
    3b0e:	7d ab       	std	Y+53, r23	; 0x35
    3b10:	8e ab       	std	Y+54, r24	; 0x36
    3b12:	9f ab       	std	Y+55, r25	; 0x37
    3b14:	a7 01       	movw	r20, r14
    3b16:	96 01       	movw	r18, r12
    3b18:	60 e0       	ldi	r22, 0x00	; 0
    3b1a:	70 e0       	ldi	r23, 0x00	; 0
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e4       	ldi	r25, 0x40	; 64
    3b20:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3b24:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <sqrt>
    3b28:	26 e5       	ldi	r18, 0x56	; 86
    3b2a:	3e e0       	ldi	r19, 0x0E	; 14
    3b2c:	4d e2       	ldi	r20, 0x2D	; 45
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	34 e2       	ldi	r19, 0x24	; 36
    3b38:	44 e7       	ldi	r20, 0x74	; 116
    3b3a:	59 e4       	ldi	r21, 0x49	; 73
    3b3c:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    3b40:	68 af       	std	Y+56, r22	; 0x38
    3b42:	79 af       	std	Y+57, r23	; 0x39
    3b44:	8a af       	std	Y+58, r24	; 0x3a
    3b46:	9b af       	std	Y+59, r25	; 0x3b
    3b48:	c8 a2       	std	Y+32, r12	; 0x20
    3b4a:	d9 a2       	std	Y+33, r13	; 0x21
    3b4c:	ea a2       	std	Y+34, r14	; 0x22
    3b4e:	fb a2       	std	Y+35, r15	; 0x23
    3b50:	e8 81       	ld	r30, Y
    3b52:	f9 81       	ldd	r31, Y+1	; 0x01
    3b54:	00 84       	ldd	r0, Z+8	; 0x08
    3b56:	f1 85       	ldd	r31, Z+9	; 0x09
    3b58:	e0 2d       	mov	r30, r0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	df 91       	pop	r29
    3b5e:	cf 91       	pop	r28
    3b60:	ff 90       	pop	r15
    3b62:	ef 90       	pop	r14
    3b64:	df 90       	pop	r13
    3b66:	cf 90       	pop	r12
    3b68:	bf 90       	pop	r11
    3b6a:	af 90       	pop	r10
    3b6c:	9f 90       	pop	r9
    3b6e:	8f 90       	pop	r8
    3b70:	7f 90       	pop	r7
    3b72:	6f 90       	pop	r6
    3b74:	5f 90       	pop	r5
    3b76:	4f 90       	pop	r4
    3b78:	09 94       	ijmp
    3b7a:	df 91       	pop	r29
    3b7c:	cf 91       	pop	r28
    3b7e:	ff 90       	pop	r15
    3b80:	ef 90       	pop	r14
    3b82:	df 90       	pop	r13
    3b84:	cf 90       	pop	r12
    3b86:	bf 90       	pop	r11
    3b88:	af 90       	pop	r10
    3b8a:	9f 90       	pop	r9
    3b8c:	8f 90       	pop	r8
    3b8e:	7f 90       	pop	r7
    3b90:	6f 90       	pop	r6
    3b92:	5f 90       	pop	r5
    3b94:	4f 90       	pop	r4
    3b96:	08 95       	ret

00003b98 <AccelStepper::moveTo(long)>:
_ZN12AccelStepper6moveToEl():
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	54 96       	adiw	r26, 0x14	; 20
    3ba0:	0d 91       	ld	r16, X+
    3ba2:	1d 91       	ld	r17, X+
    3ba4:	2d 91       	ld	r18, X+
    3ba6:	3c 91       	ld	r19, X
    3ba8:	57 97       	sbiw	r26, 0x17	; 23
    3baa:	04 17       	cp	r16, r20
    3bac:	15 07       	cpc	r17, r21
    3bae:	26 07       	cpc	r18, r22
    3bb0:	37 07       	cpc	r19, r23
    3bb2:	71 f0       	breq	.+28     	; 0x3bd0 <AccelStepper::moveTo(long)+0x38>
    3bb4:	fc 01       	movw	r30, r24
    3bb6:	44 8b       	std	Z+20, r20	; 0x14
    3bb8:	55 8b       	std	Z+21, r21	; 0x15
    3bba:	66 8b       	std	Z+22, r22	; 0x16
    3bbc:	77 8b       	std	Z+23, r23	; 0x17
    3bbe:	01 90       	ld	r0, Z+
    3bc0:	f0 81       	ld	r31, Z
    3bc2:	e0 2d       	mov	r30, r0
    3bc4:	00 84       	ldd	r0, Z+8	; 0x08
    3bc6:	f1 85       	ldd	r31, Z+9	; 0x09
    3bc8:	e0 2d       	mov	r30, r0
    3bca:	1f 91       	pop	r17
    3bcc:	0f 91       	pop	r16
    3bce:	09 94       	ijmp
    3bd0:	1f 91       	pop	r17
    3bd2:	0f 91       	pop	r16
    3bd4:	08 95       	ret

00003bd6 <AccelStepper::runSpeed()>:
_ZN12AccelStepper8runSpeedEv():
    3bd6:	cf 92       	push	r12
    3bd8:	df 92       	push	r13
    3bda:	ef 92       	push	r14
    3bdc:	ff 92       	push	r15
    3bde:	cf 93       	push	r28
    3be0:	df 93       	push	r29
    3be2:	fc 01       	movw	r30, r24
    3be4:	43 81       	ldd	r20, Z+3	; 0x03
    3be6:	54 81       	ldd	r21, Z+4	; 0x04
    3be8:	65 81       	ldd	r22, Z+5	; 0x05
    3bea:	76 81       	ldd	r23, Z+6	; 0x06
    3bec:	45 2b       	or	r20, r21
    3bee:	46 2b       	or	r20, r22
    3bf0:	47 2b       	or	r20, r23
    3bf2:	41 f4       	brne	.+16     	; 0x3c04 <AccelStepper::runSpeed()+0x2e>
    3bf4:	80 e0       	ldi	r24, 0x00	; 0
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	08 95       	ret
    3c04:	ec 01       	movw	r28, r24
    3c06:	0e 94 31 37 	call	0x6e62	; 0x6e62 <micros>
    3c0a:	6b 01       	movw	r12, r22
    3c0c:	7c 01       	movw	r14, r24
    3c0e:	88 a5       	ldd	r24, Y+40	; 0x28
    3c10:	99 a5       	ldd	r25, Y+41	; 0x29
    3c12:	aa a5       	ldd	r26, Y+42	; 0x2a
    3c14:	bb a5       	ldd	r27, Y+43	; 0x2b
    3c16:	b7 01       	movw	r22, r14
    3c18:	a6 01       	movw	r20, r12
    3c1a:	48 1b       	sub	r20, r24
    3c1c:	59 0b       	sbc	r21, r25
    3c1e:	6a 0b       	sbc	r22, r26
    3c20:	7b 0b       	sbc	r23, r27
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	9c 81       	ldd	r25, Y+4	; 0x04
    3c26:	ad 81       	ldd	r26, Y+5	; 0x05
    3c28:	be 81       	ldd	r27, Y+6	; 0x06
    3c2a:	48 17       	cp	r20, r24
    3c2c:	59 07       	cpc	r21, r25
    3c2e:	6a 07       	cpc	r22, r26
    3c30:	7b 07       	cpc	r23, r27
    3c32:	00 f3       	brcs	.-64     	; 0x3bf4 <AccelStepper::runSpeed()+0x1e>
    3c34:	88 89       	ldd	r24, Y+16	; 0x10
    3c36:	99 89       	ldd	r25, Y+17	; 0x11
    3c38:	aa 89       	ldd	r26, Y+18	; 0x12
    3c3a:	bb 89       	ldd	r27, Y+19	; 0x13
    3c3c:	2a 81       	ldd	r18, Y+2	; 0x02
    3c3e:	22 23       	and	r18, r18
    3c40:	c1 f0       	breq	.+48     	; 0x3c72 <AccelStepper::runSpeed()+0x9c>
    3c42:	01 96       	adiw	r24, 0x01	; 1
    3c44:	a1 1d       	adc	r26, r1
    3c46:	b1 1d       	adc	r27, r1
    3c48:	88 8b       	std	Y+16, r24	; 0x10
    3c4a:	99 8b       	std	Y+17, r25	; 0x11
    3c4c:	aa 8b       	std	Y+18, r26	; 0x12
    3c4e:	bb 8b       	std	Y+19, r27	; 0x13
    3c50:	48 89       	ldd	r20, Y+16	; 0x10
    3c52:	59 89       	ldd	r21, Y+17	; 0x11
    3c54:	6a 89       	ldd	r22, Y+18	; 0x12
    3c56:	7b 89       	ldd	r23, Y+19	; 0x13
    3c58:	e8 81       	ld	r30, Y
    3c5a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c5c:	04 84       	ldd	r0, Z+12	; 0x0c
    3c5e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3c60:	e0 2d       	mov	r30, r0
    3c62:	ce 01       	movw	r24, r28
    3c64:	09 95       	icall
    3c66:	c8 a6       	std	Y+40, r12	; 0x28
    3c68:	d9 a6       	std	Y+41, r13	; 0x29
    3c6a:	ea a6       	std	Y+42, r14	; 0x2a
    3c6c:	fb a6       	std	Y+43, r15	; 0x2b
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	c2 cf       	rjmp	.-124    	; 0x3bf6 <AccelStepper::runSpeed()+0x20>
    3c72:	01 97       	sbiw	r24, 0x01	; 1
    3c74:	a1 09       	sbc	r26, r1
    3c76:	b1 09       	sbc	r27, r1
    3c78:	e7 cf       	rjmp	.-50     	; 0x3c48 <AccelStepper::runSpeed()+0x72>

00003c7a <AccelStepper::distanceToGo()>:
_ZN12AccelStepper12distanceToGoEv():
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	fc 01       	movw	r30, r24
    3c80:	64 89       	ldd	r22, Z+20	; 0x14
    3c82:	75 89       	ldd	r23, Z+21	; 0x15
    3c84:	86 89       	ldd	r24, Z+22	; 0x16
    3c86:	97 89       	ldd	r25, Z+23	; 0x17
    3c88:	00 89       	ldd	r16, Z+16	; 0x10
    3c8a:	11 89       	ldd	r17, Z+17	; 0x11
    3c8c:	22 89       	ldd	r18, Z+18	; 0x12
    3c8e:	33 89       	ldd	r19, Z+19	; 0x13
    3c90:	60 1b       	sub	r22, r16
    3c92:	71 0b       	sbc	r23, r17
    3c94:	82 0b       	sbc	r24, r18
    3c96:	93 0b       	sbc	r25, r19
    3c98:	1f 91       	pop	r17
    3c9a:	0f 91       	pop	r16
    3c9c:	08 95       	ret

00003c9e <AccelStepper::currentPosition()>:
_ZN12AccelStepper15currentPositionEv():
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	60 89       	ldd	r22, Z+16	; 0x10
    3ca2:	71 89       	ldd	r23, Z+17	; 0x11
    3ca4:	82 89       	ldd	r24, Z+18	; 0x12
    3ca6:	93 89       	ldd	r25, Z+19	; 0x13
    3ca8:	08 95       	ret

00003caa <AccelStepper::setCurrentPosition(long)>:
_ZN12AccelStepper18setCurrentPositionEl():
    3caa:	fc 01       	movw	r30, r24
    3cac:	40 8b       	std	Z+16, r20	; 0x10
    3cae:	51 8b       	std	Z+17, r21	; 0x11
    3cb0:	62 8b       	std	Z+18, r22	; 0x12
    3cb2:	73 8b       	std	Z+19, r23	; 0x13
    3cb4:	44 8b       	std	Z+20, r20	; 0x14
    3cb6:	55 8b       	std	Z+21, r21	; 0x15
    3cb8:	66 8b       	std	Z+22, r22	; 0x16
    3cba:	77 8b       	std	Z+23, r23	; 0x17
    3cbc:	14 aa       	std	Z+52, r1	; 0x34
    3cbe:	15 aa       	std	Z+53, r1	; 0x35
    3cc0:	16 aa       	std	Z+54, r1	; 0x36
    3cc2:	17 aa       	std	Z+55, r1	; 0x37
    3cc4:	13 82       	std	Z+3, r1	; 0x03
    3cc6:	14 82       	std	Z+4, r1	; 0x04
    3cc8:	15 82       	std	Z+5, r1	; 0x05
    3cca:	16 82       	std	Z+6, r1	; 0x06
    3ccc:	10 8e       	std	Z+24, r1	; 0x18
    3cce:	11 8e       	std	Z+25, r1	; 0x19
    3cd0:	12 8e       	std	Z+26, r1	; 0x1a
    3cd2:	13 8e       	std	Z+27, r1	; 0x1b
    3cd4:	08 95       	ret

00003cd6 <AccelStepper::setMaxSpeed(float)>:
_ZN12AccelStepper11setMaxSpeedEf():
    3cd6:	cf 92       	push	r12
    3cd8:	df 92       	push	r13
    3cda:	ef 92       	push	r14
    3cdc:	ff 92       	push	r15
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	ec 01       	movw	r28, r24
    3ce8:	6a 01       	movw	r12, r20
    3cea:	7b 01       	movw	r14, r22
    3cec:	20 e0       	ldi	r18, 0x00	; 0
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	a9 01       	movw	r20, r18
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	b6 01       	movw	r22, r12
    3cf6:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3cfa:	87 ff       	sbrs	r24, 7
    3cfc:	04 c0       	rjmp	.+8      	; 0x3d06 <AccelStepper::setMaxSpeed(float)+0x30>
    3cfe:	f7 fa       	bst	r15, 7
    3d00:	f0 94       	com	r15
    3d02:	f7 f8       	bld	r15, 7
    3d04:	f0 94       	com	r15
    3d06:	a7 01       	movw	r20, r14
    3d08:	96 01       	movw	r18, r12
    3d0a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3d0c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3d0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d10:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d12:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3d16:	88 23       	and	r24, r24
    3d18:	09 f4       	brne	.+2      	; 0x3d1c <AccelStepper::setMaxSpeed(float)+0x46>
    3d1a:	4a c0       	rjmp	.+148    	; 0x3db0 <AccelStepper::setMaxSpeed(float)+0xda>
    3d1c:	cc 8e       	std	Y+28, r12	; 0x1c
    3d1e:	dd 8e       	std	Y+29, r13	; 0x1d
    3d20:	ee 8e       	std	Y+30, r14	; 0x1e
    3d22:	ff 8e       	std	Y+31, r15	; 0x1f
    3d24:	8e 01       	movw	r16, r28
    3d26:	00 5c       	subi	r16, 0xC0	; 192
    3d28:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2a:	a7 01       	movw	r20, r14
    3d2c:	96 01       	movw	r18, r12
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	74 e2       	ldi	r23, 0x24	; 36
    3d32:	84 e7       	ldi	r24, 0x74	; 116
    3d34:	99 e4       	ldi	r25, 0x49	; 73
    3d36:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3d3a:	f8 01       	movw	r30, r16
    3d3c:	60 83       	st	Z, r22
    3d3e:	71 83       	std	Z+1, r23	; 0x01
    3d40:	82 83       	std	Z+2, r24	; 0x02
    3d42:	93 83       	std	Z+3, r25	; 0x03
    3d44:	8c a9       	ldd	r24, Y+52	; 0x34
    3d46:	9d a9       	ldd	r25, Y+53	; 0x35
    3d48:	ae a9       	ldd	r26, Y+54	; 0x36
    3d4a:	bf a9       	ldd	r27, Y+55	; 0x37
    3d4c:	18 16       	cp	r1, r24
    3d4e:	19 06       	cpc	r1, r25
    3d50:	1a 06       	cpc	r1, r26
    3d52:	1b 06       	cpc	r1, r27
    3d54:	6c f5       	brge	.+90     	; 0x3db0 <AccelStepper::setMaxSpeed(float)+0xda>
    3d56:	68 8d       	ldd	r22, Y+24	; 0x18
    3d58:	79 8d       	ldd	r23, Y+25	; 0x19
    3d5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d5e:	9b 01       	movw	r18, r22
    3d60:	ac 01       	movw	r20, r24
    3d62:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    3d66:	6b 01       	movw	r12, r22
    3d68:	7c 01       	movw	r14, r24
    3d6a:	68 a1       	ldd	r22, Y+32	; 0x20
    3d6c:	79 a1       	ldd	r23, Y+33	; 0x21
    3d6e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d70:	9b a1       	ldd	r25, Y+35	; 0x23
    3d72:	9b 01       	movw	r18, r22
    3d74:	ac 01       	movw	r20, r24
    3d76:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    3d7a:	9b 01       	movw	r18, r22
    3d7c:	ac 01       	movw	r20, r24
    3d7e:	c7 01       	movw	r24, r14
    3d80:	b6 01       	movw	r22, r12
    3d82:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3d86:	0e 94 b8 39 	call	0x7370	; 0x7370 <__fixsfsi>
    3d8a:	6c ab       	std	Y+52, r22	; 0x34
    3d8c:	7d ab       	std	Y+53, r23	; 0x35
    3d8e:	8e ab       	std	Y+54, r24	; 0x36
    3d90:	9f ab       	std	Y+55, r25	; 0x37
    3d92:	e8 81       	ld	r30, Y
    3d94:	f9 81       	ldd	r31, Y+1	; 0x01
    3d96:	00 84       	ldd	r0, Z+8	; 0x08
    3d98:	f1 85       	ldd	r31, Z+9	; 0x09
    3d9a:	e0 2d       	mov	r30, r0
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	1f 91       	pop	r17
    3da4:	0f 91       	pop	r16
    3da6:	ff 90       	pop	r15
    3da8:	ef 90       	pop	r14
    3daa:	df 90       	pop	r13
    3dac:	cf 90       	pop	r12
    3dae:	09 94       	ijmp
    3db0:	df 91       	pop	r29
    3db2:	cf 91       	pop	r28
    3db4:	1f 91       	pop	r17
    3db6:	0f 91       	pop	r16
    3db8:	ff 90       	pop	r15
    3dba:	ef 90       	pop	r14
    3dbc:	df 90       	pop	r13
    3dbe:	cf 90       	pop	r12
    3dc0:	08 95       	ret

00003dc2 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
_ZN12AccelStepperC2Ehhhhhb():
    3dc2:	cf 92       	push	r12
    3dc4:	ef 92       	push	r14
    3dc6:	0f 93       	push	r16
    3dc8:	cf 93       	push	r28
    3dca:	df 93       	push	r29
    3dcc:	ec 01       	movw	r28, r24
    3dce:	84 e3       	ldi	r24, 0x34	; 52
    3dd0:	91 e0       	ldi	r25, 0x01	; 1
    3dd2:	99 83       	std	Y+1, r25	; 0x01
    3dd4:	88 83       	st	Y, r24
    3dd6:	6f 83       	std	Y+7, r22	; 0x07
    3dd8:	18 8a       	std	Y+16, r1	; 0x10
    3dda:	19 8a       	std	Y+17, r1	; 0x11
    3ddc:	1a 8a       	std	Y+18, r1	; 0x12
    3dde:	1b 8a       	std	Y+19, r1	; 0x13
    3de0:	1c 8a       	std	Y+20, r1	; 0x14
    3de2:	1d 8a       	std	Y+21, r1	; 0x15
    3de4:	1e 8a       	std	Y+22, r1	; 0x16
    3de6:	1f 8a       	std	Y+23, r1	; 0x17
    3de8:	18 8e       	std	Y+24, r1	; 0x18
    3dea:	19 8e       	std	Y+25, r1	; 0x19
    3dec:	1a 8e       	std	Y+26, r1	; 0x1a
    3dee:	1b 8e       	std	Y+27, r1	; 0x1b
    3df0:	1c 8e       	std	Y+28, r1	; 0x1c
    3df2:	1d 8e       	std	Y+29, r1	; 0x1d
    3df4:	1e 8e       	std	Y+30, r1	; 0x1e
    3df6:	1f 8e       	std	Y+31, r1	; 0x1f
    3df8:	18 a2       	std	Y+32, r1	; 0x20
    3dfa:	19 a2       	std	Y+33, r1	; 0x21
    3dfc:	1a a2       	std	Y+34, r1	; 0x22
    3dfe:	1b a2       	std	Y+35, r1	; 0x23
    3e00:	80 e0       	ldi	r24, 0x00	; 0
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	a0 e8       	ldi	r26, 0x80	; 128
    3e06:	bf e3       	ldi	r27, 0x3F	; 63
    3e08:	8c a3       	std	Y+36, r24	; 0x24
    3e0a:	9d a3       	std	Y+37, r25	; 0x25
    3e0c:	ae a3       	std	Y+38, r26	; 0x26
    3e0e:	bf a3       	std	Y+39, r27	; 0x27
    3e10:	1b 82       	std	Y+3, r1	; 0x03
    3e12:	1c 82       	std	Y+4, r1	; 0x04
    3e14:	1d 82       	std	Y+5, r1	; 0x05
    3e16:	1e 82       	std	Y+6, r1	; 0x06
    3e18:	61 e0       	ldi	r22, 0x01	; 1
    3e1a:	70 e0       	ldi	r23, 0x00	; 0
    3e1c:	7d a7       	std	Y+45, r23	; 0x2d
    3e1e:	6c a7       	std	Y+44, r22	; 0x2c
    3e20:	3f ef       	ldi	r19, 0xFF	; 255
    3e22:	3f a7       	std	Y+47, r19	; 0x2f
    3e24:	18 a6       	std	Y+40, r1	; 0x28
    3e26:	19 a6       	std	Y+41, r1	; 0x29
    3e28:	1a a6       	std	Y+42, r1	; 0x2a
    3e2a:	1b a6       	std	Y+43, r1	; 0x2b
    3e2c:	48 87       	std	Y+8, r20	; 0x08
    3e2e:	29 87       	std	Y+9, r18	; 0x09
    3e30:	0a 87       	std	Y+10, r16	; 0x0a
    3e32:	eb 86       	std	Y+11, r14	; 0x0b
    3e34:	1e a6       	std	Y+46, r1	; 0x2e
    3e36:	1c aa       	std	Y+52, r1	; 0x34
    3e38:	1d aa       	std	Y+53, r1	; 0x35
    3e3a:	1e aa       	std	Y+54, r1	; 0x36
    3e3c:	1f aa       	std	Y+55, r1	; 0x37
    3e3e:	18 ae       	std	Y+56, r1	; 0x38
    3e40:	19 ae       	std	Y+57, r1	; 0x39
    3e42:	1a ae       	std	Y+58, r1	; 0x3a
    3e44:	1b ae       	std	Y+59, r1	; 0x3b
    3e46:	1c ae       	std	Y+60, r1	; 0x3c
    3e48:	1d ae       	std	Y+61, r1	; 0x3d
    3e4a:	1e ae       	std	Y+62, r1	; 0x3e
    3e4c:	1f ae       	std	Y+63, r1	; 0x3f
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e0 5c       	subi	r30, 0xC0	; 192
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	80 83       	st	Z, r24
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	a2 83       	std	Z+2, r26	; 0x02
    3e5a:	b3 83       	std	Z+3, r27	; 0x03
    3e5c:	1a 82       	std	Y+2, r1	; 0x02
    3e5e:	1c 86       	std	Y+12, r1	; 0x0c
    3e60:	1d 86       	std	Y+13, r1	; 0x0d
    3e62:	1e 86       	std	Y+14, r1	; 0x0e
    3e64:	1f 86       	std	Y+15, r1	; 0x0f
    3e66:	cc 20       	and	r12, r12
    3e68:	19 f0       	breq	.+6      	; 0x3e70 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xae>
    3e6a:	ce 01       	movw	r24, r28
    3e6c:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <AccelStepper::enableOutputs()>
_ZN12AccelStepper15setAccelerationEf():
    3e70:	40 e0       	ldi	r20, 0x00	; 0
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	60 e8       	ldi	r22, 0x80	; 128
    3e76:	7f e3       	ldi	r23, 0x3F	; 63
    3e78:	ce 01       	movw	r24, r28
    3e7a:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <AccelStepper::setAcceleration(float) [clone .part.10]>
_ZN12AccelStepperC2Ehhhhhb():
    3e7e:	40 e0       	ldi	r20, 0x00	; 0
    3e80:	50 e0       	ldi	r21, 0x00	; 0
    3e82:	60 e8       	ldi	r22, 0x80	; 128
    3e84:	7f e3       	ldi	r23, 0x3F	; 63
    3e86:	ce 01       	movw	r24, r28
    3e88:	df 91       	pop	r29
    3e8a:	cf 91       	pop	r28
    3e8c:	0f 91       	pop	r16
    3e8e:	ef 90       	pop	r14
    3e90:	cf 90       	pop	r12
    3e92:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <AccelStepper::setMaxSpeed(float)>

00003e96 <AccelStepper::setAcceleration(float)>:
_ZN12AccelStepper15setAccelerationEf():
    3e96:	cf 92       	push	r12
    3e98:	df 92       	push	r13
    3e9a:	ef 92       	push	r14
    3e9c:	ff 92       	push	r15
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	ec 01       	movw	r28, r24
    3ea4:	6a 01       	movw	r12, r20
    3ea6:	7b 01       	movw	r14, r22
    3ea8:	20 e0       	ldi	r18, 0x00	; 0
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	a9 01       	movw	r20, r18
    3eae:	cb 01       	movw	r24, r22
    3eb0:	b6 01       	movw	r22, r12
    3eb2:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3eb6:	88 23       	and	r24, r24
    3eb8:	59 f0       	breq	.+22     	; 0x3ed0 <AccelStepper::setAcceleration(float)+0x3a>
    3eba:	b7 01       	movw	r22, r14
    3ebc:	a6 01       	movw	r20, r12
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	ff 90       	pop	r15
    3ec6:	ef 90       	pop	r14
    3ec8:	df 90       	pop	r13
    3eca:	cf 90       	pop	r12
    3ecc:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <AccelStepper::setAcceleration(float) [clone .part.10]>
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	ff 90       	pop	r15
    3ed6:	ef 90       	pop	r14
    3ed8:	df 90       	pop	r13
    3eda:	cf 90       	pop	r12
    3edc:	08 95       	ret

00003ede <AccelStepper::setSpeed(float)>:
_ZN12AccelStepper8setSpeedEf():
    3ede:	4f 92       	push	r4
    3ee0:	5f 92       	push	r5
    3ee2:	6f 92       	push	r6
    3ee4:	7f 92       	push	r7
    3ee6:	af 92       	push	r10
    3ee8:	bf 92       	push	r11
    3eea:	cf 92       	push	r12
    3eec:	df 92       	push	r13
    3eee:	ef 92       	push	r14
    3ef0:	ff 92       	push	r15
    3ef2:	0f 93       	push	r16
    3ef4:	1f 93       	push	r17
    3ef6:	cf 93       	push	r28
    3ef8:	df 93       	push	r29
    3efa:	ec 01       	movw	r28, r24
    3efc:	5a 01       	movw	r10, r20
    3efe:	8b 01       	movw	r16, r22
    3f00:	9a 01       	movw	r18, r20
    3f02:	ab 01       	movw	r20, r22
    3f04:	68 8d       	ldd	r22, Y+24	; 0x18
    3f06:	79 8d       	ldd	r23, Y+25	; 0x19
    3f08:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f0a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f0c:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3f10:	88 23       	and	r24, r24
    3f12:	79 f1       	breq	.+94     	; 0x3f72 <AccelStepper::setSpeed(float)+0x94>
    3f14:	4c 8c       	ldd	r4, Y+28	; 0x1c
    3f16:	5d 8c       	ldd	r5, Y+29	; 0x1d
    3f18:	6e 8c       	ldd	r6, Y+30	; 0x1e
    3f1a:	7f 8c       	ldd	r7, Y+31	; 0x1f
    3f1c:	73 01       	movw	r14, r6
    3f1e:	62 01       	movw	r12, r4
    3f20:	f7 fa       	bst	r15, 7
    3f22:	f0 94       	com	r15
    3f24:	f7 f8       	bld	r15, 7
    3f26:	f0 94       	com	r15
    3f28:	95 01       	movw	r18, r10
    3f2a:	a8 01       	movw	r20, r16
    3f2c:	c7 01       	movw	r24, r14
    3f2e:	b6 01       	movw	r22, r12
    3f30:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__gesf2>
    3f34:	18 16       	cp	r1, r24
    3f36:	64 f0       	brlt	.+24     	; 0x3f50 <AccelStepper::setSpeed(float)+0x72>
    3f38:	95 01       	movw	r18, r10
    3f3a:	a8 01       	movw	r20, r16
    3f3c:	c3 01       	movw	r24, r6
    3f3e:	b2 01       	movw	r22, r4
    3f40:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3f44:	65 01       	movw	r12, r10
    3f46:	78 01       	movw	r14, r16
    3f48:	87 ff       	sbrs	r24, 7
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <AccelStepper::setSpeed(float)+0x72>
    3f4c:	73 01       	movw	r14, r6
    3f4e:	62 01       	movw	r12, r4
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	a9 01       	movw	r20, r18
    3f56:	c7 01       	movw	r24, r14
    3f58:	b6 01       	movw	r22, r12
    3f5a:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    3f5e:	81 11       	cpse	r24, r1
    3f60:	17 c0       	rjmp	.+46     	; 0x3f90 <AccelStepper::setSpeed(float)+0xb2>
    3f62:	1b 82       	std	Y+3, r1	; 0x03
    3f64:	1c 82       	std	Y+4, r1	; 0x04
    3f66:	1d 82       	std	Y+5, r1	; 0x05
    3f68:	1e 82       	std	Y+6, r1	; 0x06
    3f6a:	c8 8e       	std	Y+24, r12	; 0x18
    3f6c:	d9 8e       	std	Y+25, r13	; 0x19
    3f6e:	ea 8e       	std	Y+26, r14	; 0x1a
    3f70:	fb 8e       	std	Y+27, r15	; 0x1b
    3f72:	df 91       	pop	r29
    3f74:	cf 91       	pop	r28
    3f76:	1f 91       	pop	r17
    3f78:	0f 91       	pop	r16
    3f7a:	ff 90       	pop	r15
    3f7c:	ef 90       	pop	r14
    3f7e:	df 90       	pop	r13
    3f80:	cf 90       	pop	r12
    3f82:	bf 90       	pop	r11
    3f84:	af 90       	pop	r10
    3f86:	7f 90       	pop	r7
    3f88:	6f 90       	pop	r6
    3f8a:	5f 90       	pop	r5
    3f8c:	4f 90       	pop	r4
    3f8e:	08 95       	ret
    3f90:	a7 01       	movw	r20, r14
    3f92:	96 01       	movw	r18, r12
    3f94:	60 e0       	ldi	r22, 0x00	; 0
    3f96:	74 e2       	ldi	r23, 0x24	; 36
    3f98:	84 e7       	ldi	r24, 0x74	; 116
    3f9a:	99 e4       	ldi	r25, 0x49	; 73
    3f9c:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
    3fa0:	9f 77       	andi	r25, 0x7F	; 127
    3fa2:	0e 94 bf 39 	call	0x737e	; 0x737e <__fixunssfsi>
    3fa6:	6b 83       	std	Y+3, r22	; 0x03
    3fa8:	7c 83       	std	Y+4, r23	; 0x04
    3faa:	8d 83       	std	Y+5, r24	; 0x05
    3fac:	9e 83       	std	Y+6, r25	; 0x06
    3fae:	11 e0       	ldi	r17, 0x01	; 1
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	a9 01       	movw	r20, r18
    3fb6:	c7 01       	movw	r24, r14
    3fb8:	b6 01       	movw	r22, r12
    3fba:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__gesf2>
    3fbe:	18 16       	cp	r1, r24
    3fc0:	0c f0       	brlt	.+2      	; 0x3fc4 <AccelStepper::setSpeed(float)+0xe6>
    3fc2:	10 e0       	ldi	r17, 0x00	; 0
    3fc4:	1a 83       	std	Y+2, r17	; 0x02
    3fc6:	d1 cf       	rjmp	.-94     	; 0x3f6a <AccelStepper::setSpeed(float)+0x8c>

00003fc8 <AccelStepper::runSpeedToPosition()>:
_ZN12AccelStepper18runSpeedToPositionEv():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:647

boolean AccelStepper::runSpeedToPosition()
{
    3fc8:	0f 93       	push	r16
    3fca:	1f 93       	push	r17
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:648
    if (_targetPos == _currentPos)
    3fcc:	fc 01       	movw	r30, r24
    3fce:	04 89       	ldd	r16, Z+20	; 0x14
    3fd0:	15 89       	ldd	r17, Z+21	; 0x15
    3fd2:	26 89       	ldd	r18, Z+22	; 0x16
    3fd4:	37 89       	ldd	r19, Z+23	; 0x17
    3fd6:	40 89       	ldd	r20, Z+16	; 0x10
    3fd8:	51 89       	ldd	r21, Z+17	; 0x11
    3fda:	62 89       	ldd	r22, Z+18	; 0x12
    3fdc:	73 89       	ldd	r23, Z+19	; 0x13
    3fde:	04 17       	cp	r16, r20
    3fe0:	15 07       	cpc	r17, r21
    3fe2:	26 07       	cpc	r18, r22
    3fe4:	37 07       	cpc	r19, r23
    3fe6:	69 f0       	breq	.+26     	; 0x4002 <AccelStepper::runSpeedToPosition()+0x3a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:650
	return false;
    if (_targetPos >_currentPos)
    3fe8:	40 17       	cp	r20, r16
    3fea:	51 07       	cpc	r21, r17
    3fec:	62 07       	cpc	r22, r18
    3fee:	73 07       	cpc	r23, r19
    3ff0:	34 f4       	brge	.+12     	; 0x3ffe <AccelStepper::runSpeedToPosition()+0x36>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:651
	_direction = DIRECTION_CW;
    3ff2:	21 e0       	ldi	r18, 0x01	; 1
    3ff4:	22 83       	std	Z+2, r18	; 0x02
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
}
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:654
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    return runSpeed();
    3ffa:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <AccelStepper::runSpeed()>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:653
    if (_targetPos == _currentPos)
	return false;
    if (_targetPos >_currentPos)
	_direction = DIRECTION_CW;
    else
	_direction = DIRECTION_CCW;
    3ffe:	12 82       	std	Z+2, r1	; 0x02
    4000:	fa cf       	rjmp	.-12     	; 0x3ff6 <AccelStepper::runSpeedToPosition()+0x2e>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\AccelStepper\src/AccelStepper.cpp:655
    return runSpeed();
}
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	08 95       	ret

0000400a <u8x8_gpio_and_delay_arduino>:
u8x8_gpio_and_delay_arduino():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1909
  u8x8_SetPin(u8x8, U8X8_PIN_D7, d7);
  u8x8_SetPin(u8x8, U8X8_PIN_E, e1);
  u8x8_SetPin(u8x8, U8X8_PIN_CS, e2);
  u8x8_SetPin(u8x8, U8X8_PIN_DC, dc);
  u8x8_SetPin(u8x8, U8X8_PIN_RESET, reset);
}
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	8c 01       	movw	r16, r24
    4014:	c6 2f       	mov	r28, r22
    4016:	64 2f       	mov	r22, r20
    4018:	cc 32       	cpi	r28, 0x2C	; 44
    401a:	a8 f4       	brcc	.+42     	; 0x4046 <u8x8_gpio_and_delay_arduino+0x3c>
    401c:	ca 32       	cpi	r28, 0x2A	; 42
    401e:	d0 f5       	brcc	.+116    	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>
    4020:	c8 32       	cpi	r28, 0x28	; 40
    4022:	39 f1       	breq	.+78     	; 0x4072 <u8x8_gpio_and_delay_arduino+0x68>
    4024:	c9 32       	cpi	r28, 0x29	; 41
    4026:	e1 f1       	breq	.+120    	; 0x40a0 <u8x8_gpio_and_delay_arduino+0x96>
    4028:	80 e0       	ldi	r24, 0x00	; 0
    402a:	c0 34       	cpi	r28, 0x40	; 64
    402c:	a0 f1       	brcs	.+104    	; 0x4096 <u8x8_gpio_and_delay_arduino+0x8c>
    402e:	cf 73       	andi	r28, 0x3F	; 63
    4030:	f8 01       	movw	r30, r16
    4032:	ec 0f       	add	r30, r28
    4034:	f1 1d       	adc	r31, r1
    4036:	d6 8d       	ldd	r29, Z+30	; 0x1e
    4038:	df 3f       	cpi	r29, 0xFF	; 255
    403a:	61 f1       	breq	.+88     	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>
    403c:	c0 31       	cpi	r28, 0x10	; 16
    403e:	08 f0       	brcs	.+2      	; 0x4042 <u8x8_gpio_and_delay_arduino+0x38>
    4040:	42 c0       	rjmp	.+132    	; 0x40c6 <u8x8_gpio_and_delay_arduino+0xbc>
    4042:	8d 2f       	mov	r24, r29
    4044:	13 c0       	rjmp	.+38     	; 0x406c <u8x8_gpio_and_delay_arduino+0x62>
    4046:	cd 32       	cpi	r28, 0x2D	; 45
    4048:	89 f1       	breq	.+98     	; 0x40ac <u8x8_gpio_and_delay_arduino+0xa2>
    404a:	70 f3       	brcs	.-36     	; 0x4028 <u8x8_gpio_and_delay_arduino+0x1e>
    404c:	84 eb       	ldi	r24, 0xB4	; 180
    404e:	8c 0f       	add	r24, r28
    4050:	82 30       	cpi	r24, 0x02	; 2
    4052:	50 f7       	brcc	.-44     	; 0x4028 <u8x8_gpio_and_delay_arduino+0x1e>
    4054:	cf 73       	andi	r28, 0x3F	; 63
    4056:	c0 0f       	add	r28, r16
    4058:	d1 2f       	mov	r29, r17
    405a:	d1 1d       	adc	r29, r1
    405c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    405e:	41 11       	cpse	r20, r1
    4060:	2e c0       	rjmp	.+92     	; 0x40be <u8x8_gpio_and_delay_arduino+0xb4>
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    406c:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
    4070:	11 c0       	rjmp	.+34     	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>
    4072:	02 5e       	subi	r16, 0xE2	; 226
    4074:	1f 4f       	sbci	r17, 0xFF	; 255
    4076:	d0 e0       	ldi	r29, 0x00	; 0
    4078:	f8 01       	movw	r30, r16
    407a:	81 91       	ld	r24, Z+
    407c:	8f 01       	movw	r16, r30
    407e:	8f 3f       	cpi	r24, 0xFF	; 255
    4080:	31 f0       	breq	.+12     	; 0x408e <u8x8_gpio_and_delay_arduino+0x84>
    4082:	61 e0       	ldi	r22, 0x01	; 1
    4084:	d0 31       	cpi	r29, 0x10	; 16
    4086:	08 f0       	brcs	.+2      	; 0x408a <u8x8_gpio_and_delay_arduino+0x80>
    4088:	62 e0       	ldi	r22, 0x02	; 2
    408a:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    408e:	df 5f       	subi	r29, 0xFF	; 255
    4090:	d6 31       	cpi	r29, 0x16	; 22
    4092:	91 f7       	brne	.-28     	; 0x4078 <u8x8_gpio_and_delay_arduino+0x6e>
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	df 91       	pop	r29
    4098:	cf 91       	pop	r28
    409a:	1f 91       	pop	r17
    409c:	0f 91       	pop	r16
    409e:	08 95       	ret
    40a0:	70 e0       	ldi	r23, 0x00	; 0
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	80 e0       	ldi	r24, 0x00	; 0
    40a6:	0e 94 56 37 	call	0x6eac	; 0x6eac <delay>
    40aa:	f4 cf       	rjmp	.-24     	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>
    40ac:	85 e0       	ldi	r24, 0x05	; 5
    40ae:	90 e0       	ldi	r25, 0x00	; 0
    40b0:	43 30       	cpi	r20, 0x03	; 3
    40b2:	10 f0       	brcs	.+4      	; 0x40b8 <u8x8_gpio_and_delay_arduino+0xae>
    40b4:	82 e0       	ldi	r24, 0x02	; 2
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <delayMicroseconds>
    40bc:	eb cf       	rjmp	.-42     	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>
    40be:	62 e0       	ldi	r22, 0x02	; 2
    40c0:	0e 94 41 38 	call	0x7082	; 0x7082 <pinMode>
    40c4:	e7 cf       	rjmp	.-50     	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>
    40c6:	c0 31       	cpi	r28, 0x10	; 16
    40c8:	11 f4       	brne	.+4      	; 0x40ce <u8x8_gpio_and_delay_arduino+0xc4>
    40ca:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <yield>
    40ce:	8d 2f       	mov	r24, r29
    40d0:	0e 94 ab 38 	call	0x7156	; 0x7156 <digitalRead>
    40d4:	21 e0       	ldi	r18, 0x01	; 1
    40d6:	89 2b       	or	r24, r25
    40d8:	09 f4       	brne	.+2      	; 0x40dc <u8x8_gpio_and_delay_arduino+0xd2>
    40da:	20 e0       	ldi	r18, 0x00	; 0
    40dc:	f8 01       	movw	r30, r16
    40de:	21 8f       	std	Z+25, r18	; 0x19
    40e0:	d9 cf       	rjmp	.-78     	; 0x4094 <u8x8_gpio_and_delay_arduino+0x8a>

000040e2 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>:
_Z18u8x8_SetPin_HW_I2CP11u8x8_structhhh():
    40e2:	fc 01       	movw	r30, r24
    40e4:	61 a7       	std	Z+41, r22	; 0x29
    40e6:	42 a7       	std	Z+42, r20	; 0x2a
    40e8:	23 a7       	std	Z+43, r18	; 0x2b
    40ea:	08 95       	ret

000040ec <u8x8_byte_arduino_hw_i2c>:
u8x8_byte_arduino_hw_i2c():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1333

/*=============================================*/
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    40ec:	cf 93       	push	r28
    40ee:	df 93       	push	r29
    40f0:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    40f2:	68 31       	cpi	r22, 0x18	; 24
    40f4:	89 f1       	breq	.+98     	; 0x4158 <u8x8_byte_arduino_hw_i2c+0x6c>
    40f6:	30 f4       	brcc	.+12     	; 0x4104 <u8x8_byte_arduino_hw_i2c+0x18>
    40f8:	64 31       	cpi	r22, 0x14	; 20
    40fa:	99 f0       	breq	.+38     	; 0x4122 <u8x8_byte_arduino_hw_i2c+0x36>
    40fc:	67 31       	cpi	r22, 0x17	; 23
    40fe:	51 f0       	breq	.+20     	; 0x4114 <u8x8_byte_arduino_hw_i2c+0x28>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1375
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
      break;
    default:
      return 0;
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	05 c0       	rjmp	.+10     	; 0x410e <u8x8_byte_arduino_hw_i2c+0x22>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    4104:	69 31       	cpi	r22, 0x19	; 25
    4106:	c9 f1       	breq	.+114    	; 0x417a <u8x8_byte_arduino_hw_i2c+0x8e>
    4108:	60 32       	cpi	r22, 0x20	; 32
    410a:	d1 f7       	brne	.-12     	; 0x4100 <u8x8_byte_arduino_hw_i2c+0x14>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1378
      break;
    default:
      return 0;
  }
#endif
  return 1;
    410c:	81 e0       	ldi	r24, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1379
}
    410e:	df 91       	pop	r29
    4110:	cf 91       	pop	r28
    4112:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1338
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
    4114:	50 e0       	ldi	r21, 0x00	; 0
    4116:	b9 01       	movw	r22, r18
    4118:	8f e1       	ldi	r24, 0x1F	; 31
    411a:	94 e0       	ldi	r25, 0x04	; 4
    411c:	0e 94 15 2c 	call	0x582a	; 0x582a <TwoWire::write(unsigned char const*, unsigned int)>
    4120:	f5 cf       	rjmp	.-22     	; 0x410c <u8x8_byte_arduino_hw_i2c+0x20>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1341
      break;
    case U8X8_MSG_BYTE_INIT:
      if ( u8x8->bus_clock == 0 ) 	/* issue 769 */
    4122:	8c 85       	ldd	r24, Y+12	; 0x0c
    4124:	9d 85       	ldd	r25, Y+13	; 0x0d
    4126:	ae 85       	ldd	r26, Y+14	; 0x0e
    4128:	bf 85       	ldd	r27, Y+15	; 0x0f
    412a:	89 2b       	or	r24, r25
    412c:	8a 2b       	or	r24, r26
    412e:	8b 2b       	or	r24, r27
    4130:	71 f4       	brne	.+28     	; 0x414e <u8x8_byte_arduino_hw_i2c+0x62>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1342
	u8x8->bus_clock = u8x8->display_info->i2c_bus_clock_100kHz * 100000UL;
    4132:	e8 81       	ld	r30, Y
    4134:	f9 81       	ldd	r31, Y+1	; 0x01
    4136:	a5 85       	ldd	r26, Z+13	; 0x0d
    4138:	b0 e0       	ldi	r27, 0x00	; 0
    413a:	20 ea       	ldi	r18, 0xA0	; 160
    413c:	36 e8       	ldi	r19, 0x86	; 134
    413e:	41 e0       	ldi	r20, 0x01	; 1
    4140:	50 e0       	ldi	r21, 0x00	; 0
    4142:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__muluhisi3>
    4146:	6c 87       	std	Y+12, r22	; 0x0c
    4148:	7d 87       	std	Y+13, r23	; 0x0d
    414a:	8e 87       	std	Y+14, r24	; 0x0e
    414c:	9f 87       	std	Y+15, r25	; 0x0f
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1355
      else
      {
	Wire.begin();
      }
#else
      Wire.begin();
    414e:	8f e1       	ldi	r24, 0x1F	; 31
    4150:	94 e0       	ldi	r25, 0x04	; 4
    4152:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <TwoWire::begin()>
    4156:	da cf       	rjmp	.-76     	; 0x410c <u8x8_byte_arduino_hw_i2c+0x20>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1366
#if ARDUINO >= 10600
      /* not sure when the setClock function was introduced, but it is there since 1.6.0 */
      /* if there is any error with Wire.setClock() just remove this function call by */
      /* defining U8X8_DO_NOT_SET_WIRE_CLOCK */
#ifndef U8X8_DO_NOT_SET_WIRE_CLOCK
      Wire.setClock(u8x8->bus_clock);
    4158:	4c 85       	ldd	r20, Y+12	; 0x0c
    415a:	5d 85       	ldd	r21, Y+13	; 0x0d
    415c:	6e 85       	ldd	r22, Y+14	; 0x0e
    415e:	7f 85       	ldd	r23, Y+15	; 0x0f
    4160:	8f e1       	ldi	r24, 0x1F	; 31
    4162:	94 e0       	ldi	r25, 0x04	; 4
    4164:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <TwoWire::setClock(unsigned long)>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1369
#endif 
#endif
      Wire.beginTransmission(u8x8_GetI2CAddress(u8x8)>>1);
    4168:	6e 89       	ldd	r22, Y+22	; 0x16
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	75 95       	asr	r23
    416e:	67 95       	ror	r22
    4170:	8f e1       	ldi	r24, 0x1F	; 31
    4172:	94 e0       	ldi	r25, 0x04	; 4
    4174:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <TwoWire::beginTransmission(int)>
    4178:	c9 cf       	rjmp	.-110    	; 0x410c <u8x8_byte_arduino_hw_i2c+0x20>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src/U8x8lib.cpp:1372
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
    417a:	8f e1       	ldi	r24, 0x1F	; 31
    417c:	94 e0       	ldi	r25, 0x04	; 4
    417e:	0e 94 23 2d 	call	0x5a46	; 0x5a46 <TwoWire::endTransmission()>
    4182:	c4 cf       	rjmp	.-120    	; 0x410c <u8x8_byte_arduino_hw_i2c+0x20>

00004184 <u8g2_DrawBox>:
u8g2_DrawBox():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:43
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    4184:	8f 92       	push	r8
    4186:	9f 92       	push	r9
    4188:	af 92       	push	r10
    418a:	bf 92       	push	r11
    418c:	cf 92       	push	r12
    418e:	df 92       	push	r13
    4190:	ef 92       	push	r14
    4192:	ff 92       	push	r15
    4194:	0f 93       	push	r16
    4196:	1f 93       	push	r17
    4198:	cf 93       	push	r28
    419a:	df 93       	push	r29
    419c:	5c 01       	movw	r10, r24
    419e:	6b 01       	movw	r12, r22
    41a0:	ea 01       	movw	r28, r20
    41a2:	49 01       	movw	r8, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:45
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    41a4:	7a 01       	movw	r14, r20
    41a6:	e0 0e       	add	r14, r16
    41a8:	f1 1e       	adc	r15, r17
    41aa:	9b 01       	movw	r18, r22
    41ac:	28 0d       	add	r18, r8
    41ae:	39 1d       	adc	r19, r9
    41b0:	87 01       	movw	r16, r14
    41b2:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <u8g2_IsIntersection>
    41b6:	81 11       	cpse	r24, r1
    41b8:	15 c0       	rjmp	.+42     	; 0x41e4 <u8g2_DrawBox+0x60>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:54
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	df 90       	pop	r13
    41c8:	cf 90       	pop	r12
    41ca:	bf 90       	pop	r11
    41cc:	af 90       	pop	r10
    41ce:	9f 90       	pop	r9
    41d0:	8f 90       	pop	r8
    41d2:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:50
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    41d4:	00 e0       	ldi	r16, 0x00	; 0
    41d6:	94 01       	movw	r18, r8
    41d8:	ae 01       	movw	r20, r28
    41da:	b6 01       	movw	r22, r12
    41dc:	c5 01       	movw	r24, r10
    41de:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:51
    y++;    
    41e2:	21 96       	adiw	r28, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:48
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    41e4:	ec 16       	cp	r14, r28
    41e6:	fd 06       	cpc	r15, r29
    41e8:	a9 f7       	brne	.-22     	; 0x41d4 <u8g2_DrawBox+0x50>
    41ea:	e7 cf       	rjmp	.-50     	; 0x41ba <u8g2_DrawBox+0x36>

000041ec <u8g2_DrawFrame>:
u8g2_DrawFrame():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:62
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    41ec:	6f 92       	push	r6
    41ee:	7f 92       	push	r7
    41f0:	8f 92       	push	r8
    41f2:	9f 92       	push	r9
    41f4:	af 92       	push	r10
    41f6:	bf 92       	push	r11
    41f8:	cf 92       	push	r12
    41fa:	df 92       	push	r13
    41fc:	ef 92       	push	r14
    41fe:	ff 92       	push	r15
    4200:	0f 93       	push	r16
    4202:	1f 93       	push	r17
    4204:	cf 93       	push	r28
    4206:	df 93       	push	r29
    4208:	6c 01       	movw	r12, r24
    420a:	5b 01       	movw	r10, r22
    420c:	ea 01       	movw	r28, r20
    420e:	49 01       	movw	r8, r18
    4210:	78 01       	movw	r14, r16
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:66
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    4212:	3b 01       	movw	r6, r22
    4214:	62 0e       	add	r6, r18
    4216:	73 1e       	adc	r7, r19
    4218:	8a 01       	movw	r16, r20
    421a:	0e 0d       	add	r16, r14
    421c:	1f 1d       	adc	r17, r15
    421e:	93 01       	movw	r18, r6
    4220:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <u8g2_IsIntersection>
    4224:	88 23       	and	r24, r24
    4226:	51 f1       	breq	.+84     	; 0x427c <u8g2_DrawFrame+0x90>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:70
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    4228:	00 e0       	ldi	r16, 0x00	; 0
    422a:	94 01       	movw	r18, r8
    422c:	ae 01       	movw	r20, r28
    422e:	b5 01       	movw	r22, r10
    4230:	c6 01       	movw	r24, r12
    4232:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:71
  if (h >= 2) {
    4236:	82 e0       	ldi	r24, 0x02	; 2
    4238:	e8 16       	cp	r14, r24
    423a:	f1 04       	cpc	r15, r1
    423c:	f8 f0       	brcs	.+62     	; 0x427c <u8g2_DrawFrame+0x90>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:72
    h-=2;
    423e:	82 e0       	ldi	r24, 0x02	; 2
    4240:	e8 1a       	sub	r14, r24
    4242:	f1 08       	sbc	r15, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:73
    y++;
    4244:	21 96       	adiw	r28, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:74
    if (h > 0) {
    4246:	e1 14       	cp	r14, r1
    4248:	f1 04       	cpc	r15, r1
    424a:	89 f0       	breq	.+34     	; 0x426e <u8g2_DrawFrame+0x82>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:75
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    424c:	01 e0       	ldi	r16, 0x01	; 1
    424e:	97 01       	movw	r18, r14
    4250:	ae 01       	movw	r20, r28
    4252:	b5 01       	movw	r22, r10
    4254:	c6 01       	movw	r24, r12
    4256:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:77
      x+=w;
      x--;
    425a:	b3 01       	movw	r22, r6
    425c:	61 50       	subi	r22, 0x01	; 1
    425e:	71 09       	sbc	r23, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:78
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    4260:	97 01       	movw	r18, r14
    4262:	ae 01       	movw	r20, r28
    4264:	c6 01       	movw	r24, r12
    4266:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:79
      y+=h;
    426a:	ce 0d       	add	r28, r14
    426c:	df 1d       	adc	r29, r15
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:81
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    426e:	00 e0       	ldi	r16, 0x00	; 0
    4270:	94 01       	movw	r18, r8
    4272:	ae 01       	movw	r20, r28
    4274:	b5 01       	movw	r22, r10
    4276:	c6 01       	movw	r24, r12
    4278:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_box.c:83
  }
}
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	ff 90       	pop	r15
    4286:	ef 90       	pop	r14
    4288:	df 90       	pop	r13
    428a:	cf 90       	pop	r12
    428c:	bf 90       	pop	r11
    428e:	af 90       	pop	r10
    4290:	9f 90       	pop	r9
    4292:	8f 90       	pop	r8
    4294:	7f 90       	pop	r7
    4296:	6f 90       	pop	r6
    4298:	08 95       	ret

0000429a <u8g2_send_buffer>:
u8g2_send_buffer():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:96

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    429a:	af 92       	push	r10
    429c:	bf 92       	push	r11
    429e:	cf 92       	push	r12
    42a0:	df 92       	push	r13
    42a2:	ef 92       	push	r14
    42a4:	ff 92       	push	r15
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	cf 93       	push	r28
    42ac:	df 93       	push	r29
    42ae:	ec 01       	movw	r28, r24
    42b0:	aa ac       	ldd	r10, Y+58	; 0x3a
    42b2:	eb ac       	ldd	r14, Y+59	; 0x3b
    42b4:	e8 81       	ld	r30, Y
    42b6:	f9 81       	ldd	r31, Y+1	; 0x01
    42b8:	b1 88       	ldd	r11, Z+17	; 0x11
    42ba:	fe 2c       	mov	r15, r14
    42bc:	d1 2c       	mov	r13, r1
    42be:	c1 2c       	mov	r12, r1
u8g2_send_tile_row():
    42c0:	e8 81       	ld	r30, Y
    42c2:	f9 81       	ldd	r31, Y+1	; 0x01
    42c4:	20 89       	ldd	r18, Z+16	; 0x10
    42c6:	08 ad       	ldd	r16, Y+56	; 0x38
    42c8:	19 ad       	ldd	r17, Y+57	; 0x39
    42ca:	88 e0       	ldi	r24, 0x08	; 8
    42cc:	28 9f       	mul	r18, r24
    42ce:	a0 01       	movw	r20, r0
    42d0:	11 24       	eor	r1, r1
    42d2:	4c 9d       	mul	r20, r12
    42d4:	c0 01       	movw	r24, r0
    42d6:	4d 9d       	mul	r20, r13
    42d8:	90 0d       	add	r25, r0
    42da:	5c 9d       	mul	r21, r12
    42dc:	90 0d       	add	r25, r0
    42de:	11 24       	eor	r1, r1
    42e0:	08 0f       	add	r16, r24
    42e2:	19 1f       	adc	r17, r25
    42e4:	4f 2d       	mov	r20, r15
    42e6:	60 e0       	ldi	r22, 0x00	; 0
    42e8:	ce 01       	movw	r24, r28
    42ea:	0e 94 25 2b 	call	0x564a	; 0x564a <u8x8_DrawTile>
u8g2_send_buffer():
    42ee:	f3 94       	inc	r15
    42f0:	8f 2d       	mov	r24, r15
    42f2:	8e 19       	sub	r24, r14
    42f4:	8a 15       	cp	r24, r10
    42f6:	28 f4       	brcc	.+10     	; 0x4302 <u8g2_send_buffer+0x68>
    42f8:	8f ef       	ldi	r24, 0xFF	; 255
    42fa:	c8 1a       	sub	r12, r24
    42fc:	d8 0a       	sbc	r13, r24
    42fe:	fb 14       	cp	r15, r11
    4300:	f8 f2       	brcs	.-66     	; 0x42c0 <u8g2_send_buffer+0x26>
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	ff 90       	pop	r15
    430c:	ef 90       	pop	r14
    430e:	df 90       	pop	r13
    4310:	cf 90       	pop	r12
    4312:	bf 90       	pop	r11
    4314:	af 90       	pop	r10
    4316:	08 95       	ret

00004318 <u8g2_ClearBuffer>:
u8g2_ClearBuffer():
    4318:	fc 01       	movw	r30, r24
    431a:	a0 81       	ld	r26, Z
    431c:	b1 81       	ldd	r27, Z+1	; 0x01
    431e:	50 96       	adiw	r26, 0x10	; 16
    4320:	2c 91       	ld	r18, X
    4322:	82 ad       	ldd	r24, Z+58	; 0x3a
    4324:	38 e0       	ldi	r19, 0x08	; 8
    4326:	83 9f       	mul	r24, r19
    4328:	c0 01       	movw	r24, r0
    432a:	11 24       	eor	r1, r1
    432c:	28 9f       	mul	r18, r24
    432e:	a0 01       	movw	r20, r0
    4330:	29 9f       	mul	r18, r25
    4332:	50 0d       	add	r21, r0
    4334:	11 24       	eor	r1, r1
    4336:	70 e0       	ldi	r23, 0x00	; 0
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	80 ad       	ldd	r24, Z+56	; 0x38
    433c:	91 ad       	ldd	r25, Z+57	; 0x39
    433e:	0c 94 bc 3d 	jmp	0x7b78	; 0x7b78 <memset>

00004342 <u8g2_SetBufferCurrTileRow>:
u8g2_SetBufferCurrTileRow():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:101
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    4342:	cf 93       	push	r28
    4344:	df 93       	push	r29
    4346:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:102
  u8g2->tile_curr_row = row;
    4348:	6b af       	std	Y+59, r22	; 0x3b
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:103
  u8g2->cb->update_dimension(u8g2);
    434a:	ee a9       	ldd	r30, Y+54	; 0x36
    434c:	ff a9       	ldd	r31, Y+55	; 0x37
    434e:	01 90       	ld	r0, Z+
    4350:	f0 81       	ld	r31, Z
    4352:	e0 2d       	mov	r30, r0
    4354:	09 95       	icall
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
  u8g2->cb->update_page_win(u8g2);
    4356:	ee a9       	ldd	r30, Y+54	; 0x36
    4358:	ff a9       	ldd	r31, Y+55	; 0x37
    435a:	02 80       	ldd	r0, Z+2	; 0x02
    435c:	f3 81       	ldd	r31, Z+3	; 0x03
    435e:	e0 2d       	mov	r30, r0
    4360:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:105
}
    4362:	df 91       	pop	r29
    4364:	cf 91       	pop	r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
    4366:	09 94       	ijmp

00004368 <u8g2_FirstPage>:
u8g2_FirstPage():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:108
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    4368:	cf 93       	push	r28
    436a:	df 93       	push	r29
    436c:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:109
  if ( u8g2->is_auto_page_clear )
    436e:	fc 01       	movw	r30, r24
    4370:	e5 57       	subi	r30, 0x75	; 117
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	80 81       	ld	r24, Z
    4376:	88 23       	and	r24, r24
    4378:	19 f0       	breq	.+6      	; 0x4380 <u8g2_FirstPage+0x18>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:111
  {
    u8g2_ClearBuffer(u8g2);
    437a:	ce 01       	movw	r24, r28
    437c:	0e 94 8c 21 	call	0x4318	; 0x4318 <u8g2_ClearBuffer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:114
}
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    4388:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <u8g2_SetBufferCurrTileRow>

0000438c <u8g2_NextPage>:
u8g2_NextPage():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:117
}

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    438c:	1f 93       	push	r17
    438e:	cf 93       	push	r28
    4390:	df 93       	push	r29
    4392:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:119
  uint8_t row;
  u8g2_send_buffer(u8g2);
    4394:	0e 94 4d 21 	call	0x429a	; 0x429a <u8g2_send_buffer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:120
  row = u8g2->tile_curr_row;
    4398:	1b ad       	ldd	r17, Y+59	; 0x3b
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:121
  row += u8g2->tile_buf_height;
    439a:	8a ad       	ldd	r24, Y+58	; 0x3a
    439c:	18 0f       	add	r17, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:122
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    439e:	e8 81       	ld	r30, Y
    43a0:	f9 81       	ldd	r31, Y+1	; 0x01
    43a2:	81 89       	ldd	r24, Z+17	; 0x11
    43a4:	18 17       	cp	r17, r24
    43a6:	40 f0       	brcs	.+16     	; 0x43b8 <u8g2_NextPage+0x2c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:124
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    43a8:	ce 01       	movw	r24, r28
    43aa:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <u8x8_RefreshDisplay>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:125
    return 0;
    43ae:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:133
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
    43b0:	df 91       	pop	r29
    43b2:	cf 91       	pop	r28
    43b4:	1f 91       	pop	r17
    43b6:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:127
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    43b8:	fe 01       	movw	r30, r28
    43ba:	e5 57       	subi	r30, 0x75	; 117
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	80 81       	ld	r24, Z
    43c0:	88 23       	and	r24, r24
    43c2:	19 f0       	breq	.+6      	; 0x43ca <u8g2_NextPage+0x3e>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:129
  {
    u8g2_ClearBuffer(u8g2);
    43c4:	ce 01       	movw	r24, r28
    43c6:	0e 94 8c 21 	call	0x4318	; 0x4318 <u8g2_ClearBuffer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:131
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    43ca:	61 2f       	mov	r22, r17
    43cc:	ce 01       	movw	r24, r28
    43ce:	0e 94 a1 21 	call	0x4342	; 0x4342 <u8g2_SetBufferCurrTileRow>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:132
  return 1;
    43d2:	81 e0       	ldi	r24, 0x01	; 1
    43d4:	ed cf       	rjmp	.-38     	; 0x43b0 <u8g2_NextPage+0x24>

000043d6 <u8g2_ClearDisplay>:
u8g2_ClearDisplay():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:40
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
    43d6:	cf 93       	push	r28
    43d8:	df 93       	push	r29
    43da:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:41
  u8g2_FirstPage(u8g2);
    43dc:	0e 94 b4 21 	call	0x4368	; 0x4368 <u8g2_FirstPage>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:43 (discriminator 1)
  do {
  } while ( u8g2_NextPage(u8g2) );
    43e0:	ce 01       	movw	r24, r28
    43e2:	0e 94 c6 21 	call	0x438c	; 0x438c <u8g2_NextPage>
    43e6:	81 11       	cpse	r24, r1
    43e8:	fb cf       	rjmp	.-10     	; 0x43e0 <u8g2_ClearDisplay+0xa>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:53
}
    43ee:	df 91       	pop	r29
    43f0:	cf 91       	pop	r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    43f2:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <u8g2_SetBufferCurrTileRow>

000043f6 <u8g2_m_16_8_2>:
u8g2_m_16_8_2():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:57
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 2;
  return 0;
  #else
  static uint8_t buf[256];
  *page_cnt = 2;
    43f6:	22 e0       	ldi	r18, 0x02	; 2
    43f8:	fc 01       	movw	r30, r24
    43fa:	20 83       	st	Z, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_memory.c:60
  return buf;
  #endif
}
    43fc:	8e e1       	ldi	r24, 0x1E	; 30
    43fe:	93 e0       	ldi	r25, 0x03	; 3
    4400:	08 95       	ret

00004402 <u8g2_Setup_sh1106_i2c_128x64_noname_2>:
u8g2_Setup_sh1106_i2c_128x64_noname_2():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:714
  buf = u8g2_m_16_8_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 2 */
void u8g2_Setup_sh1106_i2c_128x64_noname_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    4402:	cf 92       	push	r12
    4404:	df 92       	push	r13
    4406:	ef 92       	push	r14
    4408:	ff 92       	push	r15
    440a:	0f 93       	push	r16
    440c:	1f 93       	push	r17
    440e:	cf 93       	push	r28
    4410:	df 93       	push	r29
    4412:	1f 92       	push	r1
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	7c 01       	movw	r14, r24
    441a:	6b 01       	movw	r12, r22
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:717
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    441c:	89 01       	movw	r16, r18
    441e:	9a 01       	movw	r18, r20
    4420:	47 ee       	ldi	r20, 0xE7	; 231
    4422:	59 e2       	ldi	r21, 0x29	; 41
    4424:	65 ec       	ldi	r22, 0xC5	; 197
    4426:	7a e2       	ldi	r23, 0x2A	; 42
    4428:	0e 94 92 2b 	call	0x5724	; 0x5724 <u8x8_Setup>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:718
  buf = u8g2_m_16_8_2(&tile_buf_height);
    442c:	ce 01       	movw	r24, r28
    442e:	01 96       	adiw	r24, 0x01	; 1
    4430:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <u8g2_m_16_8_2>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:719
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    4434:	86 01       	movw	r16, r12
    4436:	2b e7       	ldi	r18, 0x7B	; 123
    4438:	37 e2       	ldi	r19, 0x27	; 39
    443a:	49 81       	ldd	r20, Y+1	; 0x01
    443c:	bc 01       	movw	r22, r24
    443e:	c7 01       	movw	r24, r14
    4440:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <u8g2_SetupBuffer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_d_setup.c:720
}
    4444:	0f 90       	pop	r0
    4446:	df 91       	pop	r29
    4448:	cf 91       	pop	r28
    444a:	1f 91       	pop	r17
    444c:	0f 91       	pop	r16
    444e:	ff 90       	pop	r15
    4450:	ef 90       	pop	r14
    4452:	df 90       	pop	r13
    4454:	cf 90       	pop	r12
    4456:	08 95       	ret

00004458 <u8g2_font_get_word>:
u8g2_font_get_word():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1275
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}
    4458:	fc 01       	movw	r30, r24
    445a:	e6 0f       	add	r30, r22
    445c:	f1 1d       	adc	r31, r1
    445e:	84 91       	lpm	r24, Z
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	98 2f       	mov	r25, r24
    4464:	88 27       	eor	r24, r24
    4466:	31 96       	adiw	r30, 0x01	; 1
    4468:	e4 91       	lpm	r30, Z
    446a:	8e 0f       	add	r24, r30
    446c:	91 1d       	adc	r25, r1
    446e:	08 95       	ret

00004470 <u8g2_font_calc_vref_font>:
u8g2_font_calc_vref_font():
    4470:	90 e0       	ldi	r25, 0x00	; 0
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	08 95       	ret

00004476 <u8g2_read_font_info>:
u8g2_read_font_info():
    4476:	0f 93       	push	r16
    4478:	1f 93       	push	r17
    447a:	cf 93       	push	r28
    447c:	df 93       	push	r29
    447e:	ec 01       	movw	r28, r24
    4480:	8b 01       	movw	r16, r22
u8g2_font_get_byte():
    4482:	fb 01       	movw	r30, r22
    4484:	84 91       	lpm	r24, Z
u8g2_read_font_info():
    4486:	88 83       	st	Y, r24
u8g2_font_get_byte():
    4488:	31 96       	adiw	r30, 0x01	; 1
    448a:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    448c:	e9 83       	std	Y+1, r30	; 0x01
u8g2_font_get_byte():
    448e:	fb 01       	movw	r30, r22
    4490:	32 96       	adiw	r30, 0x02	; 2
    4492:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4494:	ea 83       	std	Y+2, r30	; 0x02
u8g2_font_get_byte():
    4496:	fb 01       	movw	r30, r22
    4498:	33 96       	adiw	r30, 0x03	; 3
    449a:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    449c:	eb 83       	std	Y+3, r30	; 0x03
u8g2_font_get_byte():
    449e:	fb 01       	movw	r30, r22
    44a0:	34 96       	adiw	r30, 0x04	; 4
    44a2:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44a4:	ec 83       	std	Y+4, r30	; 0x04
u8g2_font_get_byte():
    44a6:	fb 01       	movw	r30, r22
    44a8:	35 96       	adiw	r30, 0x05	; 5
    44aa:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44ac:	ed 83       	std	Y+5, r30	; 0x05
u8g2_font_get_byte():
    44ae:	fb 01       	movw	r30, r22
    44b0:	36 96       	adiw	r30, 0x06	; 6
    44b2:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44b4:	ee 83       	std	Y+6, r30	; 0x06
u8g2_font_get_byte():
    44b6:	fb 01       	movw	r30, r22
    44b8:	37 96       	adiw	r30, 0x07	; 7
    44ba:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44bc:	ef 83       	std	Y+7, r30	; 0x07
u8g2_font_get_byte():
    44be:	fb 01       	movw	r30, r22
    44c0:	38 96       	adiw	r30, 0x08	; 8
    44c2:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44c4:	e8 87       	std	Y+8, r30	; 0x08
u8g2_font_get_byte():
    44c6:	fb 01       	movw	r30, r22
    44c8:	39 96       	adiw	r30, 0x09	; 9
    44ca:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44cc:	e9 87       	std	Y+9, r30	; 0x09
u8g2_font_get_byte():
    44ce:	fb 01       	movw	r30, r22
    44d0:	3a 96       	adiw	r30, 0x0a	; 10
    44d2:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44d4:	ea 87       	std	Y+10, r30	; 0x0a
u8g2_font_get_byte():
    44d6:	fb 01       	movw	r30, r22
    44d8:	3b 96       	adiw	r30, 0x0b	; 11
    44da:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44dc:	eb 87       	std	Y+11, r30	; 0x0b
u8g2_font_get_byte():
    44de:	fb 01       	movw	r30, r22
    44e0:	3c 96       	adiw	r30, 0x0c	; 12
    44e2:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44e4:	ec 87       	std	Y+12, r30	; 0x0c
u8g2_font_get_byte():
    44e6:	fb 01       	movw	r30, r22
    44e8:	3d 96       	adiw	r30, 0x0d	; 13
    44ea:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44ec:	ed 87       	std	Y+13, r30	; 0x0d
u8g2_font_get_byte():
    44ee:	fb 01       	movw	r30, r22
    44f0:	3e 96       	adiw	r30, 0x0e	; 14
    44f2:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44f4:	ee 87       	std	Y+14, r30	; 0x0e
u8g2_font_get_byte():
    44f6:	fb 01       	movw	r30, r22
    44f8:	3f 96       	adiw	r30, 0x0f	; 15
    44fa:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    44fc:	ef 87       	std	Y+15, r30	; 0x0f
u8g2_font_get_byte():
    44fe:	fb 01       	movw	r30, r22
    4500:	70 96       	adiw	r30, 0x10	; 16
    4502:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    4504:	e8 8b       	std	Y+16, r30	; 0x10
    4506:	61 e1       	ldi	r22, 0x11	; 17
    4508:	c8 01       	movw	r24, r16
    450a:	0e 94 2c 22 	call	0x4458	; 0x4458 <u8g2_font_get_word>
    450e:	9a 8b       	std	Y+18, r25	; 0x12
    4510:	89 8b       	std	Y+17, r24	; 0x11
    4512:	63 e1       	ldi	r22, 0x13	; 19
    4514:	c8 01       	movw	r24, r16
    4516:	0e 94 2c 22 	call	0x4458	; 0x4458 <u8g2_font_get_word>
    451a:	9c 8b       	std	Y+20, r25	; 0x14
    451c:	8b 8b       	std	Y+19, r24	; 0x13
    451e:	65 e1       	ldi	r22, 0x15	; 21
    4520:	c8 01       	movw	r24, r16
    4522:	0e 94 2c 22 	call	0x4458	; 0x4458 <u8g2_font_get_word>
    4526:	9e 8b       	std	Y+22, r25	; 0x16
    4528:	8d 8b       	std	Y+21, r24	; 0x15
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	1f 91       	pop	r17
    4530:	0f 91       	pop	r16
    4532:	08 95       	ret

00004534 <u8g2_font_decode_get_unsigned_bits>:
u8g2_font_decode_get_unsigned_bits():
    4534:	dc 01       	movw	r26, r24
    4536:	1a 96       	adiw	r26, 0x0a	; 10
    4538:	4c 91       	ld	r20, X
    453a:	1a 97       	sbiw	r26, 0x0a	; 10
    453c:	ed 91       	ld	r30, X+
    453e:	fc 91       	ld	r31, X
    4540:	11 97       	sbiw	r26, 0x01	; 1
    4542:	24 91       	lpm	r18, Z
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	04 2e       	mov	r0, r20
    4548:	02 c0       	rjmp	.+4      	; 0x454e <u8g2_font_decode_get_unsigned_bits+0x1a>
    454a:	35 95       	asr	r19
    454c:	27 95       	ror	r18
    454e:	0a 94       	dec	r0
    4550:	e2 f7       	brpl	.-8      	; 0x454a <u8g2_font_decode_get_unsigned_bits+0x16>
    4552:	84 2f       	mov	r24, r20
    4554:	86 0f       	add	r24, r22
    4556:	88 30       	cpi	r24, 0x08	; 8
    4558:	68 f0       	brcs	.+26     	; 0x4574 <u8g2_font_decode_get_unsigned_bits+0x40>
    455a:	31 96       	adiw	r30, 0x01	; 1
    455c:	11 96       	adiw	r26, 0x01	; 1
    455e:	fc 93       	st	X, r31
    4560:	ee 93       	st	-X, r30
    4562:	e4 91       	lpm	r30, Z
    4564:	98 e0       	ldi	r25, 0x08	; 8
    4566:	94 1b       	sub	r25, r20
    4568:	01 c0       	rjmp	.+2      	; 0x456c <u8g2_font_decode_get_unsigned_bits+0x38>
    456a:	ee 0f       	add	r30, r30
    456c:	9a 95       	dec	r25
    456e:	ea f7       	brpl	.-6      	; 0x456a <u8g2_font_decode_get_unsigned_bits+0x36>
    4570:	2e 2b       	or	r18, r30
    4572:	88 50       	subi	r24, 0x08	; 8
    4574:	1a 96       	adiw	r26, 0x0a	; 10
    4576:	8c 93       	st	X, r24
    4578:	8f ef       	ldi	r24, 0xFF	; 255
    457a:	9f ef       	ldi	r25, 0xFF	; 255
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <u8g2_font_decode_get_unsigned_bits+0x4c>
    457e:	88 0f       	add	r24, r24
    4580:	6a 95       	dec	r22
    4582:	ea f7       	brpl	.-6      	; 0x457e <u8g2_font_decode_get_unsigned_bits+0x4a>
    4584:	80 95       	com	r24
    4586:	82 23       	and	r24, r18
    4588:	08 95       	ret

0000458a <u8g2_font_setup_decode>:
u8g2_font_setup_decode():
    458a:	0f 93       	push	r16
    458c:	1f 93       	push	r17
    458e:	cf 93       	push	r28
    4590:	df 93       	push	r29
    4592:	8c 01       	movw	r16, r24
    4594:	ec 01       	movw	r28, r24
    4596:	c2 5a       	subi	r28, 0xA2	; 162
    4598:	df 4f       	sbci	r29, 0xFF	; 255
    459a:	79 83       	std	Y+1, r23	; 0x01
    459c:	68 83       	st	Y, r22
    459e:	1a 86       	std	Y+10, r1	; 0x0a
    45a0:	fc 01       	movw	r30, r24
    45a2:	ef 58       	subi	r30, 0x8F	; 143
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	60 81       	ld	r22, Z
    45a8:	ce 01       	movw	r24, r28
    45aa:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g2_font_decode_get_unsigned_bits>
    45ae:	88 87       	std	Y+8, r24	; 0x08
    45b0:	f8 01       	movw	r30, r16
    45b2:	ee 58       	subi	r30, 0x8E	; 142
    45b4:	ff 4f       	sbci	r31, 0xFF	; 255
    45b6:	60 81       	ld	r22, Z
    45b8:	ce 01       	movw	r24, r28
    45ba:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g2_font_decode_get_unsigned_bits>
    45be:	89 87       	std	Y+9, r24	; 0x09
    45c0:	f8 01       	movw	r30, r16
    45c2:	e6 57       	subi	r30, 0x76	; 118
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	90 81       	ld	r25, Z
    45c8:	9c 87       	std	Y+12, r25	; 0x0c
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	91 11       	cpse	r25, r1
    45ce:	80 e0       	ldi	r24, 0x00	; 0
    45d0:	8d 87       	std	Y+13, r24	; 0x0d
    45d2:	df 91       	pop	r29
    45d4:	cf 91       	pop	r28
    45d6:	1f 91       	pop	r17
    45d8:	0f 91       	pop	r16
    45da:	08 95       	ret

000045dc <u8g2_font_decode_get_signed_bits>:
u8g2_font_decode_get_signed_bits():
    45dc:	cf 93       	push	r28
    45de:	c6 2f       	mov	r28, r22
    45e0:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g2_font_decode_get_unsigned_bits>
    45e4:	c1 50       	subi	r28, 0x01	; 1
    45e6:	21 e0       	ldi	r18, 0x01	; 1
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	01 c0       	rjmp	.+2      	; 0x45ee <u8g2_font_decode_get_signed_bits+0x12>
    45ec:	22 0f       	add	r18, r18
    45ee:	ca 95       	dec	r28
    45f0:	ea f7       	brpl	.-6      	; 0x45ec <u8g2_font_decode_get_signed_bits+0x10>
    45f2:	82 1b       	sub	r24, r18
    45f4:	cf 91       	pop	r28
    45f6:	08 95       	ret

000045f8 <u8g2_add_vector_y>:
u8g2_add_vector_y():
    45f8:	21 30       	cpi	r18, 0x01	; 1
    45fa:	69 f0       	breq	.+26     	; 0x4616 <u8g2_add_vector_y+0x1e>
    45fc:	38 f0       	brcs	.+14     	; 0x460c <u8g2_add_vector_y+0x14>
    45fe:	22 30       	cpi	r18, 0x02	; 2
    4600:	79 f0       	breq	.+30     	; 0x4620 <u8g2_add_vector_y+0x28>
    4602:	86 1b       	sub	r24, r22
    4604:	91 09       	sbc	r25, r1
    4606:	67 fd       	sbrc	r22, 7
    4608:	93 95       	inc	r25
    460a:	08 95       	ret
    460c:	84 0f       	add	r24, r20
    460e:	91 1d       	adc	r25, r1
    4610:	47 fd       	sbrc	r20, 7
    4612:	9a 95       	dec	r25
    4614:	08 95       	ret
    4616:	86 0f       	add	r24, r22
    4618:	91 1d       	adc	r25, r1
    461a:	67 fd       	sbrc	r22, 7
    461c:	9a 95       	dec	r25
    461e:	08 95       	ret
    4620:	84 1b       	sub	r24, r20
    4622:	91 09       	sbc	r25, r1
    4624:	47 fd       	sbrc	r20, 7
    4626:	93 95       	inc	r25
    4628:	08 95       	ret

0000462a <u8g2_add_vector_x>:
u8g2_add_vector_x():
    462a:	21 30       	cpi	r18, 0x01	; 1
    462c:	69 f0       	breq	.+26     	; 0x4648 <u8g2_add_vector_x+0x1e>
    462e:	38 f0       	brcs	.+14     	; 0x463e <u8g2_add_vector_x+0x14>
    4630:	22 30       	cpi	r18, 0x02	; 2
    4632:	79 f0       	breq	.+30     	; 0x4652 <u8g2_add_vector_x+0x28>
    4634:	84 0f       	add	r24, r20
    4636:	91 1d       	adc	r25, r1
    4638:	47 fd       	sbrc	r20, 7
    463a:	9a 95       	dec	r25
    463c:	08 95       	ret
    463e:	86 0f       	add	r24, r22
    4640:	91 1d       	adc	r25, r1
    4642:	67 fd       	sbrc	r22, 7
    4644:	9a 95       	dec	r25
    4646:	08 95       	ret
    4648:	84 1b       	sub	r24, r20
    464a:	91 09       	sbc	r25, r1
    464c:	47 fd       	sbrc	r20, 7
    464e:	93 95       	inc	r25
    4650:	08 95       	ret
    4652:	86 1b       	sub	r24, r22
    4654:	91 09       	sbc	r25, r1
    4656:	67 fd       	sbrc	r22, 7
    4658:	93 95       	inc	r25
    465a:	08 95       	ret

0000465c <u8g2_font_decode_len>:
u8g2_font_decode_len():
    465c:	3f 92       	push	r3
    465e:	4f 92       	push	r4
    4660:	5f 92       	push	r5
    4662:	6f 92       	push	r6
    4664:	7f 92       	push	r7
    4666:	8f 92       	push	r8
    4668:	9f 92       	push	r9
    466a:	af 92       	push	r10
    466c:	bf 92       	push	r11
    466e:	cf 92       	push	r12
    4670:	df 92       	push	r13
    4672:	ef 92       	push	r14
    4674:	ff 92       	push	r15
    4676:	0f 93       	push	r16
    4678:	1f 93       	push	r17
    467a:	cf 93       	push	r28
    467c:	df 93       	push	r29
    467e:	7c 01       	movw	r14, r24
    4680:	16 2f       	mov	r17, r22
    4682:	44 2e       	mov	r4, r20
    4684:	ec 01       	movw	r28, r24
    4686:	c2 5a       	subi	r28, 0xA2	; 162
    4688:	df 4f       	sbci	r29, 0xFF	; 255
    468a:	5e 80       	ldd	r5, Y+6	; 0x06
    468c:	6f 80       	ldd	r6, Y+7	; 0x07
    468e:	6c 01       	movw	r12, r24
    4690:	8a e8       	ldi	r24, 0x8A	; 138
    4692:	c8 0e       	add	r12, r24
    4694:	d1 1c       	adc	r13, r1
    4696:	78 84       	ldd	r7, Y+8	; 0x08
    4698:	75 18       	sub	r7, r5
    469a:	31 2e       	mov	r3, r17
    469c:	71 16       	cp	r7, r17
    469e:	08 f4       	brcc	.+2      	; 0x46a2 <u8g2_font_decode_len+0x46>
    46a0:	37 2c       	mov	r3, r7
    46a2:	8c 80       	ldd	r8, Y+4	; 0x04
    46a4:	9d 80       	ldd	r9, Y+5	; 0x05
    46a6:	0e 85       	ldd	r16, Y+14	; 0x0e
    46a8:	20 2f       	mov	r18, r16
    46aa:	46 2d       	mov	r20, r6
    46ac:	65 2d       	mov	r22, r5
    46ae:	8a 81       	ldd	r24, Y+2	; 0x02
    46b0:	9b 81       	ldd	r25, Y+3	; 0x03
    46b2:	0e 94 15 23 	call	0x462a	; 0x462a <u8g2_add_vector_x>
    46b6:	5c 01       	movw	r10, r24
    46b8:	20 2f       	mov	r18, r16
    46ba:	46 2d       	mov	r20, r6
    46bc:	65 2d       	mov	r22, r5
    46be:	c4 01       	movw	r24, r8
    46c0:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <u8g2_add_vector_y>
    46c4:	ac 01       	movw	r20, r24
    46c6:	44 20       	and	r4, r4
    46c8:	79 f0       	breq	.+30     	; 0x46e8 <u8g2_font_decode_len+0x8c>
    46ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    46cc:	f6 01       	movw	r30, r12
    46ce:	80 83       	st	Z, r24
    46d0:	23 2d       	mov	r18, r3
    46d2:	30 e0       	ldi	r19, 0x00	; 0
    46d4:	b5 01       	movw	r22, r10
    46d6:	c7 01       	movw	r24, r14
    46d8:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
    46dc:	17 15       	cp	r17, r7
    46de:	48 f0       	brcs	.+18     	; 0x46f2 <u8g2_font_decode_len+0x96>
    46e0:	17 19       	sub	r17, r7
    46e2:	63 94       	inc	r6
    46e4:	51 2c       	mov	r5, r1
    46e6:	d7 cf       	rjmp	.-82     	; 0x4696 <u8g2_font_decode_len+0x3a>
    46e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    46ea:	81 11       	cpse	r24, r1
    46ec:	f7 cf       	rjmp	.-18     	; 0x46dc <u8g2_font_decode_len+0x80>
    46ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    46f0:	ed cf       	rjmp	.-38     	; 0x46cc <u8g2_font_decode_len+0x70>
    46f2:	15 0d       	add	r17, r5
    46f4:	1e 83       	std	Y+6, r17	; 0x06
    46f6:	6f 82       	std	Y+7, r6	; 0x07
    46f8:	df 91       	pop	r29
    46fa:	cf 91       	pop	r28
    46fc:	1f 91       	pop	r17
    46fe:	0f 91       	pop	r16
    4700:	ff 90       	pop	r15
    4702:	ef 90       	pop	r14
    4704:	df 90       	pop	r13
    4706:	cf 90       	pop	r12
    4708:	bf 90       	pop	r11
    470a:	af 90       	pop	r10
    470c:	9f 90       	pop	r9
    470e:	8f 90       	pop	r8
    4710:	7f 90       	pop	r7
    4712:	6f 90       	pop	r6
    4714:	5f 90       	pop	r5
    4716:	4f 90       	pop	r4
    4718:	3f 90       	pop	r3
    471a:	08 95       	ret

0000471c <u8g2_font_decode_glyph>:
u8g2_font_decode_glyph():
    471c:	8f 92       	push	r8
    471e:	9f 92       	push	r9
    4720:	af 92       	push	r10
    4722:	bf 92       	push	r11
    4724:	cf 92       	push	r12
    4726:	df 92       	push	r13
    4728:	ef 92       	push	r14
    472a:	ff 92       	push	r15
    472c:	0f 93       	push	r16
    472e:	1f 93       	push	r17
    4730:	cf 93       	push	r28
    4732:	df 93       	push	r29
    4734:	7c 01       	movw	r14, r24
    4736:	ec 01       	movw	r28, r24
    4738:	c2 5a       	subi	r28, 0xA2	; 162
    473a:	df 4f       	sbci	r29, 0xFF	; 255
    473c:	0e 94 c5 22 	call	0x458a	; 0x458a <u8g2_font_setup_decode>
    4740:	f7 01       	movw	r30, r14
    4742:	e9 59       	subi	r30, 0x99	; 153
    4744:	ff 4f       	sbci	r31, 0xFF	; 255
    4746:	b0 80       	ld	r11, Z
    4748:	3c 96       	adiw	r30, 0x0c	; 12
    474a:	60 81       	ld	r22, Z
    474c:	ce 01       	movw	r24, r28
    474e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <u8g2_font_decode_get_signed_bits>
    4752:	88 2e       	mov	r8, r24
    4754:	f7 01       	movw	r30, r14
    4756:	ec 58       	subi	r30, 0x8C	; 140
    4758:	ff 4f       	sbci	r31, 0xFF	; 255
    475a:	60 81       	ld	r22, Z
    475c:	ce 01       	movw	r24, r28
    475e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <u8g2_font_decode_get_signed_bits>
    4762:	08 2f       	mov	r16, r24
    4764:	f7 01       	movw	r30, r14
    4766:	eb 58       	subi	r30, 0x8B	; 139
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	60 81       	ld	r22, Z
    476c:	ce 01       	movw	r24, r28
    476e:	0e 94 ee 22 	call	0x45dc	; 0x45dc <u8g2_font_decode_get_signed_bits>
    4772:	a8 2e       	mov	r10, r24
    4774:	98 84       	ldd	r9, Y+8	; 0x08
    4776:	19 14       	cp	r1, r9
    4778:	0c f0       	brlt	.+2      	; 0x477c <u8g2_font_decode_glyph+0x60>
    477a:	61 c0       	rjmp	.+194    	; 0x483e <u8g2_font_decode_glyph+0x122>
    477c:	1e 85       	ldd	r17, Y+14	; 0x0e
    477e:	0b 0d       	add	r16, r11
    4780:	01 95       	neg	r16
    4782:	21 2f       	mov	r18, r17
    4784:	40 2f       	mov	r20, r16
    4786:	68 2d       	mov	r22, r8
    4788:	8a 81       	ldd	r24, Y+2	; 0x02
    478a:	9b 81       	ldd	r25, Y+3	; 0x03
    478c:	0e 94 15 23 	call	0x462a	; 0x462a <u8g2_add_vector_x>
    4790:	6c 01       	movw	r12, r24
    4792:	9b 83       	std	Y+3, r25	; 0x03
    4794:	8a 83       	std	Y+2, r24	; 0x02
    4796:	21 2f       	mov	r18, r17
    4798:	40 2f       	mov	r20, r16
    479a:	68 2d       	mov	r22, r8
    479c:	8c 81       	ldd	r24, Y+4	; 0x04
    479e:	9d 81       	ldd	r25, Y+5	; 0x05
    47a0:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <u8g2_add_vector_y>
    47a4:	9d 83       	std	Y+5, r25	; 0x05
    47a6:	8c 83       	std	Y+4, r24	; 0x04
    47a8:	11 30       	cpi	r17, 0x01	; 1
    47aa:	09 f4       	brne	.+2      	; 0x47ae <u8g2_font_decode_glyph+0x92>
    47ac:	56 c0       	rjmp	.+172    	; 0x485a <u8g2_font_decode_glyph+0x13e>
    47ae:	48 f0       	brcs	.+18     	; 0x47c2 <u8g2_font_decode_glyph+0xa6>
    47b0:	12 30       	cpi	r17, 0x02	; 2
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <u8g2_font_decode_glyph+0x9a>
    47b4:	63 c0       	rjmp	.+198    	; 0x487c <u8g2_font_decode_glyph+0x160>
    47b6:	13 30       	cpi	r17, 0x03	; 3
    47b8:	09 f4       	brne	.+2      	; 0x47bc <u8g2_font_decode_glyph+0xa0>
    47ba:	76 c0       	rjmp	.+236    	; 0x48a8 <u8g2_font_decode_glyph+0x18c>
    47bc:	8c 01       	movw	r16, r24
    47be:	96 01       	movw	r18, r12
    47c0:	0a c0       	rjmp	.+20     	; 0x47d6 <u8g2_font_decode_glyph+0xba>
    47c2:	96 01       	movw	r18, r12
    47c4:	29 0d       	add	r18, r9
    47c6:	31 1d       	adc	r19, r1
    47c8:	97 fc       	sbrc	r9, 7
    47ca:	3a 95       	dec	r19
    47cc:	8c 01       	movw	r16, r24
    47ce:	0b 0d       	add	r16, r11
    47d0:	11 1d       	adc	r17, r1
    47d2:	b7 fc       	sbrc	r11, 7
    47d4:	1a 95       	dec	r17
    47d6:	ac 01       	movw	r20, r24
    47d8:	b6 01       	movw	r22, r12
    47da:	c7 01       	movw	r24, r14
    47dc:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <u8g2_IsIntersection>
    47e0:	88 23       	and	r24, r24
    47e2:	69 f1       	breq	.+90     	; 0x483e <u8g2_font_decode_glyph+0x122>
    47e4:	1e 82       	std	Y+6, r1	; 0x06
    47e6:	1f 82       	std	Y+7, r1	; 0x07
    47e8:	87 01       	movw	r16, r14
    47ea:	01 59       	subi	r16, 0x91	; 145
    47ec:	1f 4f       	sbci	r17, 0xFF	; 255
    47ee:	67 01       	movw	r12, r14
    47f0:	80 e7       	ldi	r24, 0x70	; 112
    47f2:	c8 0e       	add	r12, r24
    47f4:	d1 1c       	adc	r13, r1
    47f6:	f8 01       	movw	r30, r16
    47f8:	60 81       	ld	r22, Z
    47fa:	ce 01       	movw	r24, r28
    47fc:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g2_font_decode_get_unsigned_bits>
    4800:	88 2e       	mov	r8, r24
    4802:	f6 01       	movw	r30, r12
    4804:	60 81       	ld	r22, Z
    4806:	ce 01       	movw	r24, r28
    4808:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g2_font_decode_get_unsigned_bits>
    480c:	98 2e       	mov	r9, r24
    480e:	40 e0       	ldi	r20, 0x00	; 0
    4810:	68 2d       	mov	r22, r8
    4812:	c7 01       	movw	r24, r14
    4814:	0e 94 2e 23 	call	0x465c	; 0x465c <u8g2_font_decode_len>
    4818:	41 e0       	ldi	r20, 0x01	; 1
    481a:	69 2d       	mov	r22, r9
    481c:	c7 01       	movw	r24, r14
    481e:	0e 94 2e 23 	call	0x465c	; 0x465c <u8g2_font_decode_len>
    4822:	61 e0       	ldi	r22, 0x01	; 1
    4824:	ce 01       	movw	r24, r28
    4826:	0e 94 9a 22 	call	0x4534	; 0x4534 <u8g2_font_decode_get_unsigned_bits>
    482a:	81 11       	cpse	r24, r1
    482c:	f0 cf       	rjmp	.-32     	; 0x480e <u8g2_font_decode_glyph+0xf2>
    482e:	8f 81       	ldd	r24, Y+7	; 0x07
    4830:	8b 15       	cp	r24, r11
    4832:	0c f3       	brlt	.-62     	; 0x47f6 <u8g2_font_decode_glyph+0xda>
    4834:	f7 01       	movw	r30, r14
    4836:	e6 57       	subi	r30, 0x76	; 118
    4838:	ff 4f       	sbci	r31, 0xFF	; 255
    483a:	8c 85       	ldd	r24, Y+12	; 0x0c
    483c:	80 83       	st	Z, r24
    483e:	8a 2d       	mov	r24, r10
    4840:	df 91       	pop	r29
    4842:	cf 91       	pop	r28
    4844:	1f 91       	pop	r17
    4846:	0f 91       	pop	r16
    4848:	ff 90       	pop	r15
    484a:	ef 90       	pop	r14
    484c:	df 90       	pop	r13
    484e:	cf 90       	pop	r12
    4850:	bf 90       	pop	r11
    4852:	af 90       	pop	r10
    4854:	9f 90       	pop	r9
    4856:	8f 90       	pop	r8
    4858:	08 95       	ret
    485a:	41 e0       	ldi	r20, 0x01	; 1
    485c:	50 e0       	ldi	r21, 0x00	; 0
    485e:	4b 19       	sub	r20, r11
    4860:	51 09       	sbc	r21, r1
    4862:	b7 fc       	sbrc	r11, 7
    4864:	53 95       	inc	r21
    4866:	96 01       	movw	r18, r12
    4868:	2f 5f       	subi	r18, 0xFF	; 255
    486a:	3f 4f       	sbci	r19, 0xFF	; 255
    486c:	8c 01       	movw	r16, r24
    486e:	09 0d       	add	r16, r9
    4870:	11 1d       	adc	r17, r1
    4872:	97 fc       	sbrc	r9, 7
    4874:	1a 95       	dec	r17
    4876:	c4 0e       	add	r12, r20
    4878:	d5 1e       	adc	r13, r21
    487a:	ad cf       	rjmp	.-166    	; 0x47d6 <u8g2_font_decode_glyph+0xba>
    487c:	41 e0       	ldi	r20, 0x01	; 1
    487e:	50 e0       	ldi	r21, 0x00	; 0
    4880:	ba 01       	movw	r22, r20
    4882:	69 19       	sub	r22, r9
    4884:	71 09       	sbc	r23, r1
    4886:	97 fc       	sbrc	r9, 7
    4888:	73 95       	inc	r23
    488a:	96 01       	movw	r18, r12
    488c:	2f 5f       	subi	r18, 0xFF	; 255
    488e:	3f 4f       	sbci	r19, 0xFF	; 255
    4890:	4b 19       	sub	r20, r11
    4892:	51 09       	sbc	r21, r1
    4894:	b7 fc       	sbrc	r11, 7
    4896:	53 95       	inc	r21
    4898:	8c 01       	movw	r16, r24
    489a:	0f 5f       	subi	r16, 0xFF	; 255
    489c:	1f 4f       	sbci	r17, 0xFF	; 255
    489e:	84 0f       	add	r24, r20
    48a0:	95 1f       	adc	r25, r21
    48a2:	c6 0e       	add	r12, r22
    48a4:	d7 1e       	adc	r13, r23
    48a6:	97 cf       	rjmp	.-210    	; 0x47d6 <u8g2_font_decode_glyph+0xba>
    48a8:	96 01       	movw	r18, r12
    48aa:	2b 0d       	add	r18, r11
    48ac:	31 1d       	adc	r19, r1
    48ae:	b7 fc       	sbrc	r11, 7
    48b0:	3a 95       	dec	r19
    48b2:	41 e0       	ldi	r20, 0x01	; 1
    48b4:	50 e0       	ldi	r21, 0x00	; 0
    48b6:	49 19       	sub	r20, r9
    48b8:	51 09       	sbc	r21, r1
    48ba:	97 fc       	sbrc	r9, 7
    48bc:	53 95       	inc	r21
    48be:	8c 01       	movw	r16, r24
    48c0:	0f 5f       	subi	r16, 0xFF	; 255
    48c2:	1f 4f       	sbci	r17, 0xFF	; 255
    48c4:	84 0f       	add	r24, r20
    48c6:	95 1f       	adc	r25, r21
    48c8:	86 cf       	rjmp	.-244    	; 0x47d6 <u8g2_font_decode_glyph+0xba>

000048ca <u8g2_font_get_glyph_data>:
u8g2_font_get_glyph_data():
    48ca:	ef 92       	push	r14
    48cc:	ff 92       	push	r15
    48ce:	0f 93       	push	r16
    48d0:	1f 93       	push	r17
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	fc 01       	movw	r30, r24
    48d8:	e6 5a       	subi	r30, 0xA6	; 166
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	20 81       	ld	r18, Z
    48de:	31 81       	ldd	r19, Z+1	; 0x01
    48e0:	29 5e       	subi	r18, 0xE9	; 233
    48e2:	3f 4f       	sbci	r19, 0xFF	; 255
    48e4:	6f 3f       	cpi	r22, 0xFF	; 255
    48e6:	71 05       	cpc	r23, r1
    48e8:	09 f0       	breq	.+2      	; 0x48ec <u8g2_font_get_glyph_data+0x22>
    48ea:	48 f5       	brcc	.+82     	; 0x493e <u8g2_font_get_glyph_data+0x74>
    48ec:	61 36       	cpi	r22, 0x61	; 97
    48ee:	71 05       	cpc	r23, r1
    48f0:	d8 f0       	brcs	.+54     	; 0x4928 <u8g2_font_get_glyph_data+0x5e>
    48f2:	80 58       	subi	r24, 0x80	; 128
    48f4:	9f 4f       	sbci	r25, 0xFF	; 255
    48f6:	fc 01       	movw	r30, r24
    48f8:	80 81       	ld	r24, Z
    48fa:	91 81       	ldd	r25, Z+1	; 0x01
    48fc:	28 0f       	add	r18, r24
    48fe:	39 1f       	adc	r19, r25
    4900:	c9 01       	movw	r24, r18
    4902:	01 96       	adiw	r24, 0x01	; 1
    4904:	fc 01       	movw	r30, r24
    4906:	44 91       	lpm	r20, Z
    4908:	44 23       	and	r20, r20
    490a:	09 f4       	brne	.+2      	; 0x490e <u8g2_font_get_glyph_data+0x44>
    490c:	47 c0       	rjmp	.+142    	; 0x499c <u8g2_font_get_glyph_data+0xd2>
    490e:	f9 01       	movw	r30, r18
    4910:	44 91       	lpm	r20, Z
    4912:	46 17       	cp	r20, r22
    4914:	17 06       	cpc	r1, r23
    4916:	71 f4       	brne	.+28     	; 0x4934 <u8g2_font_get_glyph_data+0x6a>
    4918:	01 96       	adiw	r24, 0x01	; 1
    491a:	df 91       	pop	r29
    491c:	cf 91       	pop	r28
    491e:	1f 91       	pop	r17
    4920:	0f 91       	pop	r16
    4922:	ff 90       	pop	r15
    4924:	ef 90       	pop	r14
    4926:	08 95       	ret
    4928:	61 34       	cpi	r22, 0x41	; 65
    492a:	71 05       	cpc	r23, r1
    492c:	48 f3       	brcs	.-46     	; 0x4900 <u8g2_font_get_glyph_data+0x36>
    492e:	82 58       	subi	r24, 0x82	; 130
    4930:	9f 4f       	sbci	r25, 0xFF	; 255
    4932:	e1 cf       	rjmp	.-62     	; 0x48f6 <u8g2_font_get_glyph_data+0x2c>
    4934:	fc 01       	movw	r30, r24
    4936:	84 91       	lpm	r24, Z
    4938:	28 0f       	add	r18, r24
    493a:	31 1d       	adc	r19, r1
    493c:	e1 cf       	rjmp	.-62     	; 0x4900 <u8g2_font_get_glyph_data+0x36>
    493e:	8b 01       	movw	r16, r22
    4940:	fc 01       	movw	r30, r24
    4942:	ee 57       	subi	r30, 0x7E	; 126
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	c0 81       	ld	r28, Z
    4948:	d1 81       	ldd	r29, Z+1	; 0x01
    494a:	c2 0f       	add	r28, r18
    494c:	d3 1f       	adc	r29, r19
    494e:	7e 01       	movw	r14, r28
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	c7 01       	movw	r24, r14
    4954:	0e 94 2c 22 	call	0x4458	; 0x4458 <u8g2_font_get_word>
    4958:	c8 0f       	add	r28, r24
    495a:	d9 1f       	adc	r29, r25
    495c:	62 e0       	ldi	r22, 0x02	; 2
    495e:	c7 01       	movw	r24, r14
    4960:	0e 94 2c 22 	call	0x4458	; 0x4458 <u8g2_font_get_word>
    4964:	f4 e0       	ldi	r31, 0x04	; 4
    4966:	ef 0e       	add	r14, r31
    4968:	f1 1c       	adc	r15, r1
    496a:	80 17       	cp	r24, r16
    496c:	91 07       	cpc	r25, r17
    496e:	80 f3       	brcs	.-32     	; 0x4950 <u8g2_font_get_glyph_data+0x86>
    4970:	fe 01       	movw	r30, r28
    4972:	84 91       	lpm	r24, Z
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	98 2f       	mov	r25, r24
    4978:	88 27       	eor	r24, r24
    497a:	31 96       	adiw	r30, 0x01	; 1
    497c:	e4 91       	lpm	r30, Z
    497e:	8e 2b       	or	r24, r30
    4980:	00 97       	sbiw	r24, 0x00	; 0
    4982:	61 f0       	breq	.+24     	; 0x499c <u8g2_font_get_glyph_data+0xd2>
    4984:	08 17       	cp	r16, r24
    4986:	19 07       	cpc	r17, r25
    4988:	19 f4       	brne	.+6      	; 0x4990 <u8g2_font_get_glyph_data+0xc6>
    498a:	ce 01       	movw	r24, r28
    498c:	03 96       	adiw	r24, 0x03	; 3
    498e:	c5 cf       	rjmp	.-118    	; 0x491a <u8g2_font_get_glyph_data+0x50>
    4990:	fe 01       	movw	r30, r28
    4992:	32 96       	adiw	r30, 0x02	; 2
    4994:	e4 91       	lpm	r30, Z
    4996:	ce 0f       	add	r28, r30
    4998:	d1 1d       	adc	r29, r1
    499a:	ea cf       	rjmp	.-44     	; 0x4970 <u8g2_font_get_glyph_data+0xa6>
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	bc cf       	rjmp	.-136    	; 0x491a <u8g2_font_get_glyph_data+0x50>

000049a2 <u8g2_DrawGlyph>:
u8g2_DrawGlyph():
    49a2:	cf 92       	push	r12
    49a4:	df 92       	push	r13
    49a6:	ef 92       	push	r14
    49a8:	ff 92       	push	r15
    49aa:	0f 93       	push	r16
    49ac:	1f 93       	push	r17
    49ae:	cf 93       	push	r28
    49b0:	df 93       	push	r29
    49b2:	ec 01       	movw	r28, r24
    49b4:	7b 01       	movw	r14, r22
    49b6:	8a 01       	movw	r16, r20
    49b8:	69 01       	movw	r12, r18
    49ba:	fc 01       	movw	r30, r24
    49bc:	e4 59       	subi	r30, 0x94	; 148
    49be:	ff 4f       	sbci	r31, 0xFF	; 255
    49c0:	80 81       	ld	r24, Z
    49c2:	81 30       	cpi	r24, 0x01	; 1
    49c4:	79 f1       	breq	.+94     	; 0x4a24 <u8g2_DrawGlyph+0x82>
    49c6:	18 f1       	brcs	.+70     	; 0x4a0e <u8g2_DrawGlyph+0x6c>
    49c8:	82 30       	cpi	r24, 0x02	; 2
    49ca:	b9 f1       	breq	.+110    	; 0x4a3a <u8g2_DrawGlyph+0x98>
    49cc:	83 30       	cpi	r24, 0x03	; 3
    49ce:	09 f4       	brne	.+2      	; 0x49d2 <u8g2_DrawGlyph+0x30>
    49d0:	3f c0       	rjmp	.+126    	; 0x4a50 <u8g2_DrawGlyph+0xae>
u8g2_font_draw_glyph():
    49d2:	fe 01       	movw	r30, r28
    49d4:	e0 5a       	subi	r30, 0xA0	; 160
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	f1 82       	std	Z+1, r15	; 0x01
    49da:	e0 82       	st	Z, r14
    49dc:	32 96       	adiw	r30, 0x02	; 2
    49de:	11 83       	std	Z+1, r17	; 0x01
    49e0:	00 83       	st	Z, r16
    49e2:	b6 01       	movw	r22, r12
    49e4:	ce 01       	movw	r24, r28
    49e6:	0e 94 65 24 	call	0x48ca	; 0x48ca <u8g2_font_get_glyph_data>
    49ea:	00 97       	sbiw	r24, 0x00	; 0
    49ec:	e1 f1       	breq	.+120    	; 0x4a66 <u8g2_DrawGlyph+0xc4>
    49ee:	bc 01       	movw	r22, r24
    49f0:	ce 01       	movw	r24, r28
    49f2:	0e 94 8e 23 	call	0x471c	; 0x471c <u8g2_font_decode_glyph>
    49f6:	08 2e       	mov	r0, r24
    49f8:	00 0c       	add	r0, r0
    49fa:	99 0b       	sbc	r25, r25
u8g2_DrawGlyph():
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	ff 90       	pop	r15
    4a06:	ef 90       	pop	r14
    4a08:	df 90       	pop	r13
    4a0a:	cf 90       	pop	r12
    4a0c:	08 95       	ret
    4a0e:	fe 01       	movw	r30, r28
    4a10:	e4 5a       	subi	r30, 0xA4	; 164
    4a12:	ff 4f       	sbci	r31, 0xFF	; 255
    4a14:	01 90       	ld	r0, Z+
    4a16:	f0 81       	ld	r31, Z
    4a18:	e0 2d       	mov	r30, r0
    4a1a:	ce 01       	movw	r24, r28
    4a1c:	09 95       	icall
    4a1e:	08 0f       	add	r16, r24
    4a20:	19 1f       	adc	r17, r25
    4a22:	d7 cf       	rjmp	.-82     	; 0x49d2 <u8g2_DrawGlyph+0x30>
    4a24:	fe 01       	movw	r30, r28
    4a26:	e4 5a       	subi	r30, 0xA4	; 164
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	01 90       	ld	r0, Z+
    4a2c:	f0 81       	ld	r31, Z
    4a2e:	e0 2d       	mov	r30, r0
    4a30:	ce 01       	movw	r24, r28
    4a32:	09 95       	icall
    4a34:	e8 1a       	sub	r14, r24
    4a36:	f9 0a       	sbc	r15, r25
    4a38:	cc cf       	rjmp	.-104    	; 0x49d2 <u8g2_DrawGlyph+0x30>
    4a3a:	fe 01       	movw	r30, r28
    4a3c:	e4 5a       	subi	r30, 0xA4	; 164
    4a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a40:	01 90       	ld	r0, Z+
    4a42:	f0 81       	ld	r31, Z
    4a44:	e0 2d       	mov	r30, r0
    4a46:	ce 01       	movw	r24, r28
    4a48:	09 95       	icall
    4a4a:	08 1b       	sub	r16, r24
    4a4c:	19 0b       	sbc	r17, r25
    4a4e:	c1 cf       	rjmp	.-126    	; 0x49d2 <u8g2_DrawGlyph+0x30>
    4a50:	fe 01       	movw	r30, r28
    4a52:	e4 5a       	subi	r30, 0xA4	; 164
    4a54:	ff 4f       	sbci	r31, 0xFF	; 255
    4a56:	01 90       	ld	r0, Z+
    4a58:	f0 81       	ld	r31, Z
    4a5a:	e0 2d       	mov	r30, r0
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	09 95       	icall
    4a60:	e8 0e       	add	r14, r24
    4a62:	f9 1e       	adc	r15, r25
    4a64:	b6 cf       	rjmp	.-148    	; 0x49d2 <u8g2_DrawGlyph+0x30>
u8g2_font_draw_glyph():
    4a66:	90 e0       	ldi	r25, 0x00	; 0
    4a68:	80 e0       	ldi	r24, 0x00	; 0
u8g2_DrawGlyph():
    4a6a:	c8 cf       	rjmp	.-112    	; 0x49fc <u8g2_DrawGlyph+0x5a>

00004a6c <u8g2_UpdateRefHeight>:
u8g2_UpdateRefHeight():
    4a6c:	cf 93       	push	r28
    4a6e:	df 93       	push	r29
    4a70:	fc 01       	movw	r30, r24
    4a72:	e6 5a       	subi	r30, 0xA6	; 166
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	20 81       	ld	r18, Z
    4a78:	31 81       	ldd	r19, Z+1	; 0x01
    4a7a:	23 2b       	or	r18, r19
    4a7c:	f1 f0       	breq	.+60     	; 0x4aba <u8g2_UpdateRefHeight+0x4e>
    4a7e:	b0 96       	adiw	r30, 0x20	; 32
    4a80:	20 81       	ld	r18, Z
    4a82:	dc 01       	movw	r26, r24
    4a84:	aa 57       	subi	r26, 0x7A	; 122
    4a86:	bf 4f       	sbci	r27, 0xFF	; 255
    4a88:	2c 93       	st	X, r18
    4a8a:	31 96       	adiw	r30, 0x01	; 1
    4a8c:	50 81       	ld	r21, Z
    4a8e:	3c 96       	adiw	r30, 0x0c	; 12
    4a90:	50 83       	st	Z, r21
    4a92:	ec 01       	movw	r28, r24
    4a94:	cb 57       	subi	r28, 0x7B	; 123
    4a96:	df 4f       	sbci	r29, 0xFF	; 255
    4a98:	38 81       	ld	r19, Y
    4a9a:	33 23       	and	r19, r19
    4a9c:	71 f0       	breq	.+28     	; 0x4aba <u8g2_UpdateRefHeight+0x4e>
    4a9e:	31 30       	cpi	r19, 0x01	; 1
    4aa0:	79 f4       	brne	.+30     	; 0x4ac0 <u8g2_UpdateRefHeight+0x54>
    4aa2:	29 97       	sbiw	r28, 0x09	; 9
    4aa4:	38 81       	ld	r19, Y
    4aa6:	23 17       	cp	r18, r19
    4aa8:	0c f4       	brge	.+2      	; 0x4aac <u8g2_UpdateRefHeight+0x40>
    4aaa:	3c 93       	st	X, r19
    4aac:	83 58       	subi	r24, 0x83	; 131
    4aae:	9f 4f       	sbci	r25, 0xFF	; 255
    4ab0:	dc 01       	movw	r26, r24
    4ab2:	8c 91       	ld	r24, X
    4ab4:	85 17       	cp	r24, r21
    4ab6:	0c f4       	brge	.+2      	; 0x4aba <u8g2_UpdateRefHeight+0x4e>
    4ab8:	80 83       	st	Z, r24
    4aba:	df 91       	pop	r29
    4abc:	cf 91       	pop	r28
    4abe:	08 95       	ret
    4ac0:	ec 01       	movw	r28, r24
    4ac2:	c9 58       	subi	r28, 0x89	; 137
    4ac4:	df 4f       	sbci	r29, 0xFF	; 255
    4ac6:	48 81       	ld	r20, Y
    4ac8:	87 58       	subi	r24, 0x87	; 135
    4aca:	9f 4f       	sbci	r25, 0xFF	; 255
    4acc:	ec 01       	movw	r28, r24
    4ace:	38 81       	ld	r19, Y
    4ad0:	82 2f       	mov	r24, r18
    4ad2:	22 0f       	add	r18, r18
    4ad4:	99 0b       	sbc	r25, r25
    4ad6:	63 2f       	mov	r22, r19
    4ad8:	03 2e       	mov	r0, r19
    4ada:	00 0c       	add	r0, r0
    4adc:	77 0b       	sbc	r23, r23
    4ade:	64 0f       	add	r22, r20
    4ae0:	71 1d       	adc	r23, r1
    4ae2:	47 fd       	sbrc	r20, 7
    4ae4:	7a 95       	dec	r23
    4ae6:	86 17       	cp	r24, r22
    4ae8:	97 07       	cpc	r25, r23
    4aea:	14 f4       	brge	.+4      	; 0x4af0 <u8g2_UpdateRefHeight+0x84>
    4aec:	43 0f       	add	r20, r19
    4aee:	4c 93       	st	X, r20
    4af0:	35 17       	cp	r19, r21
    4af2:	1c f7       	brge	.-58     	; 0x4aba <u8g2_UpdateRefHeight+0x4e>
    4af4:	30 83       	st	Z, r19
    4af6:	e1 cf       	rjmp	.-62     	; 0x4aba <u8g2_UpdateRefHeight+0x4e>

00004af8 <u8g2_SetFontPosBaseline>:
u8g2_SetFontPosBaseline():
    4af8:	84 5a       	subi	r24, 0xA4	; 164
    4afa:	9f 4f       	sbci	r25, 0xFF	; 255
    4afc:	28 e3       	ldi	r18, 0x38	; 56
    4afe:	32 e2       	ldi	r19, 0x22	; 34
    4b00:	fc 01       	movw	r30, r24
    4b02:	31 83       	std	Z+1, r19	; 0x01
    4b04:	20 83       	st	Z, r18
    4b06:	08 95       	ret

00004b08 <u8g2_SetFont>:
u8g2_SetFont():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1280

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    4b08:	cf 93       	push	r28
    4b0a:	df 93       	push	r29
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1281
  if ( u8g2->font != font )
    4b0c:	fc 01       	movw	r30, r24
    4b0e:	e6 5a       	subi	r30, 0xA6	; 166
    4b10:	ff 4f       	sbci	r31, 0xFF	; 255
    4b12:	20 81       	ld	r18, Z
    4b14:	31 81       	ldd	r19, Z+1	; 0x01
    4b16:	26 17       	cp	r18, r22
    4b18:	37 07       	cpc	r19, r23
    4b1a:	61 f0       	breq	.+24     	; 0x4b34 <u8g2_SetFont+0x2c>
    4b1c:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1287
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    4b1e:	71 83       	std	Z+1, r23	; 0x01
    4b20:	60 83       	st	Z, r22
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1288
    u8g2_read_font_info(&(u8g2->font_info), font);
    4b22:	83 59       	subi	r24, 0x93	; 147
    4b24:	9f 4f       	sbci	r25, 0xFF	; 255
    4b26:	0e 94 3b 22 	call	0x4476	; 0x4476 <u8g2_read_font_info>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
    u8g2_UpdateRefHeight(u8g2);
    4b2a:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    4b2c:	df 91       	pop	r29
    4b2e:	cf 91       	pop	r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1289
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    4b30:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <u8g2_UpdateRefHeight>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1292
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    4b34:	df 91       	pop	r29
    4b36:	cf 91       	pop	r28
    4b38:	08 95       	ret

00004b3a <u8g2_draw_hv_line_2dir>:
u8g2_draw_hv_line_2dir():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:219
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}
    4b3a:	0f 93       	push	r16
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	e0 5c       	subi	r30, 0xC0	; 192
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	01 90       	ld	r0, Z+
    4b44:	f0 81       	ld	r31, Z
    4b46:	e0 2d       	mov	r30, r0
    4b48:	4e 1b       	sub	r20, r30
    4b4a:	5f 0b       	sbc	r21, r31
    4b4c:	dc 01       	movw	r26, r24
    4b4e:	d4 96       	adiw	r26, 0x34	; 52
    4b50:	ed 91       	ld	r30, X+
    4b52:	fc 91       	ld	r31, X
    4b54:	09 95       	icall
    4b56:	0f 91       	pop	r16
    4b58:	08 95       	ret

00004b5a <u8g2_DrawHVLine>:
u8g2_DrawHVLine():
    4b5a:	0f 93       	push	r16
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	e0 2f       	mov	r30, r16
    4b62:	dc 01       	movw	r26, r24
    4b64:	ac 57       	subi	r26, 0x7C	; 124
    4b66:	bf 4f       	sbci	r27, 0xFF	; 255
    4b68:	fc 91       	ld	r31, X
    4b6a:	ff 23       	and	r31, r31
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <u8g2_DrawHVLine+0x16>
    4b6e:	60 c0       	rjmp	.+192    	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4b70:	21 15       	cp	r18, r1
    4b72:	31 05       	cpc	r19, r1
    4b74:	09 f4       	brne	.+2      	; 0x4b78 <u8g2_DrawHVLine+0x1e>
    4b76:	5c c0       	rjmp	.+184    	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4b78:	22 30       	cpi	r18, 0x02	; 2
    4b7a:	31 05       	cpc	r19, r1
    4b7c:	38 f0       	brcs	.+14     	; 0x4b8c <u8g2_DrawHVLine+0x32>
    4b7e:	02 30       	cpi	r16, 0x02	; 2
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <u8g2_DrawHVLine+0x2a>
    4b82:	4a c0       	rjmp	.+148    	; 0x4c18 <u8g2_DrawHVLine+0xbe>
    4b84:	6f 5f       	subi	r22, 0xFF	; 255
    4b86:	7f 4f       	sbci	r23, 0xFF	; 255
    4b88:	62 1b       	sub	r22, r18
    4b8a:	73 0b       	sbc	r23, r19
    4b8c:	0e 2f       	mov	r16, r30
    4b8e:	01 70       	andi	r16, 0x01	; 1
    4b90:	e0 fd       	sbrc	r30, 0
    4b92:	52 c0       	rjmp	.+164    	; 0x4c38 <u8g2_DrawHVLine+0xde>
    4b94:	fc 01       	movw	r30, r24
    4b96:	e2 5b       	subi	r30, 0xB2	; 178
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	01 90       	ld	r0, Z+
    4b9c:	f0 81       	ld	r31, Z
    4b9e:	e0 2d       	mov	r30, r0
    4ba0:	4e 17       	cp	r20, r30
    4ba2:	5f 07       	cpc	r21, r31
    4ba4:	08 f4       	brcc	.+2      	; 0x4ba8 <u8g2_DrawHVLine+0x4e>
    4ba6:	44 c0       	rjmp	.+136    	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4ba8:	fc 01       	movw	r30, r24
    4baa:	e0 5b       	subi	r30, 0xB0	; 176
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	01 90       	ld	r0, Z+
    4bb0:	f0 81       	ld	r31, Z
    4bb2:	e0 2d       	mov	r30, r0
    4bb4:	4e 17       	cp	r20, r30
    4bb6:	5f 07       	cpc	r21, r31
    4bb8:	d8 f5       	brcc	.+118    	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4bba:	fc 01       	movw	r30, r24
    4bbc:	e4 5b       	subi	r30, 0xB4	; 180
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	01 90       	ld	r0, Z+
    4bc2:	f0 81       	ld	r31, Z
    4bc4:	e0 2d       	mov	r30, r0
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	a6 5b       	subi	r26, 0xB6	; 182
    4bca:	bf 4f       	sbci	r27, 0xFF	; 255
    4bcc:	0d 90       	ld	r0, X+
    4bce:	bc 91       	ld	r27, X
    4bd0:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    4bd2:	26 0f       	add	r18, r22
    4bd4:	37 1f       	adc	r19, r23
    4bd6:	26 17       	cp	r18, r22
    4bd8:	37 07       	cpc	r19, r23
    4bda:	38 f5       	brcc	.+78     	; 0x4c2a <u8g2_DrawHVLine+0xd0>
    4bdc:	6e 17       	cp	r22, r30
    4bde:	7f 07       	cpc	r23, r31
    4be0:	18 f5       	brcc	.+70     	; 0x4c28 <u8g2_DrawHVLine+0xce>
    4be2:	9f 01       	movw	r18, r30
    4be4:	21 50       	subi	r18, 0x01	; 1
    4be6:	31 09       	sbc	r19, r1
    4be8:	a2 17       	cp	r26, r18
    4bea:	b3 07       	cpc	r27, r19
    4bec:	08 f5       	brcc	.+66     	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4bee:	6a 17       	cp	r22, r26
    4bf0:	7b 07       	cpc	r23, r27
    4bf2:	08 f4       	brcc	.+2      	; 0x4bf6 <u8g2_DrawHVLine+0x9c>
    4bf4:	bd 01       	movw	r22, r26
    4bf6:	2e 17       	cp	r18, r30
    4bf8:	3f 07       	cpc	r19, r31
    4bfa:	08 f4       	brcc	.+2      	; 0x4bfe <u8g2_DrawHVLine+0xa4>
    4bfc:	f9 01       	movw	r30, r18
    4bfe:	e6 1b       	sub	r30, r22
    4c00:	f7 0b       	sbc	r31, r23
u8g2_DrawHVLine():
    4c02:	ec 01       	movw	r28, r24
    4c04:	ae a9       	ldd	r26, Y+54	; 0x36
    4c06:	bf a9       	ldd	r27, Y+55	; 0x37
    4c08:	14 96       	adiw	r26, 0x04	; 4
    4c0a:	0d 90       	ld	r0, X+
    4c0c:	bc 91       	ld	r27, X
    4c0e:	a0 2d       	mov	r26, r0
    4c10:	9f 01       	movw	r18, r30
    4c12:	fd 01       	movw	r30, r26
    4c14:	09 95       	icall
    4c16:	0c c0       	rjmp	.+24     	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4c18:	03 30       	cpi	r16, 0x03	; 3
    4c1a:	09 f0       	breq	.+2      	; 0x4c1e <u8g2_DrawHVLine+0xc4>
    4c1c:	b7 cf       	rjmp	.-146    	; 0x4b8c <u8g2_DrawHVLine+0x32>
    4c1e:	4f 5f       	subi	r20, 0xFF	; 255
    4c20:	5f 4f       	sbci	r21, 0xFF	; 255
    4c22:	42 1b       	sub	r20, r18
    4c24:	53 0b       	sbc	r21, r19
    4c26:	b2 cf       	rjmp	.-156    	; 0x4b8c <u8g2_DrawHVLine+0x32>
    4c28:	bd 01       	movw	r22, r26
u8g2_clip_intersection2():
    4c2a:	6e 17       	cp	r22, r30
    4c2c:	7f 07       	cpc	r23, r31
    4c2e:	e0 f2       	brcs	.-72     	; 0x4be8 <u8g2_DrawHVLine+0x8e>
u8g2_DrawHVLine():
    4c30:	df 91       	pop	r29
    4c32:	cf 91       	pop	r28
    4c34:	0f 91       	pop	r16
    4c36:	08 95       	ret
    4c38:	fc 01       	movw	r30, r24
    4c3a:	e6 5b       	subi	r30, 0xB6	; 182
    4c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3e:	01 90       	ld	r0, Z+
    4c40:	f0 81       	ld	r31, Z
    4c42:	e0 2d       	mov	r30, r0
    4c44:	6e 17       	cp	r22, r30
    4c46:	7f 07       	cpc	r23, r31
    4c48:	98 f3       	brcs	.-26     	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4c4a:	fc 01       	movw	r30, r24
    4c4c:	e4 5b       	subi	r30, 0xB4	; 180
    4c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c50:	01 90       	ld	r0, Z+
    4c52:	f0 81       	ld	r31, Z
    4c54:	e0 2d       	mov	r30, r0
    4c56:	6e 17       	cp	r22, r30
    4c58:	7f 07       	cpc	r23, r31
    4c5a:	50 f7       	brcc	.-44     	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	e0 5b       	subi	r30, 0xB0	; 176
    4c60:	ff 4f       	sbci	r31, 0xFF	; 255
    4c62:	01 90       	ld	r0, Z+
    4c64:	f0 81       	ld	r31, Z
    4c66:	e0 2d       	mov	r30, r0
    4c68:	dc 01       	movw	r26, r24
    4c6a:	a2 5b       	subi	r26, 0xB2	; 178
    4c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6e:	0d 90       	ld	r0, X+
    4c70:	bc 91       	ld	r27, X
    4c72:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    4c74:	24 0f       	add	r18, r20
    4c76:	35 1f       	adc	r19, r21
    4c78:	24 17       	cp	r18, r20
    4c7a:	35 07       	cpc	r19, r21
    4c7c:	a8 f4       	brcc	.+42     	; 0x4ca8 <u8g2_DrawHVLine+0x14e>
    4c7e:	4e 17       	cp	r20, r30
    4c80:	5f 07       	cpc	r21, r31
    4c82:	88 f4       	brcc	.+34     	; 0x4ca6 <u8g2_DrawHVLine+0x14c>
    4c84:	9f 01       	movw	r18, r30
    4c86:	21 50       	subi	r18, 0x01	; 1
    4c88:	31 09       	sbc	r19, r1
    4c8a:	a2 17       	cp	r26, r18
    4c8c:	b3 07       	cpc	r27, r19
    4c8e:	80 f6       	brcc	.-96     	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4c90:	4a 17       	cp	r20, r26
    4c92:	5b 07       	cpc	r21, r27
    4c94:	08 f4       	brcc	.+2      	; 0x4c98 <u8g2_DrawHVLine+0x13e>
    4c96:	ad 01       	movw	r20, r26
    4c98:	2e 17       	cp	r18, r30
    4c9a:	3f 07       	cpc	r19, r31
    4c9c:	08 f4       	brcc	.+2      	; 0x4ca0 <u8g2_DrawHVLine+0x146>
    4c9e:	f9 01       	movw	r30, r18
    4ca0:	e4 1b       	sub	r30, r20
    4ca2:	f5 0b       	sbc	r31, r21
    4ca4:	ae cf       	rjmp	.-164    	; 0x4c02 <u8g2_DrawHVLine+0xa8>
u8g2_DrawHVLine():
    4ca6:	ad 01       	movw	r20, r26
u8g2_clip_intersection2():
    4ca8:	4e 17       	cp	r20, r30
    4caa:	5f 07       	cpc	r21, r31
    4cac:	08 f6       	brcc	.-126    	; 0x4c30 <u8g2_DrawHVLine+0xd6>
    4cae:	ed cf       	rjmp	.-38     	; 0x4c8a <u8g2_DrawHVLine+0x130>

00004cb0 <u8g2_DrawHLine>:
u8g2_DrawHLine():
    4cb0:	0f 93       	push	r16
    4cb2:	00 e0       	ldi	r16, 0x00	; 0
    4cb4:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
    4cb8:	0f 91       	pop	r16
    4cba:	08 95       	ret

00004cbc <u8g2_DrawPixel>:
u8g2_DrawPixel():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:222

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    4cbc:	0f 93       	push	r16
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:224
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	e2 5b       	subi	r30, 0xB2	; 178
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	20 81       	ld	r18, Z
    4cc6:	31 81       	ldd	r19, Z+1	; 0x01
    4cc8:	42 17       	cp	r20, r18
    4cca:	53 07       	cpc	r21, r19
    4ccc:	b8 f0       	brcs	.+46     	; 0x4cfc <u8g2_DrawPixel+0x40>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:226
    return;
  if ( y >= u8g2->user_y1 )
    4cce:	32 96       	adiw	r30, 0x02	; 2
    4cd0:	20 81       	ld	r18, Z
    4cd2:	31 81       	ldd	r19, Z+1	; 0x01
    4cd4:	42 17       	cp	r20, r18
    4cd6:	53 07       	cpc	r21, r19
    4cd8:	88 f4       	brcc	.+34     	; 0x4cfc <u8g2_DrawPixel+0x40>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:228
    return;
  if ( x < u8g2->user_x0 )
    4cda:	36 97       	sbiw	r30, 0x06	; 6
    4cdc:	20 81       	ld	r18, Z
    4cde:	31 81       	ldd	r19, Z+1	; 0x01
    4ce0:	62 17       	cp	r22, r18
    4ce2:	73 07       	cpc	r23, r19
    4ce4:	58 f0       	brcs	.+22     	; 0x4cfc <u8g2_DrawPixel+0x40>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:230
    return;
  if ( x >= u8g2->user_x1 )
    4ce6:	32 96       	adiw	r30, 0x02	; 2
    4ce8:	20 81       	ld	r18, Z
    4cea:	31 81       	ldd	r19, Z+1	; 0x01
    4cec:	62 17       	cp	r22, r18
    4cee:	73 07       	cpc	r23, r19
    4cf0:	28 f4       	brcc	.+10     	; 0x4cfc <u8g2_DrawPixel+0x40>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:233
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    4cf2:	00 e0       	ldi	r16, 0x00	; 0
    4cf4:	21 e0       	ldi	r18, 0x01	; 1
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <u8g2_DrawHVLine>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:234
}
    4cfc:	0f 91       	pop	r16
    4cfe:	08 95       	ret

00004d00 <u8g2_SetDrawColor>:
u8g2_SetDrawColor():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:250

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
    4d00:	fc 01       	movw	r30, r24
    4d02:	e6 57       	subi	r30, 0x76	; 118
    4d04:	ff 4f       	sbci	r31, 0xFF	; 255
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:252
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    4d06:	63 30       	cpi	r22, 0x03	; 3
    4d08:	10 f4       	brcc	.+4      	; 0x4d0e <u8g2_SetDrawColor+0xe>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:251
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    4d0a:	60 83       	st	Z, r22
    4d0c:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:253
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    4d0e:	81 e0       	ldi	r24, 0x01	; 1
    4d10:	80 83       	st	Z, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:254
}
    4d12:	08 95       	ret

00004d14 <u8g2_is_intersection_decision_tree>:
u8g2_is_intersection_decision_tree():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:125
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    4d14:	46 17       	cp	r20, r22
    4d16:	57 07       	cpc	r21, r23
    4d18:	48 f4       	brcc	.+18     	; 0x4d2c <u8g2_is_intersection_decision_tree+0x18>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:127
  {
    if ( v1 > a0 )	// v1 >= a0
    4d1a:	82 17       	cp	r24, r18
    4d1c:	93 07       	cpc	r25, r19
    4d1e:	50 f0       	brcs	.+20     	; 0x4d34 <u8g2_is_intersection_decision_tree+0x20>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:133
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    4d20:	81 e0       	ldi	r24, 0x01	; 1
    4d22:	24 17       	cp	r18, r20
    4d24:	35 07       	cpc	r19, r21
    4d26:	38 f0       	brcs	.+14     	; 0x4d36 <u8g2_is_intersection_decision_tree+0x22>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:158
	return 0;
      }
    }
    else
    {
      return 0;
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:145
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    4d2c:	82 17       	cp	r24, r18
    4d2e:	93 07       	cpc	r25, r19
    4d30:	b8 f3       	brcs	.-18     	; 0x4d20 <u8g2_is_intersection_decision_tree+0xc>
    4d32:	fa cf       	rjmp	.-12     	; 0x4d28 <u8g2_is_intersection_decision_tree+0x14>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:129
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    4d34:	81 e0       	ldi	r24, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:161
    else
    {
      return 0;
    }
  }
}
    4d36:	08 95       	ret

00004d38 <u8g2_IsIntersection>:
u8g2_IsIntersection():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:167



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    4d38:	cf 92       	push	r12
    4d3a:	df 92       	push	r13
    4d3c:	ef 92       	push	r14
    4d3e:	ff 92       	push	r15
    4d40:	0f 93       	push	r16
    4d42:	1f 93       	push	r17
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	ec 01       	movw	r28, r24
    4d4a:	7b 01       	movw	r14, r22
    4d4c:	69 01       	movw	r12, r18
    4d4e:	98 01       	movw	r18, r16
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:168
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    4d50:	fc 01       	movw	r30, r24
    4d52:	e0 5b       	subi	r30, 0xB0	; 176
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	60 81       	ld	r22, Z
    4d58:	71 81       	ldd	r23, Z+1	; 0x01
    4d5a:	32 97       	sbiw	r30, 0x02	; 2
    4d5c:	80 81       	ld	r24, Z
    4d5e:	91 81       	ldd	r25, Z+1	; 0x01
    4d60:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <u8g2_is_intersection_decision_tree>
    4d64:	88 23       	and	r24, r24
    4d66:	a9 f0       	breq	.+42     	; 0x4d92 <u8g2_IsIntersection+0x5a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    4d68:	fe 01       	movw	r30, r28
    4d6a:	e4 5b       	subi	r30, 0xB4	; 180
    4d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6e:	60 81       	ld	r22, Z
    4d70:	71 81       	ldd	r23, Z+1	; 0x01
    4d72:	c6 5b       	subi	r28, 0xB6	; 182
    4d74:	df 4f       	sbci	r29, 0xFF	; 255
    4d76:	96 01       	movw	r18, r12
    4d78:	a7 01       	movw	r20, r14
    4d7a:	88 81       	ld	r24, Y
    4d7c:	99 81       	ldd	r25, Y+1	; 0x01
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    4d7e:	df 91       	pop	r29
    4d80:	cf 91       	pop	r28
    4d82:	1f 91       	pop	r17
    4d84:	0f 91       	pop	r16
    4d86:	ff 90       	pop	r15
    4d88:	ef 90       	pop	r14
    4d8a:	df 90       	pop	r13
    4d8c:	cf 90       	pop	r12
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    4d8e:	0c 94 8a 26 	jmp	0x4d14	; 0x4d14 <u8g2_is_intersection_decision_tree>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
}
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	1f 91       	pop	r17
    4d9a:	0f 91       	pop	r16
    4d9c:	ff 90       	pop	r15
    4d9e:	ef 90       	pop	r14
    4da0:	df 90       	pop	r13
    4da2:	cf 90       	pop	r12
    4da4:	08 95       	ret

00004da6 <u8g2_DrawLine>:
u8g2_DrawLine():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:40

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    4da6:	3f 92       	push	r3
    4da8:	4f 92       	push	r4
    4daa:	5f 92       	push	r5
    4dac:	6f 92       	push	r6
    4dae:	7f 92       	push	r7
    4db0:	8f 92       	push	r8
    4db2:	9f 92       	push	r9
    4db4:	af 92       	push	r10
    4db6:	bf 92       	push	r11
    4db8:	cf 92       	push	r12
    4dba:	df 92       	push	r13
    4dbc:	ef 92       	push	r14
    4dbe:	ff 92       	push	r15
    4dc0:	0f 93       	push	r16
    4dc2:	1f 93       	push	r17
    4dc4:	cf 93       	push	r28
    4dc6:	df 93       	push	r29
    4dc8:	2c 01       	movw	r4, r24
    4dca:	7b 01       	movw	r14, r22
    4dcc:	6a 01       	movw	r12, r20
    4dce:	e9 01       	movw	r28, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:51

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    4dd0:	5b 01       	movw	r10, r22
    4dd2:	a2 1a       	sub	r10, r18
    4dd4:	b3 0a       	sbc	r11, r19
    4dd6:	26 17       	cp	r18, r22
    4dd8:	37 07       	cpc	r19, r23
    4dda:	18 f0       	brcs	.+6      	; 0x4de2 <u8g2_DrawLine+0x3c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:51 (discriminator 2)
    4ddc:	59 01       	movw	r10, r18
    4dde:	a6 1a       	sub	r10, r22
    4de0:	b7 0a       	sbc	r11, r23
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4de2:	0c 15       	cp	r16, r12
    4de4:	1d 05       	cpc	r17, r13
    4de6:	60 f4       	brcc	.+24     	; 0x4e00 <u8g2_DrawLine+0x5a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52 (discriminator 1)
    4de8:	46 01       	movw	r8, r12
    4dea:	80 1a       	sub	r8, r16
    4dec:	91 0a       	sbc	r9, r17
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54 (discriminator 1)

  if ( dy > dx ) 
    4dee:	a8 14       	cp	r10, r8
    4df0:	b9 04       	cpc	r11, r9
    4df2:	38 f1       	brcs	.+78     	; 0x4e42 <u8g2_DrawLine+0x9c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:61
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4df4:	ce 15       	cp	r28, r14
    4df6:	df 05       	cpc	r29, r15
    4df8:	08 f4       	brcc	.+2      	; 0x4dfc <u8g2_DrawLine+0x56>
    4dfa:	48 c0       	rjmp	.+144    	; 0x4e8c <u8g2_DrawLine+0xe6>
    4dfc:	31 2c       	mov	r3, r1
    4dfe:	18 c0       	rjmp	.+48     	; 0x4e30 <u8g2_DrawLine+0x8a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:52 (discriminator 2)
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    4e00:	48 01       	movw	r8, r16
    4e02:	8c 18       	sub	r8, r12
    4e04:	9d 08       	sbc	r9, r13
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54 (discriminator 2)

  if ( dy > dx ) 
    4e06:	a8 14       	cp	r10, r8
    4e08:	b9 04       	cpc	r11, r9
    4e0a:	08 f0       	brcs	.+2      	; 0x4e0e <u8g2_DrawLine+0x68>
    4e0c:	65 c0       	rjmp	.+202    	; 0x4ed8 <u8g2_DrawLine+0x132>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54
    4e0e:	9a 2d       	mov	r25, r10
    4e10:	8b 2d       	mov	r24, r11
    4e12:	54 01       	movw	r10, r8
    4e14:	89 2e       	mov	r8, r25
    4e16:	98 2e       	mov	r9, r24
    4e18:	9c 2f       	mov	r25, r28
    4e1a:	8d 2f       	mov	r24, r29
    4e1c:	e8 01       	movw	r28, r16
    4e1e:	09 2f       	mov	r16, r25
    4e20:	18 2f       	mov	r17, r24
    4e22:	9e 2d       	mov	r25, r14
    4e24:	8f 2d       	mov	r24, r15
    4e26:	76 01       	movw	r14, r12
    4e28:	c9 2e       	mov	r12, r25
    4e2a:	d8 2e       	mov	r13, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:56
  {
    swapxy = 1;
    4e2c:	33 24       	eor	r3, r3
    4e2e:	33 94       	inc	r3
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4e30:	35 01       	movw	r6, r10
    4e32:	76 94       	lsr	r7
    4e34:	67 94       	ror	r6
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:67
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4e36:	c0 16       	cp	r12, r16
    4e38:	d1 06       	cpc	r13, r17
    4e3a:	90 f1       	brcs	.+100    	; 0x4ea0 <u8g2_DrawLine+0xfa>
    4e3c:	0f ef       	ldi	r16, 0xFF	; 255
    4e3e:	1f ef       	ldi	r17, 0xFF	; 255
    4e40:	31 c0       	rjmp	.+98     	; 0x4ea4 <u8g2_DrawLine+0xfe>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:54
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    4e42:	9a 2d       	mov	r25, r10
    4e44:	8b 2d       	mov	r24, r11
    4e46:	54 01       	movw	r10, r8
    4e48:	89 2e       	mov	r8, r25
    4e4a:	98 2e       	mov	r9, r24
    4e4c:	9c 2d       	mov	r25, r12
    4e4e:	8d 2d       	mov	r24, r13
    4e50:	6e 01       	movw	r12, r28
    4e52:	c9 2f       	mov	r28, r25
    4e54:	d8 2f       	mov	r29, r24
    4e56:	9e 2d       	mov	r25, r14
    4e58:	8f 2d       	mov	r24, r15
    4e5a:	78 01       	movw	r14, r16
    4e5c:	09 2f       	mov	r16, r25
    4e5e:	18 2f       	mov	r17, r24
    4e60:	e5 cf       	rjmp	.-54     	; 0x4e2c <u8g2_DrawLine+0x86>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:81
#endif

  for( x = x1; x <= x2; x++ )
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    4e62:	a6 01       	movw	r20, r12
    4e64:	b7 01       	movw	r22, r14
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:80
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
  {
    if ( swapxy == 0 ) 
    4e66:	33 20       	and	r3, r3
    4e68:	11 f0       	breq	.+4      	; 0x4e6e <u8g2_DrawLine+0xc8>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:83
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    4e6a:	a7 01       	movw	r20, r14
    4e6c:	b6 01       	movw	r22, r12
    4e6e:	c2 01       	movw	r24, r4
    4e70:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <u8g2_DrawPixel>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:84
    err -= (u8g2_uint_t)dy;
    4e74:	68 18       	sub	r6, r8
    4e76:	79 08       	sbc	r7, r9
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:85
    if ( err < 0 ) 
    4e78:	77 fe       	sbrs	r7, 7
    4e7a:	04 c0       	rjmp	.+8      	; 0x4e84 <u8g2_DrawLine+0xde>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:87
    {
      y += (u8g2_uint_t)ystep;
    4e7c:	c0 0e       	add	r12, r16
    4e7e:	d1 1e       	adc	r13, r17
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:88
      err += (u8g2_uint_t)dx;
    4e80:	6a 0c       	add	r6, r10
    4e82:	7b 1c       	adc	r7, r11
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:78 (discriminator 2)
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    4e84:	8f ef       	ldi	r24, 0xFF	; 255
    4e86:	e8 1a       	sub	r14, r24
    4e88:	f8 0a       	sbc	r15, r24
    4e8a:	11 c0       	rjmp	.+34     	; 0x4eae <u8g2_DrawLine+0x108>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4e8c:	35 01       	movw	r6, r10
    4e8e:	76 94       	lsr	r7
    4e90:	67 94       	ror	r6
    4e92:	68 01       	movw	r12, r16
    4e94:	9e 2d       	mov	r25, r14
    4e96:	8f 2d       	mov	r24, r15
    4e98:	7e 01       	movw	r14, r28
    4e9a:	c9 2f       	mov	r28, r25
    4e9c:	d8 2f       	mov	r29, r24
    4e9e:	31 2c       	mov	r3, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:67
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    4ea0:	01 e0       	ldi	r16, 0x01	; 1
    4ea2:	10 e0       	ldi	r17, 0x00	; 0
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:74

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
    4ea4:	cf 3f       	cpi	r28, 0xFF	; 255
    4ea6:	dc 07       	cpc	r29, r28
    4ea8:	11 f4       	brne	.+4      	; 0x4eae <u8g2_DrawLine+0x108>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:75
    x2--;
    4eaa:	ce ef       	ldi	r28, 0xFE	; 254
    4eac:	df ef       	ldi	r29, 0xFF	; 255
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:78 (discriminator 1)
#endif

  for( x = x1; x <= x2; x++ )
    4eae:	ce 15       	cp	r28, r14
    4eb0:	df 05       	cpc	r29, r15
    4eb2:	b8 f6       	brcc	.-82     	; 0x4e62 <u8g2_DrawLine+0xbc>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:91
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    4eb4:	df 91       	pop	r29
    4eb6:	cf 91       	pop	r28
    4eb8:	1f 91       	pop	r17
    4eba:	0f 91       	pop	r16
    4ebc:	ff 90       	pop	r15
    4ebe:	ef 90       	pop	r14
    4ec0:	df 90       	pop	r13
    4ec2:	cf 90       	pop	r12
    4ec4:	bf 90       	pop	r11
    4ec6:	af 90       	pop	r10
    4ec8:	9f 90       	pop	r9
    4eca:	8f 90       	pop	r8
    4ecc:	7f 90       	pop	r7
    4ece:	6f 90       	pop	r6
    4ed0:	5f 90       	pop	r5
    4ed2:	4f 90       	pop	r4
    4ed4:	3f 90       	pop	r3
    4ed6:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:61
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    4ed8:	ce 15       	cp	r28, r14
    4eda:	df 05       	cpc	r29, r15
    4edc:	08 f0       	brcs	.+2      	; 0x4ee0 <u8g2_DrawLine+0x13a>
    4ede:	8e cf       	rjmp	.-228    	; 0x4dfc <u8g2_DrawLine+0x56>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_line.c:66
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    4ee0:	35 01       	movw	r6, r10
    4ee2:	76 94       	lsr	r7
    4ee4:	67 94       	ror	r6
    4ee6:	68 01       	movw	r12, r16
    4ee8:	9e 2d       	mov	r25, r14
    4eea:	8f 2d       	mov	r24, r15
    4eec:	7e 01       	movw	r14, r28
    4eee:	c9 2f       	mov	r28, r25
    4ef0:	d8 2f       	mov	r29, r24
    4ef2:	31 2c       	mov	r3, r1
    4ef4:	a3 cf       	rjmp	.-186    	; 0x4e3c <u8g2_DrawLine+0x96>

00004ef6 <u8g2_ll_hvline_vertical_top_lsb>:
u8g2_ll_hvline_vertical_top_lsb():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:73
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    4ef6:	af 92       	push	r10
    4ef8:	bf 92       	push	r11
    4efa:	cf 92       	push	r12
    4efc:	df 92       	push	r13
    4efe:	ef 92       	push	r14
    4f00:	ff 92       	push	r15
    4f02:	0f 93       	push	r16
    4f04:	cf 93       	push	r28
    4f06:	df 93       	push	r29
    4f08:	ec 01       	movw	r28, r24
    4f0a:	da 01       	movw	r26, r20
    4f0c:	79 01       	movw	r14, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:89
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    4f0e:	94 2f       	mov	r25, r20
    4f10:	97 70       	andi	r25, 0x07	; 7
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:91
  mask = 1;
  mask <<= bit_pos;
    4f12:	e1 e0       	ldi	r30, 0x01	; 1
    4f14:	f0 e0       	ldi	r31, 0x00	; 0
    4f16:	9f 01       	movw	r18, r30
    4f18:	09 2e       	mov	r0, r25
    4f1a:	01 c0       	rjmp	.+2      	; 0x4f1e <u8g2_ll_hvline_vertical_top_lsb+0x28>
    4f1c:	22 0f       	add	r18, r18
    4f1e:	0a 94       	dec	r0
    4f20:	ea f7       	brpl	.-6      	; 0x4f1c <u8g2_ll_hvline_vertical_top_lsb+0x26>
    4f22:	52 2f       	mov	r21, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4f24:	6e 01       	movw	r12, r28
    4f26:	8a e8       	ldi	r24, 0x8A	; 138
    4f28:	c8 0e       	add	r12, r24
    4f2a:	d1 1c       	adc	r13, r1
    4f2c:	f6 01       	movw	r30, r12
    4f2e:	80 81       	ld	r24, Z
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:93
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    4f30:	40 e0       	ldi	r20, 0x00	; 0
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    4f32:	82 30       	cpi	r24, 0x02	; 2
    4f34:	18 f4       	brcc	.+6      	; 0x4f3c <u8g2_ll_hvline_vertical_top_lsb+0x46>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:96
    or_mask  = mask;
    4f36:	42 2f       	mov	r20, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:97
  if ( u8g2->draw_color != 1 )
    4f38:	81 30       	cpi	r24, 0x01	; 1
    4f3a:	49 f1       	breq	.+82     	; 0x4f8e <u8g2_ll_hvline_vertical_top_lsb+0x98>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:102
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    4f3c:	5d 01       	movw	r10, r26
    4f3e:	f8 ef       	ldi	r31, 0xF8	; 248
    4f40:	af 22       	and	r10, r31
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:104
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    4f42:	e8 ad       	ldd	r30, Y+56	; 0x38
    4f44:	f9 ad       	ldd	r31, Y+57	; 0x39
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:103
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    4f46:	28 81       	ld	r18, Y
    4f48:	39 81       	ldd	r19, Y+1	; 0x01
    4f4a:	d9 01       	movw	r26, r18
    4f4c:	50 96       	adiw	r26, 0x10	; 16
    4f4e:	8c 91       	ld	r24, X
    4f50:	8a 9d       	mul	r24, r10
    4f52:	90 01       	movw	r18, r0
    4f54:	8b 9d       	mul	r24, r11
    4f56:	30 0d       	add	r19, r0
    4f58:	11 24       	eor	r1, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:106
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    4f5a:	62 0f       	add	r22, r18
    4f5c:	73 1f       	adc	r23, r19
    4f5e:	df 01       	movw	r26, r30
    4f60:	a6 0f       	add	r26, r22
    4f62:	b7 1f       	adc	r27, r23
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:108
  
  if ( dir == 0 )
    4f64:	01 11       	cpse	r16, r1
    4f66:	1a c0       	rjmp	.+52     	; 0x4f9c <u8g2_ll_hvline_vertical_top_lsb+0xa6>
    4f68:	ea 0e       	add	r14, r26
    4f6a:	fb 1e       	adc	r15, r27
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:115 (discriminator 1)
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
    4f6c:	8c 91       	ld	r24, X
    4f6e:	84 2b       	or	r24, r20
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:116 (discriminator 1)
	*ptr ^= xor_mask;
    4f70:	85 27       	eor	r24, r21
    4f72:	8d 93       	st	X+, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:119 (discriminator 1)
	ptr++;
	len--;
      } while( len != 0 );
    4f74:	ea 16       	cp	r14, r26
    4f76:	fb 06       	cpc	r15, r27
    4f78:	c9 f7       	brne	.-14     	; 0x4f6c <u8g2_ll_hvline_vertical_top_lsb+0x76>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:152
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    4f7a:	df 91       	pop	r29
    4f7c:	cf 91       	pop	r28
    4f7e:	0f 91       	pop	r16
    4f80:	ff 90       	pop	r15
    4f82:	ef 90       	pop	r14
    4f84:	df 90       	pop	r13
    4f86:	cf 90       	pop	r12
    4f88:	bf 90       	pop	r11
    4f8a:	af 90       	pop	r10
    4f8c:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:94
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    4f8e:	50 e0       	ldi	r21, 0x00	; 0
    4f90:	d5 cf       	rjmp	.-86     	; 0x4f3c <u8g2_ll_hvline_vertical_top_lsb+0x46>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:147
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    4f92:	44 0f       	add	r20, r20
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:148
	xor_mask <<= 1;
    4f94:	55 0f       	add	r21, r21
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:150
      }
    } while( len != 0 );
    4f96:	e1 14       	cp	r14, r1
    4f98:	f1 04       	cpc	r15, r1
    4f9a:	79 f3       	breq	.-34     	; 0x4f7a <u8g2_ll_hvline_vertical_top_lsb+0x84>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:128
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
    4f9c:	3c 91       	ld	r19, X
    4f9e:	34 2b       	or	r19, r20
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:129
      *ptr ^= xor_mask;
    4fa0:	35 27       	eor	r19, r21
    4fa2:	3c 93       	st	X, r19
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:131
      
      bit_pos++;
    4fa4:	9f 5f       	subi	r25, 0xFF	; 255
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:132
      bit_pos &= 7;
    4fa6:	97 70       	andi	r25, 0x07	; 7
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:134

      len--;
    4fa8:	e1 e0       	ldi	r30, 0x01	; 1
    4faa:	ee 1a       	sub	r14, r30
    4fac:	f1 08       	sbc	r15, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:136

      if ( bit_pos == 0 )
    4fae:	91 11       	cpse	r25, r1
    4fb0:	f0 cf       	rjmp	.-32     	; 0x4f92 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:138
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    4fb2:	2c ad       	ldd	r18, Y+60	; 0x3c
    4fb4:	3d ad       	ldd	r19, Y+61	; 0x3d
    4fb6:	a2 0f       	add	r26, r18
    4fb8:	b3 1f       	adc	r27, r19
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:140
		
	if ( u8g2->draw_color <= 1 )
    4fba:	f6 01       	movw	r30, r12
    4fbc:	80 81       	ld	r24, Z
    4fbe:	82 30       	cpi	r24, 0x02	; 2
    4fc0:	28 f4       	brcc	.+10     	; 0x4fcc <u8g2_ll_hvline_vertical_top_lsb+0xd6>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:142
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    4fc2:	81 30       	cpi	r24, 0x01	; 1
    4fc4:	09 f0       	breq	.+2      	; 0x4fc8 <u8g2_ll_hvline_vertical_top_lsb+0xd2>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	  xor_mask = 1;
    4fc6:	51 e0       	ldi	r21, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:141
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    4fc8:	41 e0       	ldi	r20, 0x01	; 1
    4fca:	e5 cf       	rjmp	.-54     	; 0x4f96 <u8g2_ll_hvline_vertical_top_lsb+0xa0>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    4fcc:	51 e0       	ldi	r21, 0x01	; 1
    4fce:	e3 cf       	rjmp	.-58     	; 0x4f96 <u8g2_ll_hvline_vertical_top_lsb+0xa0>

00004fd0 <u8g2_update_dimension_common>:
u8g2_update_dimension_common():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:62
{
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	fc 01       	movw	r30, r24
    4fd6:	a0 81       	ld	r26, Z
    4fd8:	b1 81       	ldd	r27, Z+1	; 0x01
    4fda:	82 ad       	ldd	r24, Z+58	; 0x3a
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	9c 01       	movw	r18, r24
    4fe0:	43 e0       	ldi	r20, 0x03	; 3
    4fe2:	22 0f       	add	r18, r18
    4fe4:	33 1f       	adc	r19, r19
    4fe6:	4a 95       	dec	r20
    4fe8:	e1 f7       	brne	.-8      	; 0x4fe2 <u8g2_update_dimension_common+0x12>
    4fea:	37 af       	std	Z+63, r19	; 0x3f
    4fec:	26 af       	std	Z+62, r18	; 0x3e
    4fee:	50 96       	adiw	r26, 0x10	; 16
    4ff0:	2c 91       	ld	r18, X
    4ff2:	50 97       	sbiw	r26, 0x10	; 16
    4ff4:	48 e0       	ldi	r20, 0x08	; 8
    4ff6:	24 9f       	mul	r18, r20
    4ff8:	90 01       	movw	r18, r0
    4ffa:	11 24       	eor	r1, r1
    4ffc:	35 af       	std	Z+61, r19	; 0x3d
    4ffe:	24 af       	std	Z+60, r18	; 0x3c
    5000:	23 ad       	ldd	r18, Z+59	; 0x3b
    5002:	30 e0       	ldi	r19, 0x00	; 0
    5004:	b9 01       	movw	r22, r18
    5006:	53 e0       	ldi	r21, 0x03	; 3
    5008:	66 0f       	add	r22, r22
    500a:	77 1f       	adc	r23, r23
    500c:	5a 95       	dec	r21
    500e:	e1 f7       	brne	.-8      	; 0x5008 <u8g2_update_dimension_common+0x38>
    5010:	ef 01       	movw	r28, r30
    5012:	c0 5c       	subi	r28, 0xC0	; 192
    5014:	df 4f       	sbci	r29, 0xFF	; 255
    5016:	79 83       	std	Y+1, r23	; 0x01
    5018:	68 83       	st	Y, r22
    501a:	51 96       	adiw	r26, 0x11	; 17
    501c:	4c 91       	ld	r20, X
    501e:	51 97       	sbiw	r26, 0x11	; 17
    5020:	e9 01       	movw	r28, r18
    5022:	c8 0f       	add	r28, r24
    5024:	d9 1f       	adc	r29, r25
    5026:	50 e0       	ldi	r21, 0x00	; 0
    5028:	4c 17       	cp	r20, r28
    502a:	5d 07       	cpc	r21, r29
    502c:	18 f4       	brcc	.+6      	; 0x5034 <u8g2_update_dimension_common+0x64>
    502e:	ca 01       	movw	r24, r20
    5030:	82 1b       	sub	r24, r18
    5032:	93 0b       	sbc	r25, r19
    5034:	ef 01       	movw	r28, r30
    5036:	ce 5b       	subi	r28, 0xBE	; 190
    5038:	df 4f       	sbci	r29, 0xFF	; 255
    503a:	79 83       	std	Y+1, r23	; 0x01
    503c:	68 83       	st	Y, r22
    503e:	22 96       	adiw	r28, 0x02	; 2
    5040:	23 e0       	ldi	r18, 0x03	; 3
    5042:	88 0f       	add	r24, r24
    5044:	99 1f       	adc	r25, r25
    5046:	2a 95       	dec	r18
    5048:	e1 f7       	brne	.-8      	; 0x5042 <u8g2_update_dimension_common+0x72>
    504a:	86 0f       	add	r24, r22
    504c:	97 1f       	adc	r25, r23
    504e:	99 83       	std	Y+1, r25	; 0x01
    5050:	88 83       	st	Y, r24
    5052:	22 96       	adiw	r28, 0x02	; 2
    5054:	54 96       	adiw	r26, 0x14	; 20
    5056:	8d 91       	ld	r24, X+
    5058:	9c 91       	ld	r25, X
    505a:	55 97       	sbiw	r26, 0x15	; 21
    505c:	99 83       	std	Y+1, r25	; 0x01
    505e:	88 83       	st	Y, r24
    5060:	e8 5b       	subi	r30, 0xB8	; 184
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	56 96       	adiw	r26, 0x16	; 22
    5066:	8d 91       	ld	r24, X+
    5068:	9c 91       	ld	r25, X
    506a:	91 83       	std	Z+1, r25	; 0x01
    506c:	80 83       	st	Z, r24
    506e:	df 91       	pop	r29
    5070:	cf 91       	pop	r28
    5072:	08 95       	ret

00005074 <u8g2_update_dimension_r0>:
u8g2_update_dimension_r0():
    5074:	0c 94 e8 27 	jmp	0x4fd0	; 0x4fd0 <u8g2_update_dimension_common>

00005078 <u8g2_draw_l90_r0>:
u8g2_draw_l90_r0():
    5078:	0f 93       	push	r16
    507a:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <u8g2_draw_hv_line_2dir>
    507e:	0f 91       	pop	r16
    5080:	08 95       	ret

00005082 <u8g2_apply_clip_window>:
u8g2_apply_clip_window():
    5082:	8f 92       	push	r8
    5084:	9f 92       	push	r9
    5086:	af 92       	push	r10
    5088:	bf 92       	push	r11
    508a:	cf 92       	push	r12
    508c:	df 92       	push	r13
    508e:	ef 92       	push	r14
    5090:	ff 92       	push	r15
    5092:	0f 93       	push	r16
    5094:	1f 93       	push	r17
    5096:	cf 93       	push	r28
    5098:	df 93       	push	r29
    509a:	ec 01       	movw	r28, r24
    509c:	7c 01       	movw	r14, r24
    509e:	88 e5       	ldi	r24, 0x58	; 88
    50a0:	e8 0e       	add	r14, r24
    50a2:	f1 1c       	adc	r15, r1
    50a4:	f7 01       	movw	r30, r14
    50a6:	00 81       	ld	r16, Z
    50a8:	11 81       	ldd	r17, Z+1	; 0x01
    50aa:	5e 01       	movw	r10, r28
    50ac:	f4 e5       	ldi	r31, 0x54	; 84
    50ae:	af 0e       	add	r10, r31
    50b0:	b1 1c       	adc	r11, r1
    50b2:	f5 01       	movw	r30, r10
    50b4:	20 81       	ld	r18, Z
    50b6:	31 81       	ldd	r19, Z+1	; 0x01
    50b8:	6e 01       	movw	r12, r28
    50ba:	f6 e5       	ldi	r31, 0x56	; 86
    50bc:	cf 0e       	add	r12, r31
    50be:	d1 1c       	adc	r13, r1
    50c0:	f6 01       	movw	r30, r12
    50c2:	40 81       	ld	r20, Z
    50c4:	51 81       	ldd	r21, Z+1	; 0x01
    50c6:	4e 01       	movw	r8, r28
    50c8:	f2 e5       	ldi	r31, 0x52	; 82
    50ca:	8f 0e       	add	r8, r31
    50cc:	91 1c       	adc	r9, r1
    50ce:	f4 01       	movw	r30, r8
    50d0:	60 81       	ld	r22, Z
    50d2:	71 81       	ldd	r23, Z+1	; 0x01
    50d4:	ce 01       	movw	r24, r28
    50d6:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <u8g2_IsIntersection>
    50da:	fe 01       	movw	r30, r28
    50dc:	ec 57       	subi	r30, 0x7C	; 124
    50de:	ff 4f       	sbci	r31, 0xFF	; 255
    50e0:	81 11       	cpse	r24, r1
    50e2:	0e c0       	rjmp	.+28     	; 0x5100 <u8g2_apply_clip_window+0x7e>
    50e4:	10 82       	st	Z, r1
    50e6:	df 91       	pop	r29
    50e8:	cf 91       	pop	r28
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	ff 90       	pop	r15
    50f0:	ef 90       	pop	r14
    50f2:	df 90       	pop	r13
    50f4:	cf 90       	pop	r12
    50f6:	bf 90       	pop	r11
    50f8:	af 90       	pop	r10
    50fa:	9f 90       	pop	r9
    50fc:	8f 90       	pop	r8
    50fe:	08 95       	ret
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	80 83       	st	Z, r24
    5104:	f4 01       	movw	r30, r8
    5106:	80 81       	ld	r24, Z
    5108:	91 81       	ldd	r25, Z+1	; 0x01
    510a:	fe 01       	movw	r30, r28
    510c:	e6 5b       	subi	r30, 0xB6	; 182
    510e:	ff 4f       	sbci	r31, 0xFF	; 255
    5110:	20 81       	ld	r18, Z
    5112:	31 81       	ldd	r19, Z+1	; 0x01
    5114:	28 17       	cp	r18, r24
    5116:	39 07       	cpc	r19, r25
    5118:	10 f4       	brcc	.+4      	; 0x511e <u8g2_apply_clip_window+0x9c>
    511a:	91 83       	std	Z+1, r25	; 0x01
    511c:	80 83       	st	Z, r24
    511e:	f5 01       	movw	r30, r10
    5120:	80 81       	ld	r24, Z
    5122:	91 81       	ldd	r25, Z+1	; 0x01
    5124:	fe 01       	movw	r30, r28
    5126:	e4 5b       	subi	r30, 0xB4	; 180
    5128:	ff 4f       	sbci	r31, 0xFF	; 255
    512a:	20 81       	ld	r18, Z
    512c:	31 81       	ldd	r19, Z+1	; 0x01
    512e:	82 17       	cp	r24, r18
    5130:	93 07       	cpc	r25, r19
    5132:	10 f4       	brcc	.+4      	; 0x5138 <u8g2_apply_clip_window+0xb6>
    5134:	91 83       	std	Z+1, r25	; 0x01
    5136:	80 83       	st	Z, r24
    5138:	f6 01       	movw	r30, r12
    513a:	80 81       	ld	r24, Z
    513c:	91 81       	ldd	r25, Z+1	; 0x01
    513e:	fe 01       	movw	r30, r28
    5140:	e2 5b       	subi	r30, 0xB2	; 178
    5142:	ff 4f       	sbci	r31, 0xFF	; 255
    5144:	20 81       	ld	r18, Z
    5146:	31 81       	ldd	r19, Z+1	; 0x01
    5148:	28 17       	cp	r18, r24
    514a:	39 07       	cpc	r19, r25
    514c:	10 f4       	brcc	.+4      	; 0x5152 <u8g2_apply_clip_window+0xd0>
    514e:	91 83       	std	Z+1, r25	; 0x01
    5150:	80 83       	st	Z, r24
    5152:	f7 01       	movw	r30, r14
    5154:	80 81       	ld	r24, Z
    5156:	91 81       	ldd	r25, Z+1	; 0x01
    5158:	c0 5b       	subi	r28, 0xB0	; 176
    515a:	df 4f       	sbci	r29, 0xFF	; 255
    515c:	28 81       	ld	r18, Y
    515e:	39 81       	ldd	r19, Y+1	; 0x01
    5160:	82 17       	cp	r24, r18
    5162:	93 07       	cpc	r25, r19
    5164:	08 f0       	brcs	.+2      	; 0x5168 <u8g2_apply_clip_window+0xe6>
    5166:	bf cf       	rjmp	.-130    	; 0x50e6 <u8g2_apply_clip_window+0x64>
    5168:	99 83       	std	Y+1, r25	; 0x01
    516a:	88 83       	st	Y, r24
    516c:	bc cf       	rjmp	.-136    	; 0x50e6 <u8g2_apply_clip_window+0x64>

0000516e <u8g2_update_page_win_r0>:
u8g2_update_page_win_r0():
    516e:	fc 01       	movw	r30, r24
    5170:	e6 5b       	subi	r30, 0xB6	; 182
    5172:	ff 4f       	sbci	r31, 0xFF	; 255
    5174:	11 82       	std	Z+1, r1	; 0x01
    5176:	10 82       	st	Z, r1
    5178:	32 96       	adiw	r30, 0x02	; 2
    517a:	dc 01       	movw	r26, r24
    517c:	aa 5b       	subi	r26, 0xBA	; 186
    517e:	bf 4f       	sbci	r27, 0xFF	; 255
    5180:	2d 91       	ld	r18, X+
    5182:	3c 91       	ld	r19, X
    5184:	11 97       	sbiw	r26, 0x01	; 1
    5186:	31 83       	std	Z+1, r19	; 0x01
    5188:	20 83       	st	Z, r18
    518a:	32 96       	adiw	r30, 0x02	; 2
    518c:	14 97       	sbiw	r26, 0x04	; 4
    518e:	2d 91       	ld	r18, X+
    5190:	3c 91       	ld	r19, X
    5192:	11 97       	sbiw	r26, 0x01	; 1
    5194:	31 83       	std	Z+1, r19	; 0x01
    5196:	20 83       	st	Z, r18
    5198:	32 96       	adiw	r30, 0x02	; 2
    519a:	12 96       	adiw	r26, 0x02	; 2
    519c:	2d 91       	ld	r18, X+
    519e:	3c 91       	ld	r19, X
    51a0:	31 83       	std	Z+1, r19	; 0x01
    51a2:	20 83       	st	Z, r18
    51a4:	0c 94 41 28 	jmp	0x5082	; 0x5082 <u8g2_apply_clip_window>

000051a8 <u8g2_SetMaxClipWindow>:
u8g2_SetMaxClipWindow():
    51a8:	fc 01       	movw	r30, r24
    51aa:	ee 5a       	subi	r30, 0xAE	; 174
    51ac:	ff 4f       	sbci	r31, 0xFF	; 255
    51ae:	11 82       	std	Z+1, r1	; 0x01
    51b0:	10 82       	st	Z, r1
    51b2:	34 96       	adiw	r30, 0x04	; 4
    51b4:	11 82       	std	Z+1, r1	; 0x01
    51b6:	10 82       	st	Z, r1
    51b8:	32 97       	sbiw	r30, 0x02	; 2
    51ba:	2f ef       	ldi	r18, 0xFF	; 255
    51bc:	3f ef       	ldi	r19, 0xFF	; 255
    51be:	31 83       	std	Z+1, r19	; 0x01
    51c0:	20 83       	st	Z, r18
    51c2:	34 96       	adiw	r30, 0x04	; 4
    51c4:	31 83       	std	Z+1, r19	; 0x01
    51c6:	20 83       	st	Z, r18
    51c8:	dc 01       	movw	r26, r24
    51ca:	d6 96       	adiw	r26, 0x36	; 54
    51cc:	ed 91       	ld	r30, X+
    51ce:	fc 91       	ld	r31, X
    51d0:	02 80       	ldd	r0, Z+2	; 0x02
    51d2:	f3 81       	ldd	r31, Z+3	; 0x03
    51d4:	e0 2d       	mov	r30, r0
    51d6:	09 94       	ijmp

000051d8 <u8g2_SetupBuffer>:
u8g2_SetupBuffer():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:72
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    51d8:	0f 93       	push	r16
    51da:	1f 93       	push	r17
    51dc:	cf 93       	push	r28
    51de:	df 93       	push	r29
    51e0:	ec 01       	movw	r28, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:73
  u8g2->font = NULL;
    51e2:	fc 01       	movw	r30, r24
    51e4:	e6 5a       	subi	r30, 0xA6	; 166
    51e6:	ff 4f       	sbci	r31, 0xFF	; 255
    51e8:	11 82       	std	Z+1, r1	; 0x01
    51ea:	10 82       	st	Z, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:78
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    51ec:	3d ab       	std	Y+53, r19	; 0x35
    51ee:	2c ab       	std	Y+52, r18	; 0x34
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:80
  
  u8g2->tile_buf_ptr = buf;
    51f0:	79 af       	std	Y+57, r23	; 0x39
    51f2:	68 af       	std	Y+56, r22	; 0x38
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:81
  u8g2->tile_buf_height = tile_buf_height;
    51f4:	4a af       	std	Y+58, r20	; 0x3a
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:83
  
  u8g2->tile_curr_row = 0;
    51f6:	1b ae       	std	Y+59, r1	; 0x3b
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:85
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    51f8:	3f 96       	adiw	r30, 0x0f	; 15
    51fa:	10 82       	st	Z, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:86
  u8g2->bitmap_transparency = 0;
    51fc:	b0 96       	adiw	r30, 0x20	; 32
    51fe:	10 82       	st	Z, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:88
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    5200:	34 97       	sbiw	r30, 0x04	; 4
    5202:	10 82       	st	Z, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:89
  u8g2->draw_color = 1;
    5204:	35 96       	adiw	r30, 0x05	; 5
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	80 83       	st	Z, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:90
  u8g2->is_auto_page_clear = 1;
    520a:	31 96       	adiw	r30, 0x01	; 1
    520c:	80 83       	st	Z, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:92
  
  u8g2->cb = u8g2_cb;
    520e:	1f ab       	std	Y+55, r17	; 0x37
    5210:	0e ab       	std	Y+54, r16	; 0x36
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:93
  u8g2->cb->update_dimension(u8g2);
    5212:	d8 01       	movw	r26, r16
    5214:	ed 91       	ld	r30, X+
    5216:	fc 91       	ld	r31, X
    5218:	ce 01       	movw	r24, r28
    521a:	09 95       	icall
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:95
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    521c:	ce 01       	movw	r24, r28
    521e:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <u8g2_SetMaxClipWindow>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:100
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    5222:	ce 01       	movw	r24, r28
    5224:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <u8g2_SetFontPosBaseline>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:103
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    5228:	c4 59       	subi	r28, 0x94	; 148
    522a:	df 4f       	sbci	r29, 0xFF	; 255
    522c:	18 82       	st	Y, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:105
#endif
}
    522e:	df 91       	pop	r29
    5230:	cf 91       	pop	r28
    5232:	1f 91       	pop	r17
    5234:	0f 91       	pop	r16
    5236:	08 95       	ret

00005238 <u8x8_ascii_next>:
u8x8_ascii_next():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:459
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    5238:	66 23       	and	r22, r22
    523a:	29 f0       	breq	.+10     	; 0x5246 <u8x8_ascii_next+0xe>
    523c:	6a 30       	cpi	r22, 0x0A	; 10
    523e:	19 f0       	breq	.+6      	; 0x5246 <u8x8_ascii_next+0xe>
    5240:	86 2f       	mov	r24, r22
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	08 95       	ret
    5246:	8f ef       	ldi	r24, 0xFF	; 255
    5248:	9f ef       	ldi	r25, 0xFF	; 255
    524a:	08 95       	ret

0000524c <u8x8_utf8_init>:
u8x8_utf8_init():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    524c:	fc 01       	movw	r30, r24
    524e:	10 8e       	std	Z+24, r1	; 0x18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:288
}
    5250:	08 95       	ret

00005252 <u8x8_byte_SendBytes>:
u8x8_byte_SendBytes():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:45
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    5252:	9a 01       	movw	r18, r20
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:46
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    5254:	dc 01       	movw	r26, r24
    5256:	18 96       	adiw	r26, 0x08	; 8
    5258:	ed 91       	ld	r30, X+
    525a:	fc 91       	ld	r31, X
    525c:	46 2f       	mov	r20, r22
    525e:	67 e1       	ldi	r22, 0x17	; 23
    5260:	09 94       	ijmp

00005262 <u8x8_byte_SendByte>:
u8x8_byte_SendByte():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:50
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    5262:	cf 93       	push	r28
    5264:	df 93       	push	r29
    5266:	1f 92       	push	r1
    5268:	cd b7       	in	r28, 0x3d	; 61
    526a:	de b7       	in	r29, 0x3e	; 62
    526c:	69 83       	std	Y+1, r22	; 0x01
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:51
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    526e:	ae 01       	movw	r20, r28
    5270:	4f 5f       	subi	r20, 0xFF	; 255
    5272:	5f 4f       	sbci	r21, 0xFF	; 255
    5274:	61 e0       	ldi	r22, 0x01	; 1
    5276:	0e 94 29 29 	call	0x5252	; 0x5252 <u8x8_byte_SendBytes>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:52
}
    527a:	0f 90       	pop	r0
    527c:	df 91       	pop	r29
    527e:	cf 91       	pop	r28
    5280:	08 95       	ret

00005282 <u8x8_byte_StartTransfer>:
u8x8_byte_StartTransfer():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:56

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    5282:	dc 01       	movw	r26, r24
    5284:	18 96       	adiw	r26, 0x08	; 8
    5286:	ed 91       	ld	r30, X+
    5288:	fc 91       	ld	r31, X
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	40 e0       	ldi	r20, 0x00	; 0
    5290:	68 e1       	ldi	r22, 0x18	; 24
    5292:	09 94       	ijmp

00005294 <u8x8_byte_EndTransfer>:
u8x8_byte_EndTransfer():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:61
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    5294:	dc 01       	movw	r26, r24
    5296:	18 96       	adiw	r26, 0x08	; 8
    5298:	ed 91       	ld	r30, X+
    529a:	fc 91       	ld	r31, X
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	20 e0       	ldi	r18, 0x00	; 0
    52a0:	40 e0       	ldi	r20, 0x00	; 0
    52a2:	69 e1       	ldi	r22, 0x19	; 25
    52a4:	09 94       	ijmp

000052a6 <u8x8_i2c_data_transfer>:
u8x8_i2c_data_transfer():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:521
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    52a6:	ef 92       	push	r14
    52a8:	ff 92       	push	r15
    52aa:	1f 93       	push	r17
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	ec 01       	movw	r28, r24
    52b2:	16 2f       	mov	r17, r22
    52b4:	7a 01       	movw	r14, r20
    52b6:	0e 94 41 29 	call	0x5282	; 0x5282 <u8x8_byte_StartTransfer>
    52ba:	60 e4       	ldi	r22, 0x40	; 64
    52bc:	ce 01       	movw	r24, r28
    52be:	0e 94 31 29 	call	0x5262	; 0x5262 <u8x8_byte_SendByte>
    52c2:	e8 85       	ldd	r30, Y+8	; 0x08
    52c4:	f9 85       	ldd	r31, Y+9	; 0x09
    52c6:	97 01       	movw	r18, r14
    52c8:	41 2f       	mov	r20, r17
    52ca:	67 e1       	ldi	r22, 0x17	; 23
    52cc:	ce 01       	movw	r24, r28
    52ce:	09 95       	icall
    52d0:	ce 01       	movw	r24, r28
    52d2:	df 91       	pop	r29
    52d4:	cf 91       	pop	r28
    52d6:	1f 91       	pop	r17
    52d8:	ff 90       	pop	r15
    52da:	ef 90       	pop	r14
    52dc:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <u8x8_byte_EndTransfer>

000052e0 <u8x8_cad_SendCmd>:
u8x8_cad_SendCmd():
    52e0:	46 2f       	mov	r20, r22
    52e2:	dc 01       	movw	r26, r24
    52e4:	16 96       	adiw	r26, 0x06	; 6
    52e6:	ed 91       	ld	r30, X+
    52e8:	fc 91       	ld	r31, X
    52ea:	30 e0       	ldi	r19, 0x00	; 0
    52ec:	20 e0       	ldi	r18, 0x00	; 0
    52ee:	65 e1       	ldi	r22, 0x15	; 21
    52f0:	09 94       	ijmp

000052f2 <u8x8_cad_SendArg>:
u8x8_cad_SendArg():
    52f2:	46 2f       	mov	r20, r22
    52f4:	dc 01       	movw	r26, r24
    52f6:	16 96       	adiw	r26, 0x06	; 6
    52f8:	ed 91       	ld	r30, X+
    52fa:	fc 91       	ld	r31, X
    52fc:	30 e0       	ldi	r19, 0x00	; 0
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	66 e1       	ldi	r22, 0x16	; 22
    5302:	09 94       	ijmp

00005304 <u8x8_cad_SendData>:
u8x8_cad_SendData():
    5304:	9a 01       	movw	r18, r20
    5306:	dc 01       	movw	r26, r24
    5308:	16 96       	adiw	r26, 0x06	; 6
    530a:	ed 91       	ld	r30, X+
    530c:	fc 91       	ld	r31, X
    530e:	46 2f       	mov	r20, r22
    5310:	67 e1       	ldi	r22, 0x17	; 23
    5312:	09 94       	ijmp

00005314 <u8x8_cad_StartTransfer>:
u8x8_cad_StartTransfer():
    5314:	dc 01       	movw	r26, r24
    5316:	16 96       	adiw	r26, 0x06	; 6
    5318:	ed 91       	ld	r30, X+
    531a:	fc 91       	ld	r31, X
    531c:	30 e0       	ldi	r19, 0x00	; 0
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	68 e1       	ldi	r22, 0x18	; 24
    5324:	09 94       	ijmp

00005326 <u8x8_cad_EndTransfer>:
u8x8_cad_EndTransfer():
    5326:	dc 01       	movw	r26, r24
    5328:	16 96       	adiw	r26, 0x06	; 6
    532a:	ed 91       	ld	r30, X+
    532c:	fc 91       	ld	r31, X
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	20 e0       	ldi	r18, 0x00	; 0
    5332:	40 e0       	ldi	r20, 0x00	; 0
    5334:	69 e1       	ldi	r22, 0x19	; 25
    5336:	09 94       	ijmp

00005338 <u8x8_cad_SendSequence>:
u8x8_cad_SendSequence():
    5338:	ef 92       	push	r14
    533a:	ff 92       	push	r15
    533c:	0f 93       	push	r16
    533e:	1f 93       	push	r17
    5340:	cf 93       	push	r28
    5342:	df 93       	push	r29
    5344:	1f 92       	push	r1
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
    534a:	7c 01       	movw	r14, r24
    534c:	8b 01       	movw	r16, r22
    534e:	d8 01       	movw	r26, r16
    5350:	6c 91       	ld	r22, X
    5352:	67 31       	cpi	r22, 0x17	; 23
    5354:	29 f1       	breq	.+74     	; 0x53a0 <u8x8_cad_SendSequence+0x68>
    5356:	50 f4       	brcc	.+20     	; 0x536c <u8x8_cad_SendSequence+0x34>
    5358:	65 31       	cpi	r22, 0x15	; 21
    535a:	a0 f4       	brcc	.+40     	; 0x5384 <u8x8_cad_SendSequence+0x4c>
    535c:	0f 90       	pop	r0
    535e:	df 91       	pop	r29
    5360:	cf 91       	pop	r28
    5362:	1f 91       	pop	r17
    5364:	0f 91       	pop	r16
    5366:	ff 90       	pop	r15
    5368:	ef 90       	pop	r14
    536a:	08 95       	ret
    536c:	6a 31       	cpi	r22, 0x1A	; 26
    536e:	18 f1       	brcs	.+70     	; 0x53b6 <u8x8_cad_SendSequence+0x7e>
    5370:	6e 3f       	cpi	r22, 0xFE	; 254
    5372:	a1 f7       	brne	.-24     	; 0x535c <u8x8_cad_SendSequence+0x24>
    5374:	f8 01       	movw	r30, r16
    5376:	41 81       	ldd	r20, Z+1	; 0x01
    5378:	49 83       	std	Y+1, r20	; 0x01
    537a:	69 e2       	ldi	r22, 0x29	; 41
    537c:	c7 01       	movw	r24, r14
    537e:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <u8x8_gpio_call>
    5382:	0b c0       	rjmp	.+22     	; 0x539a <u8x8_cad_SendSequence+0x62>
    5384:	f8 01       	movw	r30, r16
    5386:	41 81       	ldd	r20, Z+1	; 0x01
    5388:	49 83       	std	Y+1, r20	; 0x01
    538a:	d7 01       	movw	r26, r14
    538c:	16 96       	adiw	r26, 0x06	; 6
    538e:	ed 91       	ld	r30, X+
    5390:	fc 91       	ld	r31, X
    5392:	30 e0       	ldi	r19, 0x00	; 0
    5394:	20 e0       	ldi	r18, 0x00	; 0
    5396:	c7 01       	movw	r24, r14
    5398:	09 95       	icall
    539a:	0e 5f       	subi	r16, 0xFE	; 254
    539c:	1f 4f       	sbci	r17, 0xFF	; 255
    539e:	d7 cf       	rjmp	.-82     	; 0x534e <u8x8_cad_SendSequence+0x16>
    53a0:	f8 01       	movw	r30, r16
    53a2:	81 81       	ldd	r24, Z+1	; 0x01
    53a4:	89 83       	std	Y+1, r24	; 0x01
    53a6:	ae 01       	movw	r20, r28
    53a8:	4f 5f       	subi	r20, 0xFF	; 255
    53aa:	5f 4f       	sbci	r21, 0xFF	; 255
    53ac:	61 e0       	ldi	r22, 0x01	; 1
    53ae:	c7 01       	movw	r24, r14
    53b0:	0e 94 82 29 	call	0x5304	; 0x5304 <u8x8_cad_SendData>
    53b4:	f2 cf       	rjmp	.-28     	; 0x539a <u8x8_cad_SendSequence+0x62>
    53b6:	0f 5f       	subi	r16, 0xFF	; 255
    53b8:	1f 4f       	sbci	r17, 0xFF	; 255
    53ba:	d7 01       	movw	r26, r14
    53bc:	16 96       	adiw	r26, 0x06	; 6
    53be:	ed 91       	ld	r30, X+
    53c0:	fc 91       	ld	r31, X
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	20 e0       	ldi	r18, 0x00	; 0
    53c6:	40 e0       	ldi	r20, 0x00	; 0
    53c8:	c7 01       	movw	r24, r14
    53ca:	09 95       	icall
    53cc:	c0 cf       	rjmp	.-128    	; 0x534e <u8x8_cad_SendSequence+0x16>

000053ce <u8x8_cad_ssd13xx_fast_i2c>:
u8x8_cad_ssd13xx_fast_i2c():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:535
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    53ce:	ef 92       	push	r14
    53d0:	ff 92       	push	r15
    53d2:	1f 93       	push	r17
    53d4:	cf 93       	push	r28
    53d6:	df 93       	push	r29
    53d8:	ec 01       	movw	r28, r24
    53da:	14 2f       	mov	r17, r20
    53dc:	79 01       	movw	r14, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    53de:	66 31       	cpi	r22, 0x16	; 22
    53e0:	81 f1       	breq	.+96     	; 0x5442 <u8x8_cad_ssd13xx_fast_i2c+0x74>
    53e2:	38 f4       	brcc	.+14     	; 0x53f2 <u8x8_cad_ssd13xx_fast_i2c+0x24>
    53e4:	64 31       	cpi	r22, 0x14	; 20
    53e6:	09 f4       	brne	.+2      	; 0x53ea <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    53e8:	4b c0       	rjmp	.+150    	; 0x5480 <u8x8_cad_ssd13xx_fast_i2c+0xb2>
    53ea:	65 31       	cpi	r22, 0x15	; 21
    53ec:	79 f0       	breq	.+30     	; 0x540c <u8x8_cad_ssd13xx_fast_i2c+0x3e>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:602
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	22 c0       	rjmp	.+68     	; 0x5436 <u8x8_cad_ssd13xx_fast_i2c+0x68>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    53f2:	68 31       	cpi	r22, 0x18	; 24
    53f4:	c9 f1       	breq	.+114    	; 0x5468 <u8x8_cad_ssd13xx_fast_i2c+0x9a>
    53f6:	50 f1       	brcs	.+84     	; 0x544c <u8x8_cad_ssd13xx_fast_i2c+0x7e>
    53f8:	69 31       	cpi	r22, 0x19	; 25
    53fa:	c9 f7       	brne	.-14     	; 0x53ee <u8x8_cad_ssd13xx_fast_i2c+0x20>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:597
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    53fc:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <in_transfer.3489>
    5400:	88 23       	and	r24, r24
    5402:	91 f1       	breq	.+100    	; 0x5468 <u8x8_cad_ssd13xx_fast_i2c+0x9a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:598
	u8x8_byte_EndTransfer(u8x8); 
    5404:	ce 01       	movw	r24, r28
    5406:	0e 94 4a 29 	call	0x5294	; 0x5294 <u8x8_byte_EndTransfer>
    540a:	2e c0       	rjmp	.+92     	; 0x5468 <u8x8_cad_ssd13xx_fast_i2c+0x9a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:544
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    540c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <in_transfer.3489>
    5410:	88 23       	and	r24, r24
    5412:	19 f0       	breq	.+6      	; 0x541a <u8x8_cad_ssd13xx_fast_i2c+0x4c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:545
	 u8x8_byte_EndTransfer(u8x8); 
    5414:	ce 01       	movw	r24, r28
    5416:	0e 94 4a 29 	call	0x5294	; 0x5294 <u8x8_byte_EndTransfer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:547
      
      u8x8_byte_StartTransfer(u8x8);
    541a:	ce 01       	movw	r24, r28
    541c:	0e 94 41 29 	call	0x5282	; 0x5282 <u8x8_byte_StartTransfer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:548
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    5420:	60 e0       	ldi	r22, 0x00	; 0
    5422:	ce 01       	movw	r24, r28
    5424:	0e 94 31 29 	call	0x5262	; 0x5262 <u8x8_byte_SendByte>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:549
      u8x8_byte_SendByte(u8x8, arg_int);
    5428:	61 2f       	mov	r22, r17
    542a:	ce 01       	movw	r24, r28
    542c:	0e 94 31 29 	call	0x5262	; 0x5262 <u8x8_byte_SendByte>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:550
      in_transfer = 1;
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <in_transfer.3489>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	ff 90       	pop	r15
    543e:	ef 90       	pop	r14
    5440:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:564
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    5442:	64 2f       	mov	r22, r20
    5444:	0e 94 31 29 	call	0x5262	; 0x5262 <u8x8_byte_SendByte>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:604
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    5448:	81 e0       	ldi	r24, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:600
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    544a:	f5 cf       	rjmp	.-22     	; 0x5436 <u8x8_cad_ssd13xx_fast_i2c+0x68>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:567
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    544c:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <in_transfer.3489>
    5450:	88 23       	and	r24, r24
    5452:	19 f0       	breq	.+6      	; 0x545a <u8x8_cad_ssd13xx_fast_i2c+0x8c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:568
	u8x8_byte_EndTransfer(u8x8); 
    5454:	ce 01       	movw	r24, r28
    5456:	0e 94 4a 29 	call	0x5294	; 0x5294 <u8x8_byte_EndTransfer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    545a:	a7 01       	movw	r20, r14
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:579
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    545c:	19 31       	cpi	r17, 0x19	; 25
    545e:	38 f4       	brcc	.+14     	; 0x546e <u8x8_cad_ssd13xx_fast_i2c+0xa0>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:585
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    5460:	61 2f       	mov	r22, r17
    5462:	ce 01       	movw	r24, r28
    5464:	0e 94 53 29 	call	0x52a6	; 0x52a6 <u8x8_i2c_data_transfer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:599
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    5468:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <in_transfer.3489>
    546c:	ed cf       	rjmp	.-38     	; 0x5448 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    546e:	68 e1       	ldi	r22, 0x18	; 24
    5470:	ce 01       	movw	r24, r28
    5472:	0e 94 53 29 	call	0x52a6	; 0x52a6 <u8x8_i2c_data_transfer>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:582
	arg_int-=24;
    5476:	18 51       	subi	r17, 0x18	; 24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:583
	p+=24;
    5478:	88 e1       	ldi	r24, 0x18	; 24
    547a:	e8 0e       	add	r14, r24
    547c:	f1 1c       	adc	r15, r1
    547e:	ed cf       	rjmp	.-38     	; 0x545a <u8x8_cad_ssd13xx_fast_i2c+0x8c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:590
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    5480:	8e 89       	ldd	r24, Y+22	; 0x16
    5482:	8f 3f       	cpi	r24, 0xFF	; 255
    5484:	11 f4       	brne	.+4      	; 0x548a <u8x8_cad_ssd13xx_fast_i2c+0xbc>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:591
	u8x8->i2c_address = 0x078;
    5486:	88 e7       	ldi	r24, 0x78	; 120
    5488:	8e 8b       	std	Y+22, r24	; 0x16
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    548a:	e8 85       	ldd	r30, Y+8	; 0x08
    548c:	f9 85       	ldd	r31, Y+9	; 0x09
    548e:	97 01       	movw	r18, r14
    5490:	41 2f       	mov	r20, r17
    5492:	64 e1       	ldi	r22, 0x14	; 20
    5494:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    5496:	df 91       	pop	r29
    5498:	cf 91       	pop	r28
    549a:	1f 91       	pop	r17
    549c:	ff 90       	pop	r15
    549e:	ef 90       	pop	r14
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    54a0:	09 94       	ijmp

000054a2 <u8x8_d_ssd1306_sh1106_generic>:
u8x8_d_ssd1306_sh1106_generic():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:446
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_alt0_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    54a2:	ef 92       	push	r14
    54a4:	ff 92       	push	r15
    54a6:	0f 93       	push	r16
    54a8:	1f 93       	push	r17
    54aa:	cf 93       	push	r28
    54ac:	df 93       	push	r29
    54ae:	ec 01       	movw	r28, r24
    54b0:	04 2f       	mov	r16, r20
    54b2:	79 01       	movw	r14, r18
    54b4:	6d 30       	cpi	r22, 0x0D	; 13
    54b6:	09 f4       	brne	.+2      	; 0x54ba <u8x8_d_ssd1306_sh1106_generic+0x18>
    54b8:	47 c0       	rjmp	.+142    	; 0x5548 <u8x8_d_ssd1306_sh1106_generic+0xa6>
    54ba:	20 f4       	brcc	.+8      	; 0x54c4 <u8x8_d_ssd1306_sh1106_generic+0x22>
    54bc:	6b 30       	cpi	r22, 0x0B	; 11
    54be:	99 f1       	breq	.+102    	; 0x5526 <u8x8_d_ssd1306_sh1106_generic+0x84>
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	3b c0       	rjmp	.+118    	; 0x553a <u8x8_d_ssd1306_sh1106_generic+0x98>
    54c4:	6e 30       	cpi	r22, 0x0E	; 14
    54c6:	09 f4       	brne	.+2      	; 0x54ca <u8x8_d_ssd1306_sh1106_generic+0x28>
    54c8:	52 c0       	rjmp	.+164    	; 0x556e <u8x8_d_ssd1306_sh1106_generic+0xcc>
    54ca:	6f 30       	cpi	r22, 0x0F	; 15
    54cc:	c9 f7       	brne	.-14     	; 0x54c0 <u8x8_d_ssd1306_sh1106_generic+0x1e>
    54ce:	0e 94 8a 29 	call	0x5314	; 0x5314 <u8x8_cad_StartTransfer>
    54d2:	f7 01       	movw	r30, r14
    54d4:	13 81       	ldd	r17, Z+3	; 0x03
    54d6:	11 0f       	add	r17, r17
    54d8:	11 0f       	add	r17, r17
    54da:	11 0f       	add	r17, r17
    54dc:	6c 89       	ldd	r22, Y+20	; 0x14
    54de:	16 0f       	add	r17, r22
    54e0:	60 e4       	ldi	r22, 0x40	; 64
    54e2:	ce 01       	movw	r24, r28
    54e4:	0e 94 70 29 	call	0x52e0	; 0x52e0 <u8x8_cad_SendCmd>
    54e8:	61 2f       	mov	r22, r17
    54ea:	62 95       	swap	r22
    54ec:	6f 70       	andi	r22, 0x0F	; 15
    54ee:	60 61       	ori	r22, 0x10	; 16
    54f0:	ce 01       	movw	r24, r28
    54f2:	0e 94 70 29 	call	0x52e0	; 0x52e0 <u8x8_cad_SendCmd>
    54f6:	61 2f       	mov	r22, r17
    54f8:	6f 70       	andi	r22, 0x0F	; 15
    54fa:	ce 01       	movw	r24, r28
    54fc:	0e 94 79 29 	call	0x52f2	; 0x52f2 <u8x8_cad_SendArg>
    5500:	f7 01       	movw	r30, r14
    5502:	64 81       	ldd	r22, Z+4	; 0x04
    5504:	60 6b       	ori	r22, 0xB0	; 176
    5506:	ce 01       	movw	r24, r28
    5508:	0e 94 79 29 	call	0x52f2	; 0x52f2 <u8x8_cad_SendArg>
    550c:	f7 01       	movw	r30, r14
    550e:	40 81       	ld	r20, Z
    5510:	51 81       	ldd	r21, Z+1	; 0x01
    5512:	62 81       	ldd	r22, Z+2	; 0x02
    5514:	66 0f       	add	r22, r22
    5516:	66 0f       	add	r22, r22
    5518:	66 0f       	add	r22, r22
    551a:	ce 01       	movw	r24, r28
    551c:	0e 94 82 29 	call	0x5304	; 0x5304 <u8x8_cad_SendData>
    5520:	01 50       	subi	r16, 0x01	; 1
    5522:	a1 f7       	brne	.-24     	; 0x550c <u8x8_d_ssd1306_sh1106_generic+0x6a>
    5524:	2e c0       	rjmp	.+92     	; 0x5582 <u8x8_d_ssd1306_sh1106_generic+0xe0>
    5526:	61 e8       	ldi	r22, 0x81	; 129
    5528:	71 e0       	ldi	r23, 0x01	; 1
    552a:	44 23       	and	r20, r20
    552c:	11 f0       	breq	.+4      	; 0x5532 <u8x8_d_ssd1306_sh1106_generic+0x90>
    552e:	6c e7       	ldi	r22, 0x7C	; 124
    5530:	71 e0       	ldi	r23, 0x01	; 1
    5532:	ce 01       	movw	r24, r28
    5534:	0e 94 9c 29 	call	0x5338	; 0x5338 <u8x8_cad_SendSequence>
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	df 91       	pop	r29
    553c:	cf 91       	pop	r28
    553e:	1f 91       	pop	r17
    5540:	0f 91       	pop	r16
    5542:	ff 90       	pop	r15
    5544:	ef 90       	pop	r14
    5546:	08 95       	ret
    5548:	41 11       	cpse	r20, r1
    554a:	09 c0       	rjmp	.+18     	; 0x555e <u8x8_d_ssd1306_sh1106_generic+0xbc>
    554c:	65 e7       	ldi	r22, 0x75	; 117
    554e:	71 e0       	ldi	r23, 0x01	; 1
    5550:	0e 94 9c 29 	call	0x5338	; 0x5338 <u8x8_cad_SendSequence>
    5554:	e8 81       	ld	r30, Y
    5556:	f9 81       	ldd	r31, Y+1	; 0x01
    5558:	82 89       	ldd	r24, Z+18	; 0x12
    555a:	8c 8b       	std	Y+20, r24	; 0x14
    555c:	ed cf       	rjmp	.-38     	; 0x5538 <u8x8_d_ssd1306_sh1106_generic+0x96>
    555e:	6e e6       	ldi	r22, 0x6E	; 110
    5560:	71 e0       	ldi	r23, 0x01	; 1
    5562:	0e 94 9c 29 	call	0x5338	; 0x5338 <u8x8_cad_SendSequence>
    5566:	e8 81       	ld	r30, Y
    5568:	f9 81       	ldd	r31, Y+1	; 0x01
    556a:	83 89       	ldd	r24, Z+19	; 0x13
    556c:	f6 cf       	rjmp	.-20     	; 0x555a <u8x8_d_ssd1306_sh1106_generic+0xb8>
    556e:	0e 94 8a 29 	call	0x5314	; 0x5314 <u8x8_cad_StartTransfer>
    5572:	61 e8       	ldi	r22, 0x81	; 129
    5574:	ce 01       	movw	r24, r28
    5576:	0e 94 70 29 	call	0x52e0	; 0x52e0 <u8x8_cad_SendCmd>
    557a:	60 2f       	mov	r22, r16
    557c:	ce 01       	movw	r24, r28
    557e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <u8x8_cad_SendArg>
    5582:	ce 01       	movw	r24, r28
    5584:	0e 94 93 29 	call	0x5326	; 0x5326 <u8x8_cad_EndTransfer>
    5588:	d7 cf       	rjmp	.-82     	; 0x5538 <u8x8_d_ssd1306_sh1106_generic+0x96>

0000558a <u8x8_d_sh1106_128x64_noname>:
u8x8_d_sh1106_128x64_noname():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:480
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    558a:	1f 93       	push	r17
    558c:	cf 93       	push	r28
    558e:	df 93       	push	r29
    5590:	ec 01       	movw	r28, r24
    5592:	16 2f       	mov	r17, r22
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:481
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    5594:	0e 94 51 2a 	call	0x54a2	; 0x54a2 <u8x8_d_ssd1306_sh1106_generic>
    5598:	81 11       	cpse	r24, r1
    559a:	0c c0       	rjmp	.+24     	; 0x55b4 <u8x8_d_sh1106_128x64_noname+0x2a>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:484
    return 1;
  
  switch(msg)
    559c:	19 30       	cpi	r17, 0x09	; 9
    559e:	79 f0       	breq	.+30     	; 0x55be <u8x8_d_sh1106_128x64_noname+0x34>
    55a0:	1a 30       	cpi	r17, 0x0A	; 10
    55a2:	49 f4       	brne	.+18     	; 0x55b6 <u8x8_d_sh1106_128x64_noname+0x2c>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:487
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    55a4:	ce 01       	movw	r24, r28
    55a6:	0e 94 ed 2a 	call	0x55da	; 0x55da <u8x8_d_helper_display_init>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:491
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    55aa:	66 e8       	ldi	r22, 0x86	; 134
    55ac:	71 e0       	ldi	r23, 0x01	; 1
    55ae:	ce 01       	movw	r24, r28
    55b0:	0e 94 9c 29 	call	0x5338	; 0x5338 <u8x8_cad_SendSequence>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:482
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    55b4:	81 e0       	ldi	r24, 0x01	; 1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:501
    default:
      return 0;
  }
  return 1;
    
}
    55b6:	df 91       	pop	r29
    55b8:	cf 91       	pop	r28
    55ba:	1f 91       	pop	r17
    55bc:	08 95       	ret
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:494
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
    55be:	66 e5       	ldi	r22, 0x56	; 86
    55c0:	71 e0       	ldi	r23, 0x01	; 1
    55c2:	ce 01       	movw	r24, r28
    55c4:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <u8x8_d_helper_display_setup_memory>
    55c8:	f5 cf       	rjmp	.-22     	; 0x55b4 <u8x8_d_sh1106_128x64_noname+0x2a>

000055ca <u8x8_d_helper_display_setup_memory>:
u8x8_d_helper_display_setup_memory():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_display.c:153
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    55ca:	fc 01       	movw	r30, r24
    55cc:	71 83       	std	Z+1, r23	; 0x01
    55ce:	60 83       	st	Z, r22
    55d0:	fb 01       	movw	r30, r22
    55d2:	22 89       	ldd	r18, Z+18	; 0x12
    55d4:	fc 01       	movw	r30, r24
    55d6:	24 8b       	std	Z+20, r18	; 0x14
    55d8:	08 95       	ret

000055da <u8x8_d_helper_display_init>:
u8x8_d_helper_display_init():
    55da:	cf 93       	push	r28
    55dc:	df 93       	push	r29
    55de:	ec 01       	movw	r28, r24
    55e0:	ea 85       	ldd	r30, Y+10	; 0x0a
    55e2:	fb 85       	ldd	r31, Y+11	; 0x0b
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	20 e0       	ldi	r18, 0x00	; 0
    55e8:	40 e0       	ldi	r20, 0x00	; 0
    55ea:	68 e2       	ldi	r22, 0x28	; 40
    55ec:	09 95       	icall
    55ee:	ee 81       	ldd	r30, Y+6	; 0x06
    55f0:	ff 81       	ldd	r31, Y+7	; 0x07
    55f2:	30 e0       	ldi	r19, 0x00	; 0
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	40 e0       	ldi	r20, 0x00	; 0
    55f8:	64 e1       	ldi	r22, 0x14	; 20
    55fa:	ce 01       	movw	r24, r28
    55fc:	09 95       	icall
    55fe:	41 e0       	ldi	r20, 0x01	; 1
    5600:	6b e4       	ldi	r22, 0x4B	; 75
    5602:	ce 01       	movw	r24, r28
    5604:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <u8x8_gpio_call>
    5608:	e8 81       	ld	r30, Y
    560a:	f9 81       	ldd	r31, Y+1	; 0x01
    560c:	44 81       	ldd	r20, Z+4	; 0x04
    560e:	69 e2       	ldi	r22, 0x29	; 41
    5610:	ce 01       	movw	r24, r28
    5612:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <u8x8_gpio_call>
    5616:	40 e0       	ldi	r20, 0x00	; 0
    5618:	6b e4       	ldi	r22, 0x4B	; 75
    561a:	ce 01       	movw	r24, r28
    561c:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <u8x8_gpio_call>
    5620:	e8 81       	ld	r30, Y
    5622:	f9 81       	ldd	r31, Y+1	; 0x01
    5624:	44 81       	ldd	r20, Z+4	; 0x04
    5626:	69 e2       	ldi	r22, 0x29	; 41
    5628:	ce 01       	movw	r24, r28
    562a:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <u8x8_gpio_call>
    562e:	41 e0       	ldi	r20, 0x01	; 1
    5630:	6b e4       	ldi	r22, 0x4B	; 75
    5632:	ce 01       	movw	r24, r28
    5634:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <u8x8_gpio_call>
    5638:	e8 81       	ld	r30, Y
    563a:	f9 81       	ldd	r31, Y+1	; 0x01
    563c:	45 81       	ldd	r20, Z+5	; 0x05
    563e:	69 e2       	ldi	r22, 0x29	; 41
    5640:	ce 01       	movw	r24, r28
    5642:	df 91       	pop	r29
    5644:	cf 91       	pop	r28
    5646:	0c 94 6b 2b 	jmp	0x56d6	; 0x56d6 <u8x8_gpio_call>

0000564a <u8x8_DrawTile>:
u8x8_DrawTile():
    564a:	0f 93       	push	r16
    564c:	1f 93       	push	r17
    564e:	cf 93       	push	r28
    5650:	df 93       	push	r29
    5652:	00 d0       	rcall	.+0      	; 0x5654 <u8x8_DrawTile+0xa>
    5654:	00 d0       	rcall	.+0      	; 0x5656 <u8x8_DrawTile+0xc>
    5656:	1f 92       	push	r1
    5658:	cd b7       	in	r28, 0x3d	; 61
    565a:	de b7       	in	r29, 0x3e	; 62
    565c:	6c 83       	std	Y+4, r22	; 0x04
    565e:	4d 83       	std	Y+5, r20	; 0x05
    5660:	2b 83       	std	Y+3, r18	; 0x03
    5662:	1a 83       	std	Y+2, r17	; 0x02
    5664:	09 83       	std	Y+1, r16	; 0x01
    5666:	dc 01       	movw	r26, r24
    5668:	14 96       	adiw	r26, 0x04	; 4
    566a:	ed 91       	ld	r30, X+
    566c:	fc 91       	ld	r31, X
    566e:	9e 01       	movw	r18, r28
    5670:	2f 5f       	subi	r18, 0xFF	; 255
    5672:	3f 4f       	sbci	r19, 0xFF	; 255
    5674:	41 e0       	ldi	r20, 0x01	; 1
    5676:	6f e0       	ldi	r22, 0x0F	; 15
    5678:	09 95       	icall
    567a:	0f 90       	pop	r0
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	df 91       	pop	r29
    5686:	cf 91       	pop	r28
    5688:	1f 91       	pop	r17
    568a:	0f 91       	pop	r16
    568c:	08 95       	ret

0000568e <u8x8_SetupMemory>:
u8x8_SetupMemory():
    568e:	dc 01       	movw	r26, r24
    5690:	14 96       	adiw	r26, 0x04	; 4
    5692:	ed 91       	ld	r30, X+
    5694:	fc 91       	ld	r31, X
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	40 e0       	ldi	r20, 0x00	; 0
    569c:	69 e0       	ldi	r22, 0x09	; 9
    569e:	09 94       	ijmp

000056a0 <u8x8_InitDisplay>:
u8x8_InitDisplay():
    56a0:	dc 01       	movw	r26, r24
    56a2:	14 96       	adiw	r26, 0x04	; 4
    56a4:	ed 91       	ld	r30, X+
    56a6:	fc 91       	ld	r31, X
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	40 e0       	ldi	r20, 0x00	; 0
    56ae:	6a e0       	ldi	r22, 0x0A	; 10
    56b0:	09 94       	ijmp

000056b2 <u8x8_SetPowerSave>:
u8x8_SetPowerSave():
    56b2:	46 2f       	mov	r20, r22
    56b4:	dc 01       	movw	r26, r24
    56b6:	14 96       	adiw	r26, 0x04	; 4
    56b8:	ed 91       	ld	r30, X+
    56ba:	fc 91       	ld	r31, X
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	20 e0       	ldi	r18, 0x00	; 0
    56c0:	6b e0       	ldi	r22, 0x0B	; 11
    56c2:	09 94       	ijmp

000056c4 <u8x8_RefreshDisplay>:
u8x8_RefreshDisplay():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_display.c:158
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    56c4:	dc 01       	movw	r26, r24
    56c6:	14 96       	adiw	r26, 0x04	; 4
    56c8:	ed 91       	ld	r30, X+
    56ca:	fc 91       	ld	r31, X
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	20 e0       	ldi	r18, 0x00	; 0
    56d0:	40 e0       	ldi	r20, 0x00	; 0
    56d2:	60 e1       	ldi	r22, 0x10	; 16
    56d4:	09 94       	ijmp

000056d6 <u8x8_gpio_call>:
u8x8_gpio_call():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_gpio.c:42
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    56d6:	dc 01       	movw	r26, r24
    56d8:	1a 96       	adiw	r26, 0x0a	; 10
    56da:	ed 91       	ld	r30, X+
    56dc:	fc 91       	ld	r31, X
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	09 94       	ijmp

000056e4 <u8x8_dummy_cb>:
u8x8_dummy_cb():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:82
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_null_display_info);
      break;
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      break;
    56e4:	80 e0       	ldi	r24, 0x00	; 0
    56e6:	08 95       	ret

000056e8 <u8x8_SetupDefaults>:
u8x8_SetupDefaults():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:96
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    56e8:	fc 01       	movw	r30, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:97
    u8x8->display_info = NULL;
    56ea:	11 82       	std	Z+1, r1	; 0x01
    56ec:	10 82       	st	Z, r1
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:98
    u8x8->display_cb = u8x8_dummy_cb;
    56ee:	82 e7       	ldi	r24, 0x72	; 114
    56f0:	9b e2       	ldi	r25, 0x2B	; 43
    56f2:	95 83       	std	Z+5, r25	; 0x05
    56f4:	84 83       	std	Z+4, r24	; 0x04
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:99
    u8x8->cad_cb = u8x8_dummy_cb;
    56f6:	97 83       	std	Z+7, r25	; 0x07
    56f8:	86 83       	std	Z+6, r24	; 0x06
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:100
    u8x8->byte_cb = u8x8_dummy_cb;
    56fa:	91 87       	std	Z+9, r25	; 0x09
    56fc:	80 87       	std	Z+8, r24	; 0x08
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:101
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    56fe:	93 87       	std	Z+11, r25	; 0x0b
    5700:	82 87       	std	Z+10, r24	; 0x0a
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:102
    u8x8->is_font_inverse_mode = 0;
    5702:	15 8a       	std	Z+21, r1	; 0x15
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:104
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    5704:	10 8e       	std	Z+24, r1	; 0x18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:105
    u8x8->bus_clock = 0;		/* issue 769 */
    5706:	14 86       	std	Z+12, r1	; 0x0c
    5708:	15 86       	std	Z+13, r1	; 0x0d
    570a:	16 86       	std	Z+14, r1	; 0x0e
    570c:	17 86       	std	Z+15, r1	; 0x0f
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:106
    u8x8->i2c_address = 255;
    570e:	8f ef       	ldi	r24, 0xFF	; 255
    5710:	86 8b       	std	Z+22, r24	; 0x16
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:107
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    5712:	82 8f       	std	Z+26, r24	; 0x1a
    5714:	df 01       	movw	r26, r30
    5716:	5e 96       	adiw	r26, 0x1e	; 30
    5718:	f4 96       	adiw	r30, 0x34	; 52
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:113 (discriminator 3)
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
    571a:	8d 93       	st	X+, r24
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:112 (discriminator 3)
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
    571c:	ae 17       	cp	r26, r30
    571e:	bf 07       	cpc	r27, r31
    5720:	e1 f7       	brne	.-8      	; 0x571a <u8x8_SetupDefaults+0x32>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:116
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
    5722:	08 95       	ret

00005724 <u8x8_Setup>:
u8x8_Setup():
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:134
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    5724:	af 92       	push	r10
    5726:	bf 92       	push	r11
    5728:	cf 92       	push	r12
    572a:	df 92       	push	r13
    572c:	ef 92       	push	r14
    572e:	ff 92       	push	r15
    5730:	0f 93       	push	r16
    5732:	1f 93       	push	r17
    5734:	cf 93       	push	r28
    5736:	df 93       	push	r29
    5738:	ec 01       	movw	r28, r24
    573a:	5b 01       	movw	r10, r22
    573c:	6a 01       	movw	r12, r20
    573e:	79 01       	movw	r14, r18
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:136
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    5740:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <u8x8_SetupDefaults>
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:139

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    5744:	bd 82       	std	Y+5, r11	; 0x05
    5746:	ac 82       	std	Y+4, r10	; 0x04
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:140
  u8x8->cad_cb = cad_cb;
    5748:	df 82       	std	Y+7, r13	; 0x07
    574a:	ce 82       	std	Y+6, r12	; 0x06
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:141
  u8x8->byte_cb = byte_cb;
    574c:	f9 86       	std	Y+9, r15	; 0x09
    574e:	e8 86       	std	Y+8, r14	; 0x08
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:142
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    5750:	1b 87       	std	Y+11, r17	; 0x0b
    5752:	0a 87       	std	Y+10, r16	; 0x0a
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    5754:	ce 01       	movw	r24, r28
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:146
}
    5756:	df 91       	pop	r29
    5758:	cf 91       	pop	r28
    575a:	1f 91       	pop	r17
    575c:	0f 91       	pop	r16
    575e:	ff 90       	pop	r15
    5760:	ef 90       	pop	r14
    5762:	df 90       	pop	r13
    5764:	cf 90       	pop	r12
    5766:	bf 90       	pop	r11
    5768:	af 90       	pop	r10
c:\Users\Thaddaeus\Nextcloud\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:145
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    576a:	0c 94 47 2b 	jmp	0x568e	; 0x568e <u8x8_SetupMemory>

0000576e <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:657

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    576e:	cf 93       	push	r28
    5770:	df 93       	push	r29
    5772:	1f 92       	push	r1
    5774:	cd b7       	in	r28, 0x3d	; 61
    5776:	de b7       	in	r29, 0x3e	; 62
    5778:	fc 01       	movw	r30, r24
    577a:	69 83       	std	Y+1, r22	; 0x01
    577c:	87 89       	ldd	r24, Z+23	; 0x17
    577e:	88 23       	and	r24, r24
    5780:	f9 f0       	breq	.+62     	; 0x57c0 <TwoWire::write(unsigned char)+0x52>
    5782:	26 89       	ldd	r18, Z+22	; 0x16
    5784:	84 85       	ldd	r24, Z+12	; 0x0c
    5786:	95 85       	ldd	r25, Z+13	; 0x0d
    5788:	28 17       	cp	r18, r24
    578a:	19 06       	cpc	r1, r25
    578c:	54 f0       	brlt	.+20     	; 0x57a2 <TwoWire::write(unsigned char)+0x34>
_ZN5Print13setWriteErrorEi():
    578e:	81 e0       	ldi	r24, 0x01	; 1
    5790:	90 e0       	ldi	r25, 0x00	; 0
    5792:	93 83       	std	Z+3, r25	; 0x03
    5794:	82 83       	std	Z+2, r24	; 0x02
_ZN7TwoWire5writeEh():
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	80 e0       	ldi	r24, 0x00	; 0
    579a:	0f 90       	pop	r0
    579c:	df 91       	pop	r29
    579e:	cf 91       	pop	r28
    57a0:	08 95       	ret
    57a2:	89 81       	ldd	r24, Y+1	; 0x01
    57a4:	a5 89       	ldd	r26, Z+21	; 0x15
    57a6:	23 89       	ldd	r18, Z+19	; 0x13
    57a8:	34 89       	ldd	r19, Z+20	; 0x14
    57aa:	a2 0f       	add	r26, r18
    57ac:	b3 2f       	mov	r27, r19
    57ae:	b1 1d       	adc	r27, r1
    57b0:	8c 93       	st	X, r24
    57b2:	85 89       	ldd	r24, Z+21	; 0x15
    57b4:	8f 5f       	subi	r24, 0xFF	; 255
    57b6:	85 8b       	std	Z+21, r24	; 0x15
    57b8:	86 8b       	std	Z+22, r24	; 0x16
    57ba:	81 e0       	ldi	r24, 0x01	; 1
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	ed cf       	rjmp	.-38     	; 0x579a <TwoWire::write(unsigned char)+0x2c>
    57c0:	00 a4       	ldd	r0, Z+40	; 0x28
    57c2:	f1 a5       	ldd	r31, Z+41	; 0x29
    57c4:	e0 2d       	mov	r30, r0
    57c6:	61 e0       	ldi	r22, 0x01	; 1
    57c8:	ce 01       	movw	r24, r28
    57ca:	01 96       	adiw	r24, 0x01	; 1
    57cc:	09 95       	icall
    57ce:	f5 cf       	rjmp	.-22     	; 0x57ba <TwoWire::write(unsigned char)+0x4c>

000057d0 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    57d0:	fc 01       	movw	r30, r24
    57d2:	81 89       	ldd	r24, Z+17	; 0x11
    57d4:	90 89       	ldd	r25, Z+16	; 0x10
    57d6:	89 1b       	sub	r24, r25
    57d8:	99 0b       	sbc	r25, r25
    57da:	08 95       	ret

000057dc <TwoWire::read()>:
_ZN7TwoWire4readEv():
    57dc:	fc 01       	movw	r30, r24
    57de:	90 89       	ldd	r25, Z+16	; 0x10
    57e0:	81 89       	ldd	r24, Z+17	; 0x11
    57e2:	2f ef       	ldi	r18, 0xFF	; 255
    57e4:	3f ef       	ldi	r19, 0xFF	; 255
    57e6:	98 17       	cp	r25, r24
    57e8:	40 f4       	brcc	.+16     	; 0x57fa <TwoWire::read()+0x1e>
    57ea:	a6 85       	ldd	r26, Z+14	; 0x0e
    57ec:	b7 85       	ldd	r27, Z+15	; 0x0f
    57ee:	a9 0f       	add	r26, r25
    57f0:	b1 1d       	adc	r27, r1
    57f2:	2c 91       	ld	r18, X
    57f4:	30 e0       	ldi	r19, 0x00	; 0
    57f6:	9f 5f       	subi	r25, 0xFF	; 255
    57f8:	90 8b       	std	Z+16, r25	; 0x10
    57fa:	c9 01       	movw	r24, r18
    57fc:	08 95       	ret

000057fe <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    57fe:	dc 01       	movw	r26, r24
    5800:	50 96       	adiw	r26, 0x10	; 16
    5802:	ec 91       	ld	r30, X
    5804:	50 97       	sbiw	r26, 0x10	; 16
    5806:	51 96       	adiw	r26, 0x11	; 17
    5808:	8c 91       	ld	r24, X
    580a:	51 97       	sbiw	r26, 0x11	; 17
    580c:	e8 17       	cp	r30, r24
    580e:	48 f4       	brcc	.+18     	; 0x5822 <TwoWire::peek()+0x24>
    5810:	1e 96       	adiw	r26, 0x0e	; 14
    5812:	8d 91       	ld	r24, X+
    5814:	9c 91       	ld	r25, X
    5816:	e8 0f       	add	r30, r24
    5818:	f9 2f       	mov	r31, r25
    581a:	f1 1d       	adc	r31, r1
    581c:	80 81       	ld	r24, Z
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	08 95       	ret
    5822:	8f ef       	ldi	r24, 0xFF	; 255
    5824:	9f ef       	ldi	r25, 0xFF	; 255
    5826:	08 95       	ret

00005828 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    5828:	08 95       	ret

0000582a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    582a:	cf 92       	push	r12
    582c:	df 92       	push	r13
    582e:	ef 92       	push	r14
    5830:	ff 92       	push	r15
    5832:	0f 93       	push	r16
    5834:	1f 93       	push	r17
    5836:	cf 93       	push	r28
    5838:	df 93       	push	r29
    583a:	8c 01       	movw	r16, r24
    583c:	cb 01       	movw	r24, r22
    583e:	7a 01       	movw	r14, r20
    5840:	d8 01       	movw	r26, r16
    5842:	57 96       	adiw	r26, 0x17	; 23
    5844:	2c 91       	ld	r18, X
    5846:	57 97       	sbiw	r26, 0x17	; 23
    5848:	22 23       	and	r18, r18
    584a:	89 f0       	breq	.+34     	; 0x586e <TwoWire::write(unsigned char const*, unsigned int)+0x44>
    584c:	eb 01       	movw	r28, r22
    584e:	6b 01       	movw	r12, r22
    5850:	c4 0e       	add	r12, r20
    5852:	d5 1e       	adc	r13, r21
    5854:	cc 15       	cp	r28, r12
    5856:	dd 05       	cpc	r29, r13
    5858:	79 f0       	breq	.+30     	; 0x5878 <TwoWire::write(unsigned char const*, unsigned int)+0x4e>
    585a:	69 91       	ld	r22, Y+
    585c:	d8 01       	movw	r26, r16
    585e:	ed 91       	ld	r30, X+
    5860:	fc 91       	ld	r31, X
    5862:	01 90       	ld	r0, Z+
    5864:	f0 81       	ld	r31, Z
    5866:	e0 2d       	mov	r30, r0
    5868:	c8 01       	movw	r24, r16
    586a:	09 95       	icall
    586c:	f3 cf       	rjmp	.-26     	; 0x5854 <TwoWire::write(unsigned char const*, unsigned int)+0x2a>
    586e:	98 96       	adiw	r26, 0x28	; 40
    5870:	ed 91       	ld	r30, X+
    5872:	fc 91       	ld	r31, X
    5874:	64 2f       	mov	r22, r20
    5876:	09 95       	icall
    5878:	c7 01       	movw	r24, r14
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	1f 91       	pop	r17
    5880:	0f 91       	pop	r16
    5882:	ff 90       	pop	r15
    5884:	ef 90       	pop	r14
    5886:	df 90       	pop	r13
    5888:	cf 90       	pop	r12
    588a:	08 95       	ret

0000588c <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>:
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    588c:	2f 92       	push	r2
    588e:	3f 92       	push	r3
    5890:	4f 92       	push	r4
    5892:	5f 92       	push	r5
    5894:	6f 92       	push	r6
    5896:	7f 92       	push	r7
    5898:	8f 92       	push	r8
    589a:	9f 92       	push	r9
    589c:	af 92       	push	r10
    589e:	bf 92       	push	r11
    58a0:	cf 92       	push	r12
    58a2:	df 92       	push	r13
    58a4:	ef 92       	push	r14
    58a6:	ff 92       	push	r15
    58a8:	0f 93       	push	r16
    58aa:	1f 93       	push	r17
    58ac:	cf 93       	push	r28
    58ae:	df 93       	push	r29
    58b0:	cd b7       	in	r28, 0x3d	; 61
    58b2:	de b7       	in	r29, 0x3e	; 62
    58b4:	60 97       	sbiw	r28, 0x10	; 16
    58b6:	0f b6       	in	r0, 0x3f	; 63
    58b8:	f8 94       	cli
    58ba:	de bf       	out	0x3e, r29	; 62
    58bc:	0f be       	out	0x3f, r0	; 63
    58be:	cd bf       	out	0x3d, r28	; 61
    58c0:	3c 01       	movw	r6, r24
    58c2:	2b 01       	movw	r4, r22
    58c4:	5a 83       	std	Y+2, r21	; 0x02
    58c6:	49 83       	std	Y+1, r20	; 0x01
    58c8:	3c 83       	std	Y+4, r19	; 0x04
    58ca:	2b 83       	std	Y+3, r18	; 0x03
    58cc:	8d a1       	ldd	r24, Y+37	; 0x25
    58ce:	9e a1       	ldd	r25, Y+38	; 0x26
    58d0:	9e 83       	std	Y+6, r25	; 0x06
    58d2:	8d 83       	std	Y+5, r24	; 0x05
    58d4:	ef a1       	ldd	r30, Y+39	; 0x27
    58d6:	f8 a5       	ldd	r31, Y+40	; 0x28
    58d8:	f8 87       	std	Y+8, r31	; 0x08
    58da:	ef 83       	std	Y+7, r30	; 0x07
    58dc:	89 a5       	ldd	r24, Y+41	; 0x29
    58de:	9a a5       	ldd	r25, Y+42	; 0x2a
    58e0:	9a 87       	std	Y+10, r25	; 0x0a
    58e2:	89 87       	std	Y+9, r24	; 0x09
    58e4:	eb a5       	ldd	r30, Y+43	; 0x2b
    58e6:	fc a5       	ldd	r31, Y+44	; 0x2c
    58e8:	fc 87       	std	Y+12, r31	; 0x0c
    58ea:	eb 87       	std	Y+11, r30	; 0x0b
    58ec:	2d a4       	ldd	r2, Y+45	; 0x2d
    58ee:	3e a4       	ldd	r3, Y+46	; 0x2e
    58f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    58f2:	98 a9       	ldd	r25, Y+48	; 0x30
    58f4:	9e 87       	std	Y+14, r25	; 0x0e
    58f6:	8d 87       	std	Y+13, r24	; 0x0d
    58f8:	e9 a9       	ldd	r30, Y+49	; 0x31
    58fa:	fa a9       	ldd	r31, Y+50	; 0x32
    58fc:	f8 8b       	std	Y+16, r31	; 0x10
    58fe:	ef 87       	std	Y+15, r30	; 0x0f
_ZN5PrintC4Ev():
    5900:	f3 01       	movw	r30, r6
    5902:	13 82       	std	Z+3, r1	; 0x03
    5904:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
    5906:	88 ee       	ldi	r24, 0xE8	; 232
    5908:	93 e0       	ldi	r25, 0x03	; 3
    590a:	a0 e0       	ldi	r26, 0x00	; 0
    590c:	b0 e0       	ldi	r27, 0x00	; 0
    590e:	84 83       	std	Z+4, r24	; 0x04
    5910:	95 83       	std	Z+5, r25	; 0x05
    5912:	a6 83       	std	Z+6, r26	; 0x06
    5914:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
    5916:	8f eb       	ldi	r24, 0xBF	; 191
    5918:	91 e0       	ldi	r25, 0x01	; 1
    591a:	91 83       	std	Z+1, r25	; 0x01
    591c:	80 83       	st	Z, r24
    591e:	75 87       	std	Z+13, r23	; 0x0d
    5920:	64 87       	std	Z+12, r22	; 0x0c
    5922:	cb 01       	movw	r24, r22
    5924:	0e 94 d7 36 	call	0x6dae	; 0x6dae <operator new[](unsigned int)>
    5928:	f3 01       	movw	r30, r6
    592a:	97 87       	std	Z+15, r25	; 0x0f
    592c:	86 87       	std	Z+14, r24	; 0x0e
    592e:	10 8a       	std	Z+16, r1	; 0x10
    5930:	11 8a       	std	Z+17, r1	; 0x11
    5932:	12 8a       	std	Z+18, r1	; 0x12
    5934:	c2 01       	movw	r24, r4
    5936:	0e 94 d7 36 	call	0x6dae	; 0x6dae <operator new[](unsigned int)>
    593a:	f3 01       	movw	r30, r6
    593c:	94 8b       	std	Z+20, r25	; 0x14
    593e:	83 8b       	std	Z+19, r24	; 0x13
    5940:	15 8a       	std	Z+21, r1	; 0x15
    5942:	16 8a       	std	Z+22, r1	; 0x16
    5944:	17 8a       	std	Z+23, r1	; 0x17
    5946:	89 81       	ldd	r24, Y+1	; 0x01
    5948:	9a 81       	ldd	r25, Y+2	; 0x02
    594a:	95 8f       	std	Z+29, r25	; 0x1d
    594c:	84 8f       	std	Z+28, r24	; 0x1c
    594e:	8b 81       	ldd	r24, Y+3	; 0x03
    5950:	9c 81       	ldd	r25, Y+4	; 0x04
    5952:	97 8f       	std	Z+31, r25	; 0x1f
    5954:	86 8f       	std	Z+30, r24	; 0x1e
    5956:	11 a3       	std	Z+33, r17	; 0x21
    5958:	00 a3       	std	Z+32, r16	; 0x20
    595a:	f3 a2       	std	Z+35, r15	; 0x23
    595c:	e2 a2       	std	Z+34, r14	; 0x22
    595e:	d5 a2       	std	Z+37, r13	; 0x25
    5960:	c4 a2       	std	Z+36, r12	; 0x24
    5962:	b7 a2       	std	Z+39, r11	; 0x27
    5964:	a6 a2       	std	Z+38, r10	; 0x26
    5966:	91 a6       	std	Z+41, r9	; 0x29
    5968:	80 a6       	std	Z+40, r8	; 0x28
    596a:	8d 81       	ldd	r24, Y+5	; 0x05
    596c:	9e 81       	ldd	r25, Y+6	; 0x06
    596e:	93 a7       	std	Z+43, r25	; 0x2b
    5970:	82 a7       	std	Z+42, r24	; 0x2a
    5972:	8f 81       	ldd	r24, Y+7	; 0x07
    5974:	98 85       	ldd	r25, Y+8	; 0x08
    5976:	95 a7       	std	Z+45, r25	; 0x2d
    5978:	84 a7       	std	Z+44, r24	; 0x2c
    597a:	89 85       	ldd	r24, Y+9	; 0x09
    597c:	9a 85       	ldd	r25, Y+10	; 0x0a
    597e:	97 a7       	std	Z+47, r25	; 0x2f
    5980:	86 a7       	std	Z+46, r24	; 0x2e
    5982:	c1 01       	movw	r24, r2
    5984:	eb 85       	ldd	r30, Y+11	; 0x0b
    5986:	fc 85       	ldd	r31, Y+12	; 0x0c
    5988:	09 95       	icall
    598a:	8f 85       	ldd	r24, Y+15	; 0x0f
    598c:	98 89       	ldd	r25, Y+16	; 0x10
    598e:	ed 85       	ldd	r30, Y+13	; 0x0d
    5990:	fe 85       	ldd	r31, Y+14	; 0x0e
    5992:	60 96       	adiw	r28, 0x10	; 16
    5994:	0f b6       	in	r0, 0x3f	; 63
    5996:	f8 94       	cli
    5998:	de bf       	out	0x3e, r29	; 62
    599a:	0f be       	out	0x3f, r0	; 63
    599c:	cd bf       	out	0x3d, r28	; 61
    599e:	df 91       	pop	r29
    59a0:	cf 91       	pop	r28
    59a2:	1f 91       	pop	r17
    59a4:	0f 91       	pop	r16
    59a6:	ff 90       	pop	r15
    59a8:	ef 90       	pop	r14
    59aa:	df 90       	pop	r13
    59ac:	cf 90       	pop	r12
    59ae:	bf 90       	pop	r11
    59b0:	af 90       	pop	r10
    59b2:	9f 90       	pop	r9
    59b4:	8f 90       	pop	r8
    59b6:	7f 90       	pop	r7
    59b8:	6f 90       	pop	r6
    59ba:	5f 90       	pop	r5
    59bc:	4f 90       	pop	r4
    59be:	3f 90       	pop	r3
    59c0:	2f 90       	pop	r2
    59c2:	09 94       	ijmp

000059c4 <TwoWire::~TwoWire()>:
_ZN7TwoWireD2Ev():
    59c4:	cf 93       	push	r28
    59c6:	df 93       	push	r29
    59c8:	ec 01       	movw	r28, r24
    59ca:	8f eb       	ldi	r24, 0xBF	; 191
    59cc:	91 e0       	ldi	r25, 0x01	; 1
    59ce:	99 83       	std	Y+1, r25	; 0x01
    59d0:	88 83       	st	Y, r24
    59d2:	61 e0       	ldi	r22, 0x01	; 1
    59d4:	70 e0       	ldi	r23, 0x00	; 0
    59d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    59d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    59da:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <operator delete(void*, unsigned int)>
    59de:	61 e0       	ldi	r22, 0x01	; 1
    59e0:	70 e0       	ldi	r23, 0x00	; 0
    59e2:	8b 89       	ldd	r24, Y+19	; 0x13
    59e4:	9c 89       	ldd	r25, Y+20	; 0x14
    59e6:	df 91       	pop	r29
    59e8:	cf 91       	pop	r28
    59ea:	0c 94 d9 36 	jmp	0x6db2	; 0x6db2 <operator delete(void*, unsigned int)>

000059ee <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    59ee:	fc 01       	movw	r30, r24
    59f0:	10 8a       	std	Z+16, r1	; 0x10
    59f2:	11 8a       	std	Z+17, r1	; 0x11
    59f4:	15 8a       	std	Z+21, r1	; 0x15
    59f6:	16 8a       	std	Z+22, r1	; 0x16
    59f8:	04 8c       	ldd	r0, Z+28	; 0x1c
    59fa:	f5 8d       	ldd	r31, Z+29	; 0x1d
    59fc:	e0 2d       	mov	r30, r0
    59fe:	09 94       	ijmp

00005a00 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    5a00:	dc 01       	movw	r26, r24
    5a02:	92 96       	adiw	r26, 0x22	; 34
    5a04:	ed 91       	ld	r30, X+
    5a06:	fc 91       	ld	r31, X
    5a08:	cb 01       	movw	r24, r22
    5a0a:	ba 01       	movw	r22, r20
    5a0c:	09 94       	ijmp

00005a0e <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    5a0e:	fc 01       	movw	r30, r24
_ZN7TwoWire17beginTransmissionEh():
    5a10:	81 e0       	ldi	r24, 0x01	; 1
    5a12:	87 8b       	std	Z+23, r24	; 0x17
_ZN7TwoWire17beginTransmissionEi():
    5a14:	62 8b       	std	Z+18, r22	; 0x12
_ZN7TwoWire17beginTransmissionEh():
    5a16:	15 8a       	std	Z+21, r1	; 0x15
    5a18:	16 8a       	std	Z+22, r1	; 0x16
_ZN7TwoWire17beginTransmissionEi():
    5a1a:	08 95       	ret

00005a1c <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    5a1c:	0f 93       	push	r16
    5a1e:	cf 93       	push	r28
    5a20:	df 93       	push	r29
    5a22:	ec 01       	movw	r28, r24
    5a24:	8b 89       	ldd	r24, Y+19	; 0x13
    5a26:	9c 89       	ldd	r25, Y+20	; 0x14
    5a28:	ee a1       	ldd	r30, Y+38	; 0x26
    5a2a:	ff a1       	ldd	r31, Y+39	; 0x27
    5a2c:	06 2f       	mov	r16, r22
    5a2e:	21 e0       	ldi	r18, 0x01	; 1
    5a30:	4e 89       	ldd	r20, Y+22	; 0x16
    5a32:	bc 01       	movw	r22, r24
    5a34:	8a 89       	ldd	r24, Y+18	; 0x12
    5a36:	09 95       	icall
    5a38:	1d 8a       	std	Y+21, r1	; 0x15
    5a3a:	1e 8a       	std	Y+22, r1	; 0x16
    5a3c:	1f 8a       	std	Y+23, r1	; 0x17
    5a3e:	df 91       	pop	r29
    5a40:	cf 91       	pop	r28
    5a42:	0f 91       	pop	r16
    5a44:	08 95       	ret

00005a46 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    5a46:	61 e0       	ldi	r22, 0x01	; 1
    5a48:	0c 94 0e 2d 	jmp	0x5a1c	; 0x5a1c <TwoWire::endTransmission(unsigned char)>

00005a4c <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    5a4c:	fc 01       	movw	r30, r24
    5a4e:	ca 01       	movw	r24, r20
    5a50:	22 8d       	ldd	r18, Z+26	; 0x1a
    5a52:	33 8d       	ldd	r19, Z+27	; 0x1b
    5a54:	23 2b       	or	r18, r19
    5a56:	d9 f0       	breq	.+54     	; 0x5a8e <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    5a58:	30 89       	ldd	r19, Z+16	; 0x10
    5a5a:	21 89       	ldd	r18, Z+17	; 0x11
    5a5c:	32 17       	cp	r19, r18
    5a5e:	b8 f0       	brcs	.+46     	; 0x5a8e <TwoWire::onReceiveService(unsigned char*, int)+0x42>
    5a60:	20 e0       	ldi	r18, 0x00	; 0
    5a62:	42 2f       	mov	r20, r18
    5a64:	50 e0       	ldi	r21, 0x00	; 0
    5a66:	48 17       	cp	r20, r24
    5a68:	59 07       	cpc	r21, r25
    5a6a:	5c f4       	brge	.+22     	; 0x5a82 <TwoWire::onReceiveService(unsigned char*, int)+0x36>
    5a6c:	db 01       	movw	r26, r22
    5a6e:	a4 0f       	add	r26, r20
    5a70:	b5 1f       	adc	r27, r21
    5a72:	3c 91       	ld	r19, X
    5a74:	a6 85       	ldd	r26, Z+14	; 0x0e
    5a76:	b7 85       	ldd	r27, Z+15	; 0x0f
    5a78:	a4 0f       	add	r26, r20
    5a7a:	b5 1f       	adc	r27, r21
    5a7c:	3c 93       	st	X, r19
    5a7e:	2f 5f       	subi	r18, 0xFF	; 255
    5a80:	f0 cf       	rjmp	.-32     	; 0x5a62 <TwoWire::onReceiveService(unsigned char*, int)+0x16>
    5a82:	10 8a       	std	Z+16, r1	; 0x10
    5a84:	81 8b       	std	Z+17, r24	; 0x11
    5a86:	02 8c       	ldd	r0, Z+26	; 0x1a
    5a88:	f3 8d       	ldd	r31, Z+27	; 0x1b
    5a8a:	e0 2d       	mov	r30, r0
    5a8c:	09 94       	ijmp
    5a8e:	08 95       	ret

00005a90 <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
    5a90:	ab 01       	movw	r20, r22
operator()():
    5a92:	bc 01       	movw	r22, r24
    5a94:	8f e1       	ldi	r24, 0x1F	; 31
    5a96:	94 e0       	ldi	r25, 0x04	; 4
    5a98:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <TwoWire::onReceiveService(unsigned char*, int)>

00005a9c <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    5a9c:	dc 01       	movw	r26, r24
    5a9e:	58 96       	adiw	r26, 0x18	; 24
    5aa0:	ed 91       	ld	r30, X+
    5aa2:	fc 91       	ld	r31, X
    5aa4:	59 97       	sbiw	r26, 0x19	; 25
    5aa6:	30 97       	sbiw	r30, 0x00	; 0
    5aa8:	31 f0       	breq	.+12     	; 0x5ab6 <TwoWire::onRequestService()+0x1a>
    5aaa:	55 96       	adiw	r26, 0x15	; 21
    5aac:	1c 92       	st	X, r1
    5aae:	55 97       	sbiw	r26, 0x15	; 21
    5ab0:	56 96       	adiw	r26, 0x16	; 22
    5ab2:	1c 92       	st	X, r1
    5ab4:	09 94       	ijmp
    5ab6:	08 95       	ret

00005ab8 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
    5ab8:	8f e1       	ldi	r24, 0x1F	; 31
    5aba:	94 e0       	ldi	r25, 0x04	; 4
    5abc:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <TwoWire::onRequestService()>

00005ac0 <_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    5ac0:	8f 92       	push	r8
    5ac2:	9f 92       	push	r9
    5ac4:	af 92       	push	r10
    5ac6:	bf 92       	push	r11
    5ac8:	cf 92       	push	r12
    5aca:	df 92       	push	r13
    5acc:	ef 92       	push	r14
    5ace:	ff 92       	push	r15
    5ad0:	0f 93       	push	r16
    5ad2:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    5ad4:	8c e5       	ldi	r24, 0x5C	; 92
    5ad6:	9d e2       	ldi	r25, 0x2D	; 45
    5ad8:	9f 93       	push	r25
    5ada:	8f 93       	push	r24
    5adc:	86 ec       	ldi	r24, 0xC6	; 198
    5ade:	9e e2       	ldi	r25, 0x2E	; 46
    5ae0:	9f 93       	push	r25
    5ae2:	8f 93       	push	r24
    5ae4:	88 e4       	ldi	r24, 0x48	; 72
    5ae6:	9d e2       	ldi	r25, 0x2D	; 45
    5ae8:	9f 93       	push	r25
    5aea:	8f 93       	push	r24
    5aec:	81 ec       	ldi	r24, 0xC1	; 193
    5aee:	9e e2       	ldi	r25, 0x2E	; 46
    5af0:	9f 93       	push	r25
    5af2:	8f 93       	push	r24
    5af4:	8d ed       	ldi	r24, 0xDD	; 221
    5af6:	9e e2       	ldi	r25, 0x2E	; 46
    5af8:	9f 93       	push	r25
    5afa:	8f 93       	push	r24
    5afc:	83 ed       	ldi	r24, 0xD3	; 211
    5afe:	9e e2       	ldi	r25, 0x2E	; 46
    5b00:	9f 93       	push	r25
    5b02:	8f 93       	push	r24
    5b04:	8b ec       	ldi	r24, 0xCB	; 203
    5b06:	9e e2       	ldi	r25, 0x2E	; 46
    5b08:	9f 93       	push	r25
    5b0a:	8f 93       	push	r24
    5b0c:	8a e9       	ldi	r24, 0x9A	; 154
    5b0e:	88 2e       	mov	r8, r24
    5b10:	8e e2       	ldi	r24, 0x2E	; 46
    5b12:	98 2e       	mov	r9, r24
    5b14:	93 e4       	ldi	r25, 0x43	; 67
    5b16:	a9 2e       	mov	r10, r25
    5b18:	9e e2       	ldi	r25, 0x2E	; 46
    5b1a:	b9 2e       	mov	r11, r25
    5b1c:	2b ef       	ldi	r18, 0xFB	; 251
    5b1e:	c2 2e       	mov	r12, r18
    5b20:	2d e2       	ldi	r18, 0x2D	; 45
    5b22:	d2 2e       	mov	r13, r18
    5b24:	38 ee       	ldi	r19, 0xE8	; 232
    5b26:	e3 2e       	mov	r14, r19
    5b28:	3d e2       	ldi	r19, 0x2D	; 45
    5b2a:	f3 2e       	mov	r15, r19
    5b2c:	04 ee       	ldi	r16, 0xE4	; 228
    5b2e:	1d e2       	ldi	r17, 0x2D	; 45
    5b30:	27 ed       	ldi	r18, 0xD7	; 215
    5b32:	3d e2       	ldi	r19, 0x2D	; 45
    5b34:	49 eb       	ldi	r20, 0xB9	; 185
    5b36:	5d e2       	ldi	r21, 0x2D	; 45
    5b38:	60 e2       	ldi	r22, 0x20	; 32
    5b3a:	70 e0       	ldi	r23, 0x00	; 0
    5b3c:	8f e1       	ldi	r24, 0x1F	; 31
    5b3e:	94 e0       	ldi	r25, 0x04	; 4
    5b40:	0e 94 46 2c 	call	0x588c	; 0x588c <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:675
                       twi_stop,
                       twi_releaseBus,
                       twi_attachSlaveRxEvent,
                       [](uint8_t* v, int len){ Wire.onReceiveService(v, len); },
                       twi_attachSlaveTxEvent,
                       [](){ Wire.onRequestService(); });
    5b44:	8d b7       	in	r24, 0x3d	; 61
    5b46:	9e b7       	in	r25, 0x3e	; 62
    5b48:	0e 96       	adiw	r24, 0x0e	; 14
    5b4a:	0f b6       	in	r0, 0x3f	; 63
    5b4c:	f8 94       	cli
    5b4e:	9e bf       	out	0x3e, r25	; 62
    5b50:	0f be       	out	0x3f, r0	; 63
    5b52:	8d bf       	out	0x3d, r24	; 61
    5b54:	1f 91       	pop	r17
    5b56:	0f 91       	pop	r16
    5b58:	ff 90       	pop	r15
    5b5a:	ef 90       	pop	r14
    5b5c:	df 90       	pop	r13
    5b5e:	cf 90       	pop	r12
    5b60:	bf 90       	pop	r11
    5b62:	af 90       	pop	r10
    5b64:	9f 90       	pop	r9
    5b66:	8f 90       	pop	r8
    5b68:	08 95       	ret

00005b6a <_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_>:
_GLOBAL__sub_D__ZN7TwoWireC2EiPFvvES1_PFvhEPFvmEPFhhPhhhEPFhhS6_hhhEPFhPKhhES3_S1_S1_PFvPFvS6_iEESG_PFvS1_ES1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:661
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire(TWI_BUFFER_SIZE,
    5b6a:	8f e1       	ldi	r24, 0x1F	; 31
    5b6c:	94 e0       	ldi	r25, 0x04	; 4
    5b6e:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <TwoWire::~TwoWire()>

00005b72 <twi_init>:
twi_init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:71
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
    5b72:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:72
  twi_sendStop = true;  // default value
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	80 93 ba 04 	sts	0x04BA, r24	; 0x8004ba <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:73
  twi_inRepStart = false;
    5b7c:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
    5b80:	61 e0       	ldi	r22, 0x01	; 1
    5b82:	82 e1       	ldi	r24, 0x12	; 18
    5b84:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:77
  digitalWrite(SCL, 1);
    5b88:	61 e0       	ldi	r22, 0x01	; 1
    5b8a:	83 e1       	ldi	r24, 0x13	; 19
    5b8c:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
    5b90:	e9 eb       	ldi	r30, 0xB9	; 185
    5b92:	f0 e0       	ldi	r31, 0x00	; 0
    5b94:	80 81       	ld	r24, Z
    5b96:	8e 7f       	andi	r24, 0xFE	; 254
    5b98:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:81
  cbi(TWSR, TWPS1);
    5b9a:	80 81       	ld	r24, Z
    5b9c:	8d 7f       	andi	r24, 0xFD	; 253
    5b9e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:82
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
    5ba0:	88 e4       	ldi	r24, 0x48	; 72
    5ba2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    5ba6:	85 e4       	ldi	r24, 0x45	; 69
    5ba8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:91
}
    5bac:	08 95       	ret

00005bae <twi_disable>:
twi_disable():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:102
 * Output   none
 */
void twi_disable(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    5bae:	ec eb       	ldi	r30, 0xBC	; 188
    5bb0:	f0 e0       	ldi	r31, 0x00	; 0
    5bb2:	80 81       	ld	r24, Z
    5bb4:	8a 7b       	andi	r24, 0xBA	; 186
    5bb6:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA, 0);
    5bb8:	60 e0       	ldi	r22, 0x00	; 0
    5bba:	82 e1       	ldi	r24, 0x12	; 18
    5bbc:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:106
  digitalWrite(SCL, 0);
    5bc0:	60 e0       	ldi	r22, 0x00	; 0
    5bc2:	83 e1       	ldi	r24, 0x13	; 19
    5bc4:	0c 94 7d 38 	jmp	0x70fa	; 0x70fa <digitalWrite>

00005bc8 <twi_setAddress>:
twi_setAddress():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:118
 * Output   none
 */
void twi_setAddress(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR = address << 1;
    5bc8:	88 0f       	add	r24, r24
    5bca:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:119
}
    5bce:	08 95       	ret

00005bd0 <twi_setFrequency>:
twi_setFrequency():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency(uint32_t frequency)
{
    5bd0:	9b 01       	movw	r18, r22
    5bd2:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    5bd4:	60 e0       	ldi	r22, 0x00	; 0
    5bd6:	74 e2       	ldi	r23, 0x24	; 36
    5bd8:	84 ef       	ldi	r24, 0xF4	; 244
    5bda:	90 e0       	ldi	r25, 0x00	; 0
    5bdc:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodsi4>
    5be0:	20 51       	subi	r18, 0x10	; 16
    5be2:	31 09       	sbc	r19, r1
    5be4:	41 09       	sbc	r20, r1
    5be6:	51 09       	sbc	r21, r1
    5be8:	56 95       	lsr	r21
    5bea:	47 95       	ror	r20
    5bec:	37 95       	ror	r19
    5bee:	27 95       	ror	r18
    5bf0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    5bf4:	08 95       	ret

00005bf6 <twi_readFrom>:
twi_readFrom():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:152
uint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    5bf6:	41 32       	cpi	r20, 0x21	; 33
    5bf8:	08 f0       	brcs	.+2      	; 0x5bfc <twi_readFrom+0x6>
    5bfa:	43 c0       	rjmp	.+134    	; 0x5c82 <twi_readFrom+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    5bfc:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <twi_state>
    5c00:	91 11       	cpse	r25, r1
    5c02:	fc cf       	rjmp	.-8      	; 0x5bfc <twi_readFrom+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:160
    continue;
  }
  twi_state = TWI_MRX;
    5c04:	91 e0       	ldi	r25, 0x01	; 1
    5c06:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:161
  twi_sendStop = sendStop;
    5c0a:	20 93 ba 04 	sts	0x04BA, r18	; 0x8004ba <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5c0e:	2f ef       	ldi	r18, 0xFF	; 255
    5c10:	20 93 4f 04 	sts	0x044F, r18	; 0x80044f <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5c14:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    5c18:	24 0f       	add	r18, r20
    5c1a:	20 93 93 04 	sts	0x0493, r18	; 0x800493 <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    5c1e:	90 93 bb 04 	sts	0x04BB, r25	; 0x8004bb <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:176
  twi_slarw |= address << 1;
    5c22:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_slarw>
    5c26:	88 0f       	add	r24, r24
    5c28:	89 2b       	or	r24, r25
    5c2a:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:178

  if (true == twi_inRepStart) {
    5c2e:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <twi_inRepStart>
    5c32:	81 30       	cpi	r24, 0x01	; 1
    5c34:	09 f5       	brne	.+66     	; 0x5c78 <twi_readFrom+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5c36:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:187 (discriminator 1)
    do {
      TWDR = twi_slarw;
    5c3a:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <twi_slarw>
    5c3e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:188 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    5c42:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5c46:	83 fd       	sbrc	r24, 3
    5c48:	f8 cf       	rjmp	.-16     	; 0x5c3a <twi_readFrom+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:189
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    5c4a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5c4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    5c50:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <twi_state>
    5c54:	81 30       	cpi	r24, 0x01	; 1
    5c56:	e1 f3       	breq	.-8      	; 0x5c50 <twi_readFrom+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    5c58:	80 91 94 04 	lds	r24, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5c5c:	84 17       	cp	r24, r20
    5c5e:	10 f4       	brcc	.+4      	; 0x5c64 <twi_readFrom+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:201
    length = twi_masterBufferIndex;
    5c60:	40 91 94 04 	lds	r20, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5c64:	a5 e9       	ldi	r26, 0x95	; 149
    5c66:	b4 e0       	ldi	r27, 0x04	; 4
    5c68:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    5c6a:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:204 (discriminator 1)
    5c6c:	8e 2f       	mov	r24, r30
    5c6e:	89 1b       	sub	r24, r25
    5c70:	84 17       	cp	r24, r20
    5c72:	20 f0       	brcs	.+8      	; 0x5c7c <twi_readFrom+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    5c74:	84 2f       	mov	r24, r20
    5c76:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:193
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    5c78:	85 ee       	ldi	r24, 0xE5	; 229
    5c7a:	e8 cf       	rjmp	.-48     	; 0x5c4c <twi_readFrom+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    5c7c:	8d 91       	ld	r24, X+
    5c7e:	81 93       	st	Z+, r24
    5c80:	f5 cf       	rjmp	.-22     	; 0x5c6c <twi_readFrom+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 0;
    5c82:	40 e0       	ldi	r20, 0x00	; 0
    5c84:	f7 cf       	rjmp	.-18     	; 0x5c74 <twi_readFrom+0x7e>

00005c86 <twi_writeTo>:
twi_writeTo():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    5c86:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    5c88:	41 32       	cpi	r20, 0x21	; 33
    5c8a:	08 f0       	brcs	.+2      	; 0x5c8e <twi_writeTo+0x8>
    5c8c:	4b c0       	rjmp	.+150    	; 0x5d24 <twi_writeTo+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    5c8e:	90 91 bc 04 	lds	r25, 0x04BC	; 0x8004bc <twi_state>
    5c92:	91 11       	cpse	r25, r1
    5c94:	fc cf       	rjmp	.-8      	; 0x5c8e <twi_writeTo+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:239
    continue;
  }
  twi_state = TWI_MTX;
    5c96:	92 e0       	ldi	r25, 0x02	; 2
    5c98:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:240
  twi_sendStop = sendStop;
    5c9c:	00 93 ba 04 	sts	0x04BA, r16	; 0x8004ba <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    5ca0:	9f ef       	ldi	r25, 0xFF	; 255
    5ca2:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    5ca6:	10 92 94 04 	sts	0x0494, r1	; 0x800494 <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:246
  twi_masterBufferLength = length;
    5caa:	40 93 93 04 	sts	0x0493, r20	; 0x800493 <twi_masterBufferLength>
    5cae:	36 2f       	mov	r19, r22
    5cb0:	a5 e9       	ldi	r26, 0x95	; 149
    5cb2:	b4 e0       	ldi	r27, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    5cb4:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:249 (discriminator 1)
    5cb6:	9e 2f       	mov	r25, r30
    5cb8:	93 1b       	sub	r25, r19
    5cba:	94 17       	cp	r25, r20
    5cbc:	70 f1       	brcs	.+92     	; 0x5d1a <twi_writeTo+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    5cbe:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:255
  twi_slarw |= address << 1;
    5cc2:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <twi_slarw>
    5cc6:	88 0f       	add	r24, r24
    5cc8:	89 2b       	or	r24, r25
    5cca:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    5cce:	80 91 b9 04 	lds	r24, 0x04B9	; 0x8004b9 <twi_inRepStart>
    5cd2:	81 30       	cpi	r24, 0x01	; 1
    5cd4:	29 f5       	brne	.+74     	; 0x5d20 <twi_writeTo+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    5cd6:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:269 (discriminator 1)
    do {
      TWDR = twi_slarw;
    5cda:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <twi_slarw>
    5cde:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:270 (discriminator 1)
    } while(TWCR & _BV(TWWC));
    5ce2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5ce6:	83 fd       	sbrc	r24, 3
    5ce8:	f8 cf       	rjmp	.-16     	; 0x5cda <twi_writeTo+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:271
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    5cea:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    5cec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    5cf0:	22 23       	and	r18, r18
    5cf2:	21 f0       	breq	.+8      	; 0x5cfc <twi_writeTo+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:278 (discriminator 1)
    5cf4:	80 91 bc 04 	lds	r24, 0x04BC	; 0x8004bc <twi_state>
    5cf8:	82 30       	cpi	r24, 0x02	; 2
    5cfa:	d1 f3       	breq	.-12     	; 0x5cf0 <twi_writeTo+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    5cfc:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_error>
    5d00:	8f 3f       	cpi	r24, 0xFF	; 255
    5d02:	91 f0       	breq	.+36     	; 0x5d28 <twi_writeTo+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    5d04:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_error>
    5d08:	80 32       	cpi	r24, 0x20	; 32
    5d0a:	81 f0       	breq	.+32     	; 0x5d2c <twi_writeTo+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    5d0c:	80 91 4f 04 	lds	r24, 0x044F	; 0x80044f <twi_error>
    5d10:	80 33       	cpi	r24, 0x30	; 48
    5d12:	71 f0       	breq	.+28     	; 0x5d30 <twi_writeTo+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    5d14:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:290
}
    5d16:	0f 91       	pop	r16
    5d18:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    5d1a:	91 91       	ld	r25, Z+
    5d1c:	9d 93       	st	X+, r25
    5d1e:	cb cf       	rjmp	.-106    	; 0x5cb6 <twi_writeTo+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:275
    } while(TWCR & _BV(TWWC));
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
    5d20:	85 ee       	ldi	r24, 0xE5	; 229
    5d22:	e4 cf       	rjmp	.-56     	; 0x5cec <twi_writeTo+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
    5d24:	81 e0       	ldi	r24, 0x01	; 1
    5d26:	f7 cf       	rjmp	.-18     	; 0x5d16 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    5d28:	80 e0       	ldi	r24, 0x00	; 0
    5d2a:	f5 cf       	rjmp	.-22     	; 0x5d16 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    5d2c:	82 e0       	ldi	r24, 0x02	; 2
    5d2e:	f3 cf       	rjmp	.-26     	; 0x5d16 <twi_writeTo+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    5d30:	83 e0       	ldi	r24, 0x03	; 3
    5d32:	f1 cf       	rjmp	.-30     	; 0x5d16 <twi_writeTo+0x90>

00005d34 <twi_transmit>:
twi_transmit():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:307
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    5d34:	20 91 71 04 	lds	r18, 0x0471	; 0x800471 <twi_txBufferLength>
    5d38:	26 0f       	add	r18, r22
    5d3a:	33 27       	eor	r19, r19
    5d3c:	33 1f       	adc	r19, r19
    5d3e:	21 32       	cpi	r18, 0x21	; 33
    5d40:	31 05       	cpc	r19, r1
    5d42:	ec f4       	brge	.+58     	; 0x5d7e <twi_transmit+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    5d44:	20 91 bc 04 	lds	r18, 0x04BC	; 0x8004bc <twi_state>
    5d48:	fc 01       	movw	r30, r24
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	80 e0       	ldi	r24, 0x00	; 0
    5d4e:	24 30       	cpi	r18, 0x04	; 4
    5d50:	69 f0       	breq	.+26     	; 0x5d6c <twi_transmit+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:313
    return 2;
    5d52:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
    5d54:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    5d56:	a0 91 71 04 	lds	r26, 0x0471	; 0x800471 <twi_txBufferLength>
    5d5a:	21 91       	ld	r18, Z+
    5d5c:	ac 01       	movw	r20, r24
    5d5e:	4d 58       	subi	r20, 0x8D	; 141
    5d60:	5b 4f       	sbci	r21, 0xFB	; 251
    5d62:	a4 0f       	add	r26, r20
    5d64:	b5 2f       	mov	r27, r21
    5d66:	b1 1d       	adc	r27, r1
    5d68:	2c 93       	st	X, r18
    5d6a:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    5d6c:	86 17       	cp	r24, r22
    5d6e:	98 f3       	brcs	.-26     	; 0x5d56 <twi_transmit+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    5d70:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_txBufferLength>
    5d74:	68 0f       	add	r22, r24
    5d76:	60 93 71 04 	sts	0x0471, r22	; 0x800471 <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:322

  return 0;
    5d7a:	80 e0       	ldi	r24, 0x00	; 0
    5d7c:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	08 95       	ret

00005d82 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    5d82:	90 93 b6 04 	sts	0x04B6, r25	; 0x8004b6 <twi_onSlaveReceive+0x1>
    5d86:	80 93 b5 04 	sts	0x04B5, r24	; 0x8004b5 <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:334
}
    5d8a:	08 95       	ret

00005d8c <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    5d8c:	90 93 b8 04 	sts	0x04B8, r25	; 0x8004b8 <twi_onSlaveTransmit+0x1>
    5d90:	80 93 b7 04 	sts	0x04B7, r24	; 0x8004b7 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:345
}
    5d94:	08 95       	ret

00005d96 <twi_reply>:
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:356
 * Output   none
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    5d96:	88 23       	and	r24, r24
    5d98:	21 f0       	breq	.+8      	; 0x5da2 <twi_reply+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5d9a:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5d9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:361
  }
}
    5da0:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5da2:	85 e8       	ldi	r24, 0x85	; 133
    5da4:	fb cf       	rjmp	.-10     	; 0x5d9c <twi_reply+0x6>

00005da6 <twi_stop>:
twi_stop():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    5da6:	85 ed       	ldi	r24, 0xD5	; 213
    5da8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    5dac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5db0:	84 fd       	sbrc	r24, 4
    5db2:	fc cf       	rjmp	.-8      	; 0x5dac <twi_stop+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    5db4:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    5db8:	08 95       	ret

00005dba <twi_releaseBus>:
twi_releaseBus():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    5dba:	85 ec       	ldi	r24, 0xC5	; 197
    5dbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    5dc0:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    5dc4:	08 95       	ret

00005dc6 <__vector_24>:
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    5dc6:	1f 92       	push	r1
    5dc8:	0f 92       	push	r0
    5dca:	0f b6       	in	r0, 0x3f	; 63
    5dcc:	0f 92       	push	r0
    5dce:	11 24       	eor	r1, r1
    5dd0:	2f 93       	push	r18
    5dd2:	3f 93       	push	r19
    5dd4:	4f 93       	push	r20
    5dd6:	5f 93       	push	r21
    5dd8:	6f 93       	push	r22
    5dda:	7f 93       	push	r23
    5ddc:	8f 93       	push	r24
    5dde:	9f 93       	push	r25
    5de0:	af 93       	push	r26
    5de2:	bf 93       	push	r27
    5de4:	ef 93       	push	r30
    5de6:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    5de8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    5dec:	88 7f       	andi	r24, 0xF8	; 248
    5dee:	80 36       	cpi	r24, 0x60	; 96
    5df0:	09 f4       	brne	.+2      	; 0x5df4 <__vector_24+0x2e>
    5df2:	4c c0       	rjmp	.+152    	; 0x5e8c <__vector_24+0xc6>
    5df4:	08 f0       	brcs	.+2      	; 0x5df8 <__vector_24+0x32>
    5df6:	3f c0       	rjmp	.+126    	; 0x5e76 <__vector_24+0xb0>
    5df8:	88 32       	cpi	r24, 0x28	; 40
    5dfa:	09 f4       	brne	.+2      	; 0x5dfe <__vector_24+0x38>
    5dfc:	a8 c0       	rjmp	.+336    	; 0x5f4e <__vector_24+0x188>
    5dfe:	18 f5       	brcc	.+70     	; 0x5e46 <__vector_24+0x80>
    5e00:	80 31       	cpi	r24, 0x10	; 16
    5e02:	09 f4       	brne	.+2      	; 0x5e06 <__vector_24+0x40>
    5e04:	9c c0       	rjmp	.+312    	; 0x5f3e <__vector_24+0x178>
    5e06:	b8 f4       	brcc	.+46     	; 0x5e36 <__vector_24+0x70>
    5e08:	88 23       	and	r24, r24
    5e0a:	09 f4       	brne	.+2      	; 0x5e0e <__vector_24+0x48>
    5e0c:	f9 c0       	rjmp	.+498    	; 0x6000 <__vector_24+0x23a>
    5e0e:	88 30       	cpi	r24, 0x08	; 8
    5e10:	09 f4       	brne	.+2      	; 0x5e14 <__vector_24+0x4e>
    5e12:	95 c0       	rjmp	.+298    	; 0x5f3e <__vector_24+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    5e14:	ff 91       	pop	r31
    5e16:	ef 91       	pop	r30
    5e18:	bf 91       	pop	r27
    5e1a:	af 91       	pop	r26
    5e1c:	9f 91       	pop	r25
    5e1e:	8f 91       	pop	r24
    5e20:	7f 91       	pop	r23
    5e22:	6f 91       	pop	r22
    5e24:	5f 91       	pop	r21
    5e26:	4f 91       	pop	r20
    5e28:	3f 91       	pop	r19
    5e2a:	2f 91       	pop	r18
    5e2c:	0f 90       	pop	r0
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	0f 90       	pop	r0
    5e32:	1f 90       	pop	r1
    5e34:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5e36:	88 31       	cpi	r24, 0x18	; 24
    5e38:	09 f4       	brne	.+2      	; 0x5e3c <__vector_24+0x76>
    5e3a:	89 c0       	rjmp	.+274    	; 0x5f4e <__vector_24+0x188>
    5e3c:	80 32       	cpi	r24, 0x20	; 32
    5e3e:	51 f7       	brne	.-44     	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5e40:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <twi_error>
    5e44:	15 c0       	rjmp	.+42     	; 0x5e70 <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5e46:	80 34       	cpi	r24, 0x40	; 64
    5e48:	09 f4       	brne	.+2      	; 0x5e4c <__vector_24+0x86>
    5e4a:	9e c0       	rjmp	.+316    	; 0x5f88 <__vector_24+0x1c2>
    5e4c:	48 f4       	brcc	.+18     	; 0x5e60 <__vector_24+0x9a>
    5e4e:	80 33       	cpi	r24, 0x30	; 48
    5e50:	b9 f3       	breq	.-18     	; 0x5e40 <__vector_24+0x7a>
    5e52:	88 33       	cpi	r24, 0x38	; 56
    5e54:	f9 f6       	brne	.-66     	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5e56:	80 93 4f 04 	sts	0x044F, r24	; 0x80044f <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    5e5a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    5e5e:	da cf       	rjmp	.-76     	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5e60:	80 35       	cpi	r24, 0x50	; 80
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <__vector_24+0xa0>
    5e64:	85 c0       	rjmp	.+266    	; 0x5f70 <__vector_24+0x1aa>
    5e66:	88 35       	cpi	r24, 0x58	; 88
    5e68:	09 f4       	brne	.+2      	; 0x5e6c <__vector_24+0xa6>
    5e6a:	96 c0       	rjmp	.+300    	; 0x5f98 <__vector_24+0x1d2>
    5e6c:	88 34       	cpi	r24, 0x48	; 72
    5e6e:	91 f6       	brne	.-92     	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    5e70:	0e 94 d3 2e 	call	0x5da6	; 0x5da6 <twi_stop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    5e74:	cf cf       	rjmp	.-98     	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5e76:	88 39       	cpi	r24, 0x98	; 152
    5e78:	09 f4       	brne	.+2      	; 0x5e7c <__vector_24+0xb6>
    5e7a:	8c c0       	rjmp	.+280    	; 0x5f94 <__vector_24+0x1ce>
    5e7c:	38 f5       	brcc	.+78     	; 0x5ecc <__vector_24+0x106>
    5e7e:	88 37       	cpi	r24, 0x78	; 120
    5e80:	29 f0       	breq	.+10     	; 0x5e8c <__vector_24+0xc6>
    5e82:	50 f4       	brcc	.+20     	; 0x5e98 <__vector_24+0xd2>
    5e84:	88 36       	cpi	r24, 0x68	; 104
    5e86:	11 f0       	breq	.+4      	; 0x5e8c <__vector_24+0xc6>
    5e88:	80 37       	cpi	r24, 0x70	; 112
    5e8a:	21 f6       	brne	.-120    	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5e8c:	83 e0       	ldi	r24, 0x03	; 3
    5e8e:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5e92:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <twi_rxBufferIndex>
    5e96:	57 c0       	rjmp	.+174    	; 0x5f46 <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5e98:	88 38       	cpi	r24, 0x88	; 136
    5e9a:	09 f4       	brne	.+2      	; 0x5e9e <__vector_24+0xd8>
    5e9c:	7b c0       	rjmp	.+246    	; 0x5f94 <__vector_24+0x1ce>
    5e9e:	80 39       	cpi	r24, 0x90	; 144
    5ea0:	19 f0       	breq	.+6      	; 0x5ea8 <__vector_24+0xe2>
    5ea2:	80 38       	cpi	r24, 0x80	; 128
    5ea4:	09 f0       	breq	.+2      	; 0x5ea8 <__vector_24+0xe2>
    5ea6:	b6 cf       	rjmp	.-148    	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    5ea8:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_rxBufferIndex>
    5eac:	80 32       	cpi	r24, 0x20	; 32
    5eae:	08 f0       	brcs	.+2      	; 0x5eb2 <__vector_24+0xec>
    5eb0:	71 c0       	rjmp	.+226    	; 0x5f94 <__vector_24+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5eb2:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <twi_rxBufferIndex>
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	8e 0f       	add	r24, r30
    5eba:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <twi_rxBufferIndex>
    5ebe:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5ec2:	f0 e0       	ldi	r31, 0x00	; 0
    5ec4:	ef 5a       	subi	r30, 0xAF	; 175
    5ec6:	fb 4f       	sbci	r31, 0xFB	; 251
    5ec8:	80 83       	st	Z, r24
    5eca:	3d c0       	rjmp	.+122    	; 0x5f46 <__vector_24+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5ecc:	80 3b       	cpi	r24, 0xB0	; 176
    5ece:	39 f0       	breq	.+14     	; 0x5ede <__vector_24+0x118>
    5ed0:	e0 f4       	brcc	.+56     	; 0x5f0a <__vector_24+0x144>
    5ed2:	80 3a       	cpi	r24, 0xA0	; 160
    5ed4:	09 f4       	brne	.+2      	; 0x5ed8 <__vector_24+0x112>
    5ed6:	79 c0       	rjmp	.+242    	; 0x5fca <__vector_24+0x204>
    5ed8:	88 3a       	cpi	r24, 0xA8	; 168
    5eda:	09 f0       	breq	.+2      	; 0x5ede <__vector_24+0x118>
    5edc:	9b cf       	rjmp	.-202    	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5ede:	84 e0       	ldi	r24, 0x04	; 4
    5ee0:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5ee4:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5ee8:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5eec:	e0 91 b7 04 	lds	r30, 0x04B7	; 0x8004b7 <twi_onSlaveTransmit>
    5ef0:	f0 91 b8 04 	lds	r31, 0x04B8	; 0x8004b8 <twi_onSlaveTransmit+0x1>
    5ef4:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5ef6:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_txBufferLength>
    5efa:	81 11       	cpse	r24, r1
    5efc:	0f c0       	rjmp	.+30     	; 0x5f1c <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    5efe:	81 e0       	ldi	r24, 0x01	; 1
    5f00:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    5f04:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <twi_txBuffer>
    5f08:	09 c0       	rjmp	.+18     	; 0x5f1c <__vector_24+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5f0a:	80 3c       	cpi	r24, 0xC0	; 192
    5f0c:	09 f4       	brne	.+2      	; 0x5f10 <__vector_24+0x14a>
    5f0e:	76 c0       	rjmp	.+236    	; 0x5ffc <__vector_24+0x236>
    5f10:	88 3c       	cpi	r24, 0xC8	; 200
    5f12:	09 f4       	brne	.+2      	; 0x5f16 <__vector_24+0x150>
    5f14:	73 c0       	rjmp	.+230    	; 0x5ffc <__vector_24+0x236>
    5f16:	88 3b       	cpi	r24, 0xB8	; 184
    5f18:	09 f0       	breq	.+2      	; 0x5f1c <__vector_24+0x156>
    5f1a:	7c cf       	rjmp	.-264    	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5f1c:	e0 91 72 04 	lds	r30, 0x0472	; 0x800472 <twi_txBufferIndex>
    5f20:	81 e0       	ldi	r24, 0x01	; 1
    5f22:	8e 0f       	add	r24, r30
    5f24:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <twi_txBufferIndex>
    5f28:	f0 e0       	ldi	r31, 0x00	; 0
    5f2a:	ed 58       	subi	r30, 0x8D	; 141
    5f2c:	fb 4f       	sbci	r31, 0xFB	; 251
    5f2e:	80 81       	ld	r24, Z
    5f30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5f34:	90 91 72 04 	lds	r25, 0x0472	; 0x800472 <twi_txBufferIndex>
    5f38:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <twi_txBufferLength>
    5f3c:	29 c0       	rjmp	.+82     	; 0x5f90 <__vector_24+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5f3e:	80 91 bb 04 	lds	r24, 0x04BB	; 0x8004bb <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5f42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5f46:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5f4c:	63 cf       	rjmp	.-314    	; 0x5e14 <__vector_24+0x4e>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5f4e:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5f52:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_masterBufferLength>
    5f56:	98 17       	cp	r25, r24
    5f58:	58 f5       	brcc	.+86     	; 0x5fb0 <__vector_24+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5f5a:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5f5e:	81 e0       	ldi	r24, 0x01	; 1
    5f60:	8e 0f       	add	r24, r30
    5f62:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_masterBufferIndex>
    5f66:	f0 e0       	ldi	r31, 0x00	; 0
    5f68:	eb 56       	subi	r30, 0x6B	; 107
    5f6a:	fb 4f       	sbci	r31, 0xFB	; 251
    5f6c:	80 81       	ld	r24, Z
    5f6e:	e9 cf       	rjmp	.-46     	; 0x5f42 <__vector_24+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5f70:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5f74:	81 e0       	ldi	r24, 0x01	; 1
    5f76:	8e 0f       	add	r24, r30
    5f78:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_masterBufferIndex>
    5f7c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5f80:	f0 e0       	ldi	r31, 0x00	; 0
    5f82:	eb 56       	subi	r30, 0x6B	; 107
    5f84:	fb 4f       	sbci	r31, 0xFB	; 251
    5f86:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5f88:	90 91 94 04 	lds	r25, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5f8c:	80 91 93 04 	lds	r24, 0x0493	; 0x800493 <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5f90:	98 17       	cp	r25, r24
    5f92:	c8 f2       	brcs	.-78     	; 0x5f46 <__vector_24+0x180>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5f94:	85 e8       	ldi	r24, 0x85	; 133
    5f96:	d8 cf       	rjmp	.-80     	; 0x5f48 <__vector_24+0x182>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5f98:	e0 91 94 04 	lds	r30, 0x0494	; 0x800494 <twi_masterBufferIndex>
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	8e 0f       	add	r24, r30
    5fa0:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <twi_masterBufferIndex>
    5fa4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5fa8:	f0 e0       	ldi	r31, 0x00	; 0
    5faa:	eb 56       	subi	r30, 0x6B	; 107
    5fac:	fb 4f       	sbci	r31, 0xFB	; 251
    5fae:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    5fb0:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <twi_sendStop>
    5fb4:	81 11       	cpse	r24, r1
    5fb6:	5c cf       	rjmp	.-328    	; 0x5e70 <__vector_24+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	80 93 b9 04 	sts	0x04B9, r24	; 0x8004b9 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5fbe:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5fc0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5fc4:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    5fc8:	25 cf       	rjmp	.-438    	; 0x5e14 <__vector_24+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5fca:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <twi_releaseBus>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    5fce:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <twi_rxBufferIndex>
    5fd2:	80 32       	cpi	r24, 0x20	; 32
    5fd4:	30 f4       	brcc	.+12     	; 0x5fe2 <__vector_24+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5fd6:	e0 91 50 04 	lds	r30, 0x0450	; 0x800450 <twi_rxBufferIndex>
    5fda:	f0 e0       	ldi	r31, 0x00	; 0
    5fdc:	ef 5a       	subi	r30, 0xAF	; 175
    5fde:	fb 4f       	sbci	r31, 0xFB	; 251
    5fe0:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5fe2:	60 91 50 04 	lds	r22, 0x0450	; 0x800450 <twi_rxBufferIndex>
    5fe6:	70 e0       	ldi	r23, 0x00	; 0
    5fe8:	e0 91 b5 04 	lds	r30, 0x04B5	; 0x8004b5 <twi_onSlaveReceive>
    5fec:	f0 91 b6 04 	lds	r31, 0x04B6	; 0x8004b6 <twi_onSlaveReceive+0x1>
    5ff0:	81 e5       	ldi	r24, 0x51	; 81
    5ff2:	94 e0       	ldi	r25, 0x04	; 4
    5ff4:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5ff6:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    5ffa:	0c cf       	rjmp	.-488    	; 0x5e14 <__vector_24+0x4e>
twi_reply():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5ffc:	85 ec       	ldi	r24, 0xC5	; 197
    5ffe:	e0 cf       	rjmp	.-64     	; 0x5fc0 <__vector_24+0x1fa>
__vector_24():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    6000:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <twi_error>
    6004:	35 cf       	rjmp	.-406    	; 0x5e70 <__vector_24+0xaa>

00006006 <{lambda()#2}::_FUN()>:
_ZNUlvE0_4_FUNEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    6006:	8d eb       	ldi	r24, 0xBD	; 189
    6008:	94 e0       	ldi	r25, 0x04	; 4
    600a:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <TwoWire::onRequestService()>

0000600e <{lambda(unsigned char*, int)#1}::_FUN(unsigned char*, int)>:
_ZNUlPhiE_4_FUNES_i():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:19
                        twi_transmit1,
                        twi_reply1,
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
    600e:	ab 01       	movw	r20, r22
operator()():
    6010:	bc 01       	movw	r22, r24
    6012:	8d eb       	ldi	r24, 0xBD	; 189
    6014:	94 e0       	ldi	r25, 0x04	; 4
    6016:	0c 94 26 2d 	jmp	0x5a4c	; 0x5a4c <TwoWire::onReceiveService(unsigned char*, int)>

0000601a <_GLOBAL__sub_I_Wire1>:
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    601a:	8f 92       	push	r8
    601c:	9f 92       	push	r9
    601e:	af 92       	push	r10
    6020:	bf 92       	push	r11
    6022:	cf 92       	push	r12
    6024:	df 92       	push	r13
    6026:	ef 92       	push	r14
    6028:	ff 92       	push	r15
    602a:	0f 93       	push	r16
    602c:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    602e:	83 e0       	ldi	r24, 0x03	; 3
    6030:	90 e3       	ldi	r25, 0x30	; 48
    6032:	9f 93       	push	r25
    6034:	8f 93       	push	r24
    6036:	83 e7       	ldi	r24, 0x73	; 115
    6038:	91 e3       	ldi	r25, 0x31	; 49
    603a:	9f 93       	push	r25
    603c:	8f 93       	push	r24
    603e:	87 e0       	ldi	r24, 0x07	; 7
    6040:	90 e3       	ldi	r25, 0x30	; 48
    6042:	9f 93       	push	r25
    6044:	8f 93       	push	r24
    6046:	8e e6       	ldi	r24, 0x6E	; 110
    6048:	91 e3       	ldi	r25, 0x31	; 49
    604a:	9f 93       	push	r25
    604c:	8f 93       	push	r24
    604e:	8a e8       	ldi	r24, 0x8A	; 138
    6050:	91 e3       	ldi	r25, 0x31	; 49
    6052:	9f 93       	push	r25
    6054:	8f 93       	push	r24
    6056:	80 e8       	ldi	r24, 0x80	; 128
    6058:	91 e3       	ldi	r25, 0x31	; 49
    605a:	9f 93       	push	r25
    605c:	8f 93       	push	r24
    605e:	88 e7       	ldi	r24, 0x78	; 120
    6060:	91 e3       	ldi	r25, 0x31	; 49
    6062:	9f 93       	push	r25
    6064:	8f 93       	push	r24
    6066:	87 e4       	ldi	r24, 0x47	; 71
    6068:	88 2e       	mov	r8, r24
    606a:	81 e3       	ldi	r24, 0x31	; 49
    606c:	98 2e       	mov	r9, r24
    606e:	90 ef       	ldi	r25, 0xF0	; 240
    6070:	a9 2e       	mov	r10, r25
    6072:	90 e3       	ldi	r25, 0x30	; 48
    6074:	b9 2e       	mov	r11, r25
    6076:	28 ea       	ldi	r18, 0xA8	; 168
    6078:	c2 2e       	mov	r12, r18
    607a:	20 e3       	ldi	r18, 0x30	; 48
    607c:	d2 2e       	mov	r13, r18
    607e:	35 e9       	ldi	r19, 0x95	; 149
    6080:	e3 2e       	mov	r14, r19
    6082:	30 e3       	ldi	r19, 0x30	; 48
    6084:	f3 2e       	mov	r15, r19
    6086:	01 e9       	ldi	r16, 0x91	; 145
    6088:	10 e3       	ldi	r17, 0x30	; 48
    608a:	24 e8       	ldi	r18, 0x84	; 132
    608c:	30 e3       	ldi	r19, 0x30	; 48
    608e:	46 e6       	ldi	r20, 0x66	; 102
    6090:	50 e3       	ldi	r21, 0x30	; 48
    6092:	60 e2       	ldi	r22, 0x20	; 32
    6094:	70 e0       	ldi	r23, 0x00	; 0
    6096:	8d eb       	ldi	r24, 0xBD	; 189
    6098:	94 e0       	ldi	r25, 0x04	; 4
    609a:	0e 94 46 2c 	call	0x588c	; 0x588c <TwoWire::TwoWire(int, void (*)(), void (*)(), void (*)(unsigned char), void (*)(unsigned long), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char), unsigned char (*)(unsigned char, unsigned char*, unsigned char, unsigned char, unsigned char), unsigned char (*)(unsigned char const*, unsigned char), void (*)(unsigned char), void (*)(), void (*)(), void (*)(void (*)(unsigned char*, int)), void (*)(unsigned char*, int), void (*)(void (*)()), void (*)())>
_GLOBAL__sub_I_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:21
                        twi_stop1,
                        twi_releaseBus1,
                        twi_attachSlaveRxEvent1,
                        [](uint8_t* v, int len){ Wire1.onReceiveService(v, len); },
                        twi_attachSlaveTxEvent1,
                        [](){ Wire1.onRequestService(); });
    609e:	8d b7       	in	r24, 0x3d	; 61
    60a0:	9e b7       	in	r25, 0x3e	; 62
    60a2:	0e 96       	adiw	r24, 0x0e	; 14
    60a4:	0f b6       	in	r0, 0x3f	; 63
    60a6:	f8 94       	cli
    60a8:	9e bf       	out	0x3e, r25	; 62
    60aa:	0f be       	out	0x3f, r0	; 63
    60ac:	8d bf       	out	0x3d, r24	; 61
    60ae:	1f 91       	pop	r17
    60b0:	0f 91       	pop	r16
    60b2:	ff 90       	pop	r15
    60b4:	ef 90       	pop	r14
    60b6:	df 90       	pop	r13
    60b8:	cf 90       	pop	r12
    60ba:	bf 90       	pop	r11
    60bc:	af 90       	pop	r10
    60be:	9f 90       	pop	r9
    60c0:	8f 90       	pop	r8
    60c2:	08 95       	ret

000060c4 <_GLOBAL__sub_D_Wire1>:
_GLOBAL__sub_D_Wire1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src/Wire1.cpp:7
  #include "utility/twi1.h"
}

#include "Wire1.h"

TwoWire Wire1 = TwoWire(TWI1_BUFFER_SIZE,
    60c4:	8d eb       	ldi	r24, 0xBD	; 189
    60c6:	94 e0       	ldi	r25, 0x04	; 4
    60c8:	0c 94 e2 2c 	jmp	0x59c4	; 0x59c4 <TwoWire::~TwoWire()>

000060cc <twi_init1>:
twi_init1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:71
 * Output   none
 */
void twi_init1(void)
{
  // initialize state
  twi_state = TWI_READY;
    60cc:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:72
  twi_sendStop = true;  // default value
    60d0:	81 e0       	ldi	r24, 0x01	; 1
    60d2:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:73
  twi_inRepStart = false;
    60d6:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:76
  
  // activate internal pullups for twi.
  digitalWrite(SDA1, 1);
    60da:	61 e0       	ldi	r22, 0x01	; 1
    60dc:	87 e1       	ldi	r24, 0x17	; 23
    60de:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:77
  digitalWrite(SCL1, 1);
    60e2:	61 e0       	ldi	r22, 0x01	; 1
    60e4:	88 e1       	ldi	r24, 0x18	; 24
    60e6:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:80

  // initialize twi prescaler and bit rate
  cbi(TWSR1, TWPS0);
    60ea:	e9 ed       	ldi	r30, 0xD9	; 217
    60ec:	f0 e0       	ldi	r31, 0x00	; 0
    60ee:	80 81       	ld	r24, Z
    60f0:	8e 7f       	andi	r24, 0xFE	; 254
    60f2:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:81
  cbi(TWSR1, TWPS1);
    60f4:	80 81       	ld	r24, Z
    60f6:	8d 7f       	andi	r24, 0xFD	; 253
    60f8:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:82
  TWBR1 = ((F_CPU / TWI_FREQ) - 16) / 2;
    60fa:	88 e4       	ldi	r24, 0x48	; 72
    60fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:90
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
    6100:	85 e4       	ldi	r24, 0x45	; 69
    6102:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:91
}
    6106:	08 95       	ret

00006108 <twi_disable1>:
twi_disable1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:102
 * Output   none
 */
void twi_disable1(void)
{
  // disable twi module, acks, and twi interrupt
  TWCR1 &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));
    6108:	ec ed       	ldi	r30, 0xDC	; 220
    610a:	f0 e0       	ldi	r31, 0x00	; 0
    610c:	80 81       	ld	r24, Z
    610e:	8a 7b       	andi	r24, 0xBA	; 186
    6110:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:105

  // deactivate internal pullups for twi.
  digitalWrite(SDA1, 0);
    6112:	60 e0       	ldi	r22, 0x00	; 0
    6114:	87 e1       	ldi	r24, 0x17	; 23
    6116:	0e 94 7d 38 	call	0x70fa	; 0x70fa <digitalWrite>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:106
  digitalWrite(SCL1, 0);
    611a:	60 e0       	ldi	r22, 0x00	; 0
    611c:	88 e1       	ldi	r24, 0x18	; 24
    611e:	0c 94 7d 38 	jmp	0x70fa	; 0x70fa <digitalWrite>

00006122 <twi_setAddress1>:
twi_setAddress1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:118
 * Output   none
 */
void twi_setAddress1(uint8_t address)
{
  // set twi slave address (skip over TWGCE bit)
  TWAR1 = address << 1;
    6122:	88 0f       	add	r24, r24
    6124:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:119
}
    6128:	08 95       	ret

0000612a <twi_setFrequency1>:
twi_setFrequency1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:128
 * Desc     sets twi bit rate
 * Input    Clock frequency
 * Output   none
 */
void twi_setFrequency1(uint32_t frequency)
{
    612a:	9b 01       	movw	r18, r22
    612c:	ac 01       	movw	r20, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:129
  TWBR = ((F_CPU / frequency) - 16) / 2;
    612e:	60 e0       	ldi	r22, 0x00	; 0
    6130:	74 e2       	ldi	r23, 0x24	; 36
    6132:	84 ef       	ldi	r24, 0xF4	; 244
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodsi4>
    613a:	20 51       	subi	r18, 0x10	; 16
    613c:	31 09       	sbc	r19, r1
    613e:	41 09       	sbc	r20, r1
    6140:	51 09       	sbc	r21, r1
    6142:	56 95       	lsr	r21
    6144:	47 95       	ror	r20
    6146:	37 95       	ror	r19
    6148:	27 95       	ror	r18
    614a:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:135

  /* twi bit rate formula from atmega128 manual pg 204
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR1))
  note: TWBR1 should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */
}
    614e:	08 95       	ret

00006150 <twi_readFrom1>:
twi_readFrom1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:152
uint8_t twi_readFrom1(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    6150:	41 32       	cpi	r20, 0x21	; 33
    6152:	08 f0       	brcs	.+2      	; 0x6156 <twi_readFrom1+0x6>
    6154:	43 c0       	rjmp	.+134    	; 0x61dc <twi_readFrom1+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:157
    return 0;
  }

  // wait until twi is ready, become master receiver
  while(TWI_READY != twi_state){
    6156:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <twi_state>
    615a:	91 11       	cpse	r25, r1
    615c:	fc cf       	rjmp	.-8      	; 0x6156 <twi_readFrom1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:160
    continue;
  }
  twi_state = TWI_MRX;
    615e:	91 e0       	ldi	r25, 0x01	; 1
    6160:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:161
  twi_sendStop = sendStop;
    6164:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:163
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    6168:	2f ef       	ldi	r18, 0xFF	; 255
    616a:	20 93 ed 04 	sts	0x04ED, r18	; 0x8004ed <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:166

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    616e:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:167
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    6172:	24 0f       	add	r18, r20
    6174:	20 93 31 05 	sts	0x0531, r18	; 0x800531 <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:175
  // Therefor we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    6178:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:176
  twi_slarw |= address << 1;
    617c:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <twi_slarw>
    6180:	88 0f       	add	r24, r24
    6182:	89 2b       	or	r24, r25
    6184:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:178

  if (true == twi_inRepStart) {
    6188:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <twi_inRepStart>
    618c:	81 30       	cpi	r24, 0x01	; 1
    618e:	09 f5       	brne	.+66     	; 0x61d2 <twi_readFrom1+0x82>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:185
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    6190:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:187 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    6194:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_slarw>
    6198:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:188 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    619c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    61a0:	83 fd       	sbrc	r24, 3
    61a2:	f8 cf       	rjmp	.-16     	; 0x6194 <twi_readFrom1+0x44>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:189
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    61a4:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    61a6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:196

  // wait for read operation to complete
  while(TWI_MRX == twi_state){
    61aa:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <twi_state>
    61ae:	81 30       	cpi	r24, 0x01	; 1
    61b0:	e1 f3       	breq	.-8      	; 0x61aa <twi_readFrom1+0x5a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:200
    continue;
  }

  if (twi_masterBufferIndex < length)
    61b2:	80 91 32 05 	lds	r24, 0x0532	; 0x800532 <twi_masterBufferIndex>
    61b6:	84 17       	cp	r24, r20
    61b8:	10 f4       	brcc	.+4      	; 0x61be <twi_readFrom1+0x6e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:201
    length = twi_masterBufferIndex;
    61ba:	40 91 32 05 	lds	r20, 0x0532	; 0x800532 <twi_masterBufferIndex>
    61be:	a3 e3       	ldi	r26, 0x33	; 51
    61c0:	b5 e0       	ldi	r27, 0x05	; 5
    61c2:	96 2f       	mov	r25, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    61c4:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:204 (discriminator 1)
    61c6:	8e 2f       	mov	r24, r30
    61c8:	89 1b       	sub	r24, r25
    61ca:	84 17       	cp	r24, r20
    61cc:	20 f0       	brcs	.+8      	; 0x61d6 <twi_readFrom1+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:209
    data[i] = twi_masterBuffer[i];
  }

  return length;
}
    61ce:	84 2f       	mov	r24, r20
    61d0:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:193
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    61d2:	85 ee       	ldi	r24, 0xE5	; 229
    61d4:	e8 cf       	rjmp	.-48     	; 0x61a6 <twi_readFrom1+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:205 (discriminator 3)
  if (twi_masterBufferIndex < length)
    length = twi_masterBufferIndex;

  // copy twi buffer to data
  for(i = 0; i < length; ++i){
    data[i] = twi_masterBuffer[i];
    61d6:	8d 91       	ld	r24, X+
    61d8:	81 93       	st	Z+, r24
    61da:	f5 cf       	rjmp	.-22     	; 0x61c6 <twi_readFrom1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:153
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 0;
    61dc:	40 e0       	ldi	r20, 0x00	; 0
    61de:	f7 cf       	rjmp	.-18     	; 0x61ce <twi_readFrom1+0x7e>

000061e0 <twi_writeTo1>:
twi_writeTo1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:227
 *          2 .. address send, NACK received
 *          3 .. data send, NACK received
 *          4 .. other twi error (lost bus arbitration, bus error, ..)
 */
uint8_t twi_writeTo1(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
    61e0:	0f 93       	push	r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:231
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    61e2:	41 32       	cpi	r20, 0x21	; 33
    61e4:	08 f0       	brcs	.+2      	; 0x61e8 <twi_writeTo1+0x8>
    61e6:	4b c0       	rjmp	.+150    	; 0x627e <twi_writeTo1+0x9e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:236
    return 1;
  }

  // wait until twi is ready, become master transmitter
  while(TWI_READY != twi_state){
    61e8:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <twi_state>
    61ec:	91 11       	cpse	r25, r1
    61ee:	fc cf       	rjmp	.-8      	; 0x61e8 <twi_writeTo1+0x8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:239
    continue;
  }
  twi_state = TWI_MTX;
    61f0:	92 e0       	ldi	r25, 0x02	; 2
    61f2:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:240
  twi_sendStop = sendStop;
    61f6:	00 93 58 05 	sts	0x0558, r16	; 0x800558 <twi_sendStop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:242
  // reset error state (0xFF.. no error occured)
  twi_error = 0xFF;
    61fa:	9f ef       	ldi	r25, 0xFF	; 255
    61fc:	90 93 ed 04 	sts	0x04ED, r25	; 0x8004ed <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:245

  // initialize buffer iteration vars
  twi_masterBufferIndex = 0;
    6200:	10 92 32 05 	sts	0x0532, r1	; 0x800532 <twi_masterBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:246
  twi_masterBufferLength = length;
    6204:	40 93 31 05 	sts	0x0531, r20	; 0x800531 <twi_masterBufferLength>
    6208:	36 2f       	mov	r19, r22
    620a:	a3 e3       	ldi	r26, 0x33	; 51
    620c:	b5 e0       	ldi	r27, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    620e:	fb 01       	movw	r30, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:249 (discriminator 1)
    6210:	9e 2f       	mov	r25, r30
    6212:	93 1b       	sub	r25, r19
    6214:	94 17       	cp	r25, r20
    6216:	70 f1       	brcs	.+92     	; 0x6274 <twi_writeTo1+0x94>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:254
    twi_masterBuffer[i] = data[i];
  }
  
  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
    6218:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:255
  twi_slarw |= address << 1;
    621c:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <twi_slarw>
    6220:	88 0f       	add	r24, r24
    6222:	89 2b       	or	r24, r25
    6224:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:260
  
  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
    6228:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <twi_inRepStart>
    622c:	81 30       	cpi	r24, 0x01	; 1
    622e:	29 f5       	brne	.+74     	; 0x627a <twi_writeTo1+0x9a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:267
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent outselves, and that would really confuse things.
    twi_inRepStart = false; // remember, we're dealing with an ASYNC ISR
    6230:	10 92 57 05 	sts	0x0557, r1	; 0x800557 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:269 (discriminator 1)
    do {
      TWDR1 = twi_slarw;
    6234:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_slarw>
    6238:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:270 (discriminator 1)
    } while(TWCR1 & _BV(TWWC));
    623c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    6240:	83 fd       	sbrc	r24, 3
    6242:	f8 cf       	rjmp	.-16     	; 0x6234 <twi_writeTo1+0x54>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:271
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
    6244:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    6246:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278

  // wait for write operation to complete
  while(wait && (TWI_MTX == twi_state)){
    624a:	22 23       	and	r18, r18
    624c:	21 f0       	breq	.+8      	; 0x6256 <twi_writeTo1+0x76>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:278 (discriminator 1)
    624e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <twi_state>
    6252:	82 30       	cpi	r24, 0x02	; 2
    6254:	d1 f3       	breq	.-12     	; 0x624a <twi_writeTo1+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:282
    continue;
  }
  
  if (twi_error == 0xFF)
    6256:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <twi_error>
    625a:	8f 3f       	cpi	r24, 0xFF	; 255
    625c:	91 f0       	breq	.+36     	; 0x6282 <twi_writeTo1+0xa2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:284
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
    625e:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <twi_error>
    6262:	80 32       	cpi	r24, 0x20	; 32
    6264:	81 f0       	breq	.+32     	; 0x6286 <twi_writeTo1+0xa6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:286
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
    6266:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <twi_error>
    626a:	80 33       	cpi	r24, 0x30	; 48
    626c:	71 f0       	breq	.+28     	; 0x628a <twi_writeTo1+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:289
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
    626e:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:290
}
    6270:	0f 91       	pop	r16
    6272:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:250 (discriminator 3)
  twi_masterBufferIndex = 0;
  twi_masterBufferLength = length;
  
  // copy data to twi buffer
  for(i = 0; i < length; ++i){
    twi_masterBuffer[i] = data[i];
    6274:	91 91       	ld	r25, Z+
    6276:	9d 93       	st	X+, r25
    6278:	cb cf       	rjmp	.-106    	; 0x6210 <twi_writeTo1+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:275
    } while(TWCR1 & _BV(TWWC));
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE); // enable INTs, but not START
  }
  else
    // send start condition
    TWCR1 = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);  // enable INTs
    627a:	85 ee       	ldi	r24, 0xE5	; 229
    627c:	e4 cf       	rjmp	.-56     	; 0x6246 <twi_writeTo1+0x66>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:232
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < length){
    return 1;
    627e:	81 e0       	ldi	r24, 0x01	; 1
    6280:	f7 cf       	rjmp	.-18     	; 0x6270 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:283
  while(wait && (TWI_MTX == twi_state)){
    continue;
  }
  
  if (twi_error == 0xFF)
    return 0; // success
    6282:	80 e0       	ldi	r24, 0x00	; 0
    6284:	f5 cf       	rjmp	.-22     	; 0x6270 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:285
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
    6286:	82 e0       	ldi	r24, 0x02	; 2
    6288:	f3 cf       	rjmp	.-26     	; 0x6270 <twi_writeTo1+0x90>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:287
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
    628a:	83 e0       	ldi	r24, 0x03	; 3
    628c:	f1 cf       	rjmp	.-30     	; 0x6270 <twi_writeTo1+0x90>

0000628e <twi_transmit1>:
twi_transmit1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:307
uint8_t twi_transmit1(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    628e:	20 91 0f 05 	lds	r18, 0x050F	; 0x80050f <twi_txBufferLength>
    6292:	26 0f       	add	r18, r22
    6294:	33 27       	eor	r19, r19
    6296:	33 1f       	adc	r19, r19
    6298:	21 32       	cpi	r18, 0x21	; 33
    629a:	31 05       	cpc	r19, r1
    629c:	ec f4       	brge	.+58     	; 0x62d8 <twi_transmit1+0x4a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:312
    return 1;
  }
  
  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
    629e:	20 91 5a 05 	lds	r18, 0x055A	; 0x80055a <twi_state>
    62a2:	fc 01       	movw	r30, r24
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	80 e0       	ldi	r24, 0x00	; 0
    62a8:	24 30       	cpi	r18, 0x04	; 4
    62aa:	69 f0       	breq	.+26     	; 0x62c6 <twi_transmit1+0x38>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:313
    return 2;
    62ac:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:323
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
  
  return 0;
}
    62ae:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:318 (discriminator 3)
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
    62b0:	a0 91 0f 05 	lds	r26, 0x050F	; 0x80050f <twi_txBufferLength>
    62b4:	21 91       	ld	r18, Z+
    62b6:	ac 01       	movw	r20, r24
    62b8:	4f 5e       	subi	r20, 0xEF	; 239
    62ba:	5a 4f       	sbci	r21, 0xFA	; 250
    62bc:	a4 0f       	add	r26, r20
    62be:	b5 2f       	mov	r27, r21
    62c0:	b1 1d       	adc	r27, r1
    62c2:	2c 93       	st	X, r18
    62c4:	01 96       	adiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:317 (discriminator 1)
  if(TWI_STX != twi_state){
    return 2;
  }
  
  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    62c6:	86 17       	cp	r24, r22
    62c8:	98 f3       	brcs	.-26     	; 0x62b0 <twi_transmit1+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:320
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
    62ca:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twi_txBufferLength>
    62ce:	68 0f       	add	r22, r24
    62d0:	60 93 0f 05 	sts	0x050F, r22	; 0x80050f <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:322
  
  return 0;
    62d4:	80 e0       	ldi	r24, 0x00	; 0
    62d6:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:308
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI1_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
    62d8:	81 e0       	ldi	r24, 0x01	; 1
    62da:	08 95       	ret

000062dc <twi_attachSlaveRxEvent1>:
twi_attachSlaveRxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:333
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent1( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
    62dc:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <twi_onSlaveReceive+0x1>
    62e0:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <twi_onSlaveReceive>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:334
}
    62e4:	08 95       	ret

000062e6 <twi_attachSlaveTxEvent1>:
twi_attachSlaveTxEvent1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:344
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent1( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
    62e6:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <twi_onSlaveTransmit+0x1>
    62ea:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <twi_onSlaveTransmit>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:345
}
    62ee:	08 95       	ret

000062f0 <twi_reply1>:
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:356
 * Output   none
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    62f0:	88 23       	and	r24, r24
    62f2:	21 f0       	breq	.+8      	; 0x62fc <twi_reply1+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    62f4:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    62f6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:361
  }
}
    62fa:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    62fc:	85 e8       	ldi	r24, 0x85	; 133
    62fe:	fb cf       	rjmp	.-10     	; 0x62f6 <twi_reply1+0x6>

00006300 <twi_stop1>:
twi_stop1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:372
 * Output   none
 */
void twi_stop1(void)
{
  // send stop condition
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    6300:	85 ed       	ldi	r24, 0xD5	; 213
    6302:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR1 & _BV(TWSTO)){
    6306:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    630a:	84 fd       	sbrc	r24, 4
    630c:	fc cf       	rjmp	.-8      	; 0x6306 <twi_stop1+0x6>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    630e:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:382
}
    6312:	08 95       	ret

00006314 <twi_releaseBus1>:
twi_releaseBus1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:393
 * Output   none
 */
void twi_releaseBus1(void)
{
  // release bus
  TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    6314:	85 ec       	ldi	r24, 0xC5	; 197
    6316:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:396

  // update twi state
  twi_state = TWI_READY;
    631a:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:397
}
    631e:	08 95       	ret

00006320 <__vector_40>:
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:400

ISR(TWI1_vect)
{
    6320:	1f 92       	push	r1
    6322:	0f 92       	push	r0
    6324:	0f b6       	in	r0, 0x3f	; 63
    6326:	0f 92       	push	r0
    6328:	11 24       	eor	r1, r1
    632a:	2f 93       	push	r18
    632c:	3f 93       	push	r19
    632e:	4f 93       	push	r20
    6330:	5f 93       	push	r21
    6332:	6f 93       	push	r22
    6334:	7f 93       	push	r23
    6336:	8f 93       	push	r24
    6338:	9f 93       	push	r25
    633a:	af 93       	push	r26
    633c:	bf 93       	push	r27
    633e:	ef 93       	push	r30
    6340:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6342:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    6346:	88 7f       	andi	r24, 0xF8	; 248
    6348:	80 36       	cpi	r24, 0x60	; 96
    634a:	09 f4       	brne	.+2      	; 0x634e <__vector_40+0x2e>
    634c:	4c c0       	rjmp	.+152    	; 0x63e6 <__vector_40+0xc6>
    634e:	08 f0       	brcs	.+2      	; 0x6352 <__vector_40+0x32>
    6350:	3f c0       	rjmp	.+126    	; 0x63d0 <__vector_40+0xb0>
    6352:	88 32       	cpi	r24, 0x28	; 40
    6354:	09 f4       	brne	.+2      	; 0x6358 <__vector_40+0x38>
    6356:	a8 c0       	rjmp	.+336    	; 0x64a8 <__vector_40+0x188>
    6358:	18 f5       	brcc	.+70     	; 0x63a0 <__vector_40+0x80>
    635a:	80 31       	cpi	r24, 0x10	; 16
    635c:	09 f4       	brne	.+2      	; 0x6360 <__vector_40+0x40>
    635e:	9c c0       	rjmp	.+312    	; 0x6498 <__vector_40+0x178>
    6360:	b8 f4       	brcc	.+46     	; 0x6390 <__vector_40+0x70>
    6362:	88 23       	and	r24, r24
    6364:	09 f4       	brne	.+2      	; 0x6368 <__vector_40+0x48>
    6366:	f9 c0       	rjmp	.+498    	; 0x655a <__vector_40+0x23a>
    6368:	88 30       	cpi	r24, 0x08	; 8
    636a:	09 f4       	brne	.+2      	; 0x636e <__vector_40+0x4e>
    636c:	95 c0       	rjmp	.+298    	; 0x6498 <__vector_40+0x178>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
      break;
  }
}
    636e:	ff 91       	pop	r31
    6370:	ef 91       	pop	r30
    6372:	bf 91       	pop	r27
    6374:	af 91       	pop	r26
    6376:	9f 91       	pop	r25
    6378:	8f 91       	pop	r24
    637a:	7f 91       	pop	r23
    637c:	6f 91       	pop	r22
    637e:	5f 91       	pop	r21
    6380:	4f 91       	pop	r20
    6382:	3f 91       	pop	r19
    6384:	2f 91       	pop	r18
    6386:	0f 90       	pop	r0
    6388:	0f be       	out	0x3f, r0	; 63
    638a:	0f 90       	pop	r0
    638c:	1f 90       	pop	r1
    638e:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6390:	88 31       	cpi	r24, 0x18	; 24
    6392:	09 f4       	brne	.+2      	; 0x6396 <__vector_40+0x76>
    6394:	89 c0       	rjmp	.+274    	; 0x64a8 <__vector_40+0x188>
    6396:	80 32       	cpi	r24, 0x20	; 32
    6398:	51 f7       	brne	.-44     	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:437
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop1();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    639a:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <twi_error>
    639e:	15 c0       	rjmp	.+42     	; 0x63ca <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    63a0:	80 34       	cpi	r24, 0x40	; 64
    63a2:	09 f4       	brne	.+2      	; 0x63a6 <__vector_40+0x86>
    63a4:	9e c0       	rjmp	.+316    	; 0x64e2 <__vector_40+0x1c2>
    63a6:	48 f4       	brcc	.+18     	; 0x63ba <__vector_40+0x9a>
    63a8:	80 33       	cpi	r24, 0x30	; 48
    63aa:	b9 f3       	breq	.-18     	; 0x639a <__vector_40+0x7a>
    63ac:	88 33       	cpi	r24, 0x38	; 56
    63ae:	f9 f6       	brne	.-66     	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:441
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop1();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    63b0:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <twi_error>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:442
      twi_releaseBus1();
    63b4:	0e 94 8a 31 	call	0x6314	; 0x6314 <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:443
      break;
    63b8:	da cf       	rjmp	.-76     	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    63ba:	80 35       	cpi	r24, 0x50	; 80
    63bc:	09 f4       	brne	.+2      	; 0x63c0 <__vector_40+0xa0>
    63be:	85 c0       	rjmp	.+266    	; 0x64ca <__vector_40+0x1aa>
    63c0:	88 35       	cpi	r24, 0x58	; 88
    63c2:	09 f4       	brne	.+2      	; 0x63c6 <__vector_40+0xa6>
    63c4:	96 c0       	rjmp	.+300    	; 0x64f2 <__vector_40+0x1d2>
    63c6:	88 34       	cpi	r24, 0x48	; 72
    63c8:	91 f6       	brne	.-92     	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:560
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop1();
    63ca:	0e 94 80 31 	call	0x6300	; 0x6300 <twi_stop1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:563
      break;
  }
}
    63ce:	cf cf       	rjmp	.-98     	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    63d0:	88 39       	cpi	r24, 0x98	; 152
    63d2:	09 f4       	brne	.+2      	; 0x63d6 <__vector_40+0xb6>
    63d4:	8c c0       	rjmp	.+280    	; 0x64ee <__vector_40+0x1ce>
    63d6:	38 f5       	brcc	.+78     	; 0x6426 <__vector_40+0x106>
    63d8:	88 37       	cpi	r24, 0x78	; 120
    63da:	29 f0       	breq	.+10     	; 0x63e6 <__vector_40+0xc6>
    63dc:	50 f4       	brcc	.+20     	; 0x63f2 <__vector_40+0xd2>
    63de:	88 36       	cpi	r24, 0x68	; 104
    63e0:	11 f0       	breq	.+4      	; 0x63e6 <__vector_40+0xc6>
    63e2:	80 37       	cpi	r24, 0x70	; 112
    63e4:	21 f6       	brne	.-120    	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:483
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    63e6:	83 e0       	ldi	r24, 0x03	; 3
    63e8:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:485
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    63ec:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <twi_rxBufferIndex>
    63f0:	57 c0       	rjmp	.+174    	; 0x64a0 <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    63f2:	88 38       	cpi	r24, 0x88	; 136
    63f4:	09 f4       	brne	.+2      	; 0x63f8 <__vector_40+0xd8>
    63f6:	7b c0       	rjmp	.+246    	; 0x64ee <__vector_40+0x1ce>
    63f8:	80 39       	cpi	r24, 0x90	; 144
    63fa:	19 f0       	breq	.+6      	; 0x6402 <__vector_40+0xe2>
    63fc:	80 38       	cpi	r24, 0x80	; 128
    63fe:	09 f0       	breq	.+2      	; 0x6402 <__vector_40+0xe2>
    6400:	b6 cf       	rjmp	.-148    	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:491
      twi_reply1(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    6402:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <twi_rxBufferIndex>
    6406:	80 32       	cpi	r24, 0x20	; 32
    6408:	08 f0       	brcs	.+2      	; 0x640c <__vector_40+0xec>
    640a:	71 c0       	rjmp	.+226    	; 0x64ee <__vector_40+0x1ce>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:493
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR1;
    640c:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <twi_rxBufferIndex>
    6410:	81 e0       	ldi	r24, 0x01	; 1
    6412:	8e 0f       	add	r24, r30
    6414:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <twi_rxBufferIndex>
    6418:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    641c:	f0 e0       	ldi	r31, 0x00	; 0
    641e:	e1 51       	subi	r30, 0x11	; 17
    6420:	fb 4f       	sbci	r31, 0xFB	; 251
    6422:	80 83       	st	Z, r24
    6424:	3d c0       	rjmp	.+122    	; 0x64a0 <__vector_40+0x180>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6426:	80 3b       	cpi	r24, 0xB0	; 176
    6428:	39 f0       	breq	.+14     	; 0x6438 <__vector_40+0x118>
    642a:	e0 f4       	brcc	.+56     	; 0x6464 <__vector_40+0x144>
    642c:	80 3a       	cpi	r24, 0xA0	; 160
    642e:	09 f4       	brne	.+2      	; 0x6432 <__vector_40+0x112>
    6430:	79 c0       	rjmp	.+242    	; 0x6524 <__vector_40+0x204>
    6432:	88 3a       	cpi	r24, 0xA8	; 168
    6434:	09 f0       	breq	.+2      	; 0x6438 <__vector_40+0x118>
    6436:	9b cf       	rjmp	.-202    	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:522
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    6438:	84 e0       	ldi	r24, 0x04	; 4
    643a:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:524
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    643e:	10 92 10 05 	sts	0x0510, r1	; 0x800510 <twi_txBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:526
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6442:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:529
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6446:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <twi_onSlaveTransmit>
    644a:	f0 91 56 05 	lds	r31, 0x0556	; 0x800556 <twi_onSlaveTransmit+0x1>
    644e:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:531
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6450:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twi_txBufferLength>
    6454:	81 11       	cpse	r24, r1
    6456:	0f c0       	rjmp	.+30     	; 0x6476 <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:532
        twi_txBufferLength = 1;
    6458:	81 e0       	ldi	r24, 0x01	; 1
    645a:	80 93 0f 05 	sts	0x050F, r24	; 0x80050f <twi_txBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:533
        twi_txBuffer[0] = 0x00;
    645e:	10 92 11 05 	sts	0x0511, r1	; 0x800511 <twi_txBuffer>
    6462:	09 c0       	rjmp	.+18     	; 0x6476 <__vector_40+0x156>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:402
}

ISR(TWI1_vect)
{
  // #define TW_STATUS  (TWSR & TW_STATUS_MASK)
  switch(TWSR1 & TW_STATUS_MASK){
    6464:	80 3c       	cpi	r24, 0xC0	; 192
    6466:	09 f4       	brne	.+2      	; 0x646a <__vector_40+0x14a>
    6468:	76 c0       	rjmp	.+236    	; 0x6556 <__vector_40+0x236>
    646a:	88 3c       	cpi	r24, 0xC8	; 200
    646c:	09 f4       	brne	.+2      	; 0x6470 <__vector_40+0x150>
    646e:	73 c0       	rjmp	.+230    	; 0x6556 <__vector_40+0x236>
    6470:	88 3b       	cpi	r24, 0xB8	; 184
    6472:	09 f0       	breq	.+2      	; 0x6476 <__vector_40+0x156>
    6474:	7c cf       	rjmp	.-264    	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:539
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
    6476:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <twi_txBufferIndex>
    647a:	81 e0       	ldi	r24, 0x01	; 1
    647c:	8e 0f       	add	r24, r30
    647e:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <twi_txBufferIndex>
    6482:	f0 e0       	ldi	r31, 0x00	; 0
    6484:	ef 5e       	subi	r30, 0xEF	; 239
    6486:	fa 4f       	sbci	r31, 0xFA	; 250
    6488:	80 81       	ld	r24, Z
    648a:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    648e:	90 91 10 05 	lds	r25, 0x0510	; 0x800510 <twi_txBufferIndex>
    6492:	80 91 0f 05 	lds	r24, 0x050F	; 0x80050f <twi_txBufferLength>
    6496:	29 c0       	rjmp	.+82     	; 0x64ea <__vector_40+0x1ca>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:407
  switch(TWSR1 & TW_STATUS_MASK){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR1 = twi_slarw;
    6498:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_slarw>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    649c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    64a0:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    64a2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    64a6:	63 cf       	rjmp	.-314    	; 0x636e <__vector_40+0x4e>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:415

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    64a8:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <twi_masterBufferIndex>
    64ac:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <twi_masterBufferLength>
    64b0:	98 17       	cp	r25, r24
    64b2:	58 f5       	brcc	.+86     	; 0x650a <__vector_40+0x1ea>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:417
        // copy data to output register and ack
        TWDR1 = twi_masterBuffer[twi_masterBufferIndex++];
    64b4:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <twi_masterBufferIndex>
    64b8:	81 e0       	ldi	r24, 0x01	; 1
    64ba:	8e 0f       	add	r24, r30
    64bc:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <twi_masterBufferIndex>
    64c0:	f0 e0       	ldi	r31, 0x00	; 0
    64c2:	ed 5c       	subi	r30, 0xCD	; 205
    64c4:	fa 4f       	sbci	r31, 0xFA	; 250
    64c6:	80 81       	ld	r24, Z
    64c8:	e9 cf       	rjmp	.-46     	; 0x649c <__vector_40+0x17c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:448
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    64ca:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <twi_masterBufferIndex>
    64ce:	81 e0       	ldi	r24, 0x01	; 1
    64d0:	8e 0f       	add	r24, r30
    64d2:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <twi_masterBufferIndex>
    64d6:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    64da:	f0 e0       	ldi	r31, 0x00	; 0
    64dc:	ed 5c       	subi	r30, 0xCD	; 205
    64de:	fa 4f       	sbci	r31, 0xFA	; 250
    64e0:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:452
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    64e2:	90 91 32 05 	lds	r25, 0x0532	; 0x800532 <twi_masterBufferIndex>
    64e6:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <twi_masterBufferLength>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:541
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR1 = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    64ea:	98 17       	cp	r25, r24
    64ec:	c8 f2       	brcs	.-78     	; 0x64a0 <__vector_40+0x180>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    64ee:	85 e8       	ldi	r24, 0x85	; 133
    64f0:	d8 cf       	rjmp	.-80     	; 0x64a2 <__vector_40+0x182>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:460
        twi_reply1(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR1;
    64f2:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <twi_masterBufferIndex>
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	8e 0f       	add	r24, r30
    64fa:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <twi_masterBufferIndex>
    64fe:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    6502:	f0 e0       	ldi	r31, 0x00	; 0
    6504:	ed 5c       	subi	r30, 0xCD	; 205
    6506:	fa 4f       	sbci	r31, 0xFA	; 250
    6508:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:461
  if (twi_sendStop)
    650a:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <twi_sendStop>
    650e:	81 11       	cpse	r24, r1
    6510:	5c cf       	rjmp	.-328    	; 0x63ca <__vector_40+0xaa>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:464
          twi_stop1();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    6512:	81 e0       	ldi	r24, 0x01	; 1
    6514:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <twi_inRepStart>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:468
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR1 = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6518:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    651a:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:552
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply1(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    651e:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <twi_state>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:553
      break;
    6522:	25 cf       	rjmp	.-438    	; 0x636e <__vector_40+0x4e>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:502
        twi_reply1(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus1();
    6524:	0e 94 8a 31 	call	0x6314	; 0x6314 <twi_releaseBus1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:504
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI1_BUFFER_SIZE){
    6528:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <twi_rxBufferIndex>
    652c:	80 32       	cpi	r24, 0x20	; 32
    652e:	30 f4       	brcc	.+12     	; 0x653c <__vector_40+0x21c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:505
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6530:	e0 91 ee 04 	lds	r30, 0x04EE	; 0x8004ee <twi_rxBufferIndex>
    6534:	f0 e0       	ldi	r31, 0x00	; 0
    6536:	e1 51       	subi	r30, 0x11	; 17
    6538:	fb 4f       	sbci	r31, 0xFB	; 251
    653a:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:508
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    653c:	60 91 ee 04 	lds	r22, 0x04EE	; 0x8004ee <twi_rxBufferIndex>
    6540:	70 e0       	ldi	r23, 0x00	; 0
    6542:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <twi_onSlaveReceive>
    6546:	f0 91 54 05 	lds	r31, 0x0554	; 0x800554 <twi_onSlaveReceive+0x1>
    654a:	8f ee       	ldi	r24, 0xEF	; 239
    654c:	94 e0       	ldi	r25, 0x04	; 4
    654e:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:510
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6550:	10 92 ee 04 	sts	0x04EE, r1	; 0x8004ee <twi_rxBufferIndex>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:511
      break;
    6554:	0c cf       	rjmp	.-488    	; 0x636e <__vector_40+0x4e>
twi_reply1():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:357
 */
void twi_reply1(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR1 = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    6556:	85 ec       	ldi	r24, 0xC5	; 197
    6558:	e0 cf       	rjmp	.-64     	; 0x651a <__vector_40+0x1fa>
__vector_40():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire1\src\utility/twi1.c:559

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    655a:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <twi_error>
    655e:	35 cf       	rjmp	.-406    	; 0x63ca <__vector_40+0xaa>

00006560 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    6560:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6562:	91 8d       	ldd	r25, Z+25	; 0x19
    6564:	22 8d       	ldd	r18, Z+26	; 0x1a
    6566:	89 2f       	mov	r24, r25
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	80 5c       	subi	r24, 0xC0	; 192
    656c:	9f 4f       	sbci	r25, 0xFF	; 255
    656e:	82 1b       	sub	r24, r18
    6570:	91 09       	sbc	r25, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    6572:	8f 73       	andi	r24, 0x3F	; 63
    6574:	99 27       	eor	r25, r25
    6576:	08 95       	ret

00006578 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    6578:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    657a:	91 8d       	ldd	r25, Z+25	; 0x19
    657c:	82 8d       	ldd	r24, Z+26	; 0x1a
    657e:	98 17       	cp	r25, r24
    6580:	31 f0       	breq	.+12     	; 0x658e <HardwareSerial::peek()+0x16>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6582:	82 8d       	ldd	r24, Z+26	; 0x1a
    6584:	e8 0f       	add	r30, r24
    6586:	f1 1d       	adc	r31, r1
    6588:	85 8d       	ldd	r24, Z+29	; 0x1d
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    658e:	8f ef       	ldi	r24, 0xFF	; 255
    6590:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6592:	08 95       	ret

00006594 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    6594:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6596:	91 8d       	ldd	r25, Z+25	; 0x19
    6598:	82 8d       	ldd	r24, Z+26	; 0x1a
    659a:	98 17       	cp	r25, r24
    659c:	61 f0       	breq	.+24     	; 0x65b6 <HardwareSerial::read()+0x22>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    659e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    65a0:	ae 0f       	add	r26, r30
    65a2:	bf 2f       	mov	r27, r31
    65a4:	b1 1d       	adc	r27, r1
    65a6:	5d 96       	adiw	r26, 0x1d	; 29
    65a8:	8c 91       	ld	r24, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    65aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    65ac:	9f 5f       	subi	r25, 0xFF	; 255
    65ae:	9f 73       	andi	r25, 0x3F	; 63
    65b0:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    65b6:	8f ef       	ldi	r24, 0xFF	; 255
    65b8:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    65ba:	08 95       	ret

000065bc <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    65bc:	fc 01       	movw	r30, r24
    65be:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    65c0:	44 8d       	ldd	r20, Z+28	; 0x1c
    65c2:	25 2f       	mov	r18, r21
    65c4:	30 e0       	ldi	r19, 0x00	; 0
    65c6:	84 2f       	mov	r24, r20
    65c8:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    65ca:	82 1b       	sub	r24, r18
    65cc:	93 0b       	sbc	r25, r19
    65ce:	54 17       	cp	r21, r20
    65d0:	10 f0       	brcs	.+4      	; 0x65d6 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    65d2:	cf 96       	adiw	r24, 0x3f	; 63
    65d4:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    65d6:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    65d8:	08 95       	ret

000065da <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    65da:	83 e5       	ldi	r24, 0x53	; 83
    65dc:	94 e3       	ldi	r25, 0x34	; 52
    65de:	89 2b       	or	r24, r25
    65e0:	49 f0       	breq	.+18     	; 0x65f4 <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    65e2:	80 e0       	ldi	r24, 0x00	; 0
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	89 2b       	or	r24, r25
    65e8:	29 f0       	breq	.+10     	; 0x65f4 <serialEventRun()+0x1a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    65ea:	0e 94 53 34 	call	0x68a6	; 0x68a6 <Serial0_available()>
    65ee:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    65f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	89 2b       	or	r24, r25
    65fa:	49 f0       	breq	.+18     	; 0x660e <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    65fc:	80 e0       	ldi	r24, 0x00	; 0
    65fe:	90 e0       	ldi	r25, 0x00	; 0
    6600:	89 2b       	or	r24, r25
    6602:	29 f0       	breq	.+10     	; 0x660e <serialEventRun()+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    6604:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    6608:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    660a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    660e:	08 95       	ret

00006610 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6610:	fc 01       	movw	r30, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6612:	a4 8d       	ldd	r26, Z+28	; 0x1c
    6614:	a8 0f       	add	r26, r24
    6616:	b9 2f       	mov	r27, r25
    6618:	b1 1d       	adc	r27, r1
    661a:	a3 5a       	subi	r26, 0xA3	; 163
    661c:	bf 4f       	sbci	r27, 0xFF	; 255
    661e:	2c 91       	ld	r18, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6620:	84 8d       	ldd	r24, Z+28	; 0x1c
    6622:	90 e0       	ldi	r25, 0x00	; 0
    6624:	01 96       	adiw	r24, 0x01	; 1
    6626:	8f 73       	andi	r24, 0x3F	; 63
    6628:	99 27       	eor	r25, r25
    662a:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    662c:	a6 89       	ldd	r26, Z+22	; 0x16
    662e:	b7 89       	ldd	r27, Z+23	; 0x17
    6630:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    6632:	a0 89       	ldd	r26, Z+16	; 0x10
    6634:	b1 89       	ldd	r27, Z+17	; 0x11
    6636:	8c 91       	ld	r24, X
    6638:	80 64       	ori	r24, 0x40	; 64
    663a:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    663c:	93 8d       	ldd	r25, Z+27	; 0x1b
    663e:	84 8d       	ldd	r24, Z+28	; 0x1c
    6640:	98 13       	cpse	r25, r24
    6642:	06 c0       	rjmp	.+12     	; 0x6650 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    6644:	02 88       	ldd	r0, Z+18	; 0x12
    6646:	f3 89       	ldd	r31, Z+19	; 0x13
    6648:	e0 2d       	mov	r30, r0
    664a:	80 81       	ld	r24, Z
    664c:	8f 7d       	andi	r24, 0xDF	; 223
    664e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    6650:	08 95       	ret

00006652 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    6652:	cf 93       	push	r28
    6654:	df 93       	push	r29
    6656:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    6658:	88 8d       	ldd	r24, Y+24	; 0x18
    665a:	88 23       	and	r24, r24
    665c:	b9 f0       	breq	.+46     	; 0x668c <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    665e:	aa 89       	ldd	r26, Y+18	; 0x12
    6660:	bb 89       	ldd	r27, Y+19	; 0x13
    6662:	e8 89       	ldd	r30, Y+16	; 0x10
    6664:	f9 89       	ldd	r31, Y+17	; 0x11
    6666:	8c 91       	ld	r24, X
    6668:	85 fd       	sbrc	r24, 5
    666a:	03 c0       	rjmp	.+6      	; 0x6672 <HardwareSerial::flush()+0x20>
    666c:	80 81       	ld	r24, Z
    666e:	86 fd       	sbrc	r24, 6
    6670:	0d c0       	rjmp	.+26     	; 0x668c <HardwareSerial::flush()+0x3a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    6672:	0f b6       	in	r0, 0x3f	; 63
    6674:	07 fc       	sbrc	r0, 7
    6676:	f7 cf       	rjmp	.-18     	; 0x6666 <HardwareSerial::flush()+0x14>
    6678:	8c 91       	ld	r24, X
    667a:	85 ff       	sbrs	r24, 5
    667c:	f2 cf       	rjmp	.-28     	; 0x6662 <HardwareSerial::flush()+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    667e:	80 81       	ld	r24, Z
    6680:	85 ff       	sbrs	r24, 5
    6682:	ed cf       	rjmp	.-38     	; 0x665e <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    6684:	ce 01       	movw	r24, r28
    6686:	0e 94 08 33 	call	0x6610	; 0x6610 <HardwareSerial::_tx_udr_empty_irq()>
    668a:	e9 cf       	rjmp	.-46     	; 0x665e <HardwareSerial::flush()+0xc>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    668c:	df 91       	pop	r29
    668e:	cf 91       	pop	r28
    6690:	08 95       	ret

00006692 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    6692:	ef 92       	push	r14
    6694:	ff 92       	push	r15
    6696:	0f 93       	push	r16
    6698:	1f 93       	push	r17
    669a:	cf 93       	push	r28
    669c:	df 93       	push	r29
    669e:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    66a0:	81 e0       	ldi	r24, 0x01	; 1
    66a2:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    66a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    66a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66a8:	98 13       	cpse	r25, r24
    66aa:	16 c0       	rjmp	.+44     	; 0x66d8 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    66ac:	e8 89       	ldd	r30, Y+16	; 0x10
    66ae:	f9 89       	ldd	r31, Y+17	; 0x11
    66b0:	80 81       	ld	r24, Z
    66b2:	85 ff       	sbrs	r24, 5
    66b4:	11 c0       	rjmp	.+34     	; 0x66d8 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    66b6:	ee 89       	ldd	r30, Y+22	; 0x16
    66b8:	ff 89       	ldd	r31, Y+23	; 0x17
    66ba:	60 83       	st	Z, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    66bc:	e8 89       	ldd	r30, Y+16	; 0x10
    66be:	f9 89       	ldd	r31, Y+17	; 0x11
    66c0:	80 81       	ld	r24, Z
    66c2:	80 64       	ori	r24, 0x40	; 64
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    66c4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    66c6:	81 e0       	ldi	r24, 0x01	; 1
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	df 91       	pop	r29
    66cc:	cf 91       	pop	r28
    66ce:	1f 91       	pop	r17
    66d0:	0f 91       	pop	r16
    66d2:	ff 90       	pop	r15
    66d4:	ef 90       	pop	r14
    66d6:	08 95       	ret
    66d8:	f6 2e       	mov	r15, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    66da:	0b 8d       	ldd	r16, Y+27	; 0x1b
    66dc:	10 e0       	ldi	r17, 0x00	; 0
    66de:	0f 5f       	subi	r16, 0xFF	; 255
    66e0:	1f 4f       	sbci	r17, 0xFF	; 255
    66e2:	0f 73       	andi	r16, 0x3F	; 63
    66e4:	11 27       	eor	r17, r17
    66e6:	e0 2e       	mov	r14, r16
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    66e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    66ea:	8e 11       	cpse	r24, r14
    66ec:	0c c0       	rjmp	.+24     	; 0x6706 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    66ee:	0f b6       	in	r0, 0x3f	; 63
    66f0:	07 fc       	sbrc	r0, 7
    66f2:	fa cf       	rjmp	.-12     	; 0x66e8 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    66f4:	e8 89       	ldd	r30, Y+16	; 0x10
    66f6:	f9 89       	ldd	r31, Y+17	; 0x11
    66f8:	80 81       	ld	r24, Z
    66fa:	85 ff       	sbrs	r24, 5
    66fc:	f5 cf       	rjmp	.-22     	; 0x66e8 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    66fe:	ce 01       	movw	r24, r28
    6700:	0e 94 08 33 	call	0x6610	; 0x6610 <HardwareSerial::_tx_udr_empty_irq()>
    6704:	f1 cf       	rjmp	.-30     	; 0x66e8 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6706:	eb 8d       	ldd	r30, Y+27	; 0x1b
    6708:	ec 0f       	add	r30, r28
    670a:	fd 2f       	mov	r31, r29
    670c:	f1 1d       	adc	r31, r1
    670e:	e3 5a       	subi	r30, 0xA3	; 163
    6710:	ff 4f       	sbci	r31, 0xFF	; 255
    6712:	f0 82       	st	Z, r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    6714:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    6716:	ea 89       	ldd	r30, Y+18	; 0x12
    6718:	fb 89       	ldd	r31, Y+19	; 0x13
    671a:	80 81       	ld	r24, Z
    671c:	80 62       	ori	r24, 0x20	; 32
    671e:	d2 cf       	rjmp	.-92     	; 0x66c4 <HardwareSerial::write(unsigned char)+0x32>

00006720 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6720:	cf 92       	push	r12
    6722:	df 92       	push	r13
    6724:	ef 92       	push	r14
    6726:	ff 92       	push	r15
    6728:	1f 93       	push	r17
    672a:	cf 93       	push	r28
    672c:	df 93       	push	r29
    672e:	ec 01       	movw	r28, r24
    6730:	6a 01       	movw	r12, r20
    6732:	7b 01       	movw	r14, r22
    6734:	12 2f       	mov	r17, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6736:	e8 89       	ldd	r30, Y+16	; 0x10
    6738:	f9 89       	ldd	r31, Y+17	; 0x11
    673a:	82 e0       	ldi	r24, 0x02	; 2
    673c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    673e:	c1 14       	cp	r12, r1
    6740:	81 ee       	ldi	r24, 0xE1	; 225
    6742:	d8 06       	cpc	r13, r24
    6744:	e1 04       	cpc	r14, r1
    6746:	f1 04       	cpc	r15, r1
    6748:	a1 f0       	breq	.+40     	; 0x6772 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    674a:	60 e0       	ldi	r22, 0x00	; 0
    674c:	79 e0       	ldi	r23, 0x09	; 9
    674e:	8d e3       	ldi	r24, 0x3D	; 61
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	a7 01       	movw	r20, r14
    6754:	96 01       	movw	r18, r12
    6756:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodsi4>
    675a:	21 50       	subi	r18, 0x01	; 1
    675c:	31 09       	sbc	r19, r1
    675e:	41 09       	sbc	r20, r1
    6760:	51 09       	sbc	r21, r1
    6762:	56 95       	lsr	r21
    6764:	47 95       	ror	r20
    6766:	37 95       	ror	r19
    6768:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    676a:	21 15       	cp	r18, r1
    676c:	80 e1       	ldi	r24, 0x10	; 16
    676e:	38 07       	cpc	r19, r24
    6770:	98 f0       	brcs	.+38     	; 0x6798 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    6772:	e8 89       	ldd	r30, Y+16	; 0x10
    6774:	f9 89       	ldd	r31, Y+17	; 0x11
    6776:	10 82       	st	Z, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    6778:	60 e8       	ldi	r22, 0x80	; 128
    677a:	74 e8       	ldi	r23, 0x84	; 132
    677c:	8e e1       	ldi	r24, 0x1E	; 30
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	a7 01       	movw	r20, r14
    6782:	96 01       	movw	r18, r12
    6784:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodsi4>
    6788:	21 50       	subi	r18, 0x01	; 1
    678a:	31 09       	sbc	r19, r1
    678c:	41 09       	sbc	r20, r1
    678e:	51 09       	sbc	r21, r1
    6790:	56 95       	lsr	r21
    6792:	47 95       	ror	r20
    6794:	37 95       	ror	r19
    6796:	27 95       	ror	r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    6798:	ec 85       	ldd	r30, Y+12	; 0x0c
    679a:	fd 85       	ldd	r31, Y+13	; 0x0d
    679c:	30 83       	st	Z, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    679e:	ee 85       	ldd	r30, Y+14	; 0x0e
    67a0:	ff 85       	ldd	r31, Y+15	; 0x0f
    67a2:	20 83       	st	Z, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    67a4:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    67a6:	ec 89       	ldd	r30, Y+20	; 0x14
    67a8:	fd 89       	ldd	r31, Y+21	; 0x15
    67aa:	10 83       	st	Z, r17
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    67ac:	ea 89       	ldd	r30, Y+18	; 0x12
    67ae:	fb 89       	ldd	r31, Y+19	; 0x13
    67b0:	80 81       	ld	r24, Z
    67b2:	88 69       	ori	r24, 0x98	; 152
    67b4:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    67b6:	ea 89       	ldd	r30, Y+18	; 0x12
    67b8:	fb 89       	ldd	r31, Y+19	; 0x13
    67ba:	80 81       	ld	r24, Z
    67bc:	8f 7d       	andi	r24, 0xDF	; 223
    67be:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    67c0:	df 91       	pop	r29
    67c2:	cf 91       	pop	r28
    67c4:	1f 91       	pop	r17
    67c6:	ff 90       	pop	r15
    67c8:	ef 90       	pop	r14
    67ca:	df 90       	pop	r13
    67cc:	cf 90       	pop	r12
    67ce:	08 95       	ret

000067d0 <HardwareSerial::end()>:
_ZN14HardwareSerial3endEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:139

void HardwareSerial::end()
{
    67d0:	cf 93       	push	r28
    67d2:	df 93       	push	r29
    67d4:	ec 01       	movw	r28, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:141
  // wait for transmission of outgoing data
  flush();
    67d6:	e8 81       	ld	r30, Y
    67d8:	f9 81       	ldd	r31, Y+1	; 0x01
    67da:	06 80       	ldd	r0, Z+6	; 0x06
    67dc:	f7 81       	ldd	r31, Z+7	; 0x07
    67de:	e0 2d       	mov	r30, r0
    67e0:	09 95       	icall
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:143

  *_ucsrb &= ~_BV(RXEN0) & ~_BV(TXEN0) & ~_BV(RXCIE0) & ~_BV(UDRIE0);
    67e2:	ea 89       	ldd	r30, Y+18	; 0x12
    67e4:	fb 89       	ldd	r31, Y+19	; 0x13
    67e6:	80 81       	ld	r24, Z
    67e8:	87 74       	andi	r24, 0x47	; 71
    67ea:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:146
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    67ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    67ee:	89 8f       	std	Y+25, r24	; 0x19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:147
}
    67f0:	df 91       	pop	r29
    67f2:	cf 91       	pop	r28
    67f4:	08 95       	ret

000067f6 <__vector_18>:
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    67f6:	1f 92       	push	r1
    67f8:	0f 92       	push	r0
    67fa:	0f b6       	in	r0, 0x3f	; 63
    67fc:	0f 92       	push	r0
    67fe:	11 24       	eor	r1, r1
    6800:	2f 93       	push	r18
    6802:	8f 93       	push	r24
    6804:	9f 93       	push	r25
    6806:	ef 93       	push	r30
    6808:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    680a:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <Serial+0x10>
    680e:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <Serial+0x11>
    6812:	80 81       	ld	r24, Z
    6814:	e0 91 71 05 	lds	r30, 0x0571	; 0x800571 <Serial+0x16>
    6818:	f0 91 72 05 	lds	r31, 0x0572	; 0x800572 <Serial+0x17>
    681c:	82 fd       	sbrc	r24, 2
    681e:	1b c0       	rjmp	.+54     	; 0x6856 <__vector_18+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    6820:	90 81       	ld	r25, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    6822:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <Serial+0x19>
    6826:	8f 5f       	subi	r24, 0xFF	; 255
    6828:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    682a:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <Serial+0x1a>
    682e:	82 17       	cp	r24, r18
    6830:	41 f0       	breq	.+16     	; 0x6842 <__vector_18+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    6832:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <Serial+0x19>
    6836:	f0 e0       	ldi	r31, 0x00	; 0
    6838:	e5 5a       	subi	r30, 0xA5	; 165
    683a:	fa 4f       	sbci	r31, 0xFA	; 250
    683c:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    683e:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <Serial+0x19>
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    6842:	ff 91       	pop	r31
    6844:	ef 91       	pop	r30
    6846:	9f 91       	pop	r25
    6848:	8f 91       	pop	r24
    684a:	2f 91       	pop	r18
    684c:	0f 90       	pop	r0
    684e:	0f be       	out	0x3f, r0	; 63
    6850:	0f 90       	pop	r0
    6852:	1f 90       	pop	r1
    6854:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    6856:	80 81       	ld	r24, Z
__vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    6858:	f4 cf       	rjmp	.-24     	; 0x6842 <__vector_18+0x4c>

0000685a <__vector_19>:
__vector_19():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    685a:	1f 92       	push	r1
    685c:	0f 92       	push	r0
    685e:	0f b6       	in	r0, 0x3f	; 63
    6860:	0f 92       	push	r0
    6862:	11 24       	eor	r1, r1
    6864:	2f 93       	push	r18
    6866:	3f 93       	push	r19
    6868:	4f 93       	push	r20
    686a:	5f 93       	push	r21
    686c:	6f 93       	push	r22
    686e:	7f 93       	push	r23
    6870:	8f 93       	push	r24
    6872:	9f 93       	push	r25
    6874:	af 93       	push	r26
    6876:	bf 93       	push	r27
    6878:	ef 93       	push	r30
    687a:	ff 93       	push	r31
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    687c:	8b e5       	ldi	r24, 0x5B	; 91
    687e:	95 e0       	ldi	r25, 0x05	; 5
    6880:	0e 94 08 33 	call	0x6610	; 0x6610 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    6884:	ff 91       	pop	r31
    6886:	ef 91       	pop	r30
    6888:	bf 91       	pop	r27
    688a:	af 91       	pop	r26
    688c:	9f 91       	pop	r25
    688e:	8f 91       	pop	r24
    6890:	7f 91       	pop	r23
    6892:	6f 91       	pop	r22
    6894:	5f 91       	pop	r21
    6896:	4f 91       	pop	r20
    6898:	3f 91       	pop	r19
    689a:	2f 91       	pop	r18
    689c:	0f 90       	pop	r0
    689e:	0f be       	out	0x3f, r0	; 63
    68a0:	0f 90       	pop	r0
    68a2:	1f 90       	pop	r1
    68a4:	18 95       	reti

000068a6 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    68a6:	8b e5       	ldi	r24, 0x5B	; 91
    68a8:	95 e0       	ldi	r25, 0x05	; 5
    68aa:	0e 94 b0 32 	call	0x6560	; 0x6560 <HardwareSerial::available()>
    68ae:	21 e0       	ldi	r18, 0x01	; 1
    68b0:	89 2b       	or	r24, r25
    68b2:	09 f4       	brne	.+2      	; 0x68b6 <Serial0_available()+0x10>
    68b4:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    68b6:	82 2f       	mov	r24, r18
    68b8:	08 95       	ret

000068ba <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    68ba:	eb e5       	ldi	r30, 0x5B	; 91
    68bc:	f5 e0       	ldi	r31, 0x05	; 5
    68be:	13 82       	std	Z+3, r1	; 0x03
    68c0:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    68c2:	88 ee       	ldi	r24, 0xE8	; 232
    68c4:	93 e0       	ldi	r25, 0x03	; 3
    68c6:	a0 e0       	ldi	r26, 0x00	; 0
    68c8:	b0 e0       	ldi	r27, 0x00	; 0
    68ca:	84 83       	std	Z+4, r24	; 0x04
    68cc:	95 83       	std	Z+5, r25	; 0x05
    68ce:	a6 83       	std	Z+6, r26	; 0x06
    68d0:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    68d2:	81 ed       	ldi	r24, 0xD1	; 209
    68d4:	91 e0       	ldi	r25, 0x01	; 1
    68d6:	91 83       	std	Z+1, r25	; 0x01
    68d8:	80 83       	st	Z, r24
    68da:	85 ec       	ldi	r24, 0xC5	; 197
    68dc:	90 e0       	ldi	r25, 0x00	; 0
    68de:	95 87       	std	Z+13, r25	; 0x0d
    68e0:	84 87       	std	Z+12, r24	; 0x0c
    68e2:	84 ec       	ldi	r24, 0xC4	; 196
    68e4:	90 e0       	ldi	r25, 0x00	; 0
    68e6:	97 87       	std	Z+15, r25	; 0x0f
    68e8:	86 87       	std	Z+14, r24	; 0x0e
    68ea:	80 ec       	ldi	r24, 0xC0	; 192
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	91 8b       	std	Z+17, r25	; 0x11
    68f0:	80 8b       	std	Z+16, r24	; 0x10
    68f2:	81 ec       	ldi	r24, 0xC1	; 193
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	93 8b       	std	Z+19, r25	; 0x13
    68f8:	82 8b       	std	Z+18, r24	; 0x12
    68fa:	82 ec       	ldi	r24, 0xC2	; 194
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	95 8b       	std	Z+21, r25	; 0x15
    6900:	84 8b       	std	Z+20, r24	; 0x14
    6902:	86 ec       	ldi	r24, 0xC6	; 198
    6904:	90 e0       	ldi	r25, 0x00	; 0
    6906:	97 8b       	std	Z+23, r25	; 0x17
    6908:	86 8b       	std	Z+22, r24	; 0x16
    690a:	11 8e       	std	Z+25, r1	; 0x19
    690c:	12 8e       	std	Z+26, r1	; 0x1a
    690e:	13 8e       	std	Z+27, r1	; 0x1b
    6910:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    6912:	08 95       	ret

00006914 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6914:	af 92       	push	r10
    6916:	bf 92       	push	r11
    6918:	cf 92       	push	r12
    691a:	df 92       	push	r13
    691c:	ef 92       	push	r14
    691e:	ff 92       	push	r15
    6920:	0f 93       	push	r16
    6922:	1f 93       	push	r17
    6924:	cf 93       	push	r28
    6926:	df 93       	push	r29
    6928:	6c 01       	movw	r12, r24
    692a:	7b 01       	movw	r14, r22
    692c:	8b 01       	movw	r16, r22
    692e:	04 0f       	add	r16, r20
    6930:	15 1f       	adc	r17, r21
    6932:	eb 01       	movw	r28, r22
    6934:	5e 01       	movw	r10, r28
    6936:	ae 18       	sub	r10, r14
    6938:	bf 08       	sbc	r11, r15
    693a:	c0 17       	cp	r28, r16
    693c:	d1 07       	cpc	r29, r17
    693e:	59 f0       	breq	.+22     	; 0x6956 <Print::write(unsigned char const*, unsigned int)+0x42>
    6940:	69 91       	ld	r22, Y+
    6942:	d6 01       	movw	r26, r12
    6944:	ed 91       	ld	r30, X+
    6946:	fc 91       	ld	r31, X
    6948:	01 90       	ld	r0, Z+
    694a:	f0 81       	ld	r31, Z
    694c:	e0 2d       	mov	r30, r0
    694e:	c6 01       	movw	r24, r12
    6950:	09 95       	icall
    6952:	89 2b       	or	r24, r25
    6954:	79 f7       	brne	.-34     	; 0x6934 <Print::write(unsigned char const*, unsigned int)+0x20>
    6956:	c5 01       	movw	r24, r10
    6958:	df 91       	pop	r29
    695a:	cf 91       	pop	r28
    695c:	1f 91       	pop	r17
    695e:	0f 91       	pop	r16
    6960:	ff 90       	pop	r15
    6962:	ef 90       	pop	r14
    6964:	df 90       	pop	r13
    6966:	cf 90       	pop	r12
    6968:	bf 90       	pop	r11
    696a:	af 90       	pop	r10
    696c:	08 95       	ret

0000696e <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    696e:	fb 01       	movw	r30, r22
    6970:	01 90       	ld	r0, Z+
    6972:	00 20       	and	r0, r0
    6974:	e9 f7       	brne	.-6      	; 0x6970 <Print::write(char const*) [clone .part.2]+0x2>
    6976:	31 97       	sbiw	r30, 0x01	; 1
    6978:	af 01       	movw	r20, r30
    697a:	46 1b       	sub	r20, r22
    697c:	57 0b       	sbc	r21, r23
    697e:	dc 01       	movw	r26, r24
    6980:	ed 91       	ld	r30, X+
    6982:	fc 91       	ld	r31, X
    6984:	02 80       	ldd	r0, Z+2	; 0x02
    6986:	f3 81       	ldd	r31, Z+3	; 0x03
    6988:	e0 2d       	mov	r30, r0
    698a:	09 94       	ijmp

0000698c <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    698c:	ef 92       	push	r14
    698e:	ff 92       	push	r15
    6990:	0f 93       	push	r16
    6992:	1f 93       	push	r17
    6994:	cf 93       	push	r28
    6996:	df 93       	push	r29
    6998:	8c 01       	movw	r16, r24
    699a:	7b 01       	movw	r14, r22
    699c:	d0 e0       	ldi	r29, 0x00	; 0
    699e:	c0 e0       	ldi	r28, 0x00	; 0
    69a0:	f7 01       	movw	r30, r14
    69a2:	ec 0f       	add	r30, r28
    69a4:	fd 1f       	adc	r31, r29
    69a6:	64 91       	lpm	r22, Z
    69a8:	66 23       	and	r22, r22
    69aa:	61 f0       	breq	.+24     	; 0x69c4 <Print::print(__FlashStringHelper const*)+0x38>
    69ac:	d8 01       	movw	r26, r16
    69ae:	ed 91       	ld	r30, X+
    69b0:	fc 91       	ld	r31, X
    69b2:	01 90       	ld	r0, Z+
    69b4:	f0 81       	ld	r31, Z
    69b6:	e0 2d       	mov	r30, r0
    69b8:	c8 01       	movw	r24, r16
    69ba:	09 95       	icall
    69bc:	89 2b       	or	r24, r25
    69be:	11 f0       	breq	.+4      	; 0x69c4 <Print::print(__FlashStringHelper const*)+0x38>
    69c0:	21 96       	adiw	r28, 0x01	; 1
    69c2:	ee cf       	rjmp	.-36     	; 0x69a0 <Print::print(__FlashStringHelper const*)+0x14>
    69c4:	ce 01       	movw	r24, r28
    69c6:	df 91       	pop	r29
    69c8:	cf 91       	pop	r28
    69ca:	1f 91       	pop	r17
    69cc:	0f 91       	pop	r16
    69ce:	ff 90       	pop	r15
    69d0:	ef 90       	pop	r14
    69d2:	08 95       	ret

000069d4 <Print::print(char)>:
_ZN5Print5printEc():
    69d4:	dc 01       	movw	r26, r24
    69d6:	ed 91       	ld	r30, X+
    69d8:	fc 91       	ld	r31, X
    69da:	01 90       	ld	r0, Z+
    69dc:	f0 81       	ld	r31, Z
    69de:	e0 2d       	mov	r30, r0
    69e0:	09 94       	ijmp

000069e2 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    69e2:	8f 92       	push	r8
    69e4:	9f 92       	push	r9
    69e6:	af 92       	push	r10
    69e8:	bf 92       	push	r11
    69ea:	ef 92       	push	r14
    69ec:	ff 92       	push	r15
    69ee:	0f 93       	push	r16
    69f0:	1f 93       	push	r17
    69f2:	cf 93       	push	r28
    69f4:	df 93       	push	r29
    69f6:	cd b7       	in	r28, 0x3d	; 61
    69f8:	de b7       	in	r29, 0x3e	; 62
    69fa:	a1 97       	sbiw	r28, 0x21	; 33
    69fc:	0f b6       	in	r0, 0x3f	; 63
    69fe:	f8 94       	cli
    6a00:	de bf       	out	0x3e, r29	; 62
    6a02:	0f be       	out	0x3f, r0	; 63
    6a04:	cd bf       	out	0x3d, r28	; 61
    6a06:	7c 01       	movw	r14, r24
    6a08:	fa 01       	movw	r30, r20
    6a0a:	cb 01       	movw	r24, r22
    6a0c:	19 a2       	std	Y+33, r1	; 0x21
    6a0e:	22 30       	cpi	r18, 0x02	; 2
    6a10:	08 f4       	brcc	.+2      	; 0x6a14 <Print::printNumber(unsigned long, unsigned char)+0x32>
    6a12:	2a e0       	ldi	r18, 0x0A	; 10
    6a14:	8e 01       	movw	r16, r28
    6a16:	0f 5d       	subi	r16, 0xDF	; 223
    6a18:	1f 4f       	sbci	r17, 0xFF	; 255
    6a1a:	82 2e       	mov	r8, r18
    6a1c:	91 2c       	mov	r9, r1
    6a1e:	b1 2c       	mov	r11, r1
    6a20:	a1 2c       	mov	r10, r1
    6a22:	bf 01       	movw	r22, r30
    6a24:	a5 01       	movw	r20, r10
    6a26:	94 01       	movw	r18, r8
    6a28:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodsi4>
    6a2c:	f9 01       	movw	r30, r18
    6a2e:	ca 01       	movw	r24, r20
    6a30:	6a 30       	cpi	r22, 0x0A	; 10
    6a32:	0c f5       	brge	.+66     	; 0x6a76 <Print::printNumber(unsigned long, unsigned char)+0x94>
    6a34:	60 5d       	subi	r22, 0xD0	; 208
    6a36:	d8 01       	movw	r26, r16
    6a38:	6e 93       	st	-X, r22
    6a3a:	8d 01       	movw	r16, r26
    6a3c:	23 2b       	or	r18, r19
    6a3e:	24 2b       	or	r18, r20
    6a40:	25 2b       	or	r18, r21
    6a42:	79 f7       	brne	.-34     	; 0x6a22 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    6a44:	90 e0       	ldi	r25, 0x00	; 0
    6a46:	80 e0       	ldi	r24, 0x00	; 0
    6a48:	10 97       	sbiw	r26, 0x00	; 0
    6a4a:	21 f0       	breq	.+8      	; 0x6a54 <Print::printNumber(unsigned long, unsigned char)+0x72>
    6a4c:	bd 01       	movw	r22, r26
    6a4e:	c7 01       	movw	r24, r14
    6a50:	0e 94 b7 34 	call	0x696e	; 0x696e <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    6a54:	a1 96       	adiw	r28, 0x21	; 33
    6a56:	0f b6       	in	r0, 0x3f	; 63
    6a58:	f8 94       	cli
    6a5a:	de bf       	out	0x3e, r29	; 62
    6a5c:	0f be       	out	0x3f, r0	; 63
    6a5e:	cd bf       	out	0x3d, r28	; 61
    6a60:	df 91       	pop	r29
    6a62:	cf 91       	pop	r28
    6a64:	1f 91       	pop	r17
    6a66:	0f 91       	pop	r16
    6a68:	ff 90       	pop	r15
    6a6a:	ef 90       	pop	r14
    6a6c:	bf 90       	pop	r11
    6a6e:	af 90       	pop	r10
    6a70:	9f 90       	pop	r9
    6a72:	8f 90       	pop	r8
    6a74:	08 95       	ret
    6a76:	69 5c       	subi	r22, 0xC9	; 201
    6a78:	de cf       	rjmp	.-68     	; 0x6a36 <Print::printNumber(unsigned long, unsigned char)+0x54>

00006a7a <Print::print(long, int)>:
_ZN5Print5printEli():
    6a7a:	cf 92       	push	r12
    6a7c:	df 92       	push	r13
    6a7e:	ef 92       	push	r14
    6a80:	ff 92       	push	r15
    6a82:	0f 93       	push	r16
    6a84:	1f 93       	push	r17
    6a86:	cf 93       	push	r28
    6a88:	df 93       	push	r29
    6a8a:	21 15       	cp	r18, r1
    6a8c:	31 05       	cpc	r19, r1
    6a8e:	81 f4       	brne	.+32     	; 0x6ab0 <Print::print(long, int)+0x36>
    6a90:	dc 01       	movw	r26, r24
    6a92:	ed 91       	ld	r30, X+
    6a94:	fc 91       	ld	r31, X
    6a96:	01 90       	ld	r0, Z+
    6a98:	f0 81       	ld	r31, Z
    6a9a:	e0 2d       	mov	r30, r0
    6a9c:	64 2f       	mov	r22, r20
    6a9e:	df 91       	pop	r29
    6aa0:	cf 91       	pop	r28
    6aa2:	1f 91       	pop	r17
    6aa4:	0f 91       	pop	r16
    6aa6:	ff 90       	pop	r15
    6aa8:	ef 90       	pop	r14
    6aaa:	df 90       	pop	r13
    6aac:	cf 90       	pop	r12
    6aae:	09 94       	ijmp
    6ab0:	2a 30       	cpi	r18, 0x0A	; 10
    6ab2:	31 05       	cpc	r19, r1
    6ab4:	01 f5       	brne	.+64     	; 0x6af6 <Print::print(long, int)+0x7c>
    6ab6:	2a e0       	ldi	r18, 0x0A	; 10
    6ab8:	77 ff       	sbrs	r23, 7
    6aba:	1d c0       	rjmp	.+58     	; 0x6af6 <Print::print(long, int)+0x7c>
    6abc:	6a 01       	movw	r12, r20
    6abe:	7b 01       	movw	r14, r22
    6ac0:	ec 01       	movw	r28, r24
    6ac2:	6d e2       	ldi	r22, 0x2D	; 45
    6ac4:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <Print::print(char)>
    6ac8:	8c 01       	movw	r16, r24
    6aca:	44 27       	eor	r20, r20
    6acc:	55 27       	eor	r21, r21
    6ace:	ba 01       	movw	r22, r20
    6ad0:	4c 19       	sub	r20, r12
    6ad2:	5d 09       	sbc	r21, r13
    6ad4:	6e 09       	sbc	r22, r14
    6ad6:	7f 09       	sbc	r23, r15
    6ad8:	2a e0       	ldi	r18, 0x0A	; 10
    6ada:	ce 01       	movw	r24, r28
    6adc:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <Print::printNumber(unsigned long, unsigned char)>
    6ae0:	80 0f       	add	r24, r16
    6ae2:	91 1f       	adc	r25, r17
    6ae4:	df 91       	pop	r29
    6ae6:	cf 91       	pop	r28
    6ae8:	1f 91       	pop	r17
    6aea:	0f 91       	pop	r16
    6aec:	ff 90       	pop	r15
    6aee:	ef 90       	pop	r14
    6af0:	df 90       	pop	r13
    6af2:	cf 90       	pop	r12
    6af4:	08 95       	ret
    6af6:	df 91       	pop	r29
    6af8:	cf 91       	pop	r28
    6afa:	1f 91       	pop	r17
    6afc:	0f 91       	pop	r16
    6afe:	ff 90       	pop	r15
    6b00:	ef 90       	pop	r14
    6b02:	df 90       	pop	r13
    6b04:	cf 90       	pop	r12
    6b06:	0c 94 f1 34 	jmp	0x69e2	; 0x69e2 <Print::printNumber(unsigned long, unsigned char)>

00006b0a <Print::print(int, int)>:
_ZN5Print5printEii():
    6b0a:	9a 01       	movw	r18, r20
    6b0c:	ab 01       	movw	r20, r22
    6b0e:	77 0f       	add	r23, r23
    6b10:	66 0b       	sbc	r22, r22
    6b12:	77 0b       	sbc	r23, r23
    6b14:	0c 94 3d 35 	jmp	0x6a7a	; 0x6a7a <Print::print(long, int)>

00006b18 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    6b18:	21 15       	cp	r18, r1
    6b1a:	31 05       	cpc	r19, r1
    6b1c:	41 f4       	brne	.+16     	; 0x6b2e <Print::print(unsigned long, int)+0x16>
    6b1e:	dc 01       	movw	r26, r24
    6b20:	ed 91       	ld	r30, X+
    6b22:	fc 91       	ld	r31, X
    6b24:	01 90       	ld	r0, Z+
    6b26:	f0 81       	ld	r31, Z
    6b28:	e0 2d       	mov	r30, r0
    6b2a:	64 2f       	mov	r22, r20
    6b2c:	09 94       	ijmp
    6b2e:	0c 94 f1 34 	jmp	0x69e2	; 0x69e2 <Print::printNumber(unsigned long, unsigned char)>

00006b32 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    6b32:	9a 01       	movw	r18, r20
    6b34:	ab 01       	movw	r20, r22
    6b36:	70 e0       	ldi	r23, 0x00	; 0
    6b38:	60 e0       	ldi	r22, 0x00	; 0
    6b3a:	0c 94 8c 35 	jmp	0x6b18	; 0x6b18 <Print::print(unsigned long, int)>

00006b3e <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    6b3e:	2f 92       	push	r2
    6b40:	3f 92       	push	r3
    6b42:	4f 92       	push	r4
    6b44:	5f 92       	push	r5
    6b46:	6f 92       	push	r6
    6b48:	7f 92       	push	r7
    6b4a:	8f 92       	push	r8
    6b4c:	9f 92       	push	r9
    6b4e:	af 92       	push	r10
    6b50:	bf 92       	push	r11
    6b52:	cf 92       	push	r12
    6b54:	df 92       	push	r13
    6b56:	ef 92       	push	r14
    6b58:	ff 92       	push	r15
    6b5a:	1f 93       	push	r17
    6b5c:	cf 93       	push	r28
    6b5e:	df 93       	push	r29
    6b60:	ec 01       	movw	r28, r24
    6b62:	6a 01       	movw	r12, r20
    6b64:	7b 01       	movw	r14, r22
    6b66:	72 2e       	mov	r7, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    6b68:	ab 01       	movw	r20, r22
    6b6a:	96 01       	movw	r18, r12
    6b6c:	cb 01       	movw	r24, r22
    6b6e:	b6 01       	movw	r22, r12
    6b70:	0e 94 a8 3b 	call	0x7750	; 0x7750 <__unordsf2>
_ZN5Print5writeEPKc():
    6b74:	6f ed       	ldi	r22, 0xDF	; 223
    6b76:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    6b78:	81 11       	cpse	r24, r1
    6b7a:	26 c0       	rjmp	.+76     	; 0x6bc8 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    6b7c:	46 01       	movw	r8, r12
    6b7e:	57 01       	movw	r10, r14
    6b80:	e8 94       	clt
    6b82:	b7 f8       	bld	r11, 7
    6b84:	2f ef       	ldi	r18, 0xFF	; 255
    6b86:	3f ef       	ldi	r19, 0xFF	; 255
    6b88:	4f e7       	ldi	r20, 0x7F	; 127
    6b8a:	5f e7       	ldi	r21, 0x7F	; 127
    6b8c:	c5 01       	movw	r24, r10
    6b8e:	b4 01       	movw	r22, r8
    6b90:	0e 94 a8 3b 	call	0x7750	; 0x7750 <__unordsf2>
    6b94:	81 11       	cpse	r24, r1
    6b96:	0c c0       	rjmp	.+24     	; 0x6bb0 <Print::printFloat(double, unsigned char)+0x72>
    6b98:	2f ef       	ldi	r18, 0xFF	; 255
    6b9a:	3f ef       	ldi	r19, 0xFF	; 255
    6b9c:	4f e7       	ldi	r20, 0x7F	; 127
    6b9e:	5f e7       	ldi	r21, 0x7F	; 127
    6ba0:	c5 01       	movw	r24, r10
    6ba2:	b4 01       	movw	r22, r8
    6ba4:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
_ZN5Print5writeEPKc():
    6ba8:	63 ee       	ldi	r22, 0xE3	; 227
    6baa:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    6bac:	18 16       	cp	r1, r24
    6bae:	64 f0       	brlt	.+24     	; 0x6bc8 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6bb0:	2f ef       	ldi	r18, 0xFF	; 255
    6bb2:	3f ef       	ldi	r19, 0xFF	; 255
    6bb4:	4f e7       	ldi	r20, 0x7F	; 127
    6bb6:	5f e4       	ldi	r21, 0x4F	; 79
    6bb8:	c7 01       	movw	r24, r14
    6bba:	b6 01       	movw	r22, r12
    6bbc:	0e 94 a0 3a 	call	0x7540	; 0x7540 <__gesf2>
    6bc0:	18 16       	cp	r1, r24
    6bc2:	b4 f4       	brge	.+44     	; 0x6bf0 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    6bc4:	67 ee       	ldi	r22, 0xE7	; 231
    6bc6:	71 e0       	ldi	r23, 0x01	; 1
    6bc8:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    6bca:	df 91       	pop	r29
    6bcc:	cf 91       	pop	r28
    6bce:	1f 91       	pop	r17
    6bd0:	ff 90       	pop	r15
    6bd2:	ef 90       	pop	r14
    6bd4:	df 90       	pop	r13
    6bd6:	cf 90       	pop	r12
    6bd8:	bf 90       	pop	r11
    6bda:	af 90       	pop	r10
    6bdc:	9f 90       	pop	r9
    6bde:	8f 90       	pop	r8
    6be0:	7f 90       	pop	r7
    6be2:	6f 90       	pop	r6
    6be4:	5f 90       	pop	r5
    6be6:	4f 90       	pop	r4
    6be8:	3f 90       	pop	r3
    6bea:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    6bec:	0c 94 b7 34 	jmp	0x696e	; 0x696e <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6bf0:	2f ef       	ldi	r18, 0xFF	; 255
    6bf2:	3f ef       	ldi	r19, 0xFF	; 255
    6bf4:	4f e7       	ldi	r20, 0x7F	; 127
    6bf6:	5f ec       	ldi	r21, 0xCF	; 207
    6bf8:	c7 01       	movw	r24, r14
    6bfa:	b6 01       	movw	r22, r12
    6bfc:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
    6c00:	87 fd       	sbrc	r24, 7
    6c02:	e0 cf       	rjmp	.-64     	; 0x6bc4 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    6c04:	20 e0       	ldi	r18, 0x00	; 0
    6c06:	30 e0       	ldi	r19, 0x00	; 0
    6c08:	a9 01       	movw	r20, r18
    6c0a:	c7 01       	movw	r24, r14
    6c0c:	b6 01       	movw	r22, r12
    6c0e:	0e 94 41 39 	call	0x7282	; 0x7282 <__cmpsf2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    6c12:	31 2c       	mov	r3, r1
    6c14:	21 2c       	mov	r2, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    6c16:	87 ff       	sbrs	r24, 7
    6c18:	09 c0       	rjmp	.+18     	; 0x6c2c <Print::printFloat(double, unsigned char)+0xee>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    6c1a:	6d e2       	ldi	r22, 0x2D	; 45
    6c1c:	ce 01       	movw	r24, r28
    6c1e:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <Print::print(char)>
    6c22:	1c 01       	movw	r2, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    6c24:	f7 fa       	bst	r15, 7
    6c26:	f0 94       	com	r15
    6c28:	f7 f8       	bld	r15, 7
    6c2a:	f0 94       	com	r15
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6c2c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6c2e:	60 e0       	ldi	r22, 0x00	; 0
    6c30:	70 e0       	ldi	r23, 0x00	; 0
    6c32:	80 e0       	ldi	r24, 0x00	; 0
    6c34:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    6c36:	71 16       	cp	r7, r17
    6c38:	41 f0       	breq	.+16     	; 0x6c4a <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    6c3a:	20 e0       	ldi	r18, 0x00	; 0
    6c3c:	30 e0       	ldi	r19, 0x00	; 0
    6c3e:	40 e2       	ldi	r20, 0x20	; 32
    6c40:	51 e4       	ldi	r21, 0x41	; 65
    6c42:	0e 94 46 39 	call	0x728c	; 0x728c <__divsf3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6c46:	1f 5f       	subi	r17, 0xFF	; 255
    6c48:	f6 cf       	rjmp	.-20     	; 0x6c36 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    6c4a:	a7 01       	movw	r20, r14
    6c4c:	96 01       	movw	r18, r12
    6c4e:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    6c52:	2b 01       	movw	r4, r22
    6c54:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    6c56:	0e 94 bf 39 	call	0x737e	; 0x737e <__fixunssfsi>
    6c5a:	4b 01       	movw	r8, r22
    6c5c:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    6c5e:	2a e0       	ldi	r18, 0x0A	; 10
    6c60:	bc 01       	movw	r22, r24
    6c62:	a4 01       	movw	r20, r8
    6c64:	ce 01       	movw	r24, r28
    6c66:	0e 94 f1 34 	call	0x69e2	; 0x69e2 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    6c6a:	7c 01       	movw	r14, r24
    6c6c:	e2 0c       	add	r14, r2
    6c6e:	f3 1c       	adc	r15, r3
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    6c70:	11 23       	and	r17, r17
    6c72:	b1 f1       	breq	.+108    	; 0x6ce0 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    6c74:	c5 01       	movw	r24, r10
    6c76:	b4 01       	movw	r22, r8
    6c78:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__floatunsisf>
    6c7c:	9b 01       	movw	r18, r22
    6c7e:	ac 01       	movw	r20, r24
    6c80:	c3 01       	movw	r24, r6
    6c82:	b2 01       	movw	r22, r4
    6c84:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    6c88:	4b 01       	movw	r8, r22
    6c8a:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    6c8c:	6e e2       	ldi	r22, 0x2E	; 46
    6c8e:	ce 01       	movw	r24, r28
    6c90:	0e 94 ea 34 	call	0x69d4	; 0x69d4 <Print::print(char)>
    6c94:	e8 0e       	add	r14, r24
    6c96:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    6c98:	11 50       	subi	r17, 0x01	; 1
    6c9a:	10 f1       	brcs	.+68     	; 0x6ce0 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    6c9c:	20 e0       	ldi	r18, 0x00	; 0
    6c9e:	30 e0       	ldi	r19, 0x00	; 0
    6ca0:	40 e2       	ldi	r20, 0x20	; 32
    6ca2:	51 e4       	ldi	r21, 0x41	; 65
    6ca4:	c5 01       	movw	r24, r10
    6ca6:	b4 01       	movw	r22, r8
    6ca8:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <__mulsf3>
    6cac:	2b 01       	movw	r4, r22
    6cae:	3c 01       	movw	r6, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    6cb0:	0e 94 bf 39 	call	0x737e	; 0x737e <__fixunssfsi>
    6cb4:	4b 01       	movw	r8, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    6cb6:	4a e0       	ldi	r20, 0x0A	; 10
    6cb8:	50 e0       	ldi	r21, 0x00	; 0
    6cba:	ce 01       	movw	r24, r28
    6cbc:	0e 94 99 35 	call	0x6b32	; 0x6b32 <Print::print(unsigned int, int)>
    6cc0:	e8 0e       	add	r14, r24
    6cc2:	f9 1e       	adc	r15, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    6cc4:	b4 01       	movw	r22, r8
    6cc6:	90 e0       	ldi	r25, 0x00	; 0
    6cc8:	80 e0       	ldi	r24, 0x00	; 0
    6cca:	0e 94 ee 39 	call	0x73dc	; 0x73dc <__floatunsisf>
    6cce:	9b 01       	movw	r18, r22
    6cd0:	ac 01       	movw	r20, r24
    6cd2:	c3 01       	movw	r24, r6
    6cd4:	b2 01       	movw	r22, r4
    6cd6:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <__subsf3>
    6cda:	4b 01       	movw	r8, r22
    6cdc:	5c 01       	movw	r10, r24
    6cde:	dc cf       	rjmp	.-72     	; 0x6c98 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    6ce0:	c7 01       	movw	r24, r14
    6ce2:	df 91       	pop	r29
    6ce4:	cf 91       	pop	r28
    6ce6:	1f 91       	pop	r17
    6ce8:	ff 90       	pop	r15
    6cea:	ef 90       	pop	r14
    6cec:	df 90       	pop	r13
    6cee:	cf 90       	pop	r12
    6cf0:	bf 90       	pop	r11
    6cf2:	af 90       	pop	r10
    6cf4:	9f 90       	pop	r9
    6cf6:	8f 90       	pop	r8
    6cf8:	7f 90       	pop	r7
    6cfa:	6f 90       	pop	r6
    6cfc:	5f 90       	pop	r5
    6cfe:	4f 90       	pop	r4
    6d00:	3f 90       	pop	r3
    6d02:	2f 90       	pop	r2
    6d04:	08 95       	ret

00006d06 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    6d06:	0c 94 9f 35 	jmp	0x6b3e	; 0x6b3e <Print::printFloat(double, unsigned char)>

00006d0a <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6d0a:	4f 92       	push	r4
    6d0c:	5f 92       	push	r5
    6d0e:	6f 92       	push	r6
    6d10:	7f 92       	push	r7
    6d12:	af 92       	push	r10
    6d14:	bf 92       	push	r11
    6d16:	cf 92       	push	r12
    6d18:	df 92       	push	r13
    6d1a:	ef 92       	push	r14
    6d1c:	ff 92       	push	r15
    6d1e:	0f 93       	push	r16
    6d20:	1f 93       	push	r17
    6d22:	cf 93       	push	r28
    6d24:	df 93       	push	r29
    6d26:	cd b7       	in	r28, 0x3d	; 61
    6d28:	de b7       	in	r29, 0x3e	; 62
    6d2a:	29 01       	movw	r4, r18
    6d2c:	3a 01       	movw	r6, r20
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6d2e:	9b 01       	movw	r18, r22
    6d30:	ac 01       	movw	r20, r24
    6d32:	24 19       	sub	r18, r4
    6d34:	35 09       	sbc	r19, r5
    6d36:	46 09       	sbc	r20, r6
    6d38:	57 09       	sbc	r21, r7
    6d3a:	89 89       	ldd	r24, Y+17	; 0x11
    6d3c:	9a 89       	ldd	r25, Y+18	; 0x12
    6d3e:	ab 89       	ldd	r26, Y+19	; 0x13
    6d40:	bc 89       	ldd	r27, Y+20	; 0x14
    6d42:	bc 01       	movw	r22, r24
    6d44:	cd 01       	movw	r24, r26
    6d46:	6a 19       	sub	r22, r10
    6d48:	7b 09       	sbc	r23, r11
    6d4a:	8c 09       	sbc	r24, r12
    6d4c:	9d 09       	sbc	r25, r13
    6d4e:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <__mulsi3>
    6d52:	a8 01       	movw	r20, r16
    6d54:	97 01       	movw	r18, r14
    6d56:	24 19       	sub	r18, r4
    6d58:	35 09       	sbc	r19, r5
    6d5a:	46 09       	sbc	r20, r6
    6d5c:	57 09       	sbc	r21, r7
    6d5e:	0e 94 1b 3c 	call	0x7836	; 0x7836 <__divmodsi4>
    6d62:	ca 01       	movw	r24, r20
    6d64:	b9 01       	movw	r22, r18
    6d66:	6a 0d       	add	r22, r10
    6d68:	7b 1d       	adc	r23, r11
    6d6a:	8c 1d       	adc	r24, r12
    6d6c:	9d 1d       	adc	r25, r13
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WMath.cpp:55
}
    6d6e:	df 91       	pop	r29
    6d70:	cf 91       	pop	r28
    6d72:	1f 91       	pop	r17
    6d74:	0f 91       	pop	r16
    6d76:	ff 90       	pop	r15
    6d78:	ef 90       	pop	r14
    6d7a:	df 90       	pop	r13
    6d7c:	cf 90       	pop	r12
    6d7e:	bf 90       	pop	r11
    6d80:	af 90       	pop	r10
    6d82:	7f 90       	pop	r7
    6d84:	6f 90       	pop	r6
    6d86:	5f 90       	pop	r5
    6d88:	4f 90       	pop	r4
    6d8a:	08 95       	ret

00006d8c <yield>:
__empty():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    6d8c:	08 95       	ret

00006d8e <initVariant>:
initVariant():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    6d8e:	08 95       	ret

00006d90 <main>:
main():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    6d90:	0e 94 9a 37 	call	0x6f34	; 0x6f34 <init>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    6d94:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <initVariant>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    6d98:	0e 94 9e 12 	call	0x253c	; 0x253c <setup>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    6d9c:	cd ee       	ldi	r28, 0xED	; 237
    6d9e:	d2 e3       	ldi	r29, 0x32	; 50
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    6da0:	0e 94 02 10 	call	0x2004	; 0x2004 <loop>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    6da4:	20 97       	sbiw	r28, 0x00	; 0
    6da6:	e1 f3       	breq	.-8      	; 0x6da0 <main+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    6da8:	0e 94 ed 32 	call	0x65da	; 0x65da <serialEventRun()>
    6dac:	f9 cf       	rjmp	.-14     	; 0x6da0 <main+0x10>

00006dae <operator new[](unsigned int)>:
_Znaj():
    6dae:	0c 94 97 3c 	jmp	0x792e	; 0x792e <malloc>

00006db2 <operator delete(void*, unsigned int)>:
_ZdlPv():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/new.cpp:30
void *operator new[](size_t size) {
  return malloc(size);
}

void operator delete(void * ptr) {
  free(ptr);
    6db2:	0c 94 33 3d 	jmp	0x7a66	; 0x7a66 <free>

00006db6 <__vector_16>:
__vector_16():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6db6:	1f 92       	push	r1
    6db8:	0f 92       	push	r0
    6dba:	0f b6       	in	r0, 0x3f	; 63
    6dbc:	0f 92       	push	r0
    6dbe:	11 24       	eor	r1, r1
    6dc0:	2f 93       	push	r18
    6dc2:	3f 93       	push	r19
    6dc4:	8f 93       	push	r24
    6dc6:	9f 93       	push	r25
    6dc8:	af 93       	push	r26
    6dca:	bf 93       	push	r27
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    6dcc:	80 91 fd 05 	lds	r24, 0x05FD	; 0x8005fd <timer0_millis>
    6dd0:	90 91 fe 05 	lds	r25, 0x05FE	; 0x8005fe <timer0_millis+0x1>
    6dd4:	a0 91 ff 05 	lds	r26, 0x05FF	; 0x8005ff <timer0_millis+0x2>
    6dd8:	b0 91 00 06 	lds	r27, 0x0600	; 0x800600 <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    6ddc:	30 91 fc 05 	lds	r19, 0x05FC	; 0x8005fc <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    6de0:	23 e0       	ldi	r18, 0x03	; 3
    6de2:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    6de4:	2d 37       	cpi	r18, 0x7D	; 125
    6de6:	68 f1       	brcs	.+90     	; 0x6e42 <__vector_16+0x8c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    6de8:	26 e8       	ldi	r18, 0x86	; 134
    6dea:	23 0f       	add	r18, r19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    6dec:	02 96       	adiw	r24, 0x02	; 2
    6dee:	a1 1d       	adc	r26, r1
    6df0:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    6df2:	20 93 fc 05 	sts	0x05FC, r18	; 0x8005fc <timer0_fract>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    6df6:	80 93 fd 05 	sts	0x05FD, r24	; 0x8005fd <timer0_millis>
    6dfa:	90 93 fe 05 	sts	0x05FE, r25	; 0x8005fe <timer0_millis+0x1>
    6dfe:	a0 93 ff 05 	sts	0x05FF, r26	; 0x8005ff <timer0_millis+0x2>
    6e02:	b0 93 00 06 	sts	0x0600, r27	; 0x800600 <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    6e06:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_overflow_count>
    6e0a:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_overflow_count+0x1>
    6e0e:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_overflow_count+0x2>
    6e12:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_overflow_count+0x3>
    6e16:	01 96       	adiw	r24, 0x01	; 1
    6e18:	a1 1d       	adc	r26, r1
    6e1a:	b1 1d       	adc	r27, r1
    6e1c:	80 93 f8 05 	sts	0x05F8, r24	; 0x8005f8 <timer0_overflow_count>
    6e20:	90 93 f9 05 	sts	0x05F9, r25	; 0x8005f9 <timer0_overflow_count+0x1>
    6e24:	a0 93 fa 05 	sts	0x05FA, r26	; 0x8005fa <timer0_overflow_count+0x2>
    6e28:	b0 93 fb 05 	sts	0x05FB, r27	; 0x8005fb <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:213
#endif
}
    6e2c:	bf 91       	pop	r27
    6e2e:	af 91       	pop	r26
    6e30:	9f 91       	pop	r25
    6e32:	8f 91       	pop	r24
    6e34:	3f 91       	pop	r19
    6e36:	2f 91       	pop	r18
    6e38:	0f 90       	pop	r0
    6e3a:	0f be       	out	0x3f, r0	; 63
    6e3c:	0f 90       	pop	r0
    6e3e:	1f 90       	pop	r1
    6e40:	18 95       	reti
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    6e42:	01 96       	adiw	r24, 0x01	; 1
    6e44:	a1 1d       	adc	r26, r1
    6e46:	b1 1d       	adc	r27, r1
    6e48:	d4 cf       	rjmp	.-88     	; 0x6df2 <__vector_16+0x3c>

00006e4a <millis>:
millis():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    6e4a:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    6e4c:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    6e4e:	60 91 fd 05 	lds	r22, 0x05FD	; 0x8005fd <timer0_millis>
    6e52:	70 91 fe 05 	lds	r23, 0x05FE	; 0x8005fe <timer0_millis+0x1>
    6e56:	80 91 ff 05 	lds	r24, 0x05FF	; 0x8005ff <timer0_millis+0x2>
    6e5a:	90 91 00 06 	lds	r25, 0x0600	; 0x800600 <timer0_millis+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    6e5e:	2f bf       	out	0x3f, r18	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227

  return m;
}
    6e60:	08 95       	ret

00006e62 <micros>:
micros():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    6e62:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    6e64:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    6e66:	80 91 f8 05 	lds	r24, 0x05F8	; 0x8005f8 <timer0_overflow_count>
    6e6a:	90 91 f9 05 	lds	r25, 0x05F9	; 0x8005f9 <timer0_overflow_count+0x1>
    6e6e:	a0 91 fa 05 	lds	r26, 0x05FA	; 0x8005fa <timer0_overflow_count+0x2>
    6e72:	b0 91 fb 05 	lds	r27, 0x05FB	; 0x8005fb <timer0_overflow_count+0x3>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    6e76:	26 b5       	in	r18, 0x26	; 38
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6e78:	a8 9b       	sbis	0x15, 0	; 21
    6e7a:	05 c0       	rjmp	.+10     	; 0x6e86 <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    6e7c:	2f 3f       	cpi	r18, 0xFF	; 255
    6e7e:	19 f0       	breq	.+6      	; 0x6e86 <micros+0x24>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    6e80:	01 96       	adiw	r24, 0x01	; 1
    6e82:	a1 1d       	adc	r26, r1
    6e84:	b1 1d       	adc	r27, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    6e86:	3f bf       	out	0x3f, r19	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    6e88:	ba 2f       	mov	r27, r26
    6e8a:	a9 2f       	mov	r26, r25
    6e8c:	98 2f       	mov	r25, r24
    6e8e:	88 27       	eor	r24, r24
    6e90:	bc 01       	movw	r22, r24
    6e92:	cd 01       	movw	r24, r26
    6e94:	62 0f       	add	r22, r18
    6e96:	71 1d       	adc	r23, r1
    6e98:	81 1d       	adc	r24, r1
    6e9a:	91 1d       	adc	r25, r1
    6e9c:	42 e0       	ldi	r20, 0x02	; 2
    6e9e:	66 0f       	add	r22, r22
    6ea0:	77 1f       	adc	r23, r23
    6ea2:	88 1f       	adc	r24, r24
    6ea4:	99 1f       	adc	r25, r25
    6ea6:	4a 95       	dec	r20
    6ea8:	d1 f7       	brne	.-12     	; 0x6e9e <micros+0x3c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    6eaa:	08 95       	ret

00006eac <delay>:
delay():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    6eac:	8f 92       	push	r8
    6eae:	9f 92       	push	r9
    6eb0:	af 92       	push	r10
    6eb2:	bf 92       	push	r11
    6eb4:	cf 92       	push	r12
    6eb6:	df 92       	push	r13
    6eb8:	ef 92       	push	r14
    6eba:	ff 92       	push	r15
    6ebc:	6b 01       	movw	r12, r22
    6ebe:	7c 01       	movw	r14, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    6ec0:	0e 94 31 37 	call	0x6e62	; 0x6e62 <micros>
    6ec4:	4b 01       	movw	r8, r22
    6ec6:	5c 01       	movw	r10, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    6ec8:	c1 14       	cp	r12, r1
    6eca:	d1 04       	cpc	r13, r1
    6ecc:	e1 04       	cpc	r14, r1
    6ece:	f1 04       	cpc	r15, r1
    6ed0:	e9 f0       	breq	.+58     	; 0x6f0c <delay+0x60>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    6ed2:	0e 94 c6 36 	call	0x6d8c	; 0x6d8c <yield>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6ed6:	0e 94 31 37 	call	0x6e62	; 0x6e62 <micros>
    6eda:	68 19       	sub	r22, r8
    6edc:	79 09       	sbc	r23, r9
    6ede:	8a 09       	sbc	r24, r10
    6ee0:	9b 09       	sbc	r25, r11
    6ee2:	68 3e       	cpi	r22, 0xE8	; 232
    6ee4:	73 40       	sbci	r23, 0x03	; 3
    6ee6:	81 05       	cpc	r24, r1
    6ee8:	91 05       	cpc	r25, r1
    6eea:	70 f3       	brcs	.-36     	; 0x6ec8 <delay+0x1c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    6eec:	21 e0       	ldi	r18, 0x01	; 1
    6eee:	c2 1a       	sub	r12, r18
    6ef0:	d1 08       	sbc	r13, r1
    6ef2:	e1 08       	sbc	r14, r1
    6ef4:	f1 08       	sbc	r15, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    6ef6:	88 ee       	ldi	r24, 0xE8	; 232
    6ef8:	88 0e       	add	r8, r24
    6efa:	83 e0       	ldi	r24, 0x03	; 3
    6efc:	98 1e       	adc	r9, r24
    6efe:	a1 1c       	adc	r10, r1
    6f00:	b1 1c       	adc	r11, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    6f02:	c1 14       	cp	r12, r1
    6f04:	d1 04       	cpc	r13, r1
    6f06:	e1 04       	cpc	r14, r1
    6f08:	f1 04       	cpc	r15, r1
    6f0a:	29 f7       	brne	.-54     	; 0x6ed6 <delay+0x2a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    6f0c:	ff 90       	pop	r15
    6f0e:	ef 90       	pop	r14
    6f10:	df 90       	pop	r13
    6f12:	cf 90       	pop	r12
    6f14:	bf 90       	pop	r11
    6f16:	af 90       	pop	r10
    6f18:	9f 90       	pop	r9
    6f1a:	8f 90       	pop	r8
    6f1c:	08 95       	ret

00006f1e <delayMicroseconds>:
delayMicroseconds():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    6f1e:	82 30       	cpi	r24, 0x02	; 2
    6f20:	91 05       	cpc	r25, r1
    6f22:	38 f0       	brcs	.+14     	; 0x6f32 <delayMicroseconds+0x14>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    6f24:	88 0f       	add	r24, r24
    6f26:	99 1f       	adc	r25, r25
    6f28:	88 0f       	add	r24, r24
    6f2a:	99 1f       	adc	r25, r25
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    6f2c:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    6f2e:	01 97       	sbiw	r24, 0x01	; 1
    6f30:	f1 f7       	brne	.-4      	; 0x6f2e <delayMicroseconds+0x10>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    6f32:	08 95       	ret

00006f34 <init>:
init():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    6f34:	78 94       	sei
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    6f36:	84 b5       	in	r24, 0x24	; 36
    6f38:	83 60       	ori	r24, 0x03	; 3
    6f3a:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    6f3c:	85 b5       	in	r24, 0x25	; 37
    6f3e:	83 60       	ori	r24, 0x03	; 3
    6f40:	85 bd       	out	0x25, r24	; 37
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    6f42:	ee e6       	ldi	r30, 0x6E	; 110
    6f44:	f0 e0       	ldi	r31, 0x00	; 0
    6f46:	80 81       	ld	r24, Z
    6f48:	81 60       	ori	r24, 0x01	; 1
    6f4a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    6f4c:	e1 e8       	ldi	r30, 0x81	; 129
    6f4e:	f0 e0       	ldi	r31, 0x00	; 0
    6f50:	82 e0       	ldi	r24, 0x02	; 2
    6f52:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    6f54:	80 81       	ld	r24, Z
    6f56:	81 60       	ori	r24, 0x01	; 1
    6f58:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    6f5a:	e0 e8       	ldi	r30, 0x80	; 128
    6f5c:	f0 e0       	ldi	r31, 0x00	; 0
    6f5e:	80 81       	ld	r24, Z
    6f60:	81 60       	ori	r24, 0x01	; 1
    6f62:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    6f64:	e1 eb       	ldi	r30, 0xB1	; 177
    6f66:	f0 e0       	ldi	r31, 0x00	; 0
    6f68:	80 81       	ld	r24, Z
    6f6a:	84 60       	ori	r24, 0x04	; 4
    6f6c:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    6f6e:	e0 eb       	ldi	r30, 0xB0	; 176
    6f70:	f0 e0       	ldi	r31, 0x00	; 0
    6f72:	80 81       	ld	r24, Z
    6f74:	81 60       	ori	r24, 0x01	; 1
    6f76:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    6f78:	e1 e9       	ldi	r30, 0x91	; 145
    6f7a:	f0 e0       	ldi	r31, 0x00	; 0
    6f7c:	80 81       	ld	r24, Z
    6f7e:	83 60       	ori	r24, 0x03	; 3
    6f80:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    6f82:	e0 e9       	ldi	r30, 0x90	; 144
    6f84:	f0 e0       	ldi	r31, 0x00	; 0
    6f86:	80 81       	ld	r24, Z
    6f88:	81 60       	ori	r24, 0x01	; 1
    6f8a:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
    6f8c:	e1 ea       	ldi	r30, 0xA1	; 161
    6f8e:	f0 e0       	ldi	r31, 0x00	; 0
    6f90:	80 81       	ld	r24, Z
    6f92:	83 60       	ori	r24, 0x03	; 3
    6f94:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
    6f96:	e0 ea       	ldi	r30, 0xA0	; 160
    6f98:	f0 e0       	ldi	r31, 0x00	; 0
    6f9a:	80 81       	ld	r24, Z
    6f9c:	81 60       	ori	r24, 0x01	; 1
    6f9e:	80 83       	st	Z, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    6fa0:	87 e8       	ldi	r24, 0x87	; 135
    6fa2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    6fa6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    6faa:	08 95       	ret

00006fac <analogRead>:
analogRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    6fac:	88 30       	cpi	r24, 0x08	; 8
    6fae:	38 f0       	brcs	.+14     	; 0x6fbe <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    6fb0:	92 ef       	ldi	r25, 0xF2	; 242
    6fb2:	98 0f       	add	r25, r24
    6fb4:	9b 30       	cpi	r25, 0x0B	; 11
    6fb6:	d8 f0       	brcs	.+54     	; 0x6fee <analogRead+0x42>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 4)
    6fb8:	89 31       	cpi	r24, 0x19	; 25
    6fba:	d8 f0       	brcs	.+54     	; 0x6ff2 <analogRead+0x46>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 6)
    6fbc:	83 51       	subi	r24, 0x13	; 19
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 12)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    6fbe:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <analog_reference>
    6fc2:	90 e4       	ldi	r25, 0x40	; 64
    6fc4:	29 9f       	mul	r18, r25
    6fc6:	90 01       	movw	r18, r0
    6fc8:	11 24       	eor	r1, r1
    6fca:	87 70       	andi	r24, 0x07	; 7
    6fcc:	82 2b       	or	r24, r18
    6fce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 12)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    6fd2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    6fd6:	80 64       	ori	r24, 0x40	; 64
    6fd8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    6fdc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    6fe0:	86 fd       	sbrc	r24, 6
    6fe2:	fc cf       	rjmp	.-8      	; 0x6fdc <analogRead+0x30>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    6fe4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    6fe8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    6fec:	08 95       	ret
    6fee:	89 2f       	mov	r24, r25
    6ff0:	e6 cf       	rjmp	.-52     	; 0x6fbe <analogRead+0x12>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    6ff2:	8f ef       	ldi	r24, 0xFF	; 255
    6ff4:	e4 cf       	rjmp	.-56     	; 0x6fbe <analogRead+0x12>

00006ff6 <turnOffPWM>:
turnOffPWM():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    6ff6:	82 50       	subi	r24, 0x02	; 2
    6ff8:	8d 30       	cpi	r24, 0x0D	; 13
    6ffa:	08 f0       	brcs	.+2      	; 0x6ffe <turnOffPWM+0x8>
    6ffc:	3e c0       	rjmp	.+124    	; 0x707a <turnOffPWM+0x84>
    6ffe:	e8 2f       	mov	r30, r24
    7000:	f0 e0       	ldi	r31, 0x00	; 0
    7002:	eb 5f       	subi	r30, 0xFB	; 251
    7004:	f7 4c       	sbci	r31, 0xC7	; 199
    7006:	0c 94 3a 3c 	jmp	0x7874	; 0x7874 <__tablejump2__>
    700a:	3a 38       	cpi	r19, 0x8A	; 138
    700c:	3e 38       	cpi	r19, 0x8E	; 142
    700e:	12 38       	cpi	r17, 0x82	; 130
    7010:	18 38       	cpi	r17, 0x88	; 136
    7012:	3d 38       	cpi	r19, 0x8D	; 141
    7014:	3d 38       	cpi	r19, 0x8D	; 141
    7016:	1c 38       	cpi	r17, 0x8C	; 140
    7018:	22 38       	cpi	r18, 0x82	; 130
    701a:	26 38       	cpi	r18, 0x86	; 134
    701c:	2c 38       	cpi	r18, 0x8C	; 140
    701e:	3d 38       	cpi	r19, 0x8D	; 141
    7020:	30 38       	cpi	r19, 0x80	; 128
    7022:	36 38       	cpi	r19, 0x86	; 134
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    7024:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    7028:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    702a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    702e:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    7030:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    7034:	8f 7d       	andi	r24, 0xDF	; 223
    7036:	f9 cf       	rjmp	.-14     	; 0x702a <turnOffPWM+0x34>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    7038:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    703c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    703e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    7042:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    7044:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    7048:	8f 7d       	andi	r24, 0xDF	; 223
    704a:	f9 cf       	rjmp	.-14     	; 0x703e <turnOffPWM+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    704c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    7050:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    7052:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    7056:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    7058:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
    705c:	8f 7d       	andi	r24, 0xDF	; 223
    705e:	f9 cf       	rjmp	.-14     	; 0x7052 <turnOffPWM+0x5c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
    7060:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    7064:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    7066:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:139
        break;
    706a:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:138
        TCCR4A &= ~_BV(COM4A1);
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
    706c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
    7070:	8f 7d       	andi	r24, 0xDF	; 223
    7072:	f9 cf       	rjmp	.-14     	; 0x7066 <turnOffPWM+0x70>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    7074:	84 b5       	in	r24, 0x24	; 36
    7076:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    7078:	84 bd       	out	0x24, r24	; 36
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    707a:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    707c:	84 b5       	in	r24, 0x24	; 36
    707e:	8f 7d       	andi	r24, 0xDF	; 223
    7080:	fb cf       	rjmp	.-10     	; 0x7078 <turnOffPWM+0x82>

00007082 <pinMode>:
pinMode():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    7082:	cf 93       	push	r28
    7084:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	fc 01       	movw	r30, r24
    708a:	e7 51       	subi	r30, 0x17	; 23
    708c:	fe 4e       	sbci	r31, 0xEE	; 238
    708e:	24 91       	lpm	r18, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    7090:	8c 5f       	subi	r24, 0xFC	; 252
    7092:	9d 4e       	sbci	r25, 0xED	; 237
    7094:	fc 01       	movw	r30, r24
    7096:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    7098:	88 23       	and	r24, r24
    709a:	c9 f0       	breq	.+50     	; 0x70ce <pinMode+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    709c:	90 e0       	ldi	r25, 0x00	; 0
    709e:	88 0f       	add	r24, r24
    70a0:	99 1f       	adc	r25, r25
    70a2:	fc 01       	movw	r30, r24
    70a4:	e9 5c       	subi	r30, 0xC9	; 201
    70a6:	fd 4e       	sbci	r31, 0xED	; 237
    70a8:	a5 91       	lpm	r26, Z+
    70aa:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    70ac:	fc 01       	movw	r30, r24
    70ae:	e5 5d       	subi	r30, 0xD5	; 213
    70b0:	fd 4e       	sbci	r31, 0xED	; 237
    70b2:	c5 91       	lpm	r28, Z+
    70b4:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    70b6:	61 11       	cpse	r22, r1
    70b8:	0d c0       	rjmp	.+26     	; 0x70d4 <pinMode+0x52>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    70ba:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    70bc:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    70be:	8c 91       	ld	r24, X
    70c0:	20 95       	com	r18
    70c2:	82 23       	and	r24, r18
    70c4:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    70c6:	88 81       	ld	r24, Y
    70c8:	28 23       	and	r18, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    70ca:	28 83       	st	Y, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    70cc:	9f bf       	out	0x3f, r25	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    70ce:	df 91       	pop	r29
    70d0:	cf 91       	pop	r28
    70d2:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    70d4:	62 30       	cpi	r22, 0x02	; 2
    70d6:	51 f4       	brne	.+20     	; 0x70ec <pinMode+0x6a>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    70d8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    70da:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    70dc:	3c 91       	ld	r19, X
    70de:	82 2f       	mov	r24, r18
    70e0:	80 95       	com	r24
    70e2:	83 23       	and	r24, r19
    70e4:	8c 93       	st	X, r24
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    70e6:	e8 81       	ld	r30, Y
    70e8:	2e 2b       	or	r18, r30
    70ea:	ef cf       	rjmp	.-34     	; 0x70ca <pinMode+0x48>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    70ec:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    70ee:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    70f0:	ec 91       	ld	r30, X
    70f2:	2e 2b       	or	r18, r30
    70f4:	2c 93       	st	X, r18
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    70f6:	8f bf       	out	0x3f, r24	; 63
    70f8:	ea cf       	rjmp	.-44     	; 0x70ce <pinMode+0x4c>

000070fa <digitalWrite>:
digitalWrite():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    70fa:	1f 93       	push	r17
    70fc:	cf 93       	push	r28
    70fe:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    7100:	28 2f       	mov	r18, r24
    7102:	30 e0       	ldi	r19, 0x00	; 0
    7104:	f9 01       	movw	r30, r18
    7106:	e2 53       	subi	r30, 0x32	; 50
    7108:	fe 4e       	sbci	r31, 0xEE	; 238
    710a:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    710c:	f9 01       	movw	r30, r18
    710e:	e7 51       	subi	r30, 0x17	; 23
    7110:	fe 4e       	sbci	r31, 0xEE	; 238
    7112:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    7114:	f9 01       	movw	r30, r18
    7116:	ec 5f       	subi	r30, 0xFC	; 252
    7118:	fd 4e       	sbci	r31, 0xED	; 237
    711a:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    711c:	cc 23       	and	r28, r28
    711e:	a9 f0       	breq	.+42     	; 0x714a <digitalWrite+0x50>
    7120:	16 2f       	mov	r17, r22
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    7122:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    7124:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    7128:	ec 2f       	mov	r30, r28
    712a:	f0 e0       	ldi	r31, 0x00	; 0
    712c:	ee 0f       	add	r30, r30
    712e:	ff 1f       	adc	r31, r31
    7130:	e5 5d       	subi	r30, 0xD5	; 213
    7132:	fd 4e       	sbci	r31, 0xED	; 237
    7134:	a5 91       	lpm	r26, Z+
    7136:	b4 91       	lpm	r27, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    7138:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    713a:	f8 94       	cli
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    713c:	ec 91       	ld	r30, X
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    713e:	11 11       	cpse	r17, r1
    7140:	08 c0       	rjmp	.+16     	; 0x7152 <digitalWrite+0x58>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    7142:	d0 95       	com	r29
    7144:	de 23       	and	r29, r30
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    7146:	dc 93       	st	X, r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    7148:	8f bf       	out	0x3f, r24	; 63
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    714a:	df 91       	pop	r29
    714c:	cf 91       	pop	r28
    714e:	1f 91       	pop	r17
    7150:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    7152:	de 2b       	or	r29, r30
    7154:	f8 cf       	rjmp	.-16     	; 0x7146 <digitalWrite+0x4c>

00007156 <digitalRead>:
digitalRead():
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    7156:	cf 93       	push	r28
    7158:	df 93       	push	r29
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    715a:	28 2f       	mov	r18, r24
    715c:	30 e0       	ldi	r19, 0x00	; 0
    715e:	f9 01       	movw	r30, r18
    7160:	e2 53       	subi	r30, 0x32	; 50
    7162:	fe 4e       	sbci	r31, 0xEE	; 238
    7164:	84 91       	lpm	r24, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    7166:	f9 01       	movw	r30, r18
    7168:	e7 51       	subi	r30, 0x17	; 23
    716a:	fe 4e       	sbci	r31, 0xEE	; 238
    716c:	d4 91       	lpm	r29, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    716e:	f9 01       	movw	r30, r18
    7170:	ec 5f       	subi	r30, 0xFC	; 252
    7172:	fd 4e       	sbci	r31, 0xED	; 237
    7174:	c4 91       	lpm	r28, Z
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    7176:	cc 23       	and	r28, r28
    7178:	a1 f0       	breq	.+40     	; 0x71a2 <digitalRead+0x4c>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    717a:	81 11       	cpse	r24, r1
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    717c:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <turnOffPWM>
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    7180:	ec 2f       	mov	r30, r28
    7182:	f0 e0       	ldi	r31, 0x00	; 0
    7184:	ee 0f       	add	r30, r30
    7186:	ff 1f       	adc	r31, r31
    7188:	e1 5e       	subi	r30, 0xE1	; 225
    718a:	fd 4e       	sbci	r31, 0xED	; 237
    718c:	a5 91       	lpm	r26, Z+
    718e:	b4 91       	lpm	r27, Z
    7190:	ec 91       	ld	r30, X
    7192:	ed 23       	and	r30, r29
    7194:	81 e0       	ldi	r24, 0x01	; 1
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	09 f4       	brne	.+2      	; 0x719c <digitalRead+0x46>
    719a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    719c:	df 91       	pop	r29
    719e:	cf 91       	pop	r28
    71a0:	08 95       	ret
C:\Users\Thaddaeus\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    71a2:	80 e0       	ldi	r24, 0x00	; 0
    71a4:	90 e0       	ldi	r25, 0x00	; 0
    71a6:	fa cf       	rjmp	.-12     	; 0x719c <digitalRead+0x46>

000071a8 <__subsf3>:
__subsf3():
    71a8:	50 58       	subi	r21, 0x80	; 128

000071aa <__addsf3>:
    71aa:	bb 27       	eor	r27, r27
    71ac:	aa 27       	eor	r26, r26
    71ae:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <__addsf3x>
    71b2:	0c 94 66 3a 	jmp	0x74cc	; 0x74cc <__fp_round>
__addsf3():
    71b6:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <__fp_pscA>
    71ba:	38 f0       	brcs	.+14     	; 0x71ca <__addsf3+0x20>
    71bc:	0e 94 5f 3a 	call	0x74be	; 0x74be <__fp_pscB>
    71c0:	20 f0       	brcs	.+8      	; 0x71ca <__addsf3+0x20>
    71c2:	39 f4       	brne	.+14     	; 0x71d2 <__addsf3+0x28>
    71c4:	9f 3f       	cpi	r25, 0xFF	; 255
    71c6:	19 f4       	brne	.+6      	; 0x71ce <__addsf3+0x24>
    71c8:	26 f4       	brtc	.+8      	; 0x71d2 <__addsf3+0x28>
    71ca:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__fp_nan>
    71ce:	0e f4       	brtc	.+2      	; 0x71d2 <__addsf3+0x28>
    71d0:	e0 95       	com	r30
    71d2:	e7 fb       	bst	r30, 7
    71d4:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__fp_inf>

000071d8 <__addsf3x>:
__addsf3x():
    71d8:	e9 2f       	mov	r30, r25
    71da:	0e 94 77 3a 	call	0x74ee	; 0x74ee <__fp_split3>
    71de:	58 f3       	brcs	.-42     	; 0x71b6 <__addsf3+0xc>
    71e0:	ba 17       	cp	r27, r26
    71e2:	62 07       	cpc	r22, r18
    71e4:	73 07       	cpc	r23, r19
    71e6:	84 07       	cpc	r24, r20
    71e8:	95 07       	cpc	r25, r21
    71ea:	20 f0       	brcs	.+8      	; 0x71f4 <__addsf3x+0x1c>
    71ec:	79 f4       	brne	.+30     	; 0x720c <__addsf3x+0x34>
    71ee:	a6 f5       	brtc	.+104    	; 0x7258 <__addsf3x+0x80>
    71f0:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <__fp_zero>
    71f4:	0e f4       	brtc	.+2      	; 0x71f8 <__addsf3x+0x20>
    71f6:	e0 95       	com	r30
    71f8:	0b 2e       	mov	r0, r27
    71fa:	ba 2f       	mov	r27, r26
    71fc:	a0 2d       	mov	r26, r0
    71fe:	0b 01       	movw	r0, r22
    7200:	b9 01       	movw	r22, r18
    7202:	90 01       	movw	r18, r0
    7204:	0c 01       	movw	r0, r24
    7206:	ca 01       	movw	r24, r20
    7208:	a0 01       	movw	r20, r0
    720a:	11 24       	eor	r1, r1
    720c:	ff 27       	eor	r31, r31
    720e:	59 1b       	sub	r21, r25
    7210:	99 f0       	breq	.+38     	; 0x7238 <__addsf3x+0x60>
    7212:	59 3f       	cpi	r21, 0xF9	; 249
    7214:	50 f4       	brcc	.+20     	; 0x722a <__addsf3x+0x52>
    7216:	50 3e       	cpi	r21, 0xE0	; 224
    7218:	68 f1       	brcs	.+90     	; 0x7274 <__addsf3x+0x9c>
    721a:	1a 16       	cp	r1, r26
    721c:	f0 40       	sbci	r31, 0x00	; 0
    721e:	a2 2f       	mov	r26, r18
    7220:	23 2f       	mov	r18, r19
    7222:	34 2f       	mov	r19, r20
    7224:	44 27       	eor	r20, r20
    7226:	58 5f       	subi	r21, 0xF8	; 248
    7228:	f3 cf       	rjmp	.-26     	; 0x7210 <__addsf3x+0x38>
    722a:	46 95       	lsr	r20
    722c:	37 95       	ror	r19
    722e:	27 95       	ror	r18
    7230:	a7 95       	ror	r26
    7232:	f0 40       	sbci	r31, 0x00	; 0
    7234:	53 95       	inc	r21
    7236:	c9 f7       	brne	.-14     	; 0x722a <__addsf3x+0x52>
    7238:	7e f4       	brtc	.+30     	; 0x7258 <__addsf3x+0x80>
    723a:	1f 16       	cp	r1, r31
    723c:	ba 0b       	sbc	r27, r26
    723e:	62 0b       	sbc	r22, r18
    7240:	73 0b       	sbc	r23, r19
    7242:	84 0b       	sbc	r24, r20
    7244:	ba f0       	brmi	.+46     	; 0x7274 <__addsf3x+0x9c>
    7246:	91 50       	subi	r25, 0x01	; 1
    7248:	a1 f0       	breq	.+40     	; 0x7272 <__addsf3x+0x9a>
    724a:	ff 0f       	add	r31, r31
    724c:	bb 1f       	adc	r27, r27
    724e:	66 1f       	adc	r22, r22
    7250:	77 1f       	adc	r23, r23
    7252:	88 1f       	adc	r24, r24
    7254:	c2 f7       	brpl	.-16     	; 0x7246 <__addsf3x+0x6e>
    7256:	0e c0       	rjmp	.+28     	; 0x7274 <__addsf3x+0x9c>
    7258:	ba 0f       	add	r27, r26
    725a:	62 1f       	adc	r22, r18
    725c:	73 1f       	adc	r23, r19
    725e:	84 1f       	adc	r24, r20
    7260:	48 f4       	brcc	.+18     	; 0x7274 <__addsf3x+0x9c>
    7262:	87 95       	ror	r24
    7264:	77 95       	ror	r23
    7266:	67 95       	ror	r22
    7268:	b7 95       	ror	r27
    726a:	f7 95       	ror	r31
    726c:	9e 3f       	cpi	r25, 0xFE	; 254
    726e:	08 f0       	brcs	.+2      	; 0x7272 <__addsf3x+0x9a>
    7270:	b0 cf       	rjmp	.-160    	; 0x71d2 <__addsf3+0x28>
    7272:	93 95       	inc	r25
    7274:	88 0f       	add	r24, r24
    7276:	08 f0       	brcs	.+2      	; 0x727a <__addsf3x+0xa2>
    7278:	99 27       	eor	r25, r25
    727a:	ee 0f       	add	r30, r30
    727c:	97 95       	ror	r25
    727e:	87 95       	ror	r24
    7280:	08 95       	ret

00007282 <__cmpsf2>:
    7282:	0e 94 2b 3a 	call	0x7456	; 0x7456 <__fp_cmp>
    7286:	08 f4       	brcc	.+2      	; 0x728a <__cmpsf2+0x8>
    7288:	81 e0       	ldi	r24, 0x01	; 1
    728a:	08 95       	ret

0000728c <__divsf3>:
    728c:	0e 94 5a 39 	call	0x72b4	; 0x72b4 <__divsf3x>
    7290:	0c 94 66 3a 	jmp	0x74cc	; 0x74cc <__fp_round>
    7294:	0e 94 5f 3a 	call	0x74be	; 0x74be <__fp_pscB>
    7298:	58 f0       	brcs	.+22     	; 0x72b0 <__divsf3+0x24>
    729a:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <__fp_pscA>
    729e:	40 f0       	brcs	.+16     	; 0x72b0 <__divsf3+0x24>
    72a0:	29 f4       	brne	.+10     	; 0x72ac <__divsf3+0x20>
    72a2:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    72a4:	29 f0       	breq	.+10     	; 0x72b0 <__divsf3+0x24>
    72a6:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__fp_inf>
    72aa:	51 11       	cpse	r21, r1
    72ac:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <__fp_szero>
    72b0:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__fp_nan>

000072b4 <__divsf3x>:
__divsf3x():
    72b4:	0e 94 77 3a 	call	0x74ee	; 0x74ee <__fp_split3>
    72b8:	68 f3       	brcs	.-38     	; 0x7294 <__divsf3+0x8>

000072ba <__divsf3_pse>:
    72ba:	99 23       	and	r25, r25
    72bc:	b1 f3       	breq	.-20     	; 0x72aa <__divsf3+0x1e>
    72be:	55 23       	and	r21, r21
    72c0:	91 f3       	breq	.-28     	; 0x72a6 <__divsf3+0x1a>
    72c2:	95 1b       	sub	r25, r21
    72c4:	55 0b       	sbc	r21, r21
    72c6:	bb 27       	eor	r27, r27
    72c8:	aa 27       	eor	r26, r26
    72ca:	62 17       	cp	r22, r18
    72cc:	73 07       	cpc	r23, r19
    72ce:	84 07       	cpc	r24, r20
    72d0:	38 f0       	brcs	.+14     	; 0x72e0 <__divsf3_pse+0x26>
    72d2:	9f 5f       	subi	r25, 0xFF	; 255
    72d4:	5f 4f       	sbci	r21, 0xFF	; 255
    72d6:	22 0f       	add	r18, r18
    72d8:	33 1f       	adc	r19, r19
    72da:	44 1f       	adc	r20, r20
    72dc:	aa 1f       	adc	r26, r26
    72de:	a9 f3       	breq	.-22     	; 0x72ca <__divsf3_pse+0x10>
    72e0:	35 d0       	rcall	.+106    	; 0x734c <__divsf3_pse+0x92>
    72e2:	0e 2e       	mov	r0, r30
    72e4:	3a f0       	brmi	.+14     	; 0x72f4 <__divsf3_pse+0x3a>
    72e6:	e0 e8       	ldi	r30, 0x80	; 128
    72e8:	32 d0       	rcall	.+100    	; 0x734e <__divsf3_pse+0x94>
    72ea:	91 50       	subi	r25, 0x01	; 1
    72ec:	50 40       	sbci	r21, 0x00	; 0
    72ee:	e6 95       	lsr	r30
    72f0:	00 1c       	adc	r0, r0
    72f2:	ca f7       	brpl	.-14     	; 0x72e6 <__divsf3_pse+0x2c>
    72f4:	2b d0       	rcall	.+86     	; 0x734c <__divsf3_pse+0x92>
    72f6:	fe 2f       	mov	r31, r30
    72f8:	29 d0       	rcall	.+82     	; 0x734c <__divsf3_pse+0x92>
    72fa:	66 0f       	add	r22, r22
    72fc:	77 1f       	adc	r23, r23
    72fe:	88 1f       	adc	r24, r24
    7300:	bb 1f       	adc	r27, r27
    7302:	26 17       	cp	r18, r22
    7304:	37 07       	cpc	r19, r23
    7306:	48 07       	cpc	r20, r24
    7308:	ab 07       	cpc	r26, r27
    730a:	b0 e8       	ldi	r27, 0x80	; 128
    730c:	09 f0       	breq	.+2      	; 0x7310 <__divsf3_pse+0x56>
    730e:	bb 0b       	sbc	r27, r27
    7310:	80 2d       	mov	r24, r0
    7312:	bf 01       	movw	r22, r30
    7314:	ff 27       	eor	r31, r31
    7316:	93 58       	subi	r25, 0x83	; 131
    7318:	5f 4f       	sbci	r21, 0xFF	; 255
    731a:	3a f0       	brmi	.+14     	; 0x732a <__divsf3_pse+0x70>
    731c:	9e 3f       	cpi	r25, 0xFE	; 254
    731e:	51 05       	cpc	r21, r1
    7320:	78 f0       	brcs	.+30     	; 0x7340 <__divsf3_pse+0x86>
    7322:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__fp_inf>
    7326:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <__fp_szero>
    732a:	5f 3f       	cpi	r21, 0xFF	; 255
    732c:	e4 f3       	brlt	.-8      	; 0x7326 <__divsf3_pse+0x6c>
    732e:	98 3e       	cpi	r25, 0xE8	; 232
    7330:	d4 f3       	brlt	.-12     	; 0x7326 <__divsf3_pse+0x6c>
    7332:	86 95       	lsr	r24
    7334:	77 95       	ror	r23
    7336:	67 95       	ror	r22
    7338:	b7 95       	ror	r27
    733a:	f7 95       	ror	r31
    733c:	9f 5f       	subi	r25, 0xFF	; 255
    733e:	c9 f7       	brne	.-14     	; 0x7332 <__divsf3_pse+0x78>
    7340:	88 0f       	add	r24, r24
    7342:	91 1d       	adc	r25, r1
    7344:	96 95       	lsr	r25
    7346:	87 95       	ror	r24
    7348:	97 f9       	bld	r25, 7
    734a:	08 95       	ret
    734c:	e1 e0       	ldi	r30, 0x01	; 1
    734e:	66 0f       	add	r22, r22
    7350:	77 1f       	adc	r23, r23
    7352:	88 1f       	adc	r24, r24
    7354:	bb 1f       	adc	r27, r27
    7356:	62 17       	cp	r22, r18
    7358:	73 07       	cpc	r23, r19
    735a:	84 07       	cpc	r24, r20
    735c:	ba 07       	cpc	r27, r26
    735e:	20 f0       	brcs	.+8      	; 0x7368 <__divsf3_pse+0xae>
    7360:	62 1b       	sub	r22, r18
    7362:	73 0b       	sbc	r23, r19
    7364:	84 0b       	sbc	r24, r20
    7366:	ba 0b       	sbc	r27, r26
    7368:	ee 1f       	adc	r30, r30
    736a:	88 f7       	brcc	.-30     	; 0x734e <__divsf3_pse+0x94>
    736c:	e0 95       	com	r30
    736e:	08 95       	ret

00007370 <__fixsfsi>:
    7370:	0e 94 bf 39 	call	0x737e	; 0x737e <__fixunssfsi>
    7374:	68 94       	set
    7376:	b1 11       	cpse	r27, r1
    7378:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <__fp_szero>
    737c:	08 95       	ret

0000737e <__fixunssfsi>:
    737e:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <__fp_splitA>
    7382:	88 f0       	brcs	.+34     	; 0x73a6 <__fixunssfsi+0x28>
    7384:	9f 57       	subi	r25, 0x7F	; 127
    7386:	98 f0       	brcs	.+38     	; 0x73ae <__fixunssfsi+0x30>
    7388:	b9 2f       	mov	r27, r25
    738a:	99 27       	eor	r25, r25
    738c:	b7 51       	subi	r27, 0x17	; 23
    738e:	b0 f0       	brcs	.+44     	; 0x73bc <__fixunssfsi+0x3e>
__fixunssfsi():
    7390:	e1 f0       	breq	.+56     	; 0x73ca <__fixunssfsi+0x4c>
    7392:	66 0f       	add	r22, r22
    7394:	77 1f       	adc	r23, r23
    7396:	88 1f       	adc	r24, r24
    7398:	99 1f       	adc	r25, r25
    739a:	1a f0       	brmi	.+6      	; 0x73a2 <__fixunssfsi+0x24>
    739c:	ba 95       	dec	r27
    739e:	c9 f7       	brne	.-14     	; 0x7392 <__fixunssfsi+0x14>
    73a0:	14 c0       	rjmp	.+40     	; 0x73ca <__fixunssfsi+0x4c>
    73a2:	b1 30       	cpi	r27, 0x01	; 1
    73a4:	91 f0       	breq	.+36     	; 0x73ca <__fixunssfsi+0x4c>
    73a6:	0e 94 99 3a 	call	0x7532	; 0x7532 <__fp_zero>
    73aa:	b1 e0       	ldi	r27, 0x01	; 1
    73ac:	08 95       	ret
    73ae:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <__fp_zero>
    73b2:	67 2f       	mov	r22, r23
    73b4:	78 2f       	mov	r23, r24
    73b6:	88 27       	eor	r24, r24
    73b8:	b8 5f       	subi	r27, 0xF8	; 248
    73ba:	39 f0       	breq	.+14     	; 0x73ca <__fixunssfsi+0x4c>
    73bc:	b9 3f       	cpi	r27, 0xF9	; 249
    73be:	cc f3       	brlt	.-14     	; 0x73b2 <__fixunssfsi+0x34>
    73c0:	86 95       	lsr	r24
    73c2:	77 95       	ror	r23
    73c4:	67 95       	ror	r22
    73c6:	b3 95       	inc	r27
    73c8:	d9 f7       	brne	.-10     	; 0x73c0 <__fixunssfsi+0x42>
    73ca:	3e f4       	brtc	.+14     	; 0x73da <__fixunssfsi+0x5c>
    73cc:	90 95       	com	r25
    73ce:	80 95       	com	r24
    73d0:	70 95       	com	r23
    73d2:	61 95       	neg	r22
    73d4:	7f 4f       	sbci	r23, 0xFF	; 255
    73d6:	8f 4f       	sbci	r24, 0xFF	; 255
    73d8:	9f 4f       	sbci	r25, 0xFF	; 255
    73da:	08 95       	ret

000073dc <__floatunsisf>:
__floatunsisf():
    73dc:	e8 94       	clt
    73de:	09 c0       	rjmp	.+18     	; 0x73f2 <__floatsisf+0x12>

000073e0 <__floatsisf>:
    73e0:	97 fb       	bst	r25, 7
    73e2:	3e f4       	brtc	.+14     	; 0x73f2 <__floatsisf+0x12>
    73e4:	90 95       	com	r25
    73e6:	80 95       	com	r24
    73e8:	70 95       	com	r23
    73ea:	61 95       	neg	r22
    73ec:	7f 4f       	sbci	r23, 0xFF	; 255
    73ee:	8f 4f       	sbci	r24, 0xFF	; 255
    73f0:	9f 4f       	sbci	r25, 0xFF	; 255
    73f2:	99 23       	and	r25, r25
    73f4:	a9 f0       	breq	.+42     	; 0x7420 <__floatsisf+0x40>
    73f6:	f9 2f       	mov	r31, r25
    73f8:	96 e9       	ldi	r25, 0x96	; 150
    73fa:	bb 27       	eor	r27, r27
    73fc:	93 95       	inc	r25
    73fe:	f6 95       	lsr	r31
    7400:	87 95       	ror	r24
    7402:	77 95       	ror	r23
    7404:	67 95       	ror	r22
    7406:	b7 95       	ror	r27
    7408:	f1 11       	cpse	r31, r1
    740a:	f8 cf       	rjmp	.-16     	; 0x73fc <__floatsisf+0x1c>
    740c:	fa f4       	brpl	.+62     	; 0x744c <__floatsisf+0x6c>
    740e:	bb 0f       	add	r27, r27
    7410:	11 f4       	brne	.+4      	; 0x7416 <__floatsisf+0x36>
    7412:	60 ff       	sbrs	r22, 0
    7414:	1b c0       	rjmp	.+54     	; 0x744c <__floatsisf+0x6c>
    7416:	6f 5f       	subi	r22, 0xFF	; 255
    7418:	7f 4f       	sbci	r23, 0xFF	; 255
    741a:	8f 4f       	sbci	r24, 0xFF	; 255
    741c:	9f 4f       	sbci	r25, 0xFF	; 255
    741e:	16 c0       	rjmp	.+44     	; 0x744c <__floatsisf+0x6c>
    7420:	88 23       	and	r24, r24
    7422:	11 f0       	breq	.+4      	; 0x7428 <__floatsisf+0x48>
    7424:	96 e9       	ldi	r25, 0x96	; 150
    7426:	11 c0       	rjmp	.+34     	; 0x744a <__floatsisf+0x6a>
    7428:	77 23       	and	r23, r23
    742a:	21 f0       	breq	.+8      	; 0x7434 <__floatsisf+0x54>
    742c:	9e e8       	ldi	r25, 0x8E	; 142
    742e:	87 2f       	mov	r24, r23
    7430:	76 2f       	mov	r23, r22
    7432:	05 c0       	rjmp	.+10     	; 0x743e <__floatsisf+0x5e>
    7434:	66 23       	and	r22, r22
    7436:	71 f0       	breq	.+28     	; 0x7454 <__floatsisf+0x74>
    7438:	96 e8       	ldi	r25, 0x86	; 134
    743a:	86 2f       	mov	r24, r22
    743c:	70 e0       	ldi	r23, 0x00	; 0
    743e:	60 e0       	ldi	r22, 0x00	; 0
    7440:	2a f0       	brmi	.+10     	; 0x744c <__floatsisf+0x6c>
    7442:	9a 95       	dec	r25
    7444:	66 0f       	add	r22, r22
    7446:	77 1f       	adc	r23, r23
    7448:	88 1f       	adc	r24, r24
    744a:	da f7       	brpl	.-10     	; 0x7442 <__floatsisf+0x62>
    744c:	88 0f       	add	r24, r24
    744e:	96 95       	lsr	r25
    7450:	87 95       	ror	r24
    7452:	97 f9       	bld	r25, 7
    7454:	08 95       	ret

00007456 <__fp_cmp>:
__fp_cmp():
    7456:	99 0f       	add	r25, r25
    7458:	00 08       	sbc	r0, r0
    745a:	55 0f       	add	r21, r21
    745c:	aa 0b       	sbc	r26, r26
    745e:	e0 e8       	ldi	r30, 0x80	; 128
    7460:	fe ef       	ldi	r31, 0xFE	; 254
    7462:	16 16       	cp	r1, r22
    7464:	17 06       	cpc	r1, r23
    7466:	e8 07       	cpc	r30, r24
    7468:	f9 07       	cpc	r31, r25
    746a:	c0 f0       	brcs	.+48     	; 0x749c <__fp_cmp+0x46>
    746c:	12 16       	cp	r1, r18
    746e:	13 06       	cpc	r1, r19
    7470:	e4 07       	cpc	r30, r20
    7472:	f5 07       	cpc	r31, r21
    7474:	98 f0       	brcs	.+38     	; 0x749c <__fp_cmp+0x46>
    7476:	62 1b       	sub	r22, r18
    7478:	73 0b       	sbc	r23, r19
    747a:	84 0b       	sbc	r24, r20
    747c:	95 0b       	sbc	r25, r21
    747e:	39 f4       	brne	.+14     	; 0x748e <__fp_cmp+0x38>
    7480:	0a 26       	eor	r0, r26
    7482:	61 f0       	breq	.+24     	; 0x749c <__fp_cmp+0x46>
    7484:	23 2b       	or	r18, r19
    7486:	24 2b       	or	r18, r20
    7488:	25 2b       	or	r18, r21
    748a:	21 f4       	brne	.+8      	; 0x7494 <__fp_cmp+0x3e>
    748c:	08 95       	ret
    748e:	0a 26       	eor	r0, r26
    7490:	09 f4       	brne	.+2      	; 0x7494 <__fp_cmp+0x3e>
    7492:	a1 40       	sbci	r26, 0x01	; 1
    7494:	a6 95       	lsr	r26
    7496:	8f ef       	ldi	r24, 0xFF	; 255
    7498:	81 1d       	adc	r24, r1
    749a:	81 1d       	adc	r24, r1
    749c:	08 95       	ret

0000749e <__fp_inf>:
__fp_inf():
    749e:	97 f9       	bld	r25, 7
    74a0:	9f 67       	ori	r25, 0x7F	; 127
    74a2:	80 e8       	ldi	r24, 0x80	; 128
    74a4:	70 e0       	ldi	r23, 0x00	; 0
    74a6:	60 e0       	ldi	r22, 0x00	; 0
    74a8:	08 95       	ret

000074aa <__fp_nan>:
__fp_nan():
    74aa:	9f ef       	ldi	r25, 0xFF	; 255
    74ac:	80 ec       	ldi	r24, 0xC0	; 192
    74ae:	08 95       	ret

000074b0 <__fp_pscA>:
__fp_pscA():
    74b0:	00 24       	eor	r0, r0
    74b2:	0a 94       	dec	r0
    74b4:	16 16       	cp	r1, r22
    74b6:	17 06       	cpc	r1, r23
    74b8:	18 06       	cpc	r1, r24
    74ba:	09 06       	cpc	r0, r25
    74bc:	08 95       	ret

000074be <__fp_pscB>:
__fp_pscB():
    74be:	00 24       	eor	r0, r0
    74c0:	0a 94       	dec	r0
    74c2:	12 16       	cp	r1, r18
    74c4:	13 06       	cpc	r1, r19
    74c6:	14 06       	cpc	r1, r20
    74c8:	05 06       	cpc	r0, r21
    74ca:	08 95       	ret

000074cc <__fp_round>:
__fp_round():
    74cc:	09 2e       	mov	r0, r25
    74ce:	03 94       	inc	r0
    74d0:	00 0c       	add	r0, r0
    74d2:	11 f4       	brne	.+4      	; 0x74d8 <__fp_round+0xc>
    74d4:	88 23       	and	r24, r24
    74d6:	52 f0       	brmi	.+20     	; 0x74ec <__fp_round+0x20>
    74d8:	bb 0f       	add	r27, r27
    74da:	40 f4       	brcc	.+16     	; 0x74ec <__fp_round+0x20>
    74dc:	bf 2b       	or	r27, r31
    74de:	11 f4       	brne	.+4      	; 0x74e4 <__fp_round+0x18>
    74e0:	60 ff       	sbrs	r22, 0
    74e2:	04 c0       	rjmp	.+8      	; 0x74ec <__fp_round+0x20>
    74e4:	6f 5f       	subi	r22, 0xFF	; 255
    74e6:	7f 4f       	sbci	r23, 0xFF	; 255
    74e8:	8f 4f       	sbci	r24, 0xFF	; 255
    74ea:	9f 4f       	sbci	r25, 0xFF	; 255
    74ec:	08 95       	ret

000074ee <__fp_split3>:
__fp_split3():
    74ee:	57 fd       	sbrc	r21, 7
    74f0:	90 58       	subi	r25, 0x80	; 128
    74f2:	44 0f       	add	r20, r20
    74f4:	55 1f       	adc	r21, r21
    74f6:	59 f0       	breq	.+22     	; 0x750e <__fp_splitA+0x10>
    74f8:	5f 3f       	cpi	r21, 0xFF	; 255
    74fa:	71 f0       	breq	.+28     	; 0x7518 <__fp_splitA+0x1a>
    74fc:	47 95       	ror	r20

000074fe <__fp_splitA>:
    74fe:	88 0f       	add	r24, r24
    7500:	97 fb       	bst	r25, 7
    7502:	99 1f       	adc	r25, r25
    7504:	61 f0       	breq	.+24     	; 0x751e <__fp_splitA+0x20>
    7506:	9f 3f       	cpi	r25, 0xFF	; 255
    7508:	79 f0       	breq	.+30     	; 0x7528 <__fp_splitA+0x2a>
    750a:	87 95       	ror	r24
    750c:	08 95       	ret
    750e:	12 16       	cp	r1, r18
    7510:	13 06       	cpc	r1, r19
    7512:	14 06       	cpc	r1, r20
    7514:	55 1f       	adc	r21, r21
    7516:	f2 cf       	rjmp	.-28     	; 0x74fc <__fp_split3+0xe>
    7518:	46 95       	lsr	r20
    751a:	f1 df       	rcall	.-30     	; 0x74fe <__fp_splitA>
    751c:	08 c0       	rjmp	.+16     	; 0x752e <__fp_splitA+0x30>
    751e:	16 16       	cp	r1, r22
    7520:	17 06       	cpc	r1, r23
    7522:	18 06       	cpc	r1, r24
    7524:	99 1f       	adc	r25, r25
    7526:	f1 cf       	rjmp	.-30     	; 0x750a <__fp_splitA+0xc>
    7528:	86 95       	lsr	r24
    752a:	71 05       	cpc	r23, r1
    752c:	61 05       	cpc	r22, r1
    752e:	08 94       	sec
    7530:	08 95       	ret

00007532 <__fp_zero>:
__fp_zero():
    7532:	e8 94       	clt

00007534 <__fp_szero>:
    7534:	bb 27       	eor	r27, r27
    7536:	66 27       	eor	r22, r22
    7538:	77 27       	eor	r23, r23
    753a:	cb 01       	movw	r24, r22
    753c:	97 f9       	bld	r25, 7
    753e:	08 95       	ret

00007540 <__gesf2>:
__gesf2():
    7540:	0e 94 2b 3a 	call	0x7456	; 0x7456 <__fp_cmp>
    7544:	08 f4       	brcc	.+2      	; 0x7548 <__gesf2+0x8>
    7546:	8f ef       	ldi	r24, 0xFF	; 255
    7548:	08 95       	ret
    754a:	16 f0       	brts	.+4      	; 0x7550 <__gesf2+0x10>
    754c:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__fp_mpack>
    7550:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__fp_nan>
    7554:	68 94       	set
    7556:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__fp_inf>

0000755a <log>:
log():
    755a:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <__fp_splitA>
    755e:	a8 f3       	brcs	.-22     	; 0x754a <__gesf2+0xa>
    7560:	99 23       	and	r25, r25
    7562:	c1 f3       	breq	.-16     	; 0x7554 <__gesf2+0x14>
    7564:	ae f3       	brts	.-22     	; 0x7550 <__gesf2+0x10>
    7566:	df 93       	push	r29
    7568:	cf 93       	push	r28
    756a:	1f 93       	push	r17
    756c:	0f 93       	push	r16
    756e:	ff 92       	push	r15
    7570:	c9 2f       	mov	r28, r25
    7572:	dd 27       	eor	r29, r29
    7574:	88 23       	and	r24, r24
    7576:	2a f0       	brmi	.+10     	; 0x7582 <log+0x28>
    7578:	21 97       	sbiw	r28, 0x01	; 1
    757a:	66 0f       	add	r22, r22
    757c:	77 1f       	adc	r23, r23
    757e:	88 1f       	adc	r24, r24
    7580:	da f7       	brpl	.-10     	; 0x7578 <log+0x1e>
    7582:	20 e0       	ldi	r18, 0x00	; 0
    7584:	30 e0       	ldi	r19, 0x00	; 0
    7586:	40 e8       	ldi	r20, 0x80	; 128
    7588:	5f eb       	ldi	r21, 0xBF	; 191
    758a:	9f e3       	ldi	r25, 0x3F	; 63
    758c:	88 39       	cpi	r24, 0x98	; 152
    758e:	20 f0       	brcs	.+8      	; 0x7598 <log+0x3e>
    7590:	80 3e       	cpi	r24, 0xE0	; 224
    7592:	38 f0       	brcs	.+14     	; 0x75a2 <log+0x48>
    7594:	21 96       	adiw	r28, 0x01	; 1
    7596:	8f 77       	andi	r24, 0x7F	; 127
    7598:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    759c:	e4 eb       	ldi	r30, 0xB4	; 180
    759e:	f0 e0       	ldi	r31, 0x00	; 0
    75a0:	04 c0       	rjmp	.+8      	; 0x75aa <log+0x50>
    75a2:	0e 94 d5 38 	call	0x71aa	; 0x71aa <__addsf3>
    75a6:	e1 ee       	ldi	r30, 0xE1	; 225
    75a8:	f0 e0       	ldi	r31, 0x00	; 0
    75aa:	0e 94 c2 3b 	call	0x7784	; 0x7784 <__fp_powser>
    75ae:	8b 01       	movw	r16, r22
    75b0:	be 01       	movw	r22, r28
    75b2:	ec 01       	movw	r28, r24
    75b4:	fb 2e       	mov	r15, r27
    75b6:	6f 57       	subi	r22, 0x7F	; 127
    75b8:	71 09       	sbc	r23, r1
    75ba:	75 95       	asr	r23
    75bc:	77 1f       	adc	r23, r23
    75be:	88 0b       	sbc	r24, r24
    75c0:	99 0b       	sbc	r25, r25
    75c2:	0e 94 f0 39 	call	0x73e0	; 0x73e0 <__floatsisf>
    75c6:	28 e1       	ldi	r18, 0x18	; 24
    75c8:	32 e7       	ldi	r19, 0x72	; 114
    75ca:	41 e3       	ldi	r20, 0x31	; 49
    75cc:	5f e3       	ldi	r21, 0x3F	; 63
    75ce:	0e 94 08 3b 	call	0x7610	; 0x7610 <__mulsf3x>
    75d2:	af 2d       	mov	r26, r15
    75d4:	98 01       	movw	r18, r16
    75d6:	ae 01       	movw	r20, r28
    75d8:	ff 90       	pop	r15
    75da:	0f 91       	pop	r16
    75dc:	1f 91       	pop	r17
    75de:	cf 91       	pop	r28
    75e0:	df 91       	pop	r29
    75e2:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <__addsf3x>
    75e6:	0c 94 66 3a 	jmp	0x74cc	; 0x74cc <__fp_round>

000075ea <__mulsf3>:
    75ea:	0e 94 08 3b 	call	0x7610	; 0x7610 <__mulsf3x>
    75ee:	0c 94 66 3a 	jmp	0x74cc	; 0x74cc <__fp_round>
    75f2:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <__fp_pscA>
    75f6:	38 f0       	brcs	.+14     	; 0x7606 <__mulsf3+0x1c>
    75f8:	0e 94 5f 3a 	call	0x74be	; 0x74be <__fp_pscB>
__mulsf3():
    75fc:	20 f0       	brcs	.+8      	; 0x7606 <__mulsf3+0x1c>
    75fe:	95 23       	and	r25, r21
    7600:	11 f0       	breq	.+4      	; 0x7606 <__mulsf3+0x1c>
    7602:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__fp_inf>
    7606:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__fp_nan>
    760a:	11 24       	eor	r1, r1
    760c:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <__fp_szero>

00007610 <__mulsf3x>:
__mulsf3x():
    7610:	0e 94 77 3a 	call	0x74ee	; 0x74ee <__fp_split3>
    7614:	70 f3       	brcs	.-36     	; 0x75f2 <__mulsf3+0x8>

00007616 <__mulsf3_pse>:
    7616:	95 9f       	mul	r25, r21
    7618:	c1 f3       	breq	.-16     	; 0x760a <__mulsf3+0x20>
    761a:	95 0f       	add	r25, r21
    761c:	50 e0       	ldi	r21, 0x00	; 0
    761e:	55 1f       	adc	r21, r21
    7620:	62 9f       	mul	r22, r18
    7622:	f0 01       	movw	r30, r0
    7624:	72 9f       	mul	r23, r18
    7626:	bb 27       	eor	r27, r27
    7628:	f0 0d       	add	r31, r0
    762a:	b1 1d       	adc	r27, r1
    762c:	63 9f       	mul	r22, r19
    762e:	aa 27       	eor	r26, r26
    7630:	f0 0d       	add	r31, r0
    7632:	b1 1d       	adc	r27, r1
    7634:	aa 1f       	adc	r26, r26
    7636:	64 9f       	mul	r22, r20
    7638:	66 27       	eor	r22, r22
    763a:	b0 0d       	add	r27, r0
    763c:	a1 1d       	adc	r26, r1
    763e:	66 1f       	adc	r22, r22
    7640:	82 9f       	mul	r24, r18
    7642:	22 27       	eor	r18, r18
    7644:	b0 0d       	add	r27, r0
    7646:	a1 1d       	adc	r26, r1
    7648:	62 1f       	adc	r22, r18
    764a:	73 9f       	mul	r23, r19
    764c:	b0 0d       	add	r27, r0
    764e:	a1 1d       	adc	r26, r1
    7650:	62 1f       	adc	r22, r18
    7652:	83 9f       	mul	r24, r19
    7654:	a0 0d       	add	r26, r0
    7656:	61 1d       	adc	r22, r1
    7658:	22 1f       	adc	r18, r18
    765a:	74 9f       	mul	r23, r20
    765c:	33 27       	eor	r19, r19
    765e:	a0 0d       	add	r26, r0
    7660:	61 1d       	adc	r22, r1
    7662:	23 1f       	adc	r18, r19
    7664:	84 9f       	mul	r24, r20
    7666:	60 0d       	add	r22, r0
    7668:	21 1d       	adc	r18, r1
    766a:	82 2f       	mov	r24, r18
    766c:	76 2f       	mov	r23, r22
    766e:	6a 2f       	mov	r22, r26
    7670:	11 24       	eor	r1, r1
    7672:	9f 57       	subi	r25, 0x7F	; 127
    7674:	50 40       	sbci	r21, 0x00	; 0
    7676:	9a f0       	brmi	.+38     	; 0x769e <__mulsf3_pse+0x88>
    7678:	f1 f0       	breq	.+60     	; 0x76b6 <__mulsf3_pse+0xa0>
    767a:	88 23       	and	r24, r24
    767c:	4a f0       	brmi	.+18     	; 0x7690 <__mulsf3_pse+0x7a>
    767e:	ee 0f       	add	r30, r30
    7680:	ff 1f       	adc	r31, r31
    7682:	bb 1f       	adc	r27, r27
    7684:	66 1f       	adc	r22, r22
    7686:	77 1f       	adc	r23, r23
    7688:	88 1f       	adc	r24, r24
    768a:	91 50       	subi	r25, 0x01	; 1
    768c:	50 40       	sbci	r21, 0x00	; 0
    768e:	a9 f7       	brne	.-22     	; 0x767a <__mulsf3_pse+0x64>
    7690:	9e 3f       	cpi	r25, 0xFE	; 254
    7692:	51 05       	cpc	r21, r1
    7694:	80 f0       	brcs	.+32     	; 0x76b6 <__mulsf3_pse+0xa0>
    7696:	0c 94 4f 3a 	jmp	0x749e	; 0x749e <__fp_inf>
    769a:	0c 94 9a 3a 	jmp	0x7534	; 0x7534 <__fp_szero>
    769e:	5f 3f       	cpi	r21, 0xFF	; 255
    76a0:	e4 f3       	brlt	.-8      	; 0x769a <__mulsf3_pse+0x84>
    76a2:	98 3e       	cpi	r25, 0xE8	; 232
    76a4:	d4 f3       	brlt	.-12     	; 0x769a <__mulsf3_pse+0x84>
    76a6:	86 95       	lsr	r24
    76a8:	77 95       	ror	r23
    76aa:	67 95       	ror	r22
    76ac:	b7 95       	ror	r27
    76ae:	f7 95       	ror	r31
    76b0:	e7 95       	ror	r30
    76b2:	9f 5f       	subi	r25, 0xFF	; 255
    76b4:	c1 f7       	brne	.-16     	; 0x76a6 <__mulsf3_pse+0x90>
    76b6:	fe 2b       	or	r31, r30
    76b8:	88 0f       	add	r24, r24
    76ba:	91 1d       	adc	r25, r1
    76bc:	96 95       	lsr	r25
    76be:	87 95       	ror	r24
    76c0:	97 f9       	bld	r25, 7
    76c2:	08 95       	ret
    76c4:	19 f4       	brne	.+6      	; 0x76cc <__mulsf3_pse+0xb6>
    76c6:	16 f4       	brtc	.+4      	; 0x76cc <__mulsf3_pse+0xb6>
    76c8:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__fp_nan>
    76cc:	0c 94 ad 3b 	jmp	0x775a	; 0x775a <__fp_mpack>

000076d0 <sqrt>:
    76d0:	0e 94 7f 3a 	call	0x74fe	; 0x74fe <__fp_splitA>
    76d4:	b8 f3       	brcs	.-18     	; 0x76c4 <__mulsf3_pse+0xae>
    76d6:	99 23       	and	r25, r25
    76d8:	c9 f3       	breq	.-14     	; 0x76cc <__mulsf3_pse+0xb6>
    76da:	b6 f3       	brts	.-20     	; 0x76c8 <__mulsf3_pse+0xb2>
    76dc:	9f 57       	subi	r25, 0x7F	; 127
    76de:	55 0b       	sbc	r21, r21
    76e0:	87 ff       	sbrs	r24, 7
sqrt():
    76e2:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__fp_norm2>
    76e6:	00 24       	eor	r0, r0
    76e8:	a0 e6       	ldi	r26, 0x60	; 96
    76ea:	40 ea       	ldi	r20, 0xA0	; 160
    76ec:	90 01       	movw	r18, r0
    76ee:	80 58       	subi	r24, 0x80	; 128
    76f0:	56 95       	lsr	r21
    76f2:	97 95       	ror	r25
    76f4:	28 f4       	brcc	.+10     	; 0x7700 <sqrt+0x30>
    76f6:	80 5c       	subi	r24, 0xC0	; 192
    76f8:	66 0f       	add	r22, r22
    76fa:	77 1f       	adc	r23, r23
    76fc:	88 1f       	adc	r24, r24
    76fe:	20 f0       	brcs	.+8      	; 0x7708 <sqrt+0x38>
    7700:	26 17       	cp	r18, r22
    7702:	37 07       	cpc	r19, r23
    7704:	48 07       	cpc	r20, r24
    7706:	30 f4       	brcc	.+12     	; 0x7714 <sqrt+0x44>
    7708:	62 1b       	sub	r22, r18
    770a:	73 0b       	sbc	r23, r19
    770c:	84 0b       	sbc	r24, r20
    770e:	20 29       	or	r18, r0
    7710:	31 29       	or	r19, r1
    7712:	4a 2b       	or	r20, r26
    7714:	a6 95       	lsr	r26
    7716:	17 94       	ror	r1
    7718:	07 94       	ror	r0
    771a:	20 25       	eor	r18, r0
    771c:	31 25       	eor	r19, r1
    771e:	4a 27       	eor	r20, r26
    7720:	58 f7       	brcc	.-42     	; 0x76f8 <sqrt+0x28>
    7722:	66 0f       	add	r22, r22
    7724:	77 1f       	adc	r23, r23
    7726:	88 1f       	adc	r24, r24
    7728:	20 f0       	brcs	.+8      	; 0x7732 <sqrt+0x62>
    772a:	26 17       	cp	r18, r22
    772c:	37 07       	cpc	r19, r23
    772e:	48 07       	cpc	r20, r24
    7730:	30 f4       	brcc	.+12     	; 0x773e <sqrt+0x6e>
    7732:	62 0b       	sbc	r22, r18
    7734:	73 0b       	sbc	r23, r19
    7736:	84 0b       	sbc	r24, r20
    7738:	20 0d       	add	r18, r0
    773a:	31 1d       	adc	r19, r1
    773c:	41 1d       	adc	r20, r1
    773e:	a0 95       	com	r26
    7740:	81 f7       	brne	.-32     	; 0x7722 <sqrt+0x52>
    7742:	b9 01       	movw	r22, r18
    7744:	84 2f       	mov	r24, r20
    7746:	91 58       	subi	r25, 0x81	; 129
    7748:	88 0f       	add	r24, r24
    774a:	96 95       	lsr	r25
    774c:	87 95       	ror	r24
    774e:	08 95       	ret

00007750 <__unordsf2>:
    7750:	0e 94 2b 3a 	call	0x7456	; 0x7456 <__fp_cmp>
    7754:	88 0b       	sbc	r24, r24
    7756:	99 0b       	sbc	r25, r25
    7758:	08 95       	ret

0000775a <__fp_mpack>:
    775a:	9f 3f       	cpi	r25, 0xFF	; 255
__fp_mpack():
    775c:	31 f0       	breq	.+12     	; 0x776a <__fp_mpack_finite+0xc>

0000775e <__fp_mpack_finite>:
    775e:	91 50       	subi	r25, 0x01	; 1
    7760:	20 f4       	brcc	.+8      	; 0x776a <__fp_mpack_finite+0xc>
    7762:	87 95       	ror	r24
    7764:	77 95       	ror	r23
    7766:	67 95       	ror	r22
    7768:	b7 95       	ror	r27
    776a:	88 0f       	add	r24, r24
    776c:	91 1d       	adc	r25, r1
    776e:	96 95       	lsr	r25
    7770:	87 95       	ror	r24
    7772:	97 f9       	bld	r25, 7
    7774:	08 95       	ret

00007776 <__fp_norm2>:
__fp_norm2():
    7776:	91 50       	subi	r25, 0x01	; 1
    7778:	50 40       	sbci	r21, 0x00	; 0
    777a:	66 0f       	add	r22, r22
    777c:	77 1f       	adc	r23, r23
    777e:	88 1f       	adc	r24, r24
    7780:	d2 f7       	brpl	.-12     	; 0x7776 <__fp_norm2>
    7782:	08 95       	ret

00007784 <__fp_powser>:
__fp_powser():
    7784:	df 93       	push	r29
    7786:	cf 93       	push	r28
    7788:	1f 93       	push	r17
    778a:	0f 93       	push	r16
    778c:	ff 92       	push	r15
    778e:	ef 92       	push	r14
    7790:	df 92       	push	r13
    7792:	7b 01       	movw	r14, r22
    7794:	8c 01       	movw	r16, r24
    7796:	68 94       	set
    7798:	06 c0       	rjmp	.+12     	; 0x77a6 <__fp_powser+0x22>
    779a:	da 2e       	mov	r13, r26
    779c:	ef 01       	movw	r28, r30
    779e:	0e 94 08 3b 	call	0x7610	; 0x7610 <__mulsf3x>
    77a2:	fe 01       	movw	r30, r28
    77a4:	e8 94       	clt
    77a6:	a5 91       	lpm	r26, Z+
    77a8:	25 91       	lpm	r18, Z+
    77aa:	35 91       	lpm	r19, Z+
    77ac:	45 91       	lpm	r20, Z+
    77ae:	55 91       	lpm	r21, Z+
    77b0:	a6 f3       	brts	.-24     	; 0x779a <__fp_powser+0x16>
    77b2:	ef 01       	movw	r28, r30
    77b4:	0e 94 ec 38 	call	0x71d8	; 0x71d8 <__addsf3x>
    77b8:	fe 01       	movw	r30, r28
    77ba:	97 01       	movw	r18, r14
    77bc:	a8 01       	movw	r20, r16
    77be:	da 94       	dec	r13
    77c0:	69 f7       	brne	.-38     	; 0x779c <__fp_powser+0x18>
    77c2:	df 90       	pop	r13
    77c4:	ef 90       	pop	r14
    77c6:	ff 90       	pop	r15
    77c8:	0f 91       	pop	r16
    77ca:	1f 91       	pop	r17
    77cc:	cf 91       	pop	r28
    77ce:	df 91       	pop	r29
    77d0:	08 95       	ret

000077d2 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    77d2:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    77d4:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    77d6:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    77d8:	0e 94 56 3c 	call	0x78ac	; 0x78ac <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    77dc:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    77de:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    77e0:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    77e2:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    77e4:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    77e6:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    77e8:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    77ea:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    77ec:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    77ee:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    77f0:	08 95       	ret

000077f2 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    77f2:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    77f4:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    77f6:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    77f8:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    77fa:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    77fc:	0d c0       	rjmp	.+26     	; 0x7818 <__udivmodsi4_ep>

000077fe <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    77fe:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    7800:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    7802:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    7804:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    7806:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    7808:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    780a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    780c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    780e:	20 f0       	brcs	.+8      	; 0x7818 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    7810:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    7812:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    7814:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    7816:	f5 0b       	sbc	r31, r21

00007818 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    7818:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    781a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    781c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    781e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    7820:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    7822:	69 f7       	brne	.-38     	; 0x77fe <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    7824:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    7826:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    7828:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    782a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    782c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    782e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    7830:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    7832:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    7834:	08 95       	ret

00007836 <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    7836:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    7838:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    783a:	1e f4       	brtc	.+6      	; 0x7842 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    783c:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    783e:	0e 94 32 3c 	call	0x7864	; 0x7864 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    7842:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    7844:	07 d0       	rcall	.+14     	; 0x7854 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    7846:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    784a:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    784c:	03 d0       	rcall	.+6      	; 0x7854 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    784e:	4e f4       	brtc	.+18     	; 0x7862 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    7850:	0c 94 32 3c 	jmp	0x7864	; 0x7864 <__negsi2>

00007854 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    7854:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    7856:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    7858:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    785a:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    785c:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    785e:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    7860:	5f 4f       	sbci	r21, 0xFF	; 255

00007862 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    7862:	08 95       	ret

00007864 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    7864:	90 95       	com	r25
    7866:	80 95       	com	r24
    7868:	70 95       	com	r23
    786a:	61 95       	neg	r22
    786c:	7f 4f       	sbci	r23, 0xFF	; 255
    786e:	8f 4f       	sbci	r24, 0xFF	; 255
    7870:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    7872:	08 95       	ret

00007874 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    7874:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    7876:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    7878:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    787a:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    787c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    787e:	09 94       	ijmp

00007880 <__bswapsi2>:
__bswapsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3092
    7880:	69 27       	eor	r22, r25
    7882:	96 27       	eor	r25, r22
    7884:	69 27       	eor	r22, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3093
    7886:	78 27       	eor	r23, r24
    7888:	87 27       	eor	r24, r23
    788a:	78 27       	eor	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3094
    788c:	08 95       	ret

0000788e <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    788e:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    7890:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    7892:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    7894:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    7896:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    7898:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    789a:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    789c:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    789e:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    78a0:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    78a2:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    78a4:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    78a6:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    78a8:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    78aa:	08 95       	ret

000078ac <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    78ac:	0e 94 47 3c 	call	0x788e	; 0x788e <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    78b0:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    78b2:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    78b4:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    78b6:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    78b8:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    78ba:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    78bc:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    78be:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    78c0:	08 95       	ret

000078c2 <__ashldi3>:
__ashldi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    78c2:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    78c4:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    78c6:	90 f0       	brcs	.+36     	; 0x78ec <__ashldi3+0x2a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    78c8:	98 2f       	mov	r25, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    78ca:	87 2f       	mov	r24, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    78cc:	76 2f       	mov	r23, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    78ce:	65 2f       	mov	r22, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    78d0:	54 2f       	mov	r21, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    78d2:	43 2f       	mov	r20, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    78d4:	32 2f       	mov	r19, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    78d6:	22 27       	eor	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    78d8:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    78da:	f4 cf       	rjmp	.-24     	; 0x78c4 <__ashldi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    78dc:	22 0f       	add	r18, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    78de:	33 1f       	adc	r19, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    78e0:	44 1f       	adc	r20, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    78e2:	55 1f       	adc	r21, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    78e4:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    78e6:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    78e8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    78ea:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    78ec:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    78ee:	b2 f7       	brpl	.-20     	; 0x78dc <__ashldi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    78f0:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    78f2:	08 95       	ret

000078f4 <__ashrdi3>:
__ashrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    78f4:	97 fd       	sbrc	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    78f6:	10 94       	com	r1

000078f8 <__lshrdi3>:
__lshrdi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    78f8:	00 2e       	mov	r0, r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    78fa:	08 30       	cpi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    78fc:	98 f0       	brcs	.+38     	; 0x7924 <__lshrdi3+0x2c>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    78fe:	08 50       	subi	r16, 0x08	; 8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    7900:	23 2f       	mov	r18, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    7902:	34 2f       	mov	r19, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    7904:	45 2f       	mov	r20, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    7906:	56 2f       	mov	r21, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    7908:	67 2f       	mov	r22, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    790a:	78 2f       	mov	r23, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    790c:	89 2f       	mov	r24, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    790e:	91 2d       	mov	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    7910:	f4 cf       	rjmp	.-24     	; 0x78fa <__lshrdi3+0x2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    7912:	15 94       	asr	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    7914:	97 95       	ror	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    7916:	87 95       	ror	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    7918:	77 95       	ror	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    791a:	67 95       	ror	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    791c:	57 95       	ror	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    791e:	47 95       	ror	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    7920:	37 95       	ror	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    7922:	27 95       	ror	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    7924:	0a 95       	dec	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    7926:	aa f7       	brpl	.-22     	; 0x7912 <__lshrdi3+0x1a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    7928:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    792a:	00 2d       	mov	r16, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    792c:	08 95       	ret

0000792e <malloc>:
malloc():
    792e:	0f 93       	push	r16
    7930:	1f 93       	push	r17
    7932:	cf 93       	push	r28
    7934:	df 93       	push	r29
    7936:	82 30       	cpi	r24, 0x02	; 2
    7938:	91 05       	cpc	r25, r1
    793a:	10 f4       	brcc	.+4      	; 0x7940 <malloc+0x12>
    793c:	82 e0       	ldi	r24, 0x02	; 2
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	e0 91 03 06 	lds	r30, 0x0603	; 0x800603 <__flp>
    7944:	f0 91 04 06 	lds	r31, 0x0604	; 0x800604 <__flp+0x1>
    7948:	30 e0       	ldi	r19, 0x00	; 0
    794a:	20 e0       	ldi	r18, 0x00	; 0
    794c:	b0 e0       	ldi	r27, 0x00	; 0
    794e:	a0 e0       	ldi	r26, 0x00	; 0
    7950:	30 97       	sbiw	r30, 0x00	; 0
    7952:	99 f4       	brne	.+38     	; 0x797a <malloc+0x4c>
    7954:	21 15       	cp	r18, r1
    7956:	31 05       	cpc	r19, r1
    7958:	09 f4       	brne	.+2      	; 0x795c <malloc+0x2e>
    795a:	4a c0       	rjmp	.+148    	; 0x79f0 <malloc+0xc2>
    795c:	28 1b       	sub	r18, r24
    795e:	39 0b       	sbc	r19, r25
    7960:	24 30       	cpi	r18, 0x04	; 4
    7962:	31 05       	cpc	r19, r1
    7964:	d8 f5       	brcc	.+118    	; 0x79dc <malloc+0xae>
    7966:	8a 81       	ldd	r24, Y+2	; 0x02
    7968:	9b 81       	ldd	r25, Y+3	; 0x03
    796a:	61 15       	cp	r22, r1
    796c:	71 05       	cpc	r23, r1
    796e:	89 f1       	breq	.+98     	; 0x79d2 <malloc+0xa4>
    7970:	fb 01       	movw	r30, r22
    7972:	93 83       	std	Z+3, r25	; 0x03
    7974:	82 83       	std	Z+2, r24	; 0x02
    7976:	fe 01       	movw	r30, r28
    7978:	11 c0       	rjmp	.+34     	; 0x799c <malloc+0x6e>
    797a:	40 81       	ld	r20, Z
    797c:	51 81       	ldd	r21, Z+1	; 0x01
    797e:	02 81       	ldd	r16, Z+2	; 0x02
    7980:	13 81       	ldd	r17, Z+3	; 0x03
    7982:	48 17       	cp	r20, r24
    7984:	59 07       	cpc	r21, r25
    7986:	e0 f0       	brcs	.+56     	; 0x79c0 <malloc+0x92>
    7988:	48 17       	cp	r20, r24
    798a:	59 07       	cpc	r21, r25
    798c:	99 f4       	brne	.+38     	; 0x79b4 <malloc+0x86>
    798e:	10 97       	sbiw	r26, 0x00	; 0
    7990:	61 f0       	breq	.+24     	; 0x79aa <malloc+0x7c>
    7992:	12 96       	adiw	r26, 0x02	; 2
    7994:	0c 93       	st	X, r16
    7996:	12 97       	sbiw	r26, 0x02	; 2
    7998:	13 96       	adiw	r26, 0x03	; 3
    799a:	1c 93       	st	X, r17
    799c:	32 96       	adiw	r30, 0x02	; 2
    799e:	cf 01       	movw	r24, r30
    79a0:	df 91       	pop	r29
    79a2:	cf 91       	pop	r28
    79a4:	1f 91       	pop	r17
    79a6:	0f 91       	pop	r16
    79a8:	08 95       	ret
    79aa:	00 93 03 06 	sts	0x0603, r16	; 0x800603 <__flp>
    79ae:	10 93 04 06 	sts	0x0604, r17	; 0x800604 <__flp+0x1>
    79b2:	f4 cf       	rjmp	.-24     	; 0x799c <malloc+0x6e>
    79b4:	21 15       	cp	r18, r1
    79b6:	31 05       	cpc	r19, r1
    79b8:	51 f0       	breq	.+20     	; 0x79ce <malloc+0xa0>
    79ba:	42 17       	cp	r20, r18
    79bc:	53 07       	cpc	r21, r19
    79be:	38 f0       	brcs	.+14     	; 0x79ce <malloc+0xa0>
    79c0:	a9 01       	movw	r20, r18
    79c2:	db 01       	movw	r26, r22
    79c4:	9a 01       	movw	r18, r20
    79c6:	bd 01       	movw	r22, r26
    79c8:	df 01       	movw	r26, r30
    79ca:	f8 01       	movw	r30, r16
    79cc:	c1 cf       	rjmp	.-126    	; 0x7950 <malloc+0x22>
    79ce:	ef 01       	movw	r28, r30
    79d0:	f9 cf       	rjmp	.-14     	; 0x79c4 <malloc+0x96>
    79d2:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <__flp+0x1>
    79d6:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__flp>
    79da:	cd cf       	rjmp	.-102    	; 0x7976 <malloc+0x48>
    79dc:	fe 01       	movw	r30, r28
    79de:	e2 0f       	add	r30, r18
    79e0:	f3 1f       	adc	r31, r19
    79e2:	81 93       	st	Z+, r24
    79e4:	91 93       	st	Z+, r25
    79e6:	22 50       	subi	r18, 0x02	; 2
    79e8:	31 09       	sbc	r19, r1
    79ea:	39 83       	std	Y+1, r19	; 0x01
    79ec:	28 83       	st	Y, r18
    79ee:	d7 cf       	rjmp	.-82     	; 0x799e <malloc+0x70>
    79f0:	20 91 01 06 	lds	r18, 0x0601	; 0x800601 <__brkval>
    79f4:	30 91 02 06 	lds	r19, 0x0602	; 0x800602 <__brkval+0x1>
    79f8:	23 2b       	or	r18, r19
    79fa:	41 f4       	brne	.+16     	; 0x7a0c <malloc+0xde>
    79fc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    7a00:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    7a04:	30 93 02 06 	sts	0x0602, r19	; 0x800602 <__brkval+0x1>
    7a08:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__brkval>
    7a0c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    7a10:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    7a14:	21 15       	cp	r18, r1
    7a16:	31 05       	cpc	r19, r1
    7a18:	41 f4       	brne	.+16     	; 0x7a2a <malloc+0xfc>
    7a1a:	2d b7       	in	r18, 0x3d	; 61
    7a1c:	3e b7       	in	r19, 0x3e	; 62
    7a1e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    7a22:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    7a26:	24 1b       	sub	r18, r20
    7a28:	35 0b       	sbc	r19, r21
    7a2a:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <__brkval>
    7a2e:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <__brkval+0x1>
    7a32:	e2 17       	cp	r30, r18
    7a34:	f3 07       	cpc	r31, r19
    7a36:	a0 f4       	brcc	.+40     	; 0x7a60 <malloc+0x132>
    7a38:	2e 1b       	sub	r18, r30
    7a3a:	3f 0b       	sbc	r19, r31
    7a3c:	28 17       	cp	r18, r24
    7a3e:	39 07       	cpc	r19, r25
    7a40:	78 f0       	brcs	.+30     	; 0x7a60 <malloc+0x132>
    7a42:	ac 01       	movw	r20, r24
    7a44:	4e 5f       	subi	r20, 0xFE	; 254
    7a46:	5f 4f       	sbci	r21, 0xFF	; 255
    7a48:	24 17       	cp	r18, r20
    7a4a:	35 07       	cpc	r19, r21
    7a4c:	48 f0       	brcs	.+18     	; 0x7a60 <malloc+0x132>
    7a4e:	4e 0f       	add	r20, r30
    7a50:	5f 1f       	adc	r21, r31
    7a52:	50 93 02 06 	sts	0x0602, r21	; 0x800602 <__brkval+0x1>
    7a56:	40 93 01 06 	sts	0x0601, r20	; 0x800601 <__brkval>
    7a5a:	81 93       	st	Z+, r24
    7a5c:	91 93       	st	Z+, r25
    7a5e:	9f cf       	rjmp	.-194    	; 0x799e <malloc+0x70>
    7a60:	f0 e0       	ldi	r31, 0x00	; 0
    7a62:	e0 e0       	ldi	r30, 0x00	; 0
    7a64:	9c cf       	rjmp	.-200    	; 0x799e <malloc+0x70>

00007a66 <free>:
free():
    7a66:	cf 93       	push	r28
    7a68:	df 93       	push	r29
    7a6a:	00 97       	sbiw	r24, 0x00	; 0
    7a6c:	e9 f0       	breq	.+58     	; 0x7aa8 <free+0x42>
    7a6e:	fc 01       	movw	r30, r24
    7a70:	32 97       	sbiw	r30, 0x02	; 2
    7a72:	13 82       	std	Z+3, r1	; 0x03
    7a74:	12 82       	std	Z+2, r1	; 0x02
    7a76:	a0 91 03 06 	lds	r26, 0x0603	; 0x800603 <__flp>
    7a7a:	b0 91 04 06 	lds	r27, 0x0604	; 0x800604 <__flp+0x1>
    7a7e:	ed 01       	movw	r28, r26
    7a80:	30 e0       	ldi	r19, 0x00	; 0
    7a82:	20 e0       	ldi	r18, 0x00	; 0
    7a84:	10 97       	sbiw	r26, 0x00	; 0
    7a86:	a1 f4       	brne	.+40     	; 0x7ab0 <free+0x4a>
    7a88:	20 81       	ld	r18, Z
    7a8a:	31 81       	ldd	r19, Z+1	; 0x01
    7a8c:	82 0f       	add	r24, r18
    7a8e:	93 1f       	adc	r25, r19
    7a90:	20 91 01 06 	lds	r18, 0x0601	; 0x800601 <__brkval>
    7a94:	30 91 02 06 	lds	r19, 0x0602	; 0x800602 <__brkval+0x1>
    7a98:	28 17       	cp	r18, r24
    7a9a:	39 07       	cpc	r19, r25
    7a9c:	09 f0       	breq	.+2      	; 0x7aa0 <free+0x3a>
    7a9e:	61 c0       	rjmp	.+194    	; 0x7b62 <free+0xfc>
    7aa0:	f0 93 02 06 	sts	0x0602, r31	; 0x800602 <__brkval+0x1>
    7aa4:	e0 93 01 06 	sts	0x0601, r30	; 0x800601 <__brkval>
    7aa8:	df 91       	pop	r29
    7aaa:	cf 91       	pop	r28
    7aac:	08 95       	ret
    7aae:	ea 01       	movw	r28, r20
    7ab0:	ce 17       	cp	r28, r30
    7ab2:	df 07       	cpc	r29, r31
    7ab4:	e8 f5       	brcc	.+122    	; 0x7b30 <free+0xca>
    7ab6:	4a 81       	ldd	r20, Y+2	; 0x02
    7ab8:	5b 81       	ldd	r21, Y+3	; 0x03
    7aba:	9e 01       	movw	r18, r28
    7abc:	41 15       	cp	r20, r1
    7abe:	51 05       	cpc	r21, r1
    7ac0:	b1 f7       	brne	.-20     	; 0x7aae <free+0x48>
    7ac2:	e9 01       	movw	r28, r18
    7ac4:	fb 83       	std	Y+3, r31	; 0x03
    7ac6:	ea 83       	std	Y+2, r30	; 0x02
    7ac8:	49 91       	ld	r20, Y+
    7aca:	59 91       	ld	r21, Y+
    7acc:	c4 0f       	add	r28, r20
    7ace:	d5 1f       	adc	r29, r21
    7ad0:	ec 17       	cp	r30, r28
    7ad2:	fd 07       	cpc	r31, r29
    7ad4:	61 f4       	brne	.+24     	; 0x7aee <free+0x88>
    7ad6:	80 81       	ld	r24, Z
    7ad8:	91 81       	ldd	r25, Z+1	; 0x01
    7ada:	02 96       	adiw	r24, 0x02	; 2
    7adc:	84 0f       	add	r24, r20
    7ade:	95 1f       	adc	r25, r21
    7ae0:	e9 01       	movw	r28, r18
    7ae2:	99 83       	std	Y+1, r25	; 0x01
    7ae4:	88 83       	st	Y, r24
    7ae6:	82 81       	ldd	r24, Z+2	; 0x02
    7ae8:	93 81       	ldd	r25, Z+3	; 0x03
    7aea:	9b 83       	std	Y+3, r25	; 0x03
    7aec:	8a 83       	std	Y+2, r24	; 0x02
    7aee:	f0 e0       	ldi	r31, 0x00	; 0
    7af0:	e0 e0       	ldi	r30, 0x00	; 0
    7af2:	12 96       	adiw	r26, 0x02	; 2
    7af4:	8d 91       	ld	r24, X+
    7af6:	9c 91       	ld	r25, X
    7af8:	13 97       	sbiw	r26, 0x03	; 3
    7afa:	00 97       	sbiw	r24, 0x00	; 0
    7afc:	b9 f5       	brne	.+110    	; 0x7b6c <free+0x106>
    7afe:	2d 91       	ld	r18, X+
    7b00:	3c 91       	ld	r19, X
    7b02:	11 97       	sbiw	r26, 0x01	; 1
    7b04:	cd 01       	movw	r24, r26
    7b06:	02 96       	adiw	r24, 0x02	; 2
    7b08:	82 0f       	add	r24, r18
    7b0a:	93 1f       	adc	r25, r19
    7b0c:	20 91 01 06 	lds	r18, 0x0601	; 0x800601 <__brkval>
    7b10:	30 91 02 06 	lds	r19, 0x0602	; 0x800602 <__brkval+0x1>
    7b14:	28 17       	cp	r18, r24
    7b16:	39 07       	cpc	r19, r25
    7b18:	39 f6       	brne	.-114    	; 0x7aa8 <free+0x42>
    7b1a:	30 97       	sbiw	r30, 0x00	; 0
    7b1c:	51 f5       	brne	.+84     	; 0x7b72 <free+0x10c>
    7b1e:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__flp+0x1>
    7b22:	10 92 03 06 	sts	0x0603, r1	; 0x800603 <__flp>
    7b26:	b0 93 02 06 	sts	0x0602, r27	; 0x800602 <__brkval+0x1>
    7b2a:	a0 93 01 06 	sts	0x0601, r26	; 0x800601 <__brkval>
    7b2e:	bc cf       	rjmp	.-136    	; 0x7aa8 <free+0x42>
    7b30:	d3 83       	std	Z+3, r29	; 0x03
    7b32:	c2 83       	std	Z+2, r28	; 0x02
    7b34:	40 81       	ld	r20, Z
    7b36:	51 81       	ldd	r21, Z+1	; 0x01
    7b38:	84 0f       	add	r24, r20
    7b3a:	95 1f       	adc	r25, r21
    7b3c:	c8 17       	cp	r28, r24
    7b3e:	d9 07       	cpc	r29, r25
    7b40:	61 f4       	brne	.+24     	; 0x7b5a <free+0xf4>
    7b42:	4e 5f       	subi	r20, 0xFE	; 254
    7b44:	5f 4f       	sbci	r21, 0xFF	; 255
    7b46:	88 81       	ld	r24, Y
    7b48:	99 81       	ldd	r25, Y+1	; 0x01
    7b4a:	48 0f       	add	r20, r24
    7b4c:	59 1f       	adc	r21, r25
    7b4e:	51 83       	std	Z+1, r21	; 0x01
    7b50:	40 83       	st	Z, r20
    7b52:	8a 81       	ldd	r24, Y+2	; 0x02
    7b54:	9b 81       	ldd	r25, Y+3	; 0x03
    7b56:	93 83       	std	Z+3, r25	; 0x03
    7b58:	82 83       	std	Z+2, r24	; 0x02
    7b5a:	21 15       	cp	r18, r1
    7b5c:	31 05       	cpc	r19, r1
    7b5e:	09 f0       	breq	.+2      	; 0x7b62 <free+0xfc>
    7b60:	b0 cf       	rjmp	.-160    	; 0x7ac2 <free+0x5c>
    7b62:	f0 93 04 06 	sts	0x0604, r31	; 0x800604 <__flp+0x1>
    7b66:	e0 93 03 06 	sts	0x0603, r30	; 0x800603 <__flp>
    7b6a:	9e cf       	rjmp	.-196    	; 0x7aa8 <free+0x42>
    7b6c:	fd 01       	movw	r30, r26
    7b6e:	dc 01       	movw	r26, r24
    7b70:	c0 cf       	rjmp	.-128    	; 0x7af2 <free+0x8c>
    7b72:	13 82       	std	Z+3, r1	; 0x03
    7b74:	12 82       	std	Z+2, r1	; 0x02
    7b76:	d7 cf       	rjmp	.-82     	; 0x7b26 <free+0xc0>

00007b78 <memset>:
memset():
    7b78:	dc 01       	movw	r26, r24
    7b7a:	01 c0       	rjmp	.+2      	; 0x7b7e <memset+0x6>
    7b7c:	6d 93       	st	X+, r22
    7b7e:	41 50       	subi	r20, 0x01	; 1
    7b80:	50 40       	sbci	r21, 0x00	; 0
    7b82:	e0 f7       	brcc	.-8      	; 0x7b7c <memset+0x4>
    7b84:	08 95       	ret

00007b86 <eeprom_read_byte>:
eeprom_read_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:91
    7b86:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:92
    7b88:	fe cf       	rjmp	.-4      	; 0x7b86 <eeprom_read_byte>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:95
    7b8a:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:101
    7b8c:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:102
    7b8e:	f8 9a       	sbi	0x1f, 0	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:103
    7b90:	99 27       	eor	r25, r25
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:104
    7b92:	80 b5       	in	r24, 0x20	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eerd_byte.S:105
    7b94:	08 95       	ret

00007b96 <eeprom_write_byte>:
eeprom_write_byte():
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:42
    7b96:	26 2f       	mov	r18, r22

00007b98 <eeprom_write_r18>:
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:162
    7b98:	f9 99       	sbic	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:163
    7b9a:	fe cf       	rjmp	.-4      	; 0x7b98 <eeprom_write_r18>
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:167
    7b9c:	1f ba       	out	0x1f, r1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:174
    7b9e:	92 bd       	out	0x22, r25	; 34
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:180
    7ba0:	81 bd       	out	0x21, r24	; 33
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:181
    7ba2:	20 bd       	out	0x20, r18	; 32
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:182
    7ba4:	0f b6       	in	r0, 0x3f	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:183
    7ba6:	f8 94       	cli
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:184
    7ba8:	fa 9a       	sbi	0x1f, 2	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:185
    7baa:	f9 9a       	sbi	0x1f, 1	; 31
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:186
    7bac:	0f be       	out	0x3f, r0	; 63
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:187
    7bae:	01 96       	adiw	r24, 0x01	; 1
/home/toolsbuild/workspace/avr8-devices-pack/src/avr-libc/avr/lib/avr5/atmega328pb/../../../../libc/misc/eewr_byte.S:188
    7bb0:	08 95       	ret

00007bb2 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    7bb2:	19 e0       	ldi	r17, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    7bb4:	c6 e2       	ldi	r28, 0x26	; 38
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    7bb6:	d9 e0       	ldi	r29, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    7bb8:	04 c0       	rjmp	.+8      	; 0x7bc2 <__do_global_dtors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    7bba:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    7bbc:	0e 94 3a 3c 	call	0x7874	; 0x7874 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    7bc0:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    7bc2:	c8 32       	cpi	r28, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    7bc4:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    7bc6:	c9 f7       	brne	.-14     	; 0x7bba <__do_global_dtors+0x8>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    7bc8:	f8 94       	cli

00007bca <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    7bca:	ff cf       	rjmp	.-2      	; 0x7bca <__stop_program>
